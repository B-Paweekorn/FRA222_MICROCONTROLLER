/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "math.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
char TxBuffer[80] =  "";

int32_t QEIReadRaw;
float QEIposition;
int32_t L_QEIReadRaw;
volatile int32_t PWM;
float error;
float error_d1;
float summa;
float deltu;
uint16_t Kp = 6338;
uint16_t Ki = 3230;
uint16_t Kd = 65;


//Trajectory
volatile double setposition;
volatile double velocity;
volatile double acceleration;
int initial_p = 0;
int target_p = 0;
int Ltarget_p = 0;
int Target_set;
double time_total;
double t,tj,ta,tv,t1,t2,t3,t4,t5,t6,t7;
int dataset[20] = {700,0,350,700,0,360,340,360,340,360,340,360,340,345,350,345,350,345,350,345};
int count = 0;

uint64_t i;
int8_t dir = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void setMotor(int PWM);
//void Unwrap();
void Encoder();


void Trajectory_Generator(int initial_p,int target_p,float vmax,float amax,float jmax);
void Trajectory_Evaluated(float vmax,float amax,float jmax);
void Trajectory_Algolithms();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Encoder

HAL_TIM_Base_Start(&htim1); //Motor
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);

HAL_TIM_Base_Start_IT(&htim3); //Timer Interrupt
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	uint32_t timestamp = 20;
while (1)
  {

	if (HAL_GetTick() >= timestamp && huart2.gState == HAL_UART_STATE_READY)
	{
		float s = setposition;
		float v = velocity;
		float a = acceleration;
		sprintf(TxBuffer,"%.2f %.2f %.2f\r\n",s,v,a);
		HAL_UART_Transmit(&huart2, (uint8_t *)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
		timestamp += 20;
	}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 49999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 9;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
//void Unwrap(){
//	static int32_t D_pos;
//	static uint32_t L_QEIReadRaw;
//	static uint32_t C1;
//	static uint32_t C2;
//	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
//	D_pos = L_QEIReadRaw - QEIReadRaw;
//	if ((D_pos) > 3072/2){
//		C1 += 1;
//	}
//	else if ((D_pos) < -1*3072/2){
//		C2 += 1;
//	}
//	QEIposition = QEIReadRaw + (3072.0*C1) - (3072.0*C2);
//	QEIposition = (QEIposition/3072.0)*360.0;
//	L_QEIReadRaw = QEIReadRaw;
//}
void Encoder(){
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
	QEIposition = (QEIReadRaw/280.0)*120.0;
}

void setMotor(int PWM){
	if(PWM >= 0){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PWM);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	}

	else if (PWM < 0){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}

void Controller(){
//	Unwrap();
	Encoder();
	Trajectory_Algolithms();
	error = setposition - QEIposition;
	deltu = (error - error_d1)*(1/2000);
	summa += (error)*(1/2000);
	PWM = (Kp*error) + (Kd*deltu) + (Ki*summa);
	if(PWM >= 50000){
		PWM = 50000;
	}
	else if(PWM <= -50000){
		PWM = -50000;
	}
//	if(error <= 1 && error >= -1){
//		PWM = 0;
//	}
	setMotor(PWM);
	error_d1 = error;


}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim == &htim3){
		Controller();
	}
}

void Trajectory_Generator(int initial_p,int target_p,float vmax,float amax,float jmax){
	//Set parameter
	uint32_t s = 0;
	uint8_t M = 0;
	uint8_t N = 0;
	uint8_t pattern = 0;
	float va = 0.0f;
	float sa = 0.0f;
	float sv = 0.0f;
	// Check for the feasibility of the trajectory
	if(vmax*jmax < amax*amax){
		M = 1;
		N = 0;
	}
	else{
		M = 0;
		N = 1;
	}

    // Determine the direction of the motion
    if (target_p - initial_p < 0){
        dir = -1;
    }
    else{
        dir = 1;
    }

    // Calculate the required distance
    s = abs(target_p - initial_p);

    // Calculate the values of va, sa and sv
    va = (amax*amax)/jmax;
    sa = 2*(amax*amax*amax)/(jmax*jmax);
    sv = vmax*((M * 2 * sqrt(vmax/jmax)) + N*((vmax/amax)+(amax/jmax)));

    // Determine the shape of the trajectory based on the values of va, sa and sv
    if ((vmax <= va) && (s >= sa)){
        pattern = 1;
    }
    else if ((vmax > va) && (s < sa)){
        pattern = 2;
    }
    else if ((vmax < va) && (s < sa) && (s > sv)){
        pattern = 3;
    }
    else if ((vmax < va) && (s < sa) && (s < sv)){
        pattern = 4;
    }
    else if ((vmax >= va) && (s >= sa) && (s >= sv)){
        pattern = 5;
    }
    else if ((vmax >= va) && (s >= sa) && (s < sv)){
        pattern = 6;
    }

    // Calculate the values of tj, ta and tv for each trajectory pattern
    switch (pattern){
        case 1:
            tj = (float)pow((vmax/jmax),(0.5));
            ta = tj;
            tv = s/vmax;
            break;
        case 2:
            tj = (float)pow(s/(2.0*jmax),1.0/3.0);
            ta = tj;
            tv = 2*tj;
            break;
        case 3:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
            ta = tj;
            tv = 2*tj;
            break;
        case 4:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
            ta = tj;
            tv = 2*tj;
            break;
        case 5:
            tj = amax/jmax;
            ta = vmax/amax;
            tv = s/vmax;
            break;
        case 6:
            tj = amax/jmax;
            ta = 0.5*(sqrt(((4*s*jmax*jmax)+(amax*amax*amax)) / (amax * jmax*jmax)) - (amax/jmax));
            tv = ta + tj;
            break;
    }

    // Calculate the values of t1 to t7 and the total time
    t1 = tj;
    t2 = ta;
    t3 = ta + tj;
    t4 = tv;
    t5 = tv + tj;
    t6 = tv + ta;
    t7 = tv + tj + ta;
    time_total = t7;
    if (s == 0){
    	time_total = 0;
    }
}

void Trajectory_Evaluated(float vmax,float amax,float jmax){
	double p1,p2,p3,p4,p5,p6,p7,v1,v2,v3,v4,v5,v6,v7,a1,a2,a3,a4,a5,a6,a7;
	t += 1.0/2000.0;
	if (t <= time_total){
		if(t <= t1){
			setposition = (float)initial_p + 1/6.0 * jmax * pow(t,3.0) * dir;
			velocity =  1/2.0 * jmax * t * t * dir;
            acceleration = jmax *t* dir;
            if(t <= t1){
            	p1 = p2 = setposition;
            	v1 = v2 = velocity;
            	a1 = a2 = acceleration;
            }
		}
		else if (t1 < t && t <= t2){
			setposition =  (float)p1 + v1 * (t - t1) + 1/2.0 * a1 * pow((t - t1),2.0);
			velocity = v1 + a1*(t-t1);
			acceleration = a1;
            if(t <= t2){
            	p2 = p3 = setposition;
            	v2 = v3 = velocity;
            	a2 = a3 = acceleration;
            }
		}
		else if (t2 < t && t <= t3){
			setposition = (float)p2 + v2 * (t - t2) + 1/2.0 * a2 * pow((t - t2),2.0) + 1.0/6.0 * - jmax * dir * pow((t - t2),3.0);
			velocity = v2 + a2 * (t - t2) + 1/2.0 * -jmax * dir * pow((t - t2),2.0);
			acceleration = a2 - (jmax * (t - t2))*dir;
            if(t <= t3){
            	p3 = p4 = p6 = setposition;
            	v3 = v4 = v6 = velocity;
            	a3 = a4 = a6 = acceleration;
            }
		}
		else if (t3 < t && t <= t4){
			setposition = (float)p3 + v3 * (t - t3);
			velocity = v3;
			acceleration = 0;
            if(t <= t4){
            	p4 = p5 = setposition;
            	v4 = v5 = velocity;
            	a4 = a5 = acceleration;
            }
		}
		else if (t4 < t && t <= t5){
			setposition = (float)p4 + v4 * (t - t4) + 1.0/6.0 * dir *- jmax * pow((t - t4),3.0);
			velocity = v4 + 1.0/2.0 * - jmax * dir * pow((t - t4),2.0);
			acceleration = (-jmax * (t - t4))*dir;
            if(t <= t5){
            	p5 = p6 = setposition;
            	v5 = v6 = velocity;
            	a5 = a6 = acceleration;
            }
		}
		else if (t5 < t && t <= t6){
			setposition = (float)p5 + v5 * (t - t5) + 1/2.0 * a5 * pow((t - t5),2.0);
			velocity = v5 + a5 * (t - t5);
			acceleration = a5;
			if(t <= t6){
				p6 = setposition;
				v6 = velocity;
				a6 = acceleration;
			}
		}
		else if (t6 < t && t <= t7){
			setposition = (float)p6 + v6 * (t - t6) + 1.0/2.0 * a6 * pow((t - t6),2) + 1/6.0 * jmax* dir * pow((t - t6),3);
			velocity = v6 + a6 * (t - t6) + 1.0/2.0 * jmax*dir * pow((t - t6),2);
			acceleration = a6 + dir *jmax * (t - t6);
		}
	}
}

void Trajectory_Algolithms(){
	target_p = Target_set;
	if(target_p != Ltarget_p){
		t = 0;
		initial_p = setposition;
		Trajectory_Generator(initial_p,target_p,600,1000,2500); //650,2000,7000
	}
	if(t <= time_total){
		Trajectory_Evaluated(600,1000,2500); //600,1000,2500
	}

	if (t >= time_total){//((setposition - QEIposition <= 1) && (setposition - QEIposition >= -1) && (t >= time_total)){
//		i += 1;
//		Target_set = dataset[i%20];
		setposition = Target_set;
		velocity = 0;
		acceleration = 0;
		PWM = 0;
	}
	Ltarget_p  = target_p;
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

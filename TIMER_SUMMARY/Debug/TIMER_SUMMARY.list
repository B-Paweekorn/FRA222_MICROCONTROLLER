
TIMER_SUMMARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005990  08005990  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005998  08005998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000070  08005a10  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005a10  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df08  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea5  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00030b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f3d  00000000  00000000  000317b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e427  00000000  00000000  000486f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f7d5  00000000  00000000  00056b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e62f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  000e6344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058b0 	.word	0x080058b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080058b0 	.word	0x080058b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	bf28      	it	cs
 8000b78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b7c:	d2ed      	bcs.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fe4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ffc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001004:	e000      	b.n	8001008 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001006:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001012:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fd8f 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f871 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fa35 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 fa13 	bl	8001468 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001042:	f000 f9e7 	bl	8001414 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001046:	f000 f8d3 	bl	80011f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800104a:	f000 f941 	bl	80012d0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800104e:	f000 f993 	bl	8001378 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001052:	4828      	ldr	r0, [pc, #160]	; (80010f4 <main+0xc8>)
 8001054:	f002 f8f8 	bl	8003248 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, InputCaptureBuffer, IC_BUFFER_SIZE);
 8001058:	2314      	movs	r3, #20
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <main+0xcc>)
 800105c:	2100      	movs	r1, #0
 800105e:	4825      	ldr	r0, [pc, #148]	; (80010f4 <main+0xc8>)
 8001060:	f002 f9a6 	bl	80033b0 <HAL_TIM_IC_Start_DMA>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001064:	2104      	movs	r1, #4
 8001066:	4825      	ldr	r0, [pc, #148]	; (80010fc <main+0xd0>)
 8001068:	f002 fbe4 	bl	8003834 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim5);
 800106c:	4824      	ldr	r0, [pc, #144]	; (8001100 <main+0xd4>)
 800106e:	f002 f8eb 	bl	8003248 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	static uint32_t timestamp = 0;
	  	int64_t currentTime = micros();
 8001072:	f000 faa3 	bl	80015bc <micros>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9c7 2300 	strd	r2, r3, [r7]
	  	if(currentTime > timestamp){
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <main+0xd8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	461c      	mov	r4, r3
 8001086:	4615      	mov	r5, r2
 8001088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108c:	4294      	cmp	r4, r2
 800108e:	eb75 0303 	sbcs.w	r3, r5, r3
 8001092:	daee      	bge.n	8001072 <main+0x46>
	  		timestamp = currentTime + 10000;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800109a:	3310      	adds	r3, #16
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <main+0xd8>)
 800109e:	6013      	str	r3, [r2, #0]
	  		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <main+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <main+0xdc>)
 80010a8:	6013      	str	r3, [r2, #0]
	  		angle = (QEIReadRaw/3072.0) * 360.0;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0xdc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa28 	bl	8000504 <__aeabi_ui2d>
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <main+0xe0>)
 80010ba:	f7ff fbc7 	bl	800084c <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <main+0xe4>)
 80010cc:	f7ff fa94 	bl	80005f8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fca0 	bl	8000a1c <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <main+0xe8>)
 80010e0:	6013      	str	r3, [r2, #0]
	  		printf("Position = %ld\n", QEIReadRaw);
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <main+0xdc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <main+0xec>)
 80010ea:	f003 fc53 	bl	8004994 <iprintf>

	  		QEIEncoderPositionVelocity_Update();
 80010ee:	f000 fa7f 	bl	80015f0 <QEIEncoderPositionVelocity_Update>
  {
 80010f2:	e7be      	b.n	8001072 <main+0x46>
 80010f4:	2000008c 	.word	0x2000008c
 80010f8:	20000208 	.word	0x20000208
 80010fc:	200000d4 	.word	0x200000d4
 8001100:	2000011c 	.word	0x2000011c
 8001104:	20000288 	.word	0x20000288
 8001108:	20000258 	.word	0x20000258
 800110c:	40a80000 	.word	0x40a80000
 8001110:	40768000 	.word	0x40768000
 8001114:	2000025c 	.word	0x2000025c
 8001118:	080058c8 	.word	0x080058c8

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	; 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 fc2a 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <SystemClock_Config+0xcc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <SystemClock_Config+0xcc>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <SystemClock_Config+0xcc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <SystemClock_Config+0xd0>)
 8001166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <SystemClock_Config+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	2310      	movs	r3, #16
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800118c:	2310      	movs	r3, #16
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001190:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001196:	2304      	movs	r3, #4
 8001198:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fb68 	bl	8002878 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ae:	f000 fa8b 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fdca 	bl	8002d68 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011da:	f000 fa75 	bl	80016c8 <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3750      	adds	r7, #80	; 0x50
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM2_Init+0xdc>)
 800121c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001220:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <MX_TIM2_Init+0xdc>)
 8001224:	2253      	movs	r2, #83	; 0x53
 8001226:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_TIM2_Init+0xdc>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <MX_TIM2_Init+0xdc>)
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_TIM2_Init+0xdc>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_TIM2_Init+0xdc>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <MX_TIM2_Init+0xdc>)
 8001244:	f001 ffb0 	bl	80031a8 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800124e:	f000 fa3b 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001256:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4619      	mov	r1, r3
 800125e:	481b      	ldr	r0, [pc, #108]	; (80012cc <MX_TIM2_Init+0xdc>)
 8001260:	f002 fc12 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800126a:	f000 fa2d 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800126e:	4817      	ldr	r0, [pc, #92]	; (80012cc <MX_TIM2_Init+0xdc>)
 8001270:	f002 f844 	bl	80032fc <HAL_TIM_IC_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800127a:	f000 fa25 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <MX_TIM2_Init+0xdc>)
 800128e:	f003 f81f 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001298:	f000 fa16 	bl	80016c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM2_Init+0xdc>)
 80012b4:	f002 fb4c 	bl	8003950 <HAL_TIM_IC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80012be:	f000 fa03 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000008c 	.word	0x2000008c

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fb50 	bl	8004984 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <MX_TIM3_Init+0xa4>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM3_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD -1;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM3_Init+0xa0>)
 8001300:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001304:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM3_Init+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM3_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001312:	2303      	movs	r3, #3
 8001314:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800132a:	2301      	movs	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_TIM3_Init+0xa0>)
 800133e:	f002 f9d3 	bl	80036e8 <HAL_TIM_Encoder_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001348:	f000 f9be 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM3_Init+0xa0>)
 800135a:	f002 ffb9 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001364:	f000 f9b0 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200000d4 	.word	0x200000d4
 8001374:	40000400 	.word	0x40000400

08001378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_TIM5_Init+0x94>)
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <MX_TIM5_Init+0x98>)
 8001398:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_TIM5_Init+0x94>)
 800139c:	2253      	movs	r2, #83	; 0x53
 800139e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM5_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_TIM5_Init+0x94>)
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_TIM5_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_TIM5_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ba:	4814      	ldr	r0, [pc, #80]	; (800140c <MX_TIM5_Init+0x94>)
 80013bc:	f001 fef4 	bl	80031a8 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 f97f 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM5_Init+0x94>)
 80013d8:	f002 fb56 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f000 f971 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM5_Init+0x94>)
 80013f4:	f002 ff6c 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80013fe:	f000 f963 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000011c 	.word	0x2000011c
 8001410:	40000c00 	.word	0x40000c00

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f002 ffae 	bl	80043ac <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f937 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001c4 	.word	0x200001c4
 8001464:	40004400 	.word	0x40004400

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_DMA_Init+0x3c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <MX_DMA_Init+0x3c>)
 8001478:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_DMA_Init+0x3c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2010      	movs	r0, #16
 8001490:	f000 fcad 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001494:	2010      	movs	r0, #16
 8001496:	f000 fcc6 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a25      	ldr	r2, [pc, #148]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b23      	ldr	r3, [pc, #140]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <MX_GPIO_Init+0xd0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_GPIO_Init+0xd0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <MX_GPIO_Init+0xd0>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_GPIO_Init+0xd0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2120      	movs	r1, #32
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <MX_GPIO_Init+0xd4>)
 8001534:	f001 f986 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <MX_GPIO_Init+0xd8>)
 8001550:	f000 fff4 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001554:	2320      	movs	r3, #32
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_GPIO_Init+0xd4>)
 800156c:	f000 ffe6 	bl	800253c <HAL_GPIO_Init>

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020800 	.word	0x40020800

08001584 <_write>:
	return sumdiff / 5.0;
}

/* USER CODE BEGIN 4 */
int _write(int file,char *ptr,int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0;i<len;i++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e009      	b.n	80015aa <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	60ba      	str	r2, [r7, #8]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd1c 	bl	8000fdc <ITM_SendChar>
	for(i = 0;i<len;i++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbf1      	blt.n	8001596 <_write+0x12>
	}
	return len;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <micros>:
		_micros += UINT32_MAX;
	}
}

uint64_t micros()
{
 80015bc:	b4b0      	push	{r4, r5, r7}
 80015be:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <micros+0x2c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	4611      	mov	r1, r2
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <micros+0x30>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	1884      	adds	r4, r0, r2
 80015d4:	eb41 0503 	adc.w	r5, r1, r3
 80015d8:	4622      	mov	r2, r4
 80015da:	462b      	mov	r3, r5
}
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bcb0      	pop	{r4, r5, r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000011c 	.word	0x2000011c
 80015ec:	20000280 	.word	0x20000280

080015f0 <QEIEncoderPositionVelocity_Update>:

void QEIEncoderPositionVelocity_Update(){
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
    // collect data
    QEIData.timestamp[0] = micros();
 80015f6:	f7ff ffe1 	bl	80015bc <micros>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	492e      	ldr	r1, [pc, #184]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001600:	e9c1 2302 	strd	r2, r3, [r1, #8]
    uint32_t counterPosition = __HAL_TIM_GET_COUNTER(&htim3);
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <QEIEncoderPositionVelocity_Update+0xcc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	60bb      	str	r3, [r7, #8]
    QEIData.data[0] = counterPosition;
 800160c:	4a2a      	ldr	r2, [pc, #168]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	6013      	str	r3, [r2, #0]

    // calculation
    QEIData.QEIPosition = counterPosition % 3072;
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <QEIEncoderPositionVelocity_Update+0xd0>)
 8001616:	fba3 2301 	umull	r2, r3, r3, r1
 800161a:	0ada      	lsrs	r2, r3, #11
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	029b      	lsls	r3, r3, #10
 8001624:	1aca      	subs	r2, r1, r3
 8001626:	ee07 2a90 	vmov	s15, r2
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001630:	edc3 7a06 	vstr	s15, [r3, #24]

    int32_t diffPosition = QEIData.data[0] - QEIData.data[1];
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	60fb      	str	r3, [r7, #12]
    float difftime = (QEIData.timestamp[0] - QEIData.timestamp[1]);
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001648:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800164c:	1a84      	subs	r4, r0, r2
 800164e:	eb61 0503 	sbc.w	r5, r1, r3
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7ff faf9 	bl	8000c4c <__aeabi_ul2f>
 800165a:	4603      	mov	r3, r0
 800165c:	607b      	str	r3, [r7, #4]

    // wrapping
    if(diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 8001664:	dd03      	ble.n	800166e <QEIEncoderPositionVelocity_Update+0x7e>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800166c:	60fb      	str	r3, [r7, #12]
    if(diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f513 4ffc 	cmn.w	r3, #32256	; 0x7e00
 8001674:	da03      	bge.n	800167e <QEIEncoderPositionVelocity_Update+0x8e>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 800167c:	60fb      	str	r3, [r7, #12]

    // calculate speed
    QEIData.QEIVelocity = (diffPosition * 1000000) / difftime;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <QEIEncoderPositionVelocity_Update+0xd4>)
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001698:	edc3 7a07 	vstr	s15, [r3, #28]

    QEIData.data[1] = QEIData.data[0];
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 80016a2:	6053      	str	r3, [r2, #4]
    QEIData.timestamp[1] = QEIData.timestamp[0];
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 80016a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016aa:	4903      	ldr	r1, [pc, #12]	; (80016b8 <QEIEncoderPositionVelocity_Update+0xc8>)
 80016ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}
 80016b8:	20000260 	.word	0x20000260
 80016bc:	200000d4 	.word	0x200000d4
 80016c0:	aaaaaaab 	.word	0xaaaaaaab
 80016c4:	000f4240 	.word	0x000f4240

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_MspInit+0x4c>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_MspInit+0x4c>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001712:	2007      	movs	r0, #7
 8001714:	f000 fb60 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d15d      	bne.n	8001802 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a38      	ldr	r2, [pc, #224]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a31      	ldr	r2, [pc, #196]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <HAL_TIM_Base_MspInit+0x110>)
 800179a:	f000 fecf 	bl	800253c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <HAL_TIM_Base_MspInit+0x118>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017be:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80017e4:	4814      	ldr	r0, [pc, #80]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017e6:	f000 fb39 	bl	8001e5c <HAL_DMA_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80017f0:	f7ff ff6a 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_TIM_Base_MspInit+0x114>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001800:	e012      	b.n	8001828 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM5)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_TIM_Base_MspInit+0x11c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d10d      	bne.n	8001828 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_TIM_Base_MspInit+0x10c>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	20000164 	.word	0x20000164
 800183c:	40026088 	.word	0x40026088
 8001840:	40000c00 	.word	0x40000c00

08001844 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d12b      	bne.n	80018be <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_TIM_Encoder_MspInit+0x88>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_TIM_Encoder_MspInit+0x88>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_TIM_Encoder_MspInit+0x88>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ae:	2302      	movs	r3, #2
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018ba:	f000 fe3f 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40000400 	.word	0x40000400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_UART_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_UART_MspInit+0x88>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_UART_MspInit+0x88>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_UART_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800192e:	230c      	movs	r3, #12
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193e:	2307      	movs	r3, #7
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0x8c>)
 800194a:	f000 fdf7 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40004400 	.word	0x40004400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f922 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Stream5_IRQHandler+0x10>)
 80019be:	f000 fb53 	bl	8002068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000164 	.word	0x20000164

080019cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e00a      	b.n	80019f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019de:	f3af 8000 	nop.w
 80019e2:	4601      	mov	r1, r0
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	b2ca      	uxtb	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf0      	blt.n	80019de <_read+0x12>
  }

  return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f002 ff46 	bl	8004930 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20020000 	.word	0x20020000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	2000028c 	.word	0x2000028c
 8001ad8:	200002a8 	.word	0x200002a8

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd7 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 ff05 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fa7b 	bl	800102c <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b44:	080059a0 	.word	0x080059a0
  ldr r2, =_sbss
 8001b48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b4c:	200002a4 	.word	0x200002a4

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f92b 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fda4 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f943 	bl	8001e42 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f90b 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000290 	.word	0x20000290

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000290 	.word	0x20000290

08001c38 <__NVIC_SetPriorityGrouping>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff29 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff3e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff31 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff feda 	bl	8001c20 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e099      	b.n	8001fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e98:	e00f      	b.n	8001eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9a:	f7ff fec1 	bl	8001c20 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d908      	bls.n	8001eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e078      	b.n	8001fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e8      	bne.n	8001e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_DMA_Init+0x158>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f023 0307 	bic.w	r3, r3, #7
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d117      	bne.n	8001f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fa6f 	bl	8002444 <DMA_CheckFifoParam>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e016      	b.n	8001fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa26 	bl	80023d8 <DMA_CalcBaseAndBitshift>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	f010803f 	.word	0xf010803f

08001fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_Start_IT+0x26>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e040      	b.n	8002060 <HAL_DMA_Start_IT+0xa8>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12f      	bne.n	8002052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f9b8 	bl	800237c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	223f      	movs	r2, #63	; 0x3f
 8002012:	409a      	lsls	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0216 	orr.w	r2, r2, #22
 8002026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0208 	orr.w	r2, r2, #8
 800203e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e005      	b.n	800205e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002074:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <HAL_DMA_IRQHandler+0x248>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a8e      	ldr	r2, [pc, #568]	; (80022b4 <HAL_DMA_IRQHandler+0x24c>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a9b      	lsrs	r3, r3, #10
 8002080:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2208      	movs	r2, #8
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0204 	bic.w	r2, r2, #4
 80020ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	2208      	movs	r2, #8
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2201      	movs	r2, #1
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2201      	movs	r2, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2204      	movs	r2, #4
 8002110:	409a      	lsls	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d012      	beq.n	8002140 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2204      	movs	r2, #4
 800212e:	409a      	lsls	r2, r3
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2210      	movs	r2, #16
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d043      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03c      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2210      	movs	r2, #16
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d024      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
 8002196:	e01f      	b.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e016      	b.n	80021d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0208 	bic.w	r2, r2, #8
 80021c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2220      	movs	r2, #32
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 808f 	beq.w	8002308 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8087 	beq.w	8002308 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	2220      	movs	r2, #32
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b05      	cmp	r3, #5
 8002210:	d136      	bne.n	8002280 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0216 	bic.w	r2, r2, #22
 8002220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002230:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <HAL_DMA_IRQHandler+0x1da>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0208 	bic.w	r2, r2, #8
 8002250:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	223f      	movs	r2, #63	; 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	2b00      	cmp	r3, #0
 8002274:	d07e      	beq.n	8002374 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
        }
        return;
 800227e:	e079      	b.n	8002374 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d031      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e02c      	b.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000
 80022b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e01e      	b.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0210 	bic.w	r2, r2, #16
 80022e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	2b00      	cmp	r3, #0
 800230e:	d032      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d022      	beq.n	8002362 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d307      	bcc.n	8002350 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f2      	bne.n	8002334 <HAL_DMA_IRQHandler+0x2cc>
 800234e:	e000      	b.n	8002352 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002350:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
 8002372:	e000      	b.n	8002376 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002374:	bf00      	nop
    }
  }
}
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002398:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d108      	bne.n	80023bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ba:	e007      	b.n	80023cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3b10      	subs	r3, #16
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <DMA_CalcBaseAndBitshift+0x64>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023f2:	4a13      	ldr	r2, [pc, #76]	; (8002440 <DMA_CalcBaseAndBitshift+0x68>)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d909      	bls.n	800241a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	1d1a      	adds	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	659a      	str	r2, [r3, #88]	; 0x58
 8002418:	e007      	b.n	800242a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	aaaaaaab 	.word	0xaaaaaaab
 8002440:	080058f0 	.word	0x080058f0

08002444 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11f      	bne.n	800249e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d856      	bhi.n	8002512 <DMA_CheckFifoParam+0xce>
 8002464:	a201      	add	r2, pc, #4	; (adr r2, 800246c <DMA_CheckFifoParam+0x28>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	0800247d 	.word	0x0800247d
 8002470:	0800248f 	.word	0x0800248f
 8002474:	0800247d 	.word	0x0800247d
 8002478:	08002513 	.word	0x08002513
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d046      	beq.n	8002516 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e043      	b.n	8002516 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002496:	d140      	bne.n	800251a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249c:	e03d      	b.n	800251a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a6:	d121      	bne.n	80024ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d837      	bhi.n	800251e <DMA_CheckFifoParam+0xda>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <DMA_CheckFifoParam+0x70>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024c5 	.word	0x080024c5
 80024b8:	080024cb 	.word	0x080024cb
 80024bc:	080024c5 	.word	0x080024c5
 80024c0:	080024dd 	.word	0x080024dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e030      	b.n	800252c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d025      	beq.n	8002522 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024da:	e022      	b.n	8002522 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e4:	d11f      	bne.n	8002526 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ea:	e01c      	b.n	8002526 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d903      	bls.n	80024fa <DMA_CheckFifoParam+0xb6>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d003      	beq.n	8002500 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f8:	e018      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      break;
 80024fe:	e015      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      break;
 8002510:	e00b      	b.n	800252a <DMA_CheckFifoParam+0xe6>
      break;
 8002512:	bf00      	nop
 8002514:	e00a      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e008      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e006      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e004      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
 8002524:	e002      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      break;   
 8002526:	bf00      	nop
 8002528:	e000      	b.n	800252c <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
    }
  } 
  
  return status; 
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e159      	b.n	800280c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8148 	bne.w	8002806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	2b02      	cmp	r3, #2
 800258c:	d130      	bne.n	80025f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0201 	and.w	r2, r3, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d017      	beq.n	800262c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a2 	beq.w	8002806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b57      	ldr	r3, [pc, #348]	; (8002824 <HAL_GPIO_Init+0x2e8>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	4a56      	ldr	r2, [pc, #344]	; (8002824 <HAL_GPIO_Init+0x2e8>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	; 0x44
 80026d2:	4b54      	ldr	r3, [pc, #336]	; (8002824 <HAL_GPIO_Init+0x2e8>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_GPIO_Init+0x2ec>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a49      	ldr	r2, [pc, #292]	; (800282c <HAL_GPIO_Init+0x2f0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_Init+0x202>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a48      	ldr	r2, [pc, #288]	; (8002830 <HAL_GPIO_Init+0x2f4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0x1fe>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a47      	ldr	r2, [pc, #284]	; (8002834 <HAL_GPIO_Init+0x2f8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_Init+0x1fa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a46      	ldr	r2, [pc, #280]	; (8002838 <HAL_GPIO_Init+0x2fc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_Init+0x1f6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a45      	ldr	r2, [pc, #276]	; (800283c <HAL_GPIO_Init+0x300>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_Init+0x1f2>
 800272a:	2304      	movs	r3, #4
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x204>
 800272e:	2307      	movs	r3, #7
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x204>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x204>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x204>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x204>
 800273e:	2300      	movs	r3, #0
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002750:	4935      	ldr	r1, [pc, #212]	; (8002828 <HAL_GPIO_Init+0x2ec>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_GPIO_Init+0x304>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002782:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <HAL_GPIO_Init+0x304>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_GPIO_Init+0x304>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <HAL_GPIO_Init+0x304>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_GPIO_Init+0x304>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <HAL_GPIO_Init+0x304>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_GPIO_Init+0x304>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002800:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_GPIO_Init+0x304>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f67f aea2 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00
 800283c:	40021000 	.word	0x40021000
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002860:	e003      	b.n	800286a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e267      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d075      	beq.n	8002982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d00c      	beq.n	80028bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d112      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05b      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d157      	bne.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e242      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x74>
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x98>
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6f      	ldr	r2, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6c      	ldr	r2, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 8002910:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a68      	ldr	r2, [pc, #416]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff f976 	bl	8001c20 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7ff f972 	bl	8001c20 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e207      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0xc0>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff f962 	bl	8001c20 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff f95e 	bl	8001c20 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1f3      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1c7      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7ff f917 	bl	8001c20 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7ff f913 	bl	8001c20 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1a8      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7ff f8f6 	bl	8001c20 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7ff f8f2 	bl	8001c20 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e187      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7ff f8d6 	bl	8001c20 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff f8d2 	bl	8001c20 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e167      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x200>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f8bf 	bl	8001c20 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f8bb 	bl	8001c20 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e150      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b74      	ldr	r3, [pc, #464]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a73      	ldr	r2, [pc, #460]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7ff f87b 	bl	8001c20 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7ff f877 	bl	8001c20 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e10c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x2ea>
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x30c>
 8002b6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b84:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7ff f83c 	bl	8001c20 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7ff f838 	bl	8001c20 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0cb      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x334>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7ff f826 	bl	8001c20 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f822 	bl	8001c20 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0b5      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a38      	ldr	r2, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a1 	beq.w	8002d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d05c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d141      	bne.n	8002cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fff6 	bl	8001c20 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fff2 	bl	8001c20 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e087      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe ffcb 	bl	8001c20 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe ffc7 	bl	8001c20 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e05c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x416>
 8002cac:	e054      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe ffb4 	bl	8001c20 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe ffb0 	bl	8001c20 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e045      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x444>
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e038      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4ec>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d028      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d121      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0cc      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90c      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e067      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4934      	ldr	r1, [pc, #208]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fee2 	bl	8001c20 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fede 	bl	8001c20 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f821 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fe42 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	080058d8 	.word	0x080058d8
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f38:	b094      	sub	sp, #80	; 0x50
 8002f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f40:	2300      	movs	r3, #0
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f44:	2300      	movs	r3, #0
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d00d      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x40>
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	f200 80e1 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f66:	e0db      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f6c:	e0db      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f72:	e0d8      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7e:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	2200      	movs	r2, #0
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	f04f 0000 	mov.w	r0, #0
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	0159      	lsls	r1, r3, #5
 8002fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb8:	0150      	lsls	r0, r2, #5
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	1a51      	subs	r1, r2, r1
 8002fc2:	6139      	str	r1, [r7, #16]
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	018b      	lsls	r3, r1, #6
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	018a      	lsls	r2, r1, #6
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fec:	4659      	mov	r1, fp
 8002fee:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb18 0303 	adds.w	r3, r8, r3
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	462b      	mov	r3, r5
 8003014:	eb49 0303 	adc.w	r3, r9, r3
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003026:	4629      	mov	r1, r5
 8003028:	024b      	lsls	r3, r1, #9
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003030:	4621      	mov	r1, r4
 8003032:	024a      	lsls	r2, r1, #9
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	2200      	movs	r2, #0
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
 800303e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003044:	f7fd fe48 	bl	8000cd8 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003050:	e058      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	4618      	mov	r0, r3
 800305c:	4611      	mov	r1, r2
 800305e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
 8003068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	f04f 0000 	mov.w	r0, #0
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	0159      	lsls	r1, r3, #5
 800307a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307e:	0150      	lsls	r0, r2, #5
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4641      	mov	r1, r8
 8003086:	ebb2 0a01 	subs.w	sl, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800309c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a4:	ebb2 040a 	subs.w	r4, r2, sl
 80030a8:	eb63 050b 	sbc.w	r5, r3, fp
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	00eb      	lsls	r3, r5, #3
 80030b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ba:	00e2      	lsls	r2, r4, #3
 80030bc:	4614      	mov	r4, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	18e3      	adds	r3, r4, r3
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	464b      	mov	r3, r9
 80030c8:	eb45 0303 	adc.w	r3, r5, r3
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	2200      	movs	r2, #0
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	61fa      	str	r2, [r7, #28]
 80030f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f8:	f7fd fdee 	bl	8000cd8 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003128:	4618      	mov	r0, r3
 800312a:	3750      	adds	r7, #80	; 0x50
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800315c:	f7ff fff0 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	080058e8 	.word	0x080058e8

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003184:	f7ff ffdc 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0b5b      	lsrs	r3, r3, #13
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	080058e8 	.word	0x080058e8

080031a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe faa8 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fe14 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e03c      	b.n	80032da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_TIM_Base_Start+0xa0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d018      	beq.n	80032a4 <HAL_TIM_Base_Start+0x5c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d013      	beq.n	80032a4 <HAL_TIM_Base_Start+0x5c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <HAL_TIM_Base_Start+0xa4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_TIM_Base_Start+0x5c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_TIM_Base_Start+0xa8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_TIM_Base_Start+0x5c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_TIM_Base_Start+0xac>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIM_Base_Start+0x5c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_TIM_Base_Start+0xb0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d010      	beq.n	80032d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	e007      	b.n	80032d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800
 80032f4:	40000c00 	.word	0x40000c00
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e041      	b.n	8003392 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f839 	bl	800339a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 fd6a 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_IC_Start_DMA+0x22>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	e013      	b.n	80033fa <HAL_TIM_IC_Start_DMA+0x4a>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_IC_Start_DMA+0x32>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	e00b      	b.n	80033fa <HAL_TIM_IC_Start_DMA+0x4a>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_IC_Start_DMA+0x42>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e003      	b.n	80033fa <HAL_TIM_IC_Start_DMA+0x4a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_TIM_IC_Start_DMA+0x5c>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e013      	b.n	8003434 <HAL_TIM_IC_Start_DMA+0x84>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d104      	bne.n	800341c <HAL_TIM_IC_Start_DMA+0x6c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e00b      	b.n	8003434 <HAL_TIM_IC_Start_DMA+0x84>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b08      	cmp	r3, #8
 8003420:	d104      	bne.n	800342c <HAL_TIM_IC_Start_DMA+0x7c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e003      	b.n	8003434 <HAL_TIM_IC_Start_DMA+0x84>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003432:	b2db      	uxtb	r3, r3
 8003434:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003436:	7dbb      	ldrb	r3, [r7, #22]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d002      	beq.n	8003442 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800343c:	7d7b      	ldrb	r3, [r7, #21]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d101      	bne.n	8003446 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
 8003444:	e13c      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003446:	7dbb      	ldrb	r3, [r7, #22]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d143      	bne.n	80034d4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800344c:	7d7b      	ldrb	r3, [r7, #21]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d140      	bne.n	80034d4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_TIM_IC_Start_DMA+0xb2>
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e12e      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_TIM_IC_Start_DMA+0xc2>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003470:	e013      	b.n	800349a <HAL_TIM_IC_Start_DMA+0xea>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d104      	bne.n	8003482 <HAL_TIM_IC_Start_DMA+0xd2>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003480:	e00b      	b.n	800349a <HAL_TIM_IC_Start_DMA+0xea>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d104      	bne.n	8003492 <HAL_TIM_IC_Start_DMA+0xe2>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003490:	e003      	b.n	800349a <HAL_TIM_IC_Start_DMA+0xea>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_TIM_IC_Start_DMA+0xfa>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80034a8:	e016      	b.n	80034d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_IC_Start_DMA+0x10a>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80034b8:	e00e      	b.n	80034d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d104      	bne.n	80034ca <HAL_TIM_IC_Start_DMA+0x11a>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80034c8:	e006      	b.n	80034d8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80034d2:	e001      	b.n	80034d8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0f3      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2201      	movs	r2, #1
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fecf 	bl	8004284 <TIM_CCxChannelCmd>

  switch (Channel)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	f200 80ad 	bhi.w	8003648 <HAL_TIM_IC_Start_DMA+0x298>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <HAL_TIM_IC_Start_DMA+0x144>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003529 	.word	0x08003529
 80034f8:	08003649 	.word	0x08003649
 80034fc:	08003649 	.word	0x08003649
 8003500:	08003649 	.word	0x08003649
 8003504:	08003571 	.word	0x08003571
 8003508:	08003649 	.word	0x08003649
 800350c:	08003649 	.word	0x08003649
 8003510:	08003649 	.word	0x08003649
 8003514:	080035b9 	.word	0x080035b9
 8003518:	08003649 	.word	0x08003649
 800351c:	08003649 	.word	0x08003649
 8003520:	08003649 	.word	0x08003649
 8003524:	08003601 	.word	0x08003601
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	4a66      	ldr	r2, [pc, #408]	; (80036c8 <HAL_TIM_IC_Start_DMA+0x318>)
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	4a65      	ldr	r2, [pc, #404]	; (80036cc <HAL_TIM_IC_Start_DMA+0x31c>)
 8003536:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	4a64      	ldr	r2, [pc, #400]	; (80036d0 <HAL_TIM_IC_Start_DMA+0x320>)
 800353e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3334      	adds	r3, #52	; 0x34
 800354a:	4619      	mov	r1, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	f7fe fd32 	bl	8001fb8 <HAL_DMA_Start_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0b0      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	60da      	str	r2, [r3, #12]
      break;
 800356e:	e06e      	b.n	800364e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_TIM_IC_Start_DMA+0x318>)
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	4a53      	ldr	r2, [pc, #332]	; (80036cc <HAL_TIM_IC_Start_DMA+0x31c>)
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_TIM_IC_Start_DMA+0x320>)
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3338      	adds	r3, #56	; 0x38
 8003592:	4619      	mov	r1, r3
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	f7fe fd0e 	bl	8001fb8 <HAL_DMA_Start_IT>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e08c      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035b4:	60da      	str	r2, [r3, #12]
      break;
 80035b6:	e04a      	b.n	800364e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4a42      	ldr	r2, [pc, #264]	; (80036c8 <HAL_TIM_IC_Start_DMA+0x318>)
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4a41      	ldr	r2, [pc, #260]	; (80036cc <HAL_TIM_IC_Start_DMA+0x31c>)
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4a40      	ldr	r2, [pc, #256]	; (80036d0 <HAL_TIM_IC_Start_DMA+0x320>)
 80035ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	333c      	adds	r3, #60	; 0x3c
 80035da:	4619      	mov	r1, r3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	887b      	ldrh	r3, [r7, #2]
 80035e0:	f7fe fcea 	bl	8001fb8 <HAL_DMA_Start_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e068      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fc:	60da      	str	r2, [r3, #12]
      break;
 80035fe:	e026      	b.n	800364e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <HAL_TIM_IC_Start_DMA+0x318>)
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <HAL_TIM_IC_Start_DMA+0x31c>)
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <HAL_TIM_IC_Start_DMA+0x320>)
 8003616:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3340      	adds	r3, #64	; 0x40
 8003622:	4619      	mov	r1, r3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	f7fe fcc6 	bl	8001fb8 <HAL_DMA_Start_IT>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e044      	b.n	80036c0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003644:	60da      	str	r2, [r3, #12]
      break;
 8003646:	e002      	b.n	800364e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	75fb      	strb	r3, [r7, #23]
      break;
 800364c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_TIM_IC_Start_DMA+0x324>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_TIM_IC_Start_DMA+0x2da>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003660:	d013      	beq.n	800368a <HAL_TIM_IC_Start_DMA+0x2da>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_TIM_IC_Start_DMA+0x328>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_TIM_IC_Start_DMA+0x2da>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_TIM_IC_Start_DMA+0x32c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_TIM_IC_Start_DMA+0x2da>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_TIM_IC_Start_DMA+0x330>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_TIM_IC_Start_DMA+0x2da>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_TIM_IC_Start_DMA+0x334>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d111      	bne.n	80036ae <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d010      	beq.n	80036be <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	e007      	b.n	80036be <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08003ce5 	.word	0x08003ce5
 80036cc:	08003dad 	.word	0x08003dad
 80036d0:	08003c53 	.word	0x08003c53
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40014000 	.word	0x40014000

080036e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e097      	b.n	800382c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fe f897 	bl	8001844 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372c:	f023 0307 	bic.w	r3, r3, #7
 8003730:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fb69 	bl	8003e14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	4313      	orrs	r3, r2
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003788:	f023 030c 	bic.w	r3, r3, #12
 800378c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	4313      	orrs	r3, r2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	011a      	lsls	r2, r3, #4
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	031b      	lsls	r3, r3, #12
 80037b8:	4313      	orrs	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	4313      	orrs	r3, r2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003844:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800384c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003854:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800385c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d110      	bne.n	8003886 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d102      	bne.n	8003870 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800386a:	7b7b      	ldrb	r3, [r7, #13]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d001      	beq.n	8003874 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e069      	b.n	8003948 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003884:	e031      	b.n	80038ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d110      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800388c:	7bbb      	ldrb	r3, [r7, #14]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003892:	7b3b      	ldrb	r3, [r7, #12]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e055      	b.n	8003948 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	e01d      	b.n	80038ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d108      	bne.n	80038c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ba:	7b7b      	ldrb	r3, [r7, #13]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038c0:	7b3b      	ldrb	r3, [r7, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d001      	beq.n	80038ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e03e      	b.n	8003948 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_TIM_Encoder_Start+0xc4>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d008      	beq.n	8003908 <HAL_TIM_Encoder_Start+0xd4>
 80038f6:	e00f      	b.n	8003918 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fcbf 	bl	8004284 <TIM_CCxChannelCmd>
      break;
 8003906:	e016      	b.n	8003936 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2201      	movs	r2, #1
 800390e:	2104      	movs	r1, #4
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fcb7 	bl	8004284 <TIM_CCxChannelCmd>
      break;
 8003916:	e00e      	b.n	8003936 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fcaf 	bl	8004284 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2201      	movs	r2, #1
 800392c:	2104      	movs	r1, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fca8 	bl	8004284 <TIM_CCxChannelCmd>
      break;
 8003934:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_TIM_IC_ConfigChannel+0x1e>
 800396a:	2302      	movs	r3, #2
 800396c:	e088      	b.n	8003a80 <HAL_TIM_IC_ConfigChannel+0x130>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f000 fac2 	bl	8003f14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 020c 	bic.w	r2, r2, #12
 800399e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6999      	ldr	r1, [r3, #24]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	619a      	str	r2, [r3, #24]
 80039b2:	e060      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d11c      	bne.n	80039f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f000 fb3a 	bl	8004042 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6999      	ldr	r1, [r3, #24]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	021a      	lsls	r2, r3, #8
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	619a      	str	r2, [r3, #24]
 80039f2:	e040      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11b      	bne.n	8003a32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f000 fb87 	bl	800411c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 020c 	bic.w	r2, r2, #12
 8003a1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69d9      	ldr	r1, [r3, #28]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	61da      	str	r2, [r3, #28]
 8003a30:	e021      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d11c      	bne.n	8003a72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f000 fba4 	bl	8004194 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69d9      	ldr	r1, [r3, #28]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
 8003a70:	e001      	b.n	8003a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e0b4      	b.n	8003c0e <HAL_TIM_ConfigClockSource+0x186>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003adc:	d03e      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0xd4>
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	f200 8087 	bhi.w	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aea:	f000 8086 	beq.w	8003bfa <HAL_TIM_ConfigClockSource+0x172>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d87f      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d01a      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xa6>
 8003af8:	2b70      	cmp	r3, #112	; 0x70
 8003afa:	d87b      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b60      	cmp	r3, #96	; 0x60
 8003afe:	d050      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d877      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b50      	cmp	r3, #80	; 0x50
 8003b06:	d03c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0xfa>
 8003b08:	2b50      	cmp	r3, #80	; 0x50
 8003b0a:	d873      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d058      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d86f      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d064      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	2b30      	cmp	r3, #48	; 0x30
 8003b1a:	d86b      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d060      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d867      	bhi.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d05a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	e062      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f000 fb81 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	609a      	str	r2, [r3, #8]
      break;
 8003b5a:	e04f      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f000 fb6a 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b7e:	609a      	str	r2, [r3, #8]
      break;
 8003b80:	e03c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fa28 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2150      	movs	r1, #80	; 0x50
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fb37 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e02c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fa84 	bl	80040bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2160      	movs	r1, #96	; 0x60
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fb27 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e01c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 fa08 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fb17 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003be0:	e00c      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f000 fb0e 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003bf2:	e003      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e000      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d107      	bne.n	8003c7a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	e02a      	b.n	8003cd0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d107      	bne.n	8003c94 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2202      	movs	r2, #2
 8003c88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c92:	e01d      	b.n	8003cd0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d107      	bne.n	8003cae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cac:	e010      	b.n	8003cd0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2208      	movs	r2, #8
 8003cbc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc6:	e003      	b.n	8003cd0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff ffb4 	bl	8003c3e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10f      	bne.n	8003d1c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d146      	bne.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1a:	e03d      	b.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d10f      	bne.n	8003d46 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d131      	bne.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d44:	e028      	b.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d10f      	bne.n	8003d70 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2204      	movs	r2, #4
 8003d54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11c      	bne.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6e:	e013      	b.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d10e      	bne.n	8003d98 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff ff3c 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d103      	bne.n	8003dcc <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	771a      	strb	r2, [r3, #28]
 8003dca:	e019      	b.n	8003e00 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d103      	bne.n	8003dde <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
 8003ddc:	e010      	b.n	8003e00 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d103      	bne.n	8003df0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2204      	movs	r2, #4
 8003dec:	771a      	strb	r2, [r3, #28]
 8003dee:	e007      	b.n	8003e00 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d102      	bne.n	8003e00 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff ff12 	bl	8003c2a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <TIM_Base_SetConfig+0xe4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00f      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d00b      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a31      	ldr	r2, [pc, #196]	; (8003efc <TIM_Base_SetConfig+0xe8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <TIM_Base_SetConfig+0xec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a2f      	ldr	r2, [pc, #188]	; (8003f04 <TIM_Base_SetConfig+0xf0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a25      	ldr	r2, [pc, #148]	; (8003ef8 <TIM_Base_SetConfig+0xe4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01b      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d017      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a22      	ldr	r2, [pc, #136]	; (8003efc <TIM_Base_SetConfig+0xe8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <TIM_Base_SetConfig+0xec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <TIM_Base_SetConfig+0xf0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a1f      	ldr	r2, [pc, #124]	; (8003f08 <TIM_Base_SetConfig+0xf4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <TIM_Base_SetConfig+0xf8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <TIM_Base_SetConfig+0xfc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <TIM_Base_SetConfig+0xe4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d103      	bne.n	8003ee4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800

08003f14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <TIM_TI1_SetConfig+0xbc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <TIM_TI1_SetConfig+0x56>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d00f      	beq.n	8003f6a <TIM_TI1_SetConfig+0x56>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <TIM_TI1_SetConfig+0xc0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_TI1_SetConfig+0x56>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <TIM_TI1_SetConfig+0xc4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_TI1_SetConfig+0x56>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <TIM_TI1_SetConfig+0xc8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_TI1_SetConfig+0x56>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <TIM_TI1_SetConfig+0xcc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <TIM_TI1_SetConfig+0x5a>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <TIM_TI1_SetConfig+0x5c>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e003      	b.n	8003f8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f023 030a 	bic.w	r3, r3, #10
 8003fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 030a 	and.w	r3, r3, #10
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40014000 	.word	0x40014000

08003fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	b29b      	uxth	r3, r3
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004094:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	031b      	lsls	r3, r3, #12
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 0303 	bic.w	r3, r3, #3
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004158:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	b2db      	uxtb	r3, r3
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800416c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	031b      	lsls	r3, r3, #12
 80041d8:	b29b      	uxth	r3, r3
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	031b      	lsls	r3, r3, #12
 80041ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e050      	b.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d018      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d013      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10c      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4313      	orrs	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40014000 	.word	0x40014000

080043ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e03f      	b.n	800443e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fa7e 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f829 	bl	8004448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b0c0      	sub	sp, #256	; 0x100
 800444e:	af00      	add	r7, sp, #0
 8004450:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	68d9      	ldr	r1, [r3, #12]
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	ea40 0301 	orr.w	r3, r0, r1
 8004470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	431a      	orrs	r2, r3
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	431a      	orrs	r2, r3
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044a0:	f021 010c 	bic.w	r1, r1, #12
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ae:	430b      	orrs	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	6999      	ldr	r1, [r3, #24]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	ea40 0301 	orr.w	r3, r0, r1
 80044ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b8f      	ldr	r3, [pc, #572]	; (8004714 <UART_SetConfig+0x2cc>)
 80044d8:	429a      	cmp	r2, r3
 80044da:	d005      	beq.n	80044e8 <UART_SetConfig+0xa0>
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b8d      	ldr	r3, [pc, #564]	; (8004718 <UART_SetConfig+0x2d0>)
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d104      	bne.n	80044f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044e8:	f7fe fe4a 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 80044ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044f0:	e003      	b.n	80044fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044f2:	f7fe fe31 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 80044f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004504:	f040 810c 	bne.w	8004720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004512:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800451a:	4622      	mov	r2, r4
 800451c:	462b      	mov	r3, r5
 800451e:	1891      	adds	r1, r2, r2
 8004520:	65b9      	str	r1, [r7, #88]	; 0x58
 8004522:	415b      	adcs	r3, r3
 8004524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800452a:	4621      	mov	r1, r4
 800452c:	eb12 0801 	adds.w	r8, r2, r1
 8004530:	4629      	mov	r1, r5
 8004532:	eb43 0901 	adc.w	r9, r3, r1
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454a:	4690      	mov	r8, r2
 800454c:	4699      	mov	r9, r3
 800454e:	4623      	mov	r3, r4
 8004550:	eb18 0303 	adds.w	r3, r8, r3
 8004554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004558:	462b      	mov	r3, r5
 800455a:	eb49 0303 	adc.w	r3, r9, r3
 800455e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800456e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004576:	460b      	mov	r3, r1
 8004578:	18db      	adds	r3, r3, r3
 800457a:	653b      	str	r3, [r7, #80]	; 0x50
 800457c:	4613      	mov	r3, r2
 800457e:	eb42 0303 	adc.w	r3, r2, r3
 8004582:	657b      	str	r3, [r7, #84]	; 0x54
 8004584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800458c:	f7fc fba4 	bl	8000cd8 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <UART_SetConfig+0x2d4>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	011c      	lsls	r4, r3, #4
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045b8:	415b      	adcs	r3, r3
 80045ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045c0:	4641      	mov	r1, r8
 80045c2:	eb12 0a01 	adds.w	sl, r2, r1
 80045c6:	4649      	mov	r1, r9
 80045c8:	eb43 0b01 	adc.w	fp, r3, r1
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e0:	4692      	mov	sl, r2
 80045e2:	469b      	mov	fp, r3
 80045e4:	4643      	mov	r3, r8
 80045e6:	eb1a 0303 	adds.w	r3, sl, r3
 80045ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ee:	464b      	mov	r3, r9
 80045f0:	eb4b 0303 	adc.w	r3, fp, r3
 80045f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004604:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800460c:	460b      	mov	r3, r1
 800460e:	18db      	adds	r3, r3, r3
 8004610:	643b      	str	r3, [r7, #64]	; 0x40
 8004612:	4613      	mov	r3, r2
 8004614:	eb42 0303 	adc.w	r3, r2, r3
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
 800461a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800461e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004622:	f7fc fb59 	bl	8000cd8 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4611      	mov	r1, r2
 800462c:	4b3b      	ldr	r3, [pc, #236]	; (800471c <UART_SetConfig+0x2d4>)
 800462e:	fba3 2301 	umull	r2, r3, r3, r1
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2264      	movs	r2, #100	; 0x64
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	1acb      	subs	r3, r1, r3
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <UART_SetConfig+0x2d4>)
 8004644:	fba3 2302 	umull	r2, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004650:	441c      	add	r4, r3
 8004652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800465c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	63b9      	str	r1, [r7, #56]	; 0x38
 800466c:	415b      	adcs	r3, r3
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004674:	4641      	mov	r1, r8
 8004676:	1851      	adds	r1, r2, r1
 8004678:	6339      	str	r1, [r7, #48]	; 0x30
 800467a:	4649      	mov	r1, r9
 800467c:	414b      	adcs	r3, r1
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800468c:	4659      	mov	r1, fp
 800468e:	00cb      	lsls	r3, r1, #3
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004696:	4651      	mov	r1, sl
 8004698:	00ca      	lsls	r2, r1, #3
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	4642      	mov	r2, r8
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a8:	464b      	mov	r3, r9
 80046aa:	460a      	mov	r2, r1
 80046ac:	eb42 0303 	adc.w	r3, r2, r3
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046c8:	460b      	mov	r3, r1
 80046ca:	18db      	adds	r3, r3, r3
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ce:	4613      	mov	r3, r2
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046de:	f7fc fafb 	bl	8000cd8 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <UART_SetConfig+0x2d4>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	; 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <UART_SetConfig+0x2d4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 0207 	and.w	r2, r3, #7
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4422      	add	r2, r4
 800470e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004710:	e105      	b.n	800491e <UART_SetConfig+0x4d6>
 8004712:	bf00      	nop
 8004714:	40011000 	.word	0x40011000
 8004718:	40011400 	.word	0x40011400
 800471c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800472a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800472e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004732:	4642      	mov	r2, r8
 8004734:	464b      	mov	r3, r9
 8004736:	1891      	adds	r1, r2, r2
 8004738:	6239      	str	r1, [r7, #32]
 800473a:	415b      	adcs	r3, r3
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
 800473e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004742:	4641      	mov	r1, r8
 8004744:	1854      	adds	r4, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb43 0501 	adc.w	r5, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	00eb      	lsls	r3, r5, #3
 8004756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	4643      	mov	r3, r8
 8004762:	18e3      	adds	r3, r4, r3
 8004764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004768:	464b      	mov	r3, r9
 800476a:	eb45 0303 	adc.w	r3, r5, r3
 800476e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800477e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800478e:	4629      	mov	r1, r5
 8004790:	008b      	lsls	r3, r1, #2
 8004792:	4621      	mov	r1, r4
 8004794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004798:	4621      	mov	r1, r4
 800479a:	008a      	lsls	r2, r1, #2
 800479c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047a0:	f7fc fa9a 	bl	8000cd8 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4b60      	ldr	r3, [pc, #384]	; (800492c <UART_SetConfig+0x4e4>)
 80047aa:	fba3 2302 	umull	r2, r3, r3, r2
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	011c      	lsls	r4, r3, #4
 80047b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	1891      	adds	r1, r2, r2
 80047ca:	61b9      	str	r1, [r7, #24]
 80047cc:	415b      	adcs	r3, r3
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d4:	4641      	mov	r1, r8
 80047d6:	1851      	adds	r1, r2, r1
 80047d8:	6139      	str	r1, [r7, #16]
 80047da:	4649      	mov	r1, r9
 80047dc:	414b      	adcs	r3, r1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ec:	4659      	mov	r1, fp
 80047ee:	00cb      	lsls	r3, r1, #3
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f6:	4651      	mov	r1, sl
 80047f8:	00ca      	lsls	r2, r1, #3
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	4642      	mov	r2, r8
 8004802:	189b      	adds	r3, r3, r2
 8004804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004808:	464b      	mov	r3, r9
 800480a:	460a      	mov	r2, r1
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	67bb      	str	r3, [r7, #120]	; 0x78
 800481e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800482c:	4649      	mov	r1, r9
 800482e:	008b      	lsls	r3, r1, #2
 8004830:	4641      	mov	r1, r8
 8004832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004836:	4641      	mov	r1, r8
 8004838:	008a      	lsls	r2, r1, #2
 800483a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800483e:	f7fc fa4b 	bl	8000cd8 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <UART_SetConfig+0x4e4>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a34      	ldr	r2, [pc, #208]	; (800492c <UART_SetConfig+0x4e4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004866:	441c      	add	r4, r3
 8004868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800486c:	2200      	movs	r2, #0
 800486e:	673b      	str	r3, [r7, #112]	; 0x70
 8004870:	677a      	str	r2, [r7, #116]	; 0x74
 8004872:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004876:	4642      	mov	r2, r8
 8004878:	464b      	mov	r3, r9
 800487a:	1891      	adds	r1, r2, r2
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	415b      	adcs	r3, r3
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004886:	4641      	mov	r1, r8
 8004888:	1851      	adds	r1, r2, r1
 800488a:	6039      	str	r1, [r7, #0]
 800488c:	4649      	mov	r1, r9
 800488e:	414b      	adcs	r3, r1
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800489e:	4659      	mov	r1, fp
 80048a0:	00cb      	lsls	r3, r1, #3
 80048a2:	4651      	mov	r1, sl
 80048a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a8:	4651      	mov	r1, sl
 80048aa:	00ca      	lsls	r2, r1, #3
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	4603      	mov	r3, r0
 80048b2:	4642      	mov	r2, r8
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b8:	464b      	mov	r3, r9
 80048ba:	460a      	mov	r2, r1
 80048bc:	eb42 0303 	adc.w	r3, r2, r3
 80048c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
 80048cc:	667a      	str	r2, [r7, #100]	; 0x64
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048da:	4649      	mov	r1, r9
 80048dc:	008b      	lsls	r3, r1, #2
 80048de:	4641      	mov	r1, r8
 80048e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e4:	4641      	mov	r1, r8
 80048e6:	008a      	lsls	r2, r1, #2
 80048e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048ec:	f7fc f9f4 	bl	8000cd8 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <UART_SetConfig+0x4e4>)
 80048f6:	fba3 1302 	umull	r1, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2164      	movs	r1, #100	; 0x64
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <UART_SetConfig+0x4e4>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4422      	add	r2, r4
 800491c:	609a      	str	r2, [r3, #8]
}
 800491e:	bf00      	nop
 8004920:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004924:	46bd      	mov	sp, r7
 8004926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492a:	bf00      	nop
 800492c:	51eb851f 	.word	0x51eb851f

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	2000000c 	.word	0x2000000c

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	; (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	; (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <__libc_init_array+0x44>)
 8004950:	f000 ffae 	bl	80058b0 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08005998 	.word	0x08005998
 8004978:	08005998 	.word	0x08005998
 800497c:	08005998 	.word	0x08005998
 8004980:	0800599c 	.word	0x0800599c

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <iprintf>:
 8004994:	b40f      	push	{r0, r1, r2, r3}
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <iprintf+0x2c>)
 8004998:	b513      	push	{r0, r1, r4, lr}
 800499a:	681c      	ldr	r4, [r3, #0]
 800499c:	b124      	cbz	r4, 80049a8 <iprintf+0x14>
 800499e:	69a3      	ldr	r3, [r4, #24]
 80049a0:	b913      	cbnz	r3, 80049a8 <iprintf+0x14>
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 f866 	bl	8004a74 <__sinit>
 80049a8:	ab05      	add	r3, sp, #20
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	68a1      	ldr	r1, [r4, #8]
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 f9bd 	bl	8004d30 <_vfiprintf_r>
 80049b6:	b002      	add	sp, #8
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049bc:	b004      	add	sp, #16
 80049be:	4770      	bx	lr
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <std>:
 80049c4:	2300      	movs	r3, #0
 80049c6:	b510      	push	{r4, lr}
 80049c8:	4604      	mov	r4, r0
 80049ca:	e9c0 3300 	strd	r3, r3, [r0]
 80049ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049d2:	6083      	str	r3, [r0, #8]
 80049d4:	8181      	strh	r1, [r0, #12]
 80049d6:	6643      	str	r3, [r0, #100]	; 0x64
 80049d8:	81c2      	strh	r2, [r0, #14]
 80049da:	6183      	str	r3, [r0, #24]
 80049dc:	4619      	mov	r1, r3
 80049de:	2208      	movs	r2, #8
 80049e0:	305c      	adds	r0, #92	; 0x5c
 80049e2:	f7ff ffcf 	bl	8004984 <memset>
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <std+0x38>)
 80049e8:	6263      	str	r3, [r4, #36]	; 0x24
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <std+0x3c>)
 80049ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <std+0x40>)
 80049f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <std+0x44>)
 80049f4:	6224      	str	r4, [r4, #32]
 80049f6:	6323      	str	r3, [r4, #48]	; 0x30
 80049f8:	bd10      	pop	{r4, pc}
 80049fa:	bf00      	nop
 80049fc:	080052d9 	.word	0x080052d9
 8004a00:	080052fb 	.word	0x080052fb
 8004a04:	08005333 	.word	0x08005333
 8004a08:	08005357 	.word	0x08005357

08004a0c <_cleanup_r>:
 8004a0c:	4901      	ldr	r1, [pc, #4]	; (8004a14 <_cleanup_r+0x8>)
 8004a0e:	f000 b8af 	b.w	8004b70 <_fwalk_reent>
 8004a12:	bf00      	nop
 8004a14:	08005631 	.word	0x08005631

08004a18 <__sfmoreglue>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	2268      	movs	r2, #104	; 0x68
 8004a1c:	1e4d      	subs	r5, r1, #1
 8004a1e:	4355      	muls	r5, r2
 8004a20:	460e      	mov	r6, r1
 8004a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a26:	f000 f8e5 	bl	8004bf4 <_malloc_r>
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	b140      	cbz	r0, 8004a40 <__sfmoreglue+0x28>
 8004a2e:	2100      	movs	r1, #0
 8004a30:	e9c0 1600 	strd	r1, r6, [r0]
 8004a34:	300c      	adds	r0, #12
 8004a36:	60a0      	str	r0, [r4, #8]
 8004a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a3c:	f7ff ffa2 	bl	8004984 <memset>
 8004a40:	4620      	mov	r0, r4
 8004a42:	bd70      	pop	{r4, r5, r6, pc}

08004a44 <__sfp_lock_acquire>:
 8004a44:	4801      	ldr	r0, [pc, #4]	; (8004a4c <__sfp_lock_acquire+0x8>)
 8004a46:	f000 b8b3 	b.w	8004bb0 <__retarget_lock_acquire_recursive>
 8004a4a:	bf00      	nop
 8004a4c:	20000295 	.word	0x20000295

08004a50 <__sfp_lock_release>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__sfp_lock_release+0x8>)
 8004a52:	f000 b8ae 	b.w	8004bb2 <__retarget_lock_release_recursive>
 8004a56:	bf00      	nop
 8004a58:	20000295 	.word	0x20000295

08004a5c <__sinit_lock_acquire>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__sinit_lock_acquire+0x8>)
 8004a5e:	f000 b8a7 	b.w	8004bb0 <__retarget_lock_acquire_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000296 	.word	0x20000296

08004a68 <__sinit_lock_release>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__sinit_lock_release+0x8>)
 8004a6a:	f000 b8a2 	b.w	8004bb2 <__retarget_lock_release_recursive>
 8004a6e:	bf00      	nop
 8004a70:	20000296 	.word	0x20000296

08004a74 <__sinit>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	4604      	mov	r4, r0
 8004a78:	f7ff fff0 	bl	8004a5c <__sinit_lock_acquire>
 8004a7c:	69a3      	ldr	r3, [r4, #24]
 8004a7e:	b11b      	cbz	r3, 8004a88 <__sinit+0x14>
 8004a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a84:	f7ff bff0 	b.w	8004a68 <__sinit_lock_release>
 8004a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <__sinit+0x68>)
 8004a90:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <__sinit+0x6c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a96:	42a3      	cmp	r3, r4
 8004a98:	bf04      	itt	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	61a3      	streq	r3, [r4, #24]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 f820 	bl	8004ae4 <__sfp>
 8004aa4:	6060      	str	r0, [r4, #4]
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 f81c 	bl	8004ae4 <__sfp>
 8004aac:	60a0      	str	r0, [r4, #8]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 f818 	bl	8004ae4 <__sfp>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	60e0      	str	r0, [r4, #12]
 8004ab8:	2104      	movs	r1, #4
 8004aba:	6860      	ldr	r0, [r4, #4]
 8004abc:	f7ff ff82 	bl	80049c4 <std>
 8004ac0:	68a0      	ldr	r0, [r4, #8]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	2109      	movs	r1, #9
 8004ac6:	f7ff ff7d 	bl	80049c4 <std>
 8004aca:	68e0      	ldr	r0, [r4, #12]
 8004acc:	2202      	movs	r2, #2
 8004ace:	2112      	movs	r1, #18
 8004ad0:	f7ff ff78 	bl	80049c4 <std>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	61a3      	str	r3, [r4, #24]
 8004ad8:	e7d2      	b.n	8004a80 <__sinit+0xc>
 8004ada:	bf00      	nop
 8004adc:	080058f8 	.word	0x080058f8
 8004ae0:	08004a0d 	.word	0x08004a0d

08004ae4 <__sfp>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	f7ff ffac 	bl	8004a44 <__sfp_lock_acquire>
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <__sfp+0x84>)
 8004aee:	681e      	ldr	r6, [r3, #0]
 8004af0:	69b3      	ldr	r3, [r6, #24]
 8004af2:	b913      	cbnz	r3, 8004afa <__sfp+0x16>
 8004af4:	4630      	mov	r0, r6
 8004af6:	f7ff ffbd 	bl	8004a74 <__sinit>
 8004afa:	3648      	adds	r6, #72	; 0x48
 8004afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	d503      	bpl.n	8004b0c <__sfp+0x28>
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	b30b      	cbz	r3, 8004b4c <__sfp+0x68>
 8004b08:	6836      	ldr	r6, [r6, #0]
 8004b0a:	e7f7      	b.n	8004afc <__sfp+0x18>
 8004b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b10:	b9d5      	cbnz	r5, 8004b48 <__sfp+0x64>
 8004b12:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <__sfp+0x88>)
 8004b14:	60e3      	str	r3, [r4, #12]
 8004b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b1c:	f000 f847 	bl	8004bae <__retarget_lock_init_recursive>
 8004b20:	f7ff ff96 	bl	8004a50 <__sfp_lock_release>
 8004b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b2c:	6025      	str	r5, [r4, #0]
 8004b2e:	61a5      	str	r5, [r4, #24]
 8004b30:	2208      	movs	r2, #8
 8004b32:	4629      	mov	r1, r5
 8004b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b38:	f7ff ff24 	bl	8004984 <memset>
 8004b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b44:	4620      	mov	r0, r4
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	3468      	adds	r4, #104	; 0x68
 8004b4a:	e7d9      	b.n	8004b00 <__sfp+0x1c>
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4638      	mov	r0, r7
 8004b50:	f7ff ff62 	bl	8004a18 <__sfmoreglue>
 8004b54:	4604      	mov	r4, r0
 8004b56:	6030      	str	r0, [r6, #0]
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d1d5      	bne.n	8004b08 <__sfp+0x24>
 8004b5c:	f7ff ff78 	bl	8004a50 <__sfp_lock_release>
 8004b60:	230c      	movs	r3, #12
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	e7ee      	b.n	8004b44 <__sfp+0x60>
 8004b66:	bf00      	nop
 8004b68:	080058f8 	.word	0x080058f8
 8004b6c:	ffff0001 	.word	0xffff0001

08004b70 <_fwalk_reent>:
 8004b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b74:	4606      	mov	r6, r0
 8004b76:	4688      	mov	r8, r1
 8004b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b7c:	2700      	movs	r7, #0
 8004b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b82:	f1b9 0901 	subs.w	r9, r9, #1
 8004b86:	d505      	bpl.n	8004b94 <_fwalk_reent+0x24>
 8004b88:	6824      	ldr	r4, [r4, #0]
 8004b8a:	2c00      	cmp	r4, #0
 8004b8c:	d1f7      	bne.n	8004b7e <_fwalk_reent+0xe>
 8004b8e:	4638      	mov	r0, r7
 8004b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b94:	89ab      	ldrh	r3, [r5, #12]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d907      	bls.n	8004baa <_fwalk_reent+0x3a>
 8004b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	d003      	beq.n	8004baa <_fwalk_reent+0x3a>
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	47c0      	blx	r8
 8004ba8:	4307      	orrs	r7, r0
 8004baa:	3568      	adds	r5, #104	; 0x68
 8004bac:	e7e9      	b.n	8004b82 <_fwalk_reent+0x12>

08004bae <__retarget_lock_init_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <__retarget_lock_acquire_recursive>:
 8004bb0:	4770      	bx	lr

08004bb2 <__retarget_lock_release_recursive>:
 8004bb2:	4770      	bx	lr

08004bb4 <sbrk_aligned>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	4e0e      	ldr	r6, [pc, #56]	; (8004bf0 <sbrk_aligned+0x3c>)
 8004bb8:	460c      	mov	r4, r1
 8004bba:	6831      	ldr	r1, [r6, #0]
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	b911      	cbnz	r1, 8004bc6 <sbrk_aligned+0x12>
 8004bc0:	f000 fb7a 	bl	80052b8 <_sbrk_r>
 8004bc4:	6030      	str	r0, [r6, #0]
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 fb75 	bl	80052b8 <_sbrk_r>
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	d00a      	beq.n	8004be8 <sbrk_aligned+0x34>
 8004bd2:	1cc4      	adds	r4, r0, #3
 8004bd4:	f024 0403 	bic.w	r4, r4, #3
 8004bd8:	42a0      	cmp	r0, r4
 8004bda:	d007      	beq.n	8004bec <sbrk_aligned+0x38>
 8004bdc:	1a21      	subs	r1, r4, r0
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 fb6a 	bl	80052b8 <_sbrk_r>
 8004be4:	3001      	adds	r0, #1
 8004be6:	d101      	bne.n	8004bec <sbrk_aligned+0x38>
 8004be8:	f04f 34ff 	mov.w	r4, #4294967295
 8004bec:	4620      	mov	r0, r4
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	2000029c 	.word	0x2000029c

08004bf4 <_malloc_r>:
 8004bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	1ccd      	adds	r5, r1, #3
 8004bfa:	f025 0503 	bic.w	r5, r5, #3
 8004bfe:	3508      	adds	r5, #8
 8004c00:	2d0c      	cmp	r5, #12
 8004c02:	bf38      	it	cc
 8004c04:	250c      	movcc	r5, #12
 8004c06:	2d00      	cmp	r5, #0
 8004c08:	4607      	mov	r7, r0
 8004c0a:	db01      	blt.n	8004c10 <_malloc_r+0x1c>
 8004c0c:	42a9      	cmp	r1, r5
 8004c0e:	d905      	bls.n	8004c1c <_malloc_r+0x28>
 8004c10:	230c      	movs	r3, #12
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	2600      	movs	r6, #0
 8004c16:	4630      	mov	r0, r6
 8004c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c1c:	4e2e      	ldr	r6, [pc, #184]	; (8004cd8 <_malloc_r+0xe4>)
 8004c1e:	f000 fdbb 	bl	8005798 <__malloc_lock>
 8004c22:	6833      	ldr	r3, [r6, #0]
 8004c24:	461c      	mov	r4, r3
 8004c26:	bb34      	cbnz	r4, 8004c76 <_malloc_r+0x82>
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f7ff ffc2 	bl	8004bb4 <sbrk_aligned>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	4604      	mov	r4, r0
 8004c34:	d14d      	bne.n	8004cd2 <_malloc_r+0xde>
 8004c36:	6834      	ldr	r4, [r6, #0]
 8004c38:	4626      	mov	r6, r4
 8004c3a:	2e00      	cmp	r6, #0
 8004c3c:	d140      	bne.n	8004cc0 <_malloc_r+0xcc>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	4631      	mov	r1, r6
 8004c42:	4638      	mov	r0, r7
 8004c44:	eb04 0803 	add.w	r8, r4, r3
 8004c48:	f000 fb36 	bl	80052b8 <_sbrk_r>
 8004c4c:	4580      	cmp	r8, r0
 8004c4e:	d13a      	bne.n	8004cc6 <_malloc_r+0xd2>
 8004c50:	6821      	ldr	r1, [r4, #0]
 8004c52:	3503      	adds	r5, #3
 8004c54:	1a6d      	subs	r5, r5, r1
 8004c56:	f025 0503 	bic.w	r5, r5, #3
 8004c5a:	3508      	adds	r5, #8
 8004c5c:	2d0c      	cmp	r5, #12
 8004c5e:	bf38      	it	cc
 8004c60:	250c      	movcc	r5, #12
 8004c62:	4629      	mov	r1, r5
 8004c64:	4638      	mov	r0, r7
 8004c66:	f7ff ffa5 	bl	8004bb4 <sbrk_aligned>
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d02b      	beq.n	8004cc6 <_malloc_r+0xd2>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	442b      	add	r3, r5
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	e00e      	b.n	8004c94 <_malloc_r+0xa0>
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	1b52      	subs	r2, r2, r5
 8004c7a:	d41e      	bmi.n	8004cba <_malloc_r+0xc6>
 8004c7c:	2a0b      	cmp	r2, #11
 8004c7e:	d916      	bls.n	8004cae <_malloc_r+0xba>
 8004c80:	1961      	adds	r1, r4, r5
 8004c82:	42a3      	cmp	r3, r4
 8004c84:	6025      	str	r5, [r4, #0]
 8004c86:	bf18      	it	ne
 8004c88:	6059      	strne	r1, [r3, #4]
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	bf08      	it	eq
 8004c8e:	6031      	streq	r1, [r6, #0]
 8004c90:	5162      	str	r2, [r4, r5]
 8004c92:	604b      	str	r3, [r1, #4]
 8004c94:	4638      	mov	r0, r7
 8004c96:	f104 060b 	add.w	r6, r4, #11
 8004c9a:	f000 fd83 	bl	80057a4 <__malloc_unlock>
 8004c9e:	f026 0607 	bic.w	r6, r6, #7
 8004ca2:	1d23      	adds	r3, r4, #4
 8004ca4:	1af2      	subs	r2, r6, r3
 8004ca6:	d0b6      	beq.n	8004c16 <_malloc_r+0x22>
 8004ca8:	1b9b      	subs	r3, r3, r6
 8004caa:	50a3      	str	r3, [r4, r2]
 8004cac:	e7b3      	b.n	8004c16 <_malloc_r+0x22>
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	bf0c      	ite	eq
 8004cb4:	6032      	streq	r2, [r6, #0]
 8004cb6:	605a      	strne	r2, [r3, #4]
 8004cb8:	e7ec      	b.n	8004c94 <_malloc_r+0xa0>
 8004cba:	4623      	mov	r3, r4
 8004cbc:	6864      	ldr	r4, [r4, #4]
 8004cbe:	e7b2      	b.n	8004c26 <_malloc_r+0x32>
 8004cc0:	4634      	mov	r4, r6
 8004cc2:	6876      	ldr	r6, [r6, #4]
 8004cc4:	e7b9      	b.n	8004c3a <_malloc_r+0x46>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f000 fd6a 	bl	80057a4 <__malloc_unlock>
 8004cd0:	e7a1      	b.n	8004c16 <_malloc_r+0x22>
 8004cd2:	6025      	str	r5, [r4, #0]
 8004cd4:	e7de      	b.n	8004c94 <_malloc_r+0xa0>
 8004cd6:	bf00      	nop
 8004cd8:	20000298 	.word	0x20000298

08004cdc <__sfputc_r>:
 8004cdc:	6893      	ldr	r3, [r2, #8]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	b410      	push	{r4}
 8004ce4:	6093      	str	r3, [r2, #8]
 8004ce6:	da08      	bge.n	8004cfa <__sfputc_r+0x1e>
 8004ce8:	6994      	ldr	r4, [r2, #24]
 8004cea:	42a3      	cmp	r3, r4
 8004cec:	db01      	blt.n	8004cf2 <__sfputc_r+0x16>
 8004cee:	290a      	cmp	r1, #10
 8004cf0:	d103      	bne.n	8004cfa <__sfputc_r+0x1e>
 8004cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf6:	f000 bb33 	b.w	8005360 <__swbuf_r>
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	1c58      	adds	r0, r3, #1
 8004cfe:	6010      	str	r0, [r2, #0]
 8004d00:	7019      	strb	r1, [r3, #0]
 8004d02:	4608      	mov	r0, r1
 8004d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <__sfputs_r>:
 8004d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	460f      	mov	r7, r1
 8004d10:	4614      	mov	r4, r2
 8004d12:	18d5      	adds	r5, r2, r3
 8004d14:	42ac      	cmp	r4, r5
 8004d16:	d101      	bne.n	8004d1c <__sfputs_r+0x12>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e007      	b.n	8004d2c <__sfputs_r+0x22>
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	463a      	mov	r2, r7
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ffda 	bl	8004cdc <__sfputc_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d1f3      	bne.n	8004d14 <__sfputs_r+0xa>
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d30 <_vfiprintf_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	460d      	mov	r5, r1
 8004d36:	b09d      	sub	sp, #116	; 0x74
 8004d38:	4614      	mov	r4, r2
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	b118      	cbz	r0, 8004d48 <_vfiprintf_r+0x18>
 8004d40:	6983      	ldr	r3, [r0, #24]
 8004d42:	b90b      	cbnz	r3, 8004d48 <_vfiprintf_r+0x18>
 8004d44:	f7ff fe96 	bl	8004a74 <__sinit>
 8004d48:	4b89      	ldr	r3, [pc, #548]	; (8004f70 <_vfiprintf_r+0x240>)
 8004d4a:	429d      	cmp	r5, r3
 8004d4c:	d11b      	bne.n	8004d86 <_vfiprintf_r+0x56>
 8004d4e:	6875      	ldr	r5, [r6, #4]
 8004d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	d405      	bmi.n	8004d62 <_vfiprintf_r+0x32>
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	059a      	lsls	r2, r3, #22
 8004d5a:	d402      	bmi.n	8004d62 <_vfiprintf_r+0x32>
 8004d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d5e:	f7ff ff27 	bl	8004bb0 <__retarget_lock_acquire_recursive>
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	d501      	bpl.n	8004d6c <_vfiprintf_r+0x3c>
 8004d68:	692b      	ldr	r3, [r5, #16]
 8004d6a:	b9eb      	cbnz	r3, 8004da8 <_vfiprintf_r+0x78>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 fb5a 	bl	8005428 <__swsetup_r>
 8004d74:	b1c0      	cbz	r0, 8004da8 <_vfiprintf_r+0x78>
 8004d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d78:	07dc      	lsls	r4, r3, #31
 8004d7a:	d50e      	bpl.n	8004d9a <_vfiprintf_r+0x6a>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	b01d      	add	sp, #116	; 0x74
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <_vfiprintf_r+0x244>)
 8004d88:	429d      	cmp	r5, r3
 8004d8a:	d101      	bne.n	8004d90 <_vfiprintf_r+0x60>
 8004d8c:	68b5      	ldr	r5, [r6, #8]
 8004d8e:	e7df      	b.n	8004d50 <_vfiprintf_r+0x20>
 8004d90:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <_vfiprintf_r+0x248>)
 8004d92:	429d      	cmp	r5, r3
 8004d94:	bf08      	it	eq
 8004d96:	68f5      	ldreq	r5, [r6, #12]
 8004d98:	e7da      	b.n	8004d50 <_vfiprintf_r+0x20>
 8004d9a:	89ab      	ldrh	r3, [r5, #12]
 8004d9c:	0598      	lsls	r0, r3, #22
 8004d9e:	d4ed      	bmi.n	8004d7c <_vfiprintf_r+0x4c>
 8004da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004da2:	f7ff ff06 	bl	8004bb2 <__retarget_lock_release_recursive>
 8004da6:	e7e9      	b.n	8004d7c <_vfiprintf_r+0x4c>
 8004da8:	2300      	movs	r3, #0
 8004daa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dac:	2320      	movs	r3, #32
 8004dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db6:	2330      	movs	r3, #48	; 0x30
 8004db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f7c <_vfiprintf_r+0x24c>
 8004dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc0:	f04f 0901 	mov.w	r9, #1
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	469a      	mov	sl, r3
 8004dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dcc:	b10a      	cbz	r2, 8004dd2 <_vfiprintf_r+0xa2>
 8004dce:	2a25      	cmp	r2, #37	; 0x25
 8004dd0:	d1f9      	bne.n	8004dc6 <_vfiprintf_r+0x96>
 8004dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd6:	d00b      	beq.n	8004df0 <_vfiprintf_r+0xc0>
 8004dd8:	465b      	mov	r3, fp
 8004dda:	4622      	mov	r2, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff ff93 	bl	8004d0a <__sfputs_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	f000 80aa 	beq.w	8004f3e <_vfiprintf_r+0x20e>
 8004dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dec:	445a      	add	r2, fp
 8004dee:	9209      	str	r2, [sp, #36]	; 0x24
 8004df0:	f89a 3000 	ldrb.w	r3, [sl]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80a2 	beq.w	8004f3e <_vfiprintf_r+0x20e>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e04:	f10a 0a01 	add.w	sl, sl, #1
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	9307      	str	r3, [sp, #28]
 8004e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e10:	931a      	str	r3, [sp, #104]	; 0x68
 8004e12:	4654      	mov	r4, sl
 8004e14:	2205      	movs	r2, #5
 8004e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1a:	4858      	ldr	r0, [pc, #352]	; (8004f7c <_vfiprintf_r+0x24c>)
 8004e1c:	f7fb f9e0 	bl	80001e0 <memchr>
 8004e20:	9a04      	ldr	r2, [sp, #16]
 8004e22:	b9d8      	cbnz	r0, 8004e5c <_vfiprintf_r+0x12c>
 8004e24:	06d1      	lsls	r1, r2, #27
 8004e26:	bf44      	itt	mi
 8004e28:	2320      	movmi	r3, #32
 8004e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2e:	0713      	lsls	r3, r2, #28
 8004e30:	bf44      	itt	mi
 8004e32:	232b      	movmi	r3, #43	; 0x2b
 8004e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e38:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3e:	d015      	beq.n	8004e6c <_vfiprintf_r+0x13c>
 8004e40:	9a07      	ldr	r2, [sp, #28]
 8004e42:	4654      	mov	r4, sl
 8004e44:	2000      	movs	r0, #0
 8004e46:	f04f 0c0a 	mov.w	ip, #10
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e50:	3b30      	subs	r3, #48	; 0x30
 8004e52:	2b09      	cmp	r3, #9
 8004e54:	d94e      	bls.n	8004ef4 <_vfiprintf_r+0x1c4>
 8004e56:	b1b0      	cbz	r0, 8004e86 <_vfiprintf_r+0x156>
 8004e58:	9207      	str	r2, [sp, #28]
 8004e5a:	e014      	b.n	8004e86 <_vfiprintf_r+0x156>
 8004e5c:	eba0 0308 	sub.w	r3, r0, r8
 8004e60:	fa09 f303 	lsl.w	r3, r9, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	46a2      	mov	sl, r4
 8004e6a:	e7d2      	b.n	8004e12 <_vfiprintf_r+0xe2>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	1d19      	adds	r1, r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	9103      	str	r1, [sp, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfbb      	ittet	lt
 8004e78:	425b      	neglt	r3, r3
 8004e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7e:	9307      	strge	r3, [sp, #28]
 8004e80:	9307      	strlt	r3, [sp, #28]
 8004e82:	bfb8      	it	lt
 8004e84:	9204      	strlt	r2, [sp, #16]
 8004e86:	7823      	ldrb	r3, [r4, #0]
 8004e88:	2b2e      	cmp	r3, #46	; 0x2e
 8004e8a:	d10c      	bne.n	8004ea6 <_vfiprintf_r+0x176>
 8004e8c:	7863      	ldrb	r3, [r4, #1]
 8004e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e90:	d135      	bne.n	8004efe <_vfiprintf_r+0x1ce>
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	9203      	str	r2, [sp, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea2:	3402      	adds	r4, #2
 8004ea4:	9305      	str	r3, [sp, #20]
 8004ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f8c <_vfiprintf_r+0x25c>
 8004eaa:	7821      	ldrb	r1, [r4, #0]
 8004eac:	2203      	movs	r2, #3
 8004eae:	4650      	mov	r0, sl
 8004eb0:	f7fb f996 	bl	80001e0 <memchr>
 8004eb4:	b140      	cbz	r0, 8004ec8 <_vfiprintf_r+0x198>
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	eba0 000a 	sub.w	r0, r0, sl
 8004ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	4303      	orrs	r3, r0
 8004ec4:	3401      	adds	r4, #1
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	482c      	ldr	r0, [pc, #176]	; (8004f80 <_vfiprintf_r+0x250>)
 8004ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	f7fb f984 	bl	80001e0 <memchr>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d03f      	beq.n	8004f5c <_vfiprintf_r+0x22c>
 8004edc:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <_vfiprintf_r+0x254>)
 8004ede:	bb1b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x1f8>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	3308      	adds	r3, #8
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eee:	443b      	add	r3, r7
 8004ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef2:	e767      	b.n	8004dc4 <_vfiprintf_r+0x94>
 8004ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef8:	460c      	mov	r4, r1
 8004efa:	2001      	movs	r0, #1
 8004efc:	e7a5      	b.n	8004e4a <_vfiprintf_r+0x11a>
 8004efe:	2300      	movs	r3, #0
 8004f00:	3401      	adds	r4, #1
 8004f02:	9305      	str	r3, [sp, #20]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f04f 0c0a 	mov.w	ip, #10
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f10:	3a30      	subs	r2, #48	; 0x30
 8004f12:	2a09      	cmp	r2, #9
 8004f14:	d903      	bls.n	8004f1e <_vfiprintf_r+0x1ee>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0c5      	beq.n	8004ea6 <_vfiprintf_r+0x176>
 8004f1a:	9105      	str	r1, [sp, #20]
 8004f1c:	e7c3      	b.n	8004ea6 <_vfiprintf_r+0x176>
 8004f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f22:	4604      	mov	r4, r0
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7f0      	b.n	8004f0a <_vfiprintf_r+0x1da>
 8004f28:	ab03      	add	r3, sp, #12
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	462a      	mov	r2, r5
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <_vfiprintf_r+0x258>)
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	4630      	mov	r0, r6
 8004f34:	f3af 8000 	nop.w
 8004f38:	4607      	mov	r7, r0
 8004f3a:	1c78      	adds	r0, r7, #1
 8004f3c:	d1d6      	bne.n	8004eec <_vfiprintf_r+0x1bc>
 8004f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f40:	07d9      	lsls	r1, r3, #31
 8004f42:	d405      	bmi.n	8004f50 <_vfiprintf_r+0x220>
 8004f44:	89ab      	ldrh	r3, [r5, #12]
 8004f46:	059a      	lsls	r2, r3, #22
 8004f48:	d402      	bmi.n	8004f50 <_vfiprintf_r+0x220>
 8004f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4c:	f7ff fe31 	bl	8004bb2 <__retarget_lock_release_recursive>
 8004f50:	89ab      	ldrh	r3, [r5, #12]
 8004f52:	065b      	lsls	r3, r3, #25
 8004f54:	f53f af12 	bmi.w	8004d7c <_vfiprintf_r+0x4c>
 8004f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f5a:	e711      	b.n	8004d80 <_vfiprintf_r+0x50>
 8004f5c:	ab03      	add	r3, sp, #12
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	462a      	mov	r2, r5
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <_vfiprintf_r+0x258>)
 8004f64:	a904      	add	r1, sp, #16
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f880 	bl	800506c <_printf_i>
 8004f6c:	e7e4      	b.n	8004f38 <_vfiprintf_r+0x208>
 8004f6e:	bf00      	nop
 8004f70:	0800591c 	.word	0x0800591c
 8004f74:	0800593c 	.word	0x0800593c
 8004f78:	080058fc 	.word	0x080058fc
 8004f7c:	0800595c 	.word	0x0800595c
 8004f80:	08005966 	.word	0x08005966
 8004f84:	00000000 	.word	0x00000000
 8004f88:	08004d0b 	.word	0x08004d0b
 8004f8c:	08005962 	.word	0x08005962

08004f90 <_printf_common>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	4616      	mov	r6, r2
 8004f96:	4699      	mov	r9, r3
 8004f98:	688a      	ldr	r2, [r1, #8]
 8004f9a:	690b      	ldr	r3, [r1, #16]
 8004f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	bfb8      	it	lt
 8004fa4:	4613      	movlt	r3, r2
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fac:	4607      	mov	r7, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	b10a      	cbz	r2, 8004fb6 <_printf_common+0x26>
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	0699      	lsls	r1, r3, #26
 8004fba:	bf42      	ittt	mi
 8004fbc:	6833      	ldrmi	r3, [r6, #0]
 8004fbe:	3302      	addmi	r3, #2
 8004fc0:	6033      	strmi	r3, [r6, #0]
 8004fc2:	6825      	ldr	r5, [r4, #0]
 8004fc4:	f015 0506 	ands.w	r5, r5, #6
 8004fc8:	d106      	bne.n	8004fd8 <_printf_common+0x48>
 8004fca:	f104 0a19 	add.w	sl, r4, #25
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	6832      	ldr	r2, [r6, #0]
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	42ab      	cmp	r3, r5
 8004fd6:	dc26      	bgt.n	8005026 <_printf_common+0x96>
 8004fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fdc:	1e13      	subs	r3, r2, #0
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	0692      	lsls	r2, r2, #26
 8004fe6:	d42b      	bmi.n	8005040 <_printf_common+0xb0>
 8004fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fec:	4649      	mov	r1, r9
 8004fee:	4638      	mov	r0, r7
 8004ff0:	47c0      	blx	r8
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d01e      	beq.n	8005034 <_printf_common+0xa4>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	68e5      	ldr	r5, [r4, #12]
 8004ffa:	6832      	ldr	r2, [r6, #0]
 8004ffc:	f003 0306 	and.w	r3, r3, #6
 8005000:	2b04      	cmp	r3, #4
 8005002:	bf08      	it	eq
 8005004:	1aad      	subeq	r5, r5, r2
 8005006:	68a3      	ldr	r3, [r4, #8]
 8005008:	6922      	ldr	r2, [r4, #16]
 800500a:	bf0c      	ite	eq
 800500c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005010:	2500      	movne	r5, #0
 8005012:	4293      	cmp	r3, r2
 8005014:	bfc4      	itt	gt
 8005016:	1a9b      	subgt	r3, r3, r2
 8005018:	18ed      	addgt	r5, r5, r3
 800501a:	2600      	movs	r6, #0
 800501c:	341a      	adds	r4, #26
 800501e:	42b5      	cmp	r5, r6
 8005020:	d11a      	bne.n	8005058 <_printf_common+0xc8>
 8005022:	2000      	movs	r0, #0
 8005024:	e008      	b.n	8005038 <_printf_common+0xa8>
 8005026:	2301      	movs	r3, #1
 8005028:	4652      	mov	r2, sl
 800502a:	4649      	mov	r1, r9
 800502c:	4638      	mov	r0, r7
 800502e:	47c0      	blx	r8
 8005030:	3001      	adds	r0, #1
 8005032:	d103      	bne.n	800503c <_printf_common+0xac>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	3501      	adds	r5, #1
 800503e:	e7c6      	b.n	8004fce <_printf_common+0x3e>
 8005040:	18e1      	adds	r1, r4, r3
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	2030      	movs	r0, #48	; 0x30
 8005046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800504a:	4422      	add	r2, r4
 800504c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005054:	3302      	adds	r3, #2
 8005056:	e7c7      	b.n	8004fe8 <_printf_common+0x58>
 8005058:	2301      	movs	r3, #1
 800505a:	4622      	mov	r2, r4
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d0e6      	beq.n	8005034 <_printf_common+0xa4>
 8005066:	3601      	adds	r6, #1
 8005068:	e7d9      	b.n	800501e <_printf_common+0x8e>
	...

0800506c <_printf_i>:
 800506c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	7e0f      	ldrb	r7, [r1, #24]
 8005072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005074:	2f78      	cmp	r7, #120	; 0x78
 8005076:	4691      	mov	r9, r2
 8005078:	4680      	mov	r8, r0
 800507a:	460c      	mov	r4, r1
 800507c:	469a      	mov	sl, r3
 800507e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005082:	d807      	bhi.n	8005094 <_printf_i+0x28>
 8005084:	2f62      	cmp	r7, #98	; 0x62
 8005086:	d80a      	bhi.n	800509e <_printf_i+0x32>
 8005088:	2f00      	cmp	r7, #0
 800508a:	f000 80d8 	beq.w	800523e <_printf_i+0x1d2>
 800508e:	2f58      	cmp	r7, #88	; 0x58
 8005090:	f000 80a3 	beq.w	80051da <_printf_i+0x16e>
 8005094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800509c:	e03a      	b.n	8005114 <_printf_i+0xa8>
 800509e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050a2:	2b15      	cmp	r3, #21
 80050a4:	d8f6      	bhi.n	8005094 <_printf_i+0x28>
 80050a6:	a101      	add	r1, pc, #4	; (adr r1, 80050ac <_printf_i+0x40>)
 80050a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050ac:	08005105 	.word	0x08005105
 80050b0:	08005119 	.word	0x08005119
 80050b4:	08005095 	.word	0x08005095
 80050b8:	08005095 	.word	0x08005095
 80050bc:	08005095 	.word	0x08005095
 80050c0:	08005095 	.word	0x08005095
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005095 	.word	0x08005095
 80050cc:	08005095 	.word	0x08005095
 80050d0:	08005095 	.word	0x08005095
 80050d4:	08005095 	.word	0x08005095
 80050d8:	08005225 	.word	0x08005225
 80050dc:	08005149 	.word	0x08005149
 80050e0:	08005207 	.word	0x08005207
 80050e4:	08005095 	.word	0x08005095
 80050e8:	08005095 	.word	0x08005095
 80050ec:	08005247 	.word	0x08005247
 80050f0:	08005095 	.word	0x08005095
 80050f4:	08005149 	.word	0x08005149
 80050f8:	08005095 	.word	0x08005095
 80050fc:	08005095 	.word	0x08005095
 8005100:	0800520f 	.word	0x0800520f
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	602a      	str	r2, [r5, #0]
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005114:	2301      	movs	r3, #1
 8005116:	e0a3      	b.n	8005260 <_printf_i+0x1f4>
 8005118:	6820      	ldr	r0, [r4, #0]
 800511a:	6829      	ldr	r1, [r5, #0]
 800511c:	0606      	lsls	r6, r0, #24
 800511e:	f101 0304 	add.w	r3, r1, #4
 8005122:	d50a      	bpl.n	800513a <_printf_i+0xce>
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	2e00      	cmp	r6, #0
 800512a:	da03      	bge.n	8005134 <_printf_i+0xc8>
 800512c:	232d      	movs	r3, #45	; 0x2d
 800512e:	4276      	negs	r6, r6
 8005130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005134:	485e      	ldr	r0, [pc, #376]	; (80052b0 <_printf_i+0x244>)
 8005136:	230a      	movs	r3, #10
 8005138:	e019      	b.n	800516e <_printf_i+0x102>
 800513a:	680e      	ldr	r6, [r1, #0]
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005142:	bf18      	it	ne
 8005144:	b236      	sxthne	r6, r6
 8005146:	e7ef      	b.n	8005128 <_printf_i+0xbc>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	1d19      	adds	r1, r3, #4
 800514e:	6029      	str	r1, [r5, #0]
 8005150:	0601      	lsls	r1, r0, #24
 8005152:	d501      	bpl.n	8005158 <_printf_i+0xec>
 8005154:	681e      	ldr	r6, [r3, #0]
 8005156:	e002      	b.n	800515e <_printf_i+0xf2>
 8005158:	0646      	lsls	r6, r0, #25
 800515a:	d5fb      	bpl.n	8005154 <_printf_i+0xe8>
 800515c:	881e      	ldrh	r6, [r3, #0]
 800515e:	4854      	ldr	r0, [pc, #336]	; (80052b0 <_printf_i+0x244>)
 8005160:	2f6f      	cmp	r7, #111	; 0x6f
 8005162:	bf0c      	ite	eq
 8005164:	2308      	moveq	r3, #8
 8005166:	230a      	movne	r3, #10
 8005168:	2100      	movs	r1, #0
 800516a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800516e:	6865      	ldr	r5, [r4, #4]
 8005170:	60a5      	str	r5, [r4, #8]
 8005172:	2d00      	cmp	r5, #0
 8005174:	bfa2      	ittt	ge
 8005176:	6821      	ldrge	r1, [r4, #0]
 8005178:	f021 0104 	bicge.w	r1, r1, #4
 800517c:	6021      	strge	r1, [r4, #0]
 800517e:	b90e      	cbnz	r6, 8005184 <_printf_i+0x118>
 8005180:	2d00      	cmp	r5, #0
 8005182:	d04d      	beq.n	8005220 <_printf_i+0x1b4>
 8005184:	4615      	mov	r5, r2
 8005186:	fbb6 f1f3 	udiv	r1, r6, r3
 800518a:	fb03 6711 	mls	r7, r3, r1, r6
 800518e:	5dc7      	ldrb	r7, [r0, r7]
 8005190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005194:	4637      	mov	r7, r6
 8005196:	42bb      	cmp	r3, r7
 8005198:	460e      	mov	r6, r1
 800519a:	d9f4      	bls.n	8005186 <_printf_i+0x11a>
 800519c:	2b08      	cmp	r3, #8
 800519e:	d10b      	bne.n	80051b8 <_printf_i+0x14c>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	07de      	lsls	r6, r3, #31
 80051a4:	d508      	bpl.n	80051b8 <_printf_i+0x14c>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	4299      	cmp	r1, r3
 80051ac:	bfde      	ittt	le
 80051ae:	2330      	movle	r3, #48	; 0x30
 80051b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051b8:	1b52      	subs	r2, r2, r5
 80051ba:	6122      	str	r2, [r4, #16]
 80051bc:	f8cd a000 	str.w	sl, [sp]
 80051c0:	464b      	mov	r3, r9
 80051c2:	aa03      	add	r2, sp, #12
 80051c4:	4621      	mov	r1, r4
 80051c6:	4640      	mov	r0, r8
 80051c8:	f7ff fee2 	bl	8004f90 <_printf_common>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d14c      	bne.n	800526a <_printf_i+0x1fe>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	b004      	add	sp, #16
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	4835      	ldr	r0, [pc, #212]	; (80052b0 <_printf_i+0x244>)
 80051dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e8:	6029      	str	r1, [r5, #0]
 80051ea:	061d      	lsls	r5, r3, #24
 80051ec:	d514      	bpl.n	8005218 <_printf_i+0x1ac>
 80051ee:	07df      	lsls	r7, r3, #31
 80051f0:	bf44      	itt	mi
 80051f2:	f043 0320 	orrmi.w	r3, r3, #32
 80051f6:	6023      	strmi	r3, [r4, #0]
 80051f8:	b91e      	cbnz	r6, 8005202 <_printf_i+0x196>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	f023 0320 	bic.w	r3, r3, #32
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	2310      	movs	r3, #16
 8005204:	e7b0      	b.n	8005168 <_printf_i+0xfc>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f043 0320 	orr.w	r3, r3, #32
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	2378      	movs	r3, #120	; 0x78
 8005210:	4828      	ldr	r0, [pc, #160]	; (80052b4 <_printf_i+0x248>)
 8005212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005216:	e7e3      	b.n	80051e0 <_printf_i+0x174>
 8005218:	0659      	lsls	r1, r3, #25
 800521a:	bf48      	it	mi
 800521c:	b2b6      	uxthmi	r6, r6
 800521e:	e7e6      	b.n	80051ee <_printf_i+0x182>
 8005220:	4615      	mov	r5, r2
 8005222:	e7bb      	b.n	800519c <_printf_i+0x130>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	6826      	ldr	r6, [r4, #0]
 8005228:	6961      	ldr	r1, [r4, #20]
 800522a:	1d18      	adds	r0, r3, #4
 800522c:	6028      	str	r0, [r5, #0]
 800522e:	0635      	lsls	r5, r6, #24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	d501      	bpl.n	8005238 <_printf_i+0x1cc>
 8005234:	6019      	str	r1, [r3, #0]
 8005236:	e002      	b.n	800523e <_printf_i+0x1d2>
 8005238:	0670      	lsls	r0, r6, #25
 800523a:	d5fb      	bpl.n	8005234 <_printf_i+0x1c8>
 800523c:	8019      	strh	r1, [r3, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	4615      	mov	r5, r2
 8005244:	e7ba      	b.n	80051bc <_printf_i+0x150>
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	602a      	str	r2, [r5, #0]
 800524c:	681d      	ldr	r5, [r3, #0]
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	2100      	movs	r1, #0
 8005252:	4628      	mov	r0, r5
 8005254:	f7fa ffc4 	bl	80001e0 <memchr>
 8005258:	b108      	cbz	r0, 800525e <_printf_i+0x1f2>
 800525a:	1b40      	subs	r0, r0, r5
 800525c:	6060      	str	r0, [r4, #4]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	2300      	movs	r3, #0
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	e7a8      	b.n	80051bc <_printf_i+0x150>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	462a      	mov	r2, r5
 800526e:	4649      	mov	r1, r9
 8005270:	4640      	mov	r0, r8
 8005272:	47d0      	blx	sl
 8005274:	3001      	adds	r0, #1
 8005276:	d0ab      	beq.n	80051d0 <_printf_i+0x164>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	079b      	lsls	r3, r3, #30
 800527c:	d413      	bmi.n	80052a6 <_printf_i+0x23a>
 800527e:	68e0      	ldr	r0, [r4, #12]
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	4298      	cmp	r0, r3
 8005284:	bfb8      	it	lt
 8005286:	4618      	movlt	r0, r3
 8005288:	e7a4      	b.n	80051d4 <_printf_i+0x168>
 800528a:	2301      	movs	r3, #1
 800528c:	4632      	mov	r2, r6
 800528e:	4649      	mov	r1, r9
 8005290:	4640      	mov	r0, r8
 8005292:	47d0      	blx	sl
 8005294:	3001      	adds	r0, #1
 8005296:	d09b      	beq.n	80051d0 <_printf_i+0x164>
 8005298:	3501      	adds	r5, #1
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	9903      	ldr	r1, [sp, #12]
 800529e:	1a5b      	subs	r3, r3, r1
 80052a0:	42ab      	cmp	r3, r5
 80052a2:	dcf2      	bgt.n	800528a <_printf_i+0x21e>
 80052a4:	e7eb      	b.n	800527e <_printf_i+0x212>
 80052a6:	2500      	movs	r5, #0
 80052a8:	f104 0619 	add.w	r6, r4, #25
 80052ac:	e7f5      	b.n	800529a <_printf_i+0x22e>
 80052ae:	bf00      	nop
 80052b0:	0800596d 	.word	0x0800596d
 80052b4:	0800597e 	.word	0x0800597e

080052b8 <_sbrk_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_sbrk_r+0x1c>)
 80052bc:	2300      	movs	r3, #0
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fc fbd4 	bl	8001a70 <_sbrk>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_sbrk_r+0x1a>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_sbrk_r+0x1a>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	200002a0 	.word	0x200002a0

080052d8 <__sread>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	460c      	mov	r4, r1
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	f000 fab2 	bl	8005848 <_read_r>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	bfab      	itete	ge
 80052e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052ea:	89a3      	ldrhlt	r3, [r4, #12]
 80052ec:	181b      	addge	r3, r3, r0
 80052ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052f2:	bfac      	ite	ge
 80052f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052f6:	81a3      	strhlt	r3, [r4, #12]
 80052f8:	bd10      	pop	{r4, pc}

080052fa <__swrite>:
 80052fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fe:	461f      	mov	r7, r3
 8005300:	898b      	ldrh	r3, [r1, #12]
 8005302:	05db      	lsls	r3, r3, #23
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	4616      	mov	r6, r2
 800530a:	d505      	bpl.n	8005318 <__swrite+0x1e>
 800530c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005310:	2302      	movs	r3, #2
 8005312:	2200      	movs	r2, #0
 8005314:	f000 f9c8 	bl	80056a8 <_lseek_r>
 8005318:	89a3      	ldrh	r3, [r4, #12]
 800531a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800531e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	4632      	mov	r2, r6
 8005326:	463b      	mov	r3, r7
 8005328:	4628      	mov	r0, r5
 800532a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800532e:	f000 b869 	b.w	8005404 <_write_r>

08005332 <__sseek>:
 8005332:	b510      	push	{r4, lr}
 8005334:	460c      	mov	r4, r1
 8005336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533a:	f000 f9b5 	bl	80056a8 <_lseek_r>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	bf15      	itete	ne
 8005344:	6560      	strne	r0, [r4, #84]	; 0x54
 8005346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800534a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800534e:	81a3      	strheq	r3, [r4, #12]
 8005350:	bf18      	it	ne
 8005352:	81a3      	strhne	r3, [r4, #12]
 8005354:	bd10      	pop	{r4, pc}

08005356 <__sclose>:
 8005356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535a:	f000 b8d3 	b.w	8005504 <_close_r>
	...

08005360 <__swbuf_r>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	460e      	mov	r6, r1
 8005364:	4614      	mov	r4, r2
 8005366:	4605      	mov	r5, r0
 8005368:	b118      	cbz	r0, 8005372 <__swbuf_r+0x12>
 800536a:	6983      	ldr	r3, [r0, #24]
 800536c:	b90b      	cbnz	r3, 8005372 <__swbuf_r+0x12>
 800536e:	f7ff fb81 	bl	8004a74 <__sinit>
 8005372:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <__swbuf_r+0x98>)
 8005374:	429c      	cmp	r4, r3
 8005376:	d12b      	bne.n	80053d0 <__swbuf_r+0x70>
 8005378:	686c      	ldr	r4, [r5, #4]
 800537a:	69a3      	ldr	r3, [r4, #24]
 800537c:	60a3      	str	r3, [r4, #8]
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	071a      	lsls	r2, r3, #28
 8005382:	d52f      	bpl.n	80053e4 <__swbuf_r+0x84>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	b36b      	cbz	r3, 80053e4 <__swbuf_r+0x84>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	1ac0      	subs	r0, r0, r3
 800538e:	6963      	ldr	r3, [r4, #20]
 8005390:	b2f6      	uxtb	r6, r6
 8005392:	4283      	cmp	r3, r0
 8005394:	4637      	mov	r7, r6
 8005396:	dc04      	bgt.n	80053a2 <__swbuf_r+0x42>
 8005398:	4621      	mov	r1, r4
 800539a:	4628      	mov	r0, r5
 800539c:	f000 f948 	bl	8005630 <_fflush_r>
 80053a0:	bb30      	cbnz	r0, 80053f0 <__swbuf_r+0x90>
 80053a2:	68a3      	ldr	r3, [r4, #8]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	60a3      	str	r3, [r4, #8]
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	6022      	str	r2, [r4, #0]
 80053ae:	701e      	strb	r6, [r3, #0]
 80053b0:	6963      	ldr	r3, [r4, #20]
 80053b2:	3001      	adds	r0, #1
 80053b4:	4283      	cmp	r3, r0
 80053b6:	d004      	beq.n	80053c2 <__swbuf_r+0x62>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	07db      	lsls	r3, r3, #31
 80053bc:	d506      	bpl.n	80053cc <__swbuf_r+0x6c>
 80053be:	2e0a      	cmp	r6, #10
 80053c0:	d104      	bne.n	80053cc <__swbuf_r+0x6c>
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 f933 	bl	8005630 <_fflush_r>
 80053ca:	b988      	cbnz	r0, 80053f0 <__swbuf_r+0x90>
 80053cc:	4638      	mov	r0, r7
 80053ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <__swbuf_r+0x9c>)
 80053d2:	429c      	cmp	r4, r3
 80053d4:	d101      	bne.n	80053da <__swbuf_r+0x7a>
 80053d6:	68ac      	ldr	r4, [r5, #8]
 80053d8:	e7cf      	b.n	800537a <__swbuf_r+0x1a>
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <__swbuf_r+0xa0>)
 80053dc:	429c      	cmp	r4, r3
 80053de:	bf08      	it	eq
 80053e0:	68ec      	ldreq	r4, [r5, #12]
 80053e2:	e7ca      	b.n	800537a <__swbuf_r+0x1a>
 80053e4:	4621      	mov	r1, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f81e 	bl	8005428 <__swsetup_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d0cb      	beq.n	8005388 <__swbuf_r+0x28>
 80053f0:	f04f 37ff 	mov.w	r7, #4294967295
 80053f4:	e7ea      	b.n	80053cc <__swbuf_r+0x6c>
 80053f6:	bf00      	nop
 80053f8:	0800591c 	.word	0x0800591c
 80053fc:	0800593c 	.word	0x0800593c
 8005400:	080058fc 	.word	0x080058fc

08005404 <_write_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	; (8005424 <_write_r+0x20>)
 8005408:	4604      	mov	r4, r0
 800540a:	4608      	mov	r0, r1
 800540c:	4611      	mov	r1, r2
 800540e:	2200      	movs	r2, #0
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fc f8b6 	bl	8001584 <_write>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_write_r+0x1e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_write_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	200002a0 	.word	0x200002a0

08005428 <__swsetup_r>:
 8005428:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <__swsetup_r+0xcc>)
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	681d      	ldr	r5, [r3, #0]
 800542e:	4606      	mov	r6, r0
 8005430:	460c      	mov	r4, r1
 8005432:	b125      	cbz	r5, 800543e <__swsetup_r+0x16>
 8005434:	69ab      	ldr	r3, [r5, #24]
 8005436:	b913      	cbnz	r3, 800543e <__swsetup_r+0x16>
 8005438:	4628      	mov	r0, r5
 800543a:	f7ff fb1b 	bl	8004a74 <__sinit>
 800543e:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <__swsetup_r+0xd0>)
 8005440:	429c      	cmp	r4, r3
 8005442:	d10f      	bne.n	8005464 <__swsetup_r+0x3c>
 8005444:	686c      	ldr	r4, [r5, #4]
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800544c:	0719      	lsls	r1, r3, #28
 800544e:	d42c      	bmi.n	80054aa <__swsetup_r+0x82>
 8005450:	06dd      	lsls	r5, r3, #27
 8005452:	d411      	bmi.n	8005478 <__swsetup_r+0x50>
 8005454:	2309      	movs	r3, #9
 8005456:	6033      	str	r3, [r6, #0]
 8005458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	e03e      	b.n	80054e2 <__swsetup_r+0xba>
 8005464:	4b25      	ldr	r3, [pc, #148]	; (80054fc <__swsetup_r+0xd4>)
 8005466:	429c      	cmp	r4, r3
 8005468:	d101      	bne.n	800546e <__swsetup_r+0x46>
 800546a:	68ac      	ldr	r4, [r5, #8]
 800546c:	e7eb      	b.n	8005446 <__swsetup_r+0x1e>
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <__swsetup_r+0xd8>)
 8005470:	429c      	cmp	r4, r3
 8005472:	bf08      	it	eq
 8005474:	68ec      	ldreq	r4, [r5, #12]
 8005476:	e7e6      	b.n	8005446 <__swsetup_r+0x1e>
 8005478:	0758      	lsls	r0, r3, #29
 800547a:	d512      	bpl.n	80054a2 <__swsetup_r+0x7a>
 800547c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547e:	b141      	cbz	r1, 8005492 <__swsetup_r+0x6a>
 8005480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005484:	4299      	cmp	r1, r3
 8005486:	d002      	beq.n	800548e <__swsetup_r+0x66>
 8005488:	4630      	mov	r0, r6
 800548a:	f000 f991 	bl	80057b0 <_free_r>
 800548e:	2300      	movs	r3, #0
 8005490:	6363      	str	r3, [r4, #52]	; 0x34
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	b94b      	cbnz	r3, 80054c2 <__swsetup_r+0x9a>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d003      	beq.n	80054c2 <__swsetup_r+0x9a>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 f92b 	bl	8005718 <__smakebuf_r>
 80054c2:	89a0      	ldrh	r0, [r4, #12]
 80054c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054c8:	f010 0301 	ands.w	r3, r0, #1
 80054cc:	d00a      	beq.n	80054e4 <__swsetup_r+0xbc>
 80054ce:	2300      	movs	r3, #0
 80054d0:	60a3      	str	r3, [r4, #8]
 80054d2:	6963      	ldr	r3, [r4, #20]
 80054d4:	425b      	negs	r3, r3
 80054d6:	61a3      	str	r3, [r4, #24]
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	b943      	cbnz	r3, 80054ee <__swsetup_r+0xc6>
 80054dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054e0:	d1ba      	bne.n	8005458 <__swsetup_r+0x30>
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	0781      	lsls	r1, r0, #30
 80054e6:	bf58      	it	pl
 80054e8:	6963      	ldrpl	r3, [r4, #20]
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	e7f4      	b.n	80054d8 <__swsetup_r+0xb0>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e7f7      	b.n	80054e2 <__swsetup_r+0xba>
 80054f2:	bf00      	nop
 80054f4:	2000000c 	.word	0x2000000c
 80054f8:	0800591c 	.word	0x0800591c
 80054fc:	0800593c 	.word	0x0800593c
 8005500:	080058fc 	.word	0x080058fc

08005504 <_close_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d06      	ldr	r5, [pc, #24]	; (8005520 <_close_r+0x1c>)
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fc fa79 	bl	8001a06 <_close>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_close_r+0x1a>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_close_r+0x1a>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200002a0 	.word	0x200002a0

08005524 <__sflush_r>:
 8005524:	898a      	ldrh	r2, [r1, #12]
 8005526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	4605      	mov	r5, r0
 800552c:	0710      	lsls	r0, r2, #28
 800552e:	460c      	mov	r4, r1
 8005530:	d458      	bmi.n	80055e4 <__sflush_r+0xc0>
 8005532:	684b      	ldr	r3, [r1, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dc05      	bgt.n	8005544 <__sflush_r+0x20>
 8005538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	dc02      	bgt.n	8005544 <__sflush_r+0x20>
 800553e:	2000      	movs	r0, #0
 8005540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005546:	2e00      	cmp	r6, #0
 8005548:	d0f9      	beq.n	800553e <__sflush_r+0x1a>
 800554a:	2300      	movs	r3, #0
 800554c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005550:	682f      	ldr	r7, [r5, #0]
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	d032      	beq.n	80055bc <__sflush_r+0x98>
 8005556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	075a      	lsls	r2, r3, #29
 800555c:	d505      	bpl.n	800556a <__sflush_r+0x46>
 800555e:	6863      	ldr	r3, [r4, #4]
 8005560:	1ac0      	subs	r0, r0, r3
 8005562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005564:	b10b      	cbz	r3, 800556a <__sflush_r+0x46>
 8005566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005568:	1ac0      	subs	r0, r0, r3
 800556a:	2300      	movs	r3, #0
 800556c:	4602      	mov	r2, r0
 800556e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005570:	6a21      	ldr	r1, [r4, #32]
 8005572:	4628      	mov	r0, r5
 8005574:	47b0      	blx	r6
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	d106      	bne.n	800558a <__sflush_r+0x66>
 800557c:	6829      	ldr	r1, [r5, #0]
 800557e:	291d      	cmp	r1, #29
 8005580:	d82c      	bhi.n	80055dc <__sflush_r+0xb8>
 8005582:	4a2a      	ldr	r2, [pc, #168]	; (800562c <__sflush_r+0x108>)
 8005584:	40ca      	lsrs	r2, r1
 8005586:	07d6      	lsls	r6, r2, #31
 8005588:	d528      	bpl.n	80055dc <__sflush_r+0xb8>
 800558a:	2200      	movs	r2, #0
 800558c:	6062      	str	r2, [r4, #4]
 800558e:	04d9      	lsls	r1, r3, #19
 8005590:	6922      	ldr	r2, [r4, #16]
 8005592:	6022      	str	r2, [r4, #0]
 8005594:	d504      	bpl.n	80055a0 <__sflush_r+0x7c>
 8005596:	1c42      	adds	r2, r0, #1
 8005598:	d101      	bne.n	800559e <__sflush_r+0x7a>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	b903      	cbnz	r3, 80055a0 <__sflush_r+0x7c>
 800559e:	6560      	str	r0, [r4, #84]	; 0x54
 80055a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055a2:	602f      	str	r7, [r5, #0]
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d0ca      	beq.n	800553e <__sflush_r+0x1a>
 80055a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ac:	4299      	cmp	r1, r3
 80055ae:	d002      	beq.n	80055b6 <__sflush_r+0x92>
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 f8fd 	bl	80057b0 <_free_r>
 80055b6:	2000      	movs	r0, #0
 80055b8:	6360      	str	r0, [r4, #52]	; 0x34
 80055ba:	e7c1      	b.n	8005540 <__sflush_r+0x1c>
 80055bc:	6a21      	ldr	r1, [r4, #32]
 80055be:	2301      	movs	r3, #1
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b0      	blx	r6
 80055c4:	1c41      	adds	r1, r0, #1
 80055c6:	d1c7      	bne.n	8005558 <__sflush_r+0x34>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0c4      	beq.n	8005558 <__sflush_r+0x34>
 80055ce:	2b1d      	cmp	r3, #29
 80055d0:	d001      	beq.n	80055d6 <__sflush_r+0xb2>
 80055d2:	2b16      	cmp	r3, #22
 80055d4:	d101      	bne.n	80055da <__sflush_r+0xb6>
 80055d6:	602f      	str	r7, [r5, #0]
 80055d8:	e7b1      	b.n	800553e <__sflush_r+0x1a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e0:	81a3      	strh	r3, [r4, #12]
 80055e2:	e7ad      	b.n	8005540 <__sflush_r+0x1c>
 80055e4:	690f      	ldr	r7, [r1, #16]
 80055e6:	2f00      	cmp	r7, #0
 80055e8:	d0a9      	beq.n	800553e <__sflush_r+0x1a>
 80055ea:	0793      	lsls	r3, r2, #30
 80055ec:	680e      	ldr	r6, [r1, #0]
 80055ee:	bf08      	it	eq
 80055f0:	694b      	ldreq	r3, [r1, #20]
 80055f2:	600f      	str	r7, [r1, #0]
 80055f4:	bf18      	it	ne
 80055f6:	2300      	movne	r3, #0
 80055f8:	eba6 0807 	sub.w	r8, r6, r7
 80055fc:	608b      	str	r3, [r1, #8]
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	dd9c      	ble.n	800553e <__sflush_r+0x1a>
 8005604:	6a21      	ldr	r1, [r4, #32]
 8005606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005608:	4643      	mov	r3, r8
 800560a:	463a      	mov	r2, r7
 800560c:	4628      	mov	r0, r5
 800560e:	47b0      	blx	r6
 8005610:	2800      	cmp	r0, #0
 8005612:	dc06      	bgt.n	8005622 <__sflush_r+0xfe>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	e78e      	b.n	8005540 <__sflush_r+0x1c>
 8005622:	4407      	add	r7, r0
 8005624:	eba8 0800 	sub.w	r8, r8, r0
 8005628:	e7e9      	b.n	80055fe <__sflush_r+0xda>
 800562a:	bf00      	nop
 800562c:	20400001 	.word	0x20400001

08005630 <_fflush_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	690b      	ldr	r3, [r1, #16]
 8005634:	4605      	mov	r5, r0
 8005636:	460c      	mov	r4, r1
 8005638:	b913      	cbnz	r3, 8005640 <_fflush_r+0x10>
 800563a:	2500      	movs	r5, #0
 800563c:	4628      	mov	r0, r5
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	b118      	cbz	r0, 800564a <_fflush_r+0x1a>
 8005642:	6983      	ldr	r3, [r0, #24]
 8005644:	b90b      	cbnz	r3, 800564a <_fflush_r+0x1a>
 8005646:	f7ff fa15 	bl	8004a74 <__sinit>
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <_fflush_r+0x6c>)
 800564c:	429c      	cmp	r4, r3
 800564e:	d11b      	bne.n	8005688 <_fflush_r+0x58>
 8005650:	686c      	ldr	r4, [r5, #4]
 8005652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ef      	beq.n	800563a <_fflush_r+0xa>
 800565a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800565c:	07d0      	lsls	r0, r2, #31
 800565e:	d404      	bmi.n	800566a <_fflush_r+0x3a>
 8005660:	0599      	lsls	r1, r3, #22
 8005662:	d402      	bmi.n	800566a <_fflush_r+0x3a>
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f7ff faa3 	bl	8004bb0 <__retarget_lock_acquire_recursive>
 800566a:	4628      	mov	r0, r5
 800566c:	4621      	mov	r1, r4
 800566e:	f7ff ff59 	bl	8005524 <__sflush_r>
 8005672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005674:	07da      	lsls	r2, r3, #31
 8005676:	4605      	mov	r5, r0
 8005678:	d4e0      	bmi.n	800563c <_fflush_r+0xc>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	059b      	lsls	r3, r3, #22
 800567e:	d4dd      	bmi.n	800563c <_fflush_r+0xc>
 8005680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005682:	f7ff fa96 	bl	8004bb2 <__retarget_lock_release_recursive>
 8005686:	e7d9      	b.n	800563c <_fflush_r+0xc>
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <_fflush_r+0x70>)
 800568a:	429c      	cmp	r4, r3
 800568c:	d101      	bne.n	8005692 <_fflush_r+0x62>
 800568e:	68ac      	ldr	r4, [r5, #8]
 8005690:	e7df      	b.n	8005652 <_fflush_r+0x22>
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <_fflush_r+0x74>)
 8005694:	429c      	cmp	r4, r3
 8005696:	bf08      	it	eq
 8005698:	68ec      	ldreq	r4, [r5, #12]
 800569a:	e7da      	b.n	8005652 <_fflush_r+0x22>
 800569c:	0800591c 	.word	0x0800591c
 80056a0:	0800593c 	.word	0x0800593c
 80056a4:	080058fc 	.word	0x080058fc

080056a8 <_lseek_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4d07      	ldr	r5, [pc, #28]	; (80056c8 <_lseek_r+0x20>)
 80056ac:	4604      	mov	r4, r0
 80056ae:	4608      	mov	r0, r1
 80056b0:	4611      	mov	r1, r2
 80056b2:	2200      	movs	r2, #0
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f7fc f9cc 	bl	8001a54 <_lseek>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_lseek_r+0x1e>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_lseek_r+0x1e>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	200002a0 	.word	0x200002a0

080056cc <__swhatbuf_r>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	460e      	mov	r6, r1
 80056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d4:	2900      	cmp	r1, #0
 80056d6:	b096      	sub	sp, #88	; 0x58
 80056d8:	4614      	mov	r4, r2
 80056da:	461d      	mov	r5, r3
 80056dc:	da08      	bge.n	80056f0 <__swhatbuf_r+0x24>
 80056de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	061a      	lsls	r2, r3, #24
 80056e8:	d410      	bmi.n	800570c <__swhatbuf_r+0x40>
 80056ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ee:	e00e      	b.n	800570e <__swhatbuf_r+0x42>
 80056f0:	466a      	mov	r2, sp
 80056f2:	f000 f8bb 	bl	800586c <_fstat_r>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	dbf1      	blt.n	80056de <__swhatbuf_r+0x12>
 80056fa:	9a01      	ldr	r2, [sp, #4]
 80056fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005700:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005704:	425a      	negs	r2, r3
 8005706:	415a      	adcs	r2, r3
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	e7ee      	b.n	80056ea <__swhatbuf_r+0x1e>
 800570c:	2340      	movs	r3, #64	; 0x40
 800570e:	2000      	movs	r0, #0
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	b016      	add	sp, #88	; 0x58
 8005714:	bd70      	pop	{r4, r5, r6, pc}
	...

08005718 <__smakebuf_r>:
 8005718:	898b      	ldrh	r3, [r1, #12]
 800571a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800571c:	079d      	lsls	r5, r3, #30
 800571e:	4606      	mov	r6, r0
 8005720:	460c      	mov	r4, r1
 8005722:	d507      	bpl.n	8005734 <__smakebuf_r+0x1c>
 8005724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	2301      	movs	r3, #1
 800572e:	6163      	str	r3, [r4, #20]
 8005730:	b002      	add	sp, #8
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	ab01      	add	r3, sp, #4
 8005736:	466a      	mov	r2, sp
 8005738:	f7ff ffc8 	bl	80056cc <__swhatbuf_r>
 800573c:	9900      	ldr	r1, [sp, #0]
 800573e:	4605      	mov	r5, r0
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff fa57 	bl	8004bf4 <_malloc_r>
 8005746:	b948      	cbnz	r0, 800575c <__smakebuf_r+0x44>
 8005748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574c:	059a      	lsls	r2, r3, #22
 800574e:	d4ef      	bmi.n	8005730 <__smakebuf_r+0x18>
 8005750:	f023 0303 	bic.w	r3, r3, #3
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	e7e3      	b.n	8005724 <__smakebuf_r+0xc>
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <__smakebuf_r+0x7c>)
 800575e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	6020      	str	r0, [r4, #0]
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	6163      	str	r3, [r4, #20]
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	6120      	str	r0, [r4, #16]
 8005772:	b15b      	cbz	r3, 800578c <__smakebuf_r+0x74>
 8005774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005778:	4630      	mov	r0, r6
 800577a:	f000 f889 	bl	8005890 <_isatty_r>
 800577e:	b128      	cbz	r0, 800578c <__smakebuf_r+0x74>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	81a3      	strh	r3, [r4, #12]
 800578c:	89a0      	ldrh	r0, [r4, #12]
 800578e:	4305      	orrs	r5, r0
 8005790:	81a5      	strh	r5, [r4, #12]
 8005792:	e7cd      	b.n	8005730 <__smakebuf_r+0x18>
 8005794:	08004a0d 	.word	0x08004a0d

08005798 <__malloc_lock>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__malloc_lock+0x8>)
 800579a:	f7ff ba09 	b.w	8004bb0 <__retarget_lock_acquire_recursive>
 800579e:	bf00      	nop
 80057a0:	20000294 	.word	0x20000294

080057a4 <__malloc_unlock>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__malloc_unlock+0x8>)
 80057a6:	f7ff ba04 	b.w	8004bb2 <__retarget_lock_release_recursive>
 80057aa:	bf00      	nop
 80057ac:	20000294 	.word	0x20000294

080057b0 <_free_r>:
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d044      	beq.n	8005840 <_free_r+0x90>
 80057b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ba:	9001      	str	r0, [sp, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f1a1 0404 	sub.w	r4, r1, #4
 80057c2:	bfb8      	it	lt
 80057c4:	18e4      	addlt	r4, r4, r3
 80057c6:	f7ff ffe7 	bl	8005798 <__malloc_lock>
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <_free_r+0x94>)
 80057cc:	9801      	ldr	r0, [sp, #4]
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	b933      	cbnz	r3, 80057e0 <_free_r+0x30>
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	6014      	str	r4, [r2, #0]
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057dc:	f7ff bfe2 	b.w	80057a4 <__malloc_unlock>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d908      	bls.n	80057f6 <_free_r+0x46>
 80057e4:	6825      	ldr	r5, [r4, #0]
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf01      	itttt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	1949      	addeq	r1, r1, r5
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	e7ed      	b.n	80057d2 <_free_r+0x22>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x50>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x46>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1855      	adds	r5, r2, r1
 8005804:	42a5      	cmp	r5, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x70>
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	4421      	add	r1, r4
 800580c:	1854      	adds	r4, r2, r1
 800580e:	42a3      	cmp	r3, r4
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1e0      	bne.n	80057d6 <_free_r+0x26>
 8005814:	681c      	ldr	r4, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6053      	str	r3, [r2, #4]
 800581a:	4421      	add	r1, r4
 800581c:	6011      	str	r1, [r2, #0]
 800581e:	e7da      	b.n	80057d6 <_free_r+0x26>
 8005820:	d902      	bls.n	8005828 <_free_r+0x78>
 8005822:	230c      	movs	r3, #12
 8005824:	6003      	str	r3, [r0, #0]
 8005826:	e7d6      	b.n	80057d6 <_free_r+0x26>
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1961      	adds	r1, r4, r5
 800582c:	428b      	cmp	r3, r1
 800582e:	bf04      	itt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	bf04      	itt	eq
 8005838:	1949      	addeq	r1, r1, r5
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	6054      	str	r4, [r2, #4]
 800583e:	e7ca      	b.n	80057d6 <_free_r+0x26>
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	20000298 	.word	0x20000298

08005848 <_read_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d07      	ldr	r5, [pc, #28]	; (8005868 <_read_r+0x20>)
 800584c:	4604      	mov	r4, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fc f8b8 	bl	80019cc <_read>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_read_r+0x1e>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_read_r+0x1e>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	200002a0 	.word	0x200002a0

0800586c <_fstat_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d07      	ldr	r5, [pc, #28]	; (800588c <_fstat_r+0x20>)
 8005870:	2300      	movs	r3, #0
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	f7fc f8d0 	bl	8001a1e <_fstat>
 800587e:	1c43      	adds	r3, r0, #1
 8005880:	d102      	bne.n	8005888 <_fstat_r+0x1c>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	b103      	cbz	r3, 8005888 <_fstat_r+0x1c>
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	200002a0 	.word	0x200002a0

08005890 <_isatty_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d06      	ldr	r5, [pc, #24]	; (80058ac <_isatty_r+0x1c>)
 8005894:	2300      	movs	r3, #0
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	f7fc f8cf 	bl	8001a3e <_isatty>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_isatty_r+0x1a>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_isatty_r+0x1a>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	200002a0 	.word	0x200002a0

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

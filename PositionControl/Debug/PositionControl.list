
PositionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800beb0  0800beb0  0001beb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b8  0800c3b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c0  0800c3c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c0  0800c3c0  0001c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3c4  0800c3c4  0001c3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c3c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001e8  0800c5b0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800c5b0  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e682  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e28  00000000  00000000  0002e89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000306c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000313e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017340  00000000  00000000  00032050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea74  00000000  00000000  00049390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffba  00000000  00000000  00057e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  000e7e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be94 	.word	0x0800be94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800be94 	.word	0x0800be94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 800100c:	f002 fa10 	bl	8003430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f824 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 fa02 	bl	800141c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001018:	f000 f9d6 	bl	80013c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800101c:	f000 f886 	bl	800112c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001020:	f000 f930 	bl	8001284 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001024:	f000 f982 	bl	800132c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2); //Encoder
 8001028:	2104      	movs	r1, #4
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <main+0x48>)
 800102c:	f003 fd08 	bl	8004a40 <HAL_TIM_Encoder_Start>

HAL_TIM_Base_Start(&htim1); //Motor
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <main+0x4c>)
 8001032:	f003 fa99 	bl	8004568 <HAL_TIM_Base_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001036:	2100      	movs	r1, #0
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <main+0x4c>)
 800103a:	f003 fbab 	bl	8004794 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800103e:	2104      	movs	r1, #4
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <main+0x4c>)
 8001042:	f003 fba7 	bl	8004794 <HAL_TIM_PWM_Start>

HAL_TIM_Base_Start_IT(&htim3); //Timer Interrupt
 8001046:	4804      	ldr	r0, [pc, #16]	; (8001058 <main+0x50>)
 8001048:	f003 fae8 	bl	800461c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
 800104c:	e7fe      	b.n	800104c <main+0x44>
 800104e:	bf00      	nop
 8001050:	2000024c 	.word	0x2000024c
 8001054:	20000204 	.word	0x20000204
 8001058:	20000294 	.word	0x20000294

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 fb52 	bl	8006714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <SystemClock_Config+0xc8>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <SystemClock_Config+0xc8>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <SystemClock_Config+0xc8>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <SystemClock_Config+0xcc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <SystemClock_Config+0xcc>)
 80010a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <SystemClock_Config+0xcc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fd59 	bl	8003b98 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ec:	f001 ff24 	bl	8002f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2103      	movs	r1, #3
 800110c:	4618      	mov	r0, r3
 800110e:	f002 ffbb 	bl	8004088 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001118:	f001 ff0e 	bl	8002f38 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	; 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b096      	sub	sp, #88	; 0x58
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]
 800115a:	615a      	str	r2, [r3, #20]
 800115c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fad5 	bl	8006714 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116a:	4b44      	ldr	r3, [pc, #272]	; (800127c <MX_TIM1_Init+0x150>)
 800116c:	4a44      	ldr	r2, [pc, #272]	; (8001280 <MX_TIM1_Init+0x154>)
 800116e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001170:	4b42      	ldr	r3, [pc, #264]	; (800127c <MX_TIM1_Init+0x150>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <MX_TIM1_Init+0x150>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_TIM1_Init+0x150>)
 800117e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b3d      	ldr	r3, [pc, #244]	; (800127c <MX_TIM1_Init+0x150>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <MX_TIM1_Init+0x150>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <MX_TIM1_Init+0x150>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001196:	4839      	ldr	r0, [pc, #228]	; (800127c <MX_TIM1_Init+0x150>)
 8001198:	f003 f996 	bl	80044c8 <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011a2:	f001 fec9 	bl	8002f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b0:	4619      	mov	r1, r3
 80011b2:	4832      	ldr	r0, [pc, #200]	; (800127c <MX_TIM1_Init+0x150>)
 80011b4:	f003 fe9c 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011be:	f001 febb 	bl	8002f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c2:	482e      	ldr	r0, [pc, #184]	; (800127c <MX_TIM1_Init+0x150>)
 80011c4:	f003 fa8c 	bl	80046e0 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ce:	f001 feb3 	bl	8002f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011de:	4619      	mov	r1, r3
 80011e0:	4826      	ldr	r0, [pc, #152]	; (800127c <MX_TIM1_Init+0x150>)
 80011e2:	f004 fa41 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011ec:	f001 fea4 	bl	8002f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	4819      	ldr	r0, [pc, #100]	; (800127c <MX_TIM1_Init+0x150>)
 8001216:	f003 fda9 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001220:	f001 fe8a 	bl	8002f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_TIM1_Init+0x150>)
 800122e:	f003 fd9d 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001238:	f001 fe7e 	bl	8002f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM1_Init+0x150>)
 8001260:	f004 fa70 	bl	8005744 <HAL_TIMEx_ConfigBreakDeadTime>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800126a:	f001 fe65 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM1_Init+0x150>)
 8001270:	f001 ff14 	bl	800309c <HAL_TIM_MspPostInit>

}
 8001274:	bf00      	nop
 8001276:	3758      	adds	r7, #88	; 0x58
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000204 	.word	0x20000204
 8001280:	40010000 	.word	0x40010000

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2224      	movs	r2, #36	; 0x24
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fa3e 	bl	8006714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012b6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012c8:	2303      	movs	r3, #3
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_TIM2_Init+0xa4>)
 80012f4:	f003 fafe 	bl	80048f4 <HAL_TIM_Encoder_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012fe:	f001 fe1b 	bl	8002f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM2_Init+0xa4>)
 8001310:	f004 f9aa 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800131a:	f001 fe0d 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3730      	adds	r7, #48	; 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000024c 	.word	0x2000024c

0800132c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_TIM3_Init+0x94>)
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <MX_TIM3_Init+0x98>)
 800134c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_TIM3_Init+0x94>)
 8001350:	2209      	movs	r2, #9
 8001352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_TIM3_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_TIM3_Init+0x94>)
 800135c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_TIM3_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_TIM3_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <MX_TIM3_Init+0x94>)
 8001370:	f003 f8aa 	bl	80044c8 <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800137a:	f001 fddd 	bl	8002f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4619      	mov	r1, r3
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <MX_TIM3_Init+0x94>)
 800138c:	f003 fdb0 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001396:	f001 fdcf 	bl	8002f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <MX_TIM3_Init+0x94>)
 80013a8:	f004 f95e 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013b2:	f001 fdc1 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000294 	.word	0x20000294
 80013c4:	40000400 	.word	0x40000400

080013c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f004 fa06 	bl	8005810 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f001 fd95 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002dc 	.word	0x200002dc
 8001418:	40004400 	.word	0x40004400

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <MX_GPIO_Init+0xd0>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a25      	ldr	r2, [pc, #148]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_GPIO_Init+0xd0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_GPIO_Init+0xd0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2130      	movs	r1, #48	; 0x30
 80014a6:	4812      	ldr	r0, [pc, #72]	; (80014f0 <MX_GPIO_Init+0xd4>)
 80014a8:	f002 fb5c 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_GPIO_Init+0xd8>)
 80014c4:	f002 f9ca 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80014c8:	2330      	movs	r3, #48	; 0x30
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_GPIO_Init+0xd4>)
 80014e0:	f002 f9bc 	bl	800385c <HAL_GPIO_Init>

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020800 	.word	0x40020800

080014f8 <Encoder>:
//	}
//	QEIposition = QEIReadRaw + (3072.0*C1) - (3072.0*C2);
//	QEIposition = (QEIposition/3072.0)*360.0;
//	L_QEIReadRaw = QEIReadRaw;
//}
void Encoder(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <Encoder+0x4c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	461a      	mov	r2, r3
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <Encoder+0x50>)
 8001506:	601a      	str	r2, [r3, #0]
	QEIposition = (QEIReadRaw/280.0)*120.0;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <Encoder+0x50>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f811 	bl	8000534 <__aeabi_i2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <Encoder+0x54>)
 8001518:	f7ff f9a0 	bl	800085c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <Encoder+0x58>)
 800152a:	f7ff f86d 	bl	8000608 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fb5f 	bl	8000bf8 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <Encoder+0x5c>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000024c 	.word	0x2000024c
 8001548:	20000370 	.word	0x20000370
 800154c:	40718000 	.word	0x40718000
 8001550:	405e0000 	.word	0x405e0000
 8001554:	20000374 	.word	0x20000374

08001558 <setMotor>:

void setMotor(int PWM){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	if(PWM >= 0){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db09      	blt.n	800157a <setMotor+0x22>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PWM);
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <setMotor+0x44>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2110      	movs	r1, #16
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <setMotor+0x48>)
 8001574:	f002 faf6 	bl	8003b64 <HAL_GPIO_WritePin>

	else if (PWM < 0){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,-1 * PWM);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}
 8001578:	e00c      	b.n	8001594 <setMotor+0x3c>
	else if (PWM < 0){
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	da09      	bge.n	8001594 <setMotor+0x3c>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,-1 * PWM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	425a      	negs	r2, r3
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <setMotor+0x44>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	2110      	movs	r1, #16
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <setMotor+0x48>)
 8001590:	f002 fae8 	bl	8003b64 <HAL_GPIO_WritePin>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000204 	.word	0x20000204
 80015a0:	40020000 	.word	0x40020000

080015a4 <Controller>:

void Controller(){
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	af00      	add	r7, sp, #0
//	Unwrap();
	Encoder();
 80015a8:	f7ff ffa6 	bl	80014f8 <Encoder>
	Trajectory_Algolithms();
 80015ac:	f001 fc40 	bl	8002e30 <Trajectory_Algolithms>
	error = setposition - QEIposition;
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <Controller+0x108>)
 80015b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <Controller+0x10c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffcc 	bl	8000558 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe66 	bl	8000298 <__aeabi_dsub>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fb10 	bl	8000bf8 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a36      	ldr	r2, [pc, #216]	; (80016b4 <Controller+0x110>)
 80015dc:	6013      	str	r3, [r2, #0]
	deltu = (error - error_d1)*(1/2000);
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <Controller+0x110>)
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <Controller+0x114>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ee:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80016bc <Controller+0x118>
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <Controller+0x11c>)
 80015f8:	edc3 7a00 	vstr	s15, [r3]
	summa += (error)*(1/2000);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <Controller+0x110>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80016bc <Controller+0x118>
 8001606:	ee27 7a87 	vmul.f32	s14, s15, s14
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <Controller+0x120>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <Controller+0x120>)
 8001616:	edc3 7a00 	vstr	s15, [r3]
	PWM = (Kp*error) + (Kd*deltu) + (Ki*summa);
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <Controller+0x124>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <Controller+0x110>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <Controller+0x128>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <Controller+0x11c>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <Controller+0x12c>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <Controller+0x120>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 2a90 	vmov	r2, s15
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <Controller+0x130>)
 800166e:	601a      	str	r2, [r3, #0]
	if(PWM >= 50000){
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <Controller+0x130>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001678:	4293      	cmp	r3, r2
 800167a:	dd04      	ble.n	8001686 <Controller+0xe2>
		PWM = 50000;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <Controller+0x130>)
 800167e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e007      	b.n	8001696 <Controller+0xf2>
	}
	else if(PWM <= -50000){
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <Controller+0x130>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <Controller+0x134>)
 800168c:	4293      	cmp	r3, r2
 800168e:	da02      	bge.n	8001696 <Controller+0xf2>
		PWM = -50000;
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <Controller+0x130>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <Controller+0x138>)
 8001694:	601a      	str	r2, [r3, #0]
	}
//	if(error <= 1 && error >= -1){
//		PWM = 0;
//	}
	setMotor(PWM);
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <Controller+0x130>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff5c 	bl	8001558 <setMotor>
	error_d1 = error;
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <Controller+0x110>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <Controller+0x114>)
 80016a6:	6013      	str	r3, [r2, #0]


}
 80016a8:	bf00      	nop
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}
 80016ac:	20000390 	.word	0x20000390
 80016b0:	20000374 	.word	0x20000374
 80016b4:	2000037c 	.word	0x2000037c
 80016b8:	20000380 	.word	0x20000380
 80016bc:	00000000 	.word	0x00000000
 80016c0:	20000388 	.word	0x20000388
 80016c4:	20000384 	.word	0x20000384
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004
 80016d0:	20000002 	.word	0x20000002
 80016d4:	20000378 	.word	0x20000378
 80016d8:	ffff3cb1 	.word	0xffff3cb1
 80016dc:	ffff3cb0 	.word	0xffff3cb0

080016e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e4:	b08c      	sub	sp, #48	; 0x30
 80016e6:	af06      	add	r7, sp, #24
 80016e8:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d153      	bne.n	800179a <HAL_TIM_PeriodElapsedCallback+0xba>
		Controller();
 80016f2:	f7ff ff57 	bl	80015a4 <Controller>
		if (huart2.gState == HAL_UART_STATE_READY)
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80016f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d14b      	bne.n	800179a <HAL_TIM_PeriodElapsedCallback+0xba>
		{
			float s = setposition;
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa74 	bl	8000bf8 <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	617b      	str	r3, [r7, #20]
			float v = velocity;
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa6b 	bl	8000bf8 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	613b      	str	r3, [r7, #16]
			float a = acceleration;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff fa62 	bl	8000bf8 <__aeabi_d2f>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
			sprintf(TxBuffer,"%.2f %.2f %.2f %.2f\r\n",t * 1000,s,v,a);
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800173a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001744:	f7fe ff60 	bl	8000608 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4692      	mov	sl, r2
 800174e:	469b      	mov	fp, r3
 8001750:	6978      	ldr	r0, [r7, #20]
 8001752:	f7fe ff01 	bl	8000558 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	6938      	ldr	r0, [r7, #16]
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	4680      	mov	r8, r0
 8001762:	4689      	mov	r9, r1
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001772:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001776:	e9cd 4500 	strd	r4, r5, [sp]
 800177a:	4652      	mov	r2, sl
 800177c:	465b      	mov	r3, fp
 800177e:	4910      	ldr	r1, [pc, #64]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001780:	4810      	ldr	r0, [pc, #64]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001782:	f005 fe4f 	bl	8007424 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)TxBuffer, strlen(TxBuffer));
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001788:	f7fe fd2a 	bl	80001e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	490c      	ldr	r1, [pc, #48]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001796:	f004 f888 	bl	80058aa <HAL_UART_Transmit_IT>
		}
	}
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a4:	20000294 	.word	0x20000294
 80017a8:	200002dc 	.word	0x200002dc
 80017ac:	20000390 	.word	0x20000390
 80017b0:	20000398 	.word	0x20000398
 80017b4:	200003a0 	.word	0x200003a0
 80017b8:	200003c0 	.word	0x200003c0
 80017bc:	408f4000 	.word	0x408f4000
 80017c0:	0800beb0 	.word	0x0800beb0
 80017c4:	20000320 	.word	0x20000320

080017c8 <Trajectory_Generator>:

void Trajectory_Generator(int initial_p,int target_p,float vmax,float amax,float jmax){
 80017c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017cc:	b08c      	sub	sp, #48	; 0x30
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6178      	str	r0, [r7, #20]
 80017d2:	6139      	str	r1, [r7, #16]
 80017d4:	ed87 0a03 	vstr	s0, [r7, #12]
 80017d8:	edc7 0a02 	vstr	s1, [r7, #8]
 80017dc:	ed87 1a01 	vstr	s2, [r7, #4]
	//Set parameter
	uint32_t s = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t M = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t N = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t pattern = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	float va = 0.0f;
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
	float sa = 0.0f;
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
	float sv = 0.0f;
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
	// Check for the feasibility of the trajectory
	if(vmax*jmax < amax*amax){
 8001808:	ed97 7a03 	vldr	s14, [r7, #12]
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001814:	edd7 7a02 	vldr	s15, [r7, #8]
 8001818:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d506      	bpl.n	8001834 <Trajectory_Generator+0x6c>
		M = 1;
 8001826:	2301      	movs	r3, #1
 8001828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		N = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001832:	e005      	b.n	8001840 <Trajectory_Generator+0x78>
	}
	else{
		M = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		N = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

    // Determine the direction of the motion
    if (target_p - initial_p < 0){
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	da03      	bge.n	8001852 <Trajectory_Generator+0x8a>
        dir = -1;
 800184a:	4bcb      	ldr	r3, [pc, #812]	; (8001b78 <Trajectory_Generator+0x3b0>)
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e002      	b.n	8001858 <Trajectory_Generator+0x90>
    }
    else{
        dir = 1;
 8001852:	4bc9      	ldr	r3, [pc, #804]	; (8001b78 <Trajectory_Generator+0x3b0>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
    }

    // Calculate the required distance
    s = abs(target_p - initial_p);
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	bfb8      	it	lt
 8001862:	425b      	neglt	r3, r3
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28

    // Calculate the values of va, sa and sv
    va = (amax*amax)/jmax;
 8001866:	edd7 7a02 	vldr	s15, [r7, #8]
 800186a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800186e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001876:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sa = 2*(amax*amax*amax)/(jmax*jmax);
 800187a:	edd7 7a02 	vldr	s15, [r7, #8]
 800187e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001882:	edd7 7a02 	vldr	s15, [r7, #8]
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800188e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001892:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189a:	edc7 7a08 	vstr	s15, [r7, #32]
    sv = vmax*((M * 2 * sqrt(vmax/jmax)) + N*((vmax/amax)+(amax/jmax)));
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7fe fe5a 	bl	8000558 <__aeabi_f2d>
 80018a4:	4604      	mov	r4, r0
 80018a6:	460d      	mov	r5, r1
 80018a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe40 	bl	8000534 <__aeabi_i2d>
 80018b4:	4680      	mov	r8, r0
 80018b6:	4689      	mov	r9, r1
 80018b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80018bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018c4:	ee16 0a90 	vmov	r0, s13
 80018c8:	f7fe fe46 	bl	8000558 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	f009 fc08 	bl	800b0e8 <sqrt>
 80018d8:	ec53 2b10 	vmov	r2, r3, d0
 80018dc:	4640      	mov	r0, r8
 80018de:	4649      	mov	r1, r9
 80018e0:	f7fe fe92 	bl	8000608 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4690      	mov	r8, r2
 80018ea:	4699      	mov	r9, r3
 80018ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80018fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001900:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001904:	edd7 5a02 	vldr	s11, [r7, #8]
 8001908:	ed97 6a01 	vldr	s12, [r7, #4]
 800190c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	ee17 0a90 	vmov	r0, s15
 800191c:	f7fe fe1c 	bl	8000558 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4640      	mov	r0, r8
 8001926:	4649      	mov	r1, r9
 8001928:	f7fe fcb8 	bl	800029c <__adddf3>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe68 	bl	8000608 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f95a 	bl	8000bf8 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	61fb      	str	r3, [r7, #28]

    // Determine the shape of the trajectory based on the values of va, sa and sv
    if ((vmax <= va) && (s >= sa)){
 8001948:	ed97 7a03 	vldr	s14, [r7, #12]
 800194c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d80f      	bhi.n	800197a <Trajectory_Generator+0x1b2>
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001964:	ed97 7a08 	vldr	s14, [r7, #32]
 8001968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d803      	bhi.n	800197a <Trajectory_Generator+0x1b2>
        pattern = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001978:	e0ab      	b.n	8001ad2 <Trajectory_Generator+0x30a>
    }
    else if ((vmax > va) && (s < sa)){
 800197a:	ed97 7a03 	vldr	s14, [r7, #12]
 800197e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dd0f      	ble.n	80019ac <Trajectory_Generator+0x1e4>
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001996:	ed97 7a08 	vldr	s14, [r7, #32]
 800199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	dd03      	ble.n	80019ac <Trajectory_Generator+0x1e4>
        pattern = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80019aa:	e092      	b.n	8001ad2 <Trajectory_Generator+0x30a>
    }
    else if ((vmax < va) && (s < sa) && (s > sv)){
 80019ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80019b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d51b      	bpl.n	80019f6 <Trajectory_Generator+0x22e>
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80019cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	dd0f      	ble.n	80019f6 <Trajectory_Generator+0x22e>
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80019e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d503      	bpl.n	80019f6 <Trajectory_Generator+0x22e>
        pattern = 3;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80019f4:	e06d      	b.n	8001ad2 <Trajectory_Generator+0x30a>
    }
    else if ((vmax < va) && (s < sa) && (s < sv)){
 80019f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d51b      	bpl.n	8001a40 <Trajectory_Generator+0x278>
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a12:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	dd0f      	ble.n	8001a40 <Trajectory_Generator+0x278>
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd03      	ble.n	8001a40 <Trajectory_Generator+0x278>
        pattern = 4;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a3e:	e048      	b.n	8001ad2 <Trajectory_Generator+0x30a>
    }
    else if ((vmax >= va) && (s >= sa) && (s >= sv)){
 8001a40:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	db1b      	blt.n	8001a8a <Trajectory_Generator+0x2c2>
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	d80f      	bhi.n	8001a8a <Trajectory_Generator+0x2c2>
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a74:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	d803      	bhi.n	8001a8a <Trajectory_Generator+0x2c2>
        pattern = 5;
 8001a82:	2305      	movs	r3, #5
 8001a84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001a88:	e023      	b.n	8001ad2 <Trajectory_Generator+0x30a>
    }
    else if ((vmax >= va) && (s >= sa) && (s < sv)){
 8001a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	db1a      	blt.n	8001ad2 <Trajectory_Generator+0x30a>
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d80e      	bhi.n	8001ad2 <Trajectory_Generator+0x30a>
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001abe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	dd02      	ble.n	8001ad2 <Trajectory_Generator+0x30a>
        pattern = 6;
 8001acc:	2306      	movs	r3, #6
 8001ace:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    // Calculate the values of tj, ta and tv for each trajectory pattern
    switch (pattern){
 8001ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	f200 81ae 	bhi.w	8001e3a <Trajectory_Generator+0x672>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <Trajectory_Generator+0x31c>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b89 	.word	0x08001b89
 8001aec:	08001c09 	.word	0x08001c09
 8001af0:	08001c7b 	.word	0x08001c7b
 8001af4:	08001ced 	.word	0x08001ced
 8001af8:	08001d65 	.word	0x08001d65
        case 1:
            tj = (float)pow((vmax/jmax),(0.5));
 8001afc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b08:	ee16 0a90 	vmov	r0, s13
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001b70 <Trajectory_Generator+0x3a8>
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f009 fa74 	bl	800b008 <pow>
 8001b20:	ec53 2b10 	vmov	r2, r3, d0
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f866 	bl	8000bf8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd12 	bl	8000558 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4910      	ldr	r1, [pc, #64]	; (8001b7c <Trajectory_Generator+0x3b4>)
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
            ta = tj;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <Trajectory_Generator+0x3b4>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <Trajectory_Generator+0x3b8>)
 8001b46:	e9c1 2300 	strd	r2, r3, [r1]
            tv = s/vmax;
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b5c:	ee16 0a90 	vmov	r0, s13
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4906      	ldr	r1, [pc, #24]	; (8001b84 <Trajectory_Generator+0x3bc>)
 8001b6a:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8001b6e:	e164      	b.n	8001e3a <Trajectory_Generator+0x672>
 8001b70:	00000000 	.word	0x00000000
 8001b74:	3fe00000 	.word	0x3fe00000
 8001b78:	20000418 	.word	0x20000418
 8001b7c:	200003c8 	.word	0x200003c8
 8001b80:	200003d0 	.word	0x200003d0
 8001b84:	200003d8 	.word	0x200003d8
        case 2:
            tj = (float)pow(s/(2.0*jmax),1.0/3.0);
 8001b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b8a:	f7fe fcc3 	bl	8000514 <__aeabi_ui2d>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	460d      	mov	r5, r1
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fce0 	bl	8000558 <__aeabi_f2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	f7fe fb7e 	bl	800029c <__adddf3>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fe58 	bl	800085c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ec43 2b17 	vmov	d7, r2, r3
 8001bb4:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001d50 <Trajectory_Generator+0x588>
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	f009 fa22 	bl	800b008 <pow>
 8001bc4:	ec53 2b10 	vmov	r2, r3, d0
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff f814 	bl	8000bf8 <__aeabi_d2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcc0 	bl	8000558 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	495e      	ldr	r1, [pc, #376]	; (8001d58 <Trajectory_Generator+0x590>)
 8001bde:	e9c1 2300 	strd	r2, r3, [r1]
            ta = tj;
 8001be2:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <Trajectory_Generator+0x590>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	495c      	ldr	r1, [pc, #368]	; (8001d5c <Trajectory_Generator+0x594>)
 8001bea:	e9c1 2300 	strd	r2, r3, [r1]
            tv = 2*tj;
 8001bee:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <Trajectory_Generator+0x590>)
 8001bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	f7fe fb50 	bl	800029c <__adddf3>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4957      	ldr	r1, [pc, #348]	; (8001d60 <Trajectory_Generator+0x598>)
 8001c02:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8001c06:	e118      	b.n	8001e3a <Trajectory_Generator+0x672>
        case 3:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
 8001c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c1e:	ee16 0a90 	vmov	r0, s13
 8001c22:	f7fe fc99 	bl	8000558 <__aeabi_f2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8001d50 <Trajectory_Generator+0x588>
 8001c2e:	ec43 2b10 	vmov	d0, r2, r3
 8001c32:	f009 f9e9 	bl	800b008 <pow>
 8001c36:	ec53 2b10 	vmov	r2, r3, d0
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ffdb 	bl	8000bf8 <__aeabi_d2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc87 	bl	8000558 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4942      	ldr	r1, [pc, #264]	; (8001d58 <Trajectory_Generator+0x590>)
 8001c50:	e9c1 2300 	strd	r2, r3, [r1]
            ta = tj;
 8001c54:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <Trajectory_Generator+0x590>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	4940      	ldr	r1, [pc, #256]	; (8001d5c <Trajectory_Generator+0x594>)
 8001c5c:	e9c1 2300 	strd	r2, r3, [r1]
            tv = 2*tj;
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <Trajectory_Generator+0x590>)
 8001c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	f7fe fb17 	bl	800029c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	493b      	ldr	r1, [pc, #236]	; (8001d60 <Trajectory_Generator+0x598>)
 8001c74:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8001c78:	e0df      	b.n	8001e3a <Trajectory_Generator+0x672>
        case 4:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c90:	ee16 0a90 	vmov	r0, s13
 8001c94:	f7fe fc60 	bl	8000558 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001d50 <Trajectory_Generator+0x588>
 8001ca0:	ec43 2b10 	vmov	d0, r2, r3
 8001ca4:	f009 f9b0 	bl	800b008 <pow>
 8001ca8:	ec53 2b10 	vmov	r2, r3, d0
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ffa2 	bl	8000bf8 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc4e 	bl	8000558 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4925      	ldr	r1, [pc, #148]	; (8001d58 <Trajectory_Generator+0x590>)
 8001cc2:	e9c1 2300 	strd	r2, r3, [r1]
            ta = tj;
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <Trajectory_Generator+0x590>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	4923      	ldr	r1, [pc, #140]	; (8001d5c <Trajectory_Generator+0x594>)
 8001cce:	e9c1 2300 	strd	r2, r3, [r1]
            tv = 2*tj;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <Trajectory_Generator+0x590>)
 8001cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	f7fe fade 	bl	800029c <__adddf3>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	491e      	ldr	r1, [pc, #120]	; (8001d60 <Trajectory_Generator+0x598>)
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8001cea:	e0a6      	b.n	8001e3a <Trajectory_Generator+0x672>
        case 5:
            tj = amax/jmax;
 8001cec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cf8:	ee16 0a90 	vmov	r0, s13
 8001cfc:	f7fe fc2c 	bl	8000558 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4914      	ldr	r1, [pc, #80]	; (8001d58 <Trajectory_Generator+0x590>)
 8001d06:	e9c1 2300 	strd	r2, r3, [r1]
            ta = vmax/amax;
 8001d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d16:	ee16 0a90 	vmov	r0, s13
 8001d1a:	f7fe fc1d 	bl	8000558 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	490e      	ldr	r1, [pc, #56]	; (8001d5c <Trajectory_Generator+0x594>)
 8001d24:	e9c1 2300 	strd	r2, r3, [r1]
            tv = s/vmax;
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d3a:	ee16 0a90 	vmov	r0, s13
 8001d3e:	f7fe fc0b 	bl	8000558 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4906      	ldr	r1, [pc, #24]	; (8001d60 <Trajectory_Generator+0x598>)
 8001d48:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8001d4c:	e075      	b.n	8001e3a <Trajectory_Generator+0x672>
 8001d4e:	bf00      	nop
 8001d50:	55555555 	.word	0x55555555
 8001d54:	3fd55555 	.word	0x3fd55555
 8001d58:	200003c8 	.word	0x200003c8
 8001d5c:	200003d0 	.word	0x200003d0
 8001d60:	200003d8 	.word	0x200003d8
        case 6:
            tj = amax/jmax;
 8001d64:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d70:	ee16 0a90 	vmov	r0, s13
 8001d74:	f7fe fbf0 	bl	8000558 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4961      	ldr	r1, [pc, #388]	; (8001f04 <Trajectory_Generator+0x73c>)
 8001d7e:	e9c1 2300 	strd	r2, r3, [r1]
            ta = 0.5*(sqrt(((4*s*jmax*jmax)+(amax*amax*amax)) / (amax * jmax*jmax)) - (amax/jmax));
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	edd7 6a02 	vldr	s13, [r7, #8]
 8001db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dca:	ee16 0a90 	vmov	r0, s13
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b10 	vmov	d0, r2, r3
 8001dda:	f009 f985 	bl	800b0e8 <sqrt>
 8001dde:	ec55 4b10 	vmov	r4, r5, d0
 8001de2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dee:	ee16 0a90 	vmov	r0, s13
 8001df2:	f7fe fbb1 	bl	8000558 <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7fe fa4b 	bl	8000298 <__aeabi_dsub>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <Trajectory_Generator+0x740>)
 8001e10:	f7fe fbfa 	bl	8000608 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	493c      	ldr	r1, [pc, #240]	; (8001f0c <Trajectory_Generator+0x744>)
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]
            tv = ta + tj;
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <Trajectory_Generator+0x744>)
 8001e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e24:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <Trajectory_Generator+0x73c>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fa37 	bl	800029c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4937      	ldr	r1, [pc, #220]	; (8001f10 <Trajectory_Generator+0x748>)
 8001e34:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8001e38:	bf00      	nop
    }

    // Calculate the values of t1 to t7 and the total time
    t1 = tj;
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <Trajectory_Generator+0x73c>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	4934      	ldr	r1, [pc, #208]	; (8001f14 <Trajectory_Generator+0x74c>)
 8001e42:	e9c1 2300 	strd	r2, r3, [r1]
    t2 = ta;
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <Trajectory_Generator+0x744>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	4932      	ldr	r1, [pc, #200]	; (8001f18 <Trajectory_Generator+0x750>)
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
    t3 = ta + tj;
 8001e52:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <Trajectory_Generator+0x744>)
 8001e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <Trajectory_Generator+0x73c>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fa1d 	bl	800029c <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	492d      	ldr	r1, [pc, #180]	; (8001f1c <Trajectory_Generator+0x754>)
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
    t4 = tv;
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <Trajectory_Generator+0x748>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	492b      	ldr	r1, [pc, #172]	; (8001f20 <Trajectory_Generator+0x758>)
 8001e74:	e9c1 2300 	strd	r2, r3, [r1]
    t5 = tv + tj;
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <Trajectory_Generator+0x748>)
 8001e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <Trajectory_Generator+0x73c>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fa0a 	bl	800029c <__adddf3>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4925      	ldr	r1, [pc, #148]	; (8001f24 <Trajectory_Generator+0x75c>)
 8001e8e:	e9c1 2300 	strd	r2, r3, [r1]
    t6 = tv + ta;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <Trajectory_Generator+0x748>)
 8001e94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <Trajectory_Generator+0x744>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe f9fd 	bl	800029c <__adddf3>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4920      	ldr	r1, [pc, #128]	; (8001f28 <Trajectory_Generator+0x760>)
 8001ea8:	e9c1 2300 	strd	r2, r3, [r1]
    t7 = tv + tj + ta;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <Trajectory_Generator+0x748>)
 8001eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <Trajectory_Generator+0x73c>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe f9f0 	bl	800029c <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <Trajectory_Generator+0x744>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe f9e7 	bl	800029c <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4916      	ldr	r1, [pc, #88]	; (8001f2c <Trajectory_Generator+0x764>)
 8001ed4:	e9c1 2300 	strd	r2, r3, [r1]
    time_total = t7;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <Trajectory_Generator+0x764>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	4914      	ldr	r1, [pc, #80]	; (8001f30 <Trajectory_Generator+0x768>)
 8001ee0:	e9c1 2300 	strd	r2, r3, [r1]
    if (s == 0){
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <Trajectory_Generator+0x730>
    	time_total = 0;
 8001eea:	4911      	ldr	r1, [pc, #68]	; (8001f30 <Trajectory_Generator+0x768>)
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 8001ef8:	bf00      	nop
 8001efa:	3730      	adds	r7, #48	; 0x30
 8001efc:	46bd      	mov	sp, r7
 8001efe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f02:	bf00      	nop
 8001f04:	200003c8 	.word	0x200003c8
 8001f08:	3fe00000 	.word	0x3fe00000
 8001f0c:	200003d0 	.word	0x200003d0
 8001f10:	200003d8 	.word	0x200003d8
 8001f14:	200003e0 	.word	0x200003e0
 8001f18:	200003e8 	.word	0x200003e8
 8001f1c:	200003f0 	.word	0x200003f0
 8001f20:	200003f8 	.word	0x200003f8
 8001f24:	20000400 	.word	0x20000400
 8001f28:	20000408 	.word	0x20000408
 8001f2c:	20000410 	.word	0x20000410
 8001f30:	200003b8 	.word	0x200003b8
 8001f34:	00000000 	.word	0x00000000

08001f38 <Trajectory_Evaluated>:

void Trajectory_Evaluated(float vmax,float amax,float jmax){
 8001f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f44:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f48:	ed87 1a01 	vstr	s2, [r7, #4]
	static double p1,p2,p3,p4,p5,p6 = 0;
	static double v1,v2,v3,v4,v5,v6 = 0;
	static double a1,a2,a3,a4,a5,a6 = 0;
	t += 1.0/2000.0;
 8001f4c:	4b72      	ldr	r3, [pc, #456]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8001f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f52:	a36b      	add	r3, pc, #428	; (adr r3, 8002100 <Trajectory_Evaluated+0x1c8>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe f9a0 	bl	800029c <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	496d      	ldr	r1, [pc, #436]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]
	if (t <= time_total){
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8001f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6c:	4b6b      	ldr	r3, [pc, #428]	; (800211c <Trajectory_Evaluated+0x1e4>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fdc5 	bl	8000b00 <__aeabi_dcmple>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <Trajectory_Evaluated+0x48>
			setposition = p6 + v6 * (t - t6) + 1.0/2.0 * a6 * pow((t - t6),2) + 1/6.0 * jmax* dir * pow((t - t6),3);
			velocity = v6 + a6 * (t - t6) + 1.0/2.0 * jmax*dir * pow((t - t6),2);
			acceleration = a6 + dir *jmax * (t - t6);
		}
	}
}
 8001f7c:	f000 bf30 	b.w	8002de0 <Trajectory_Evaluated+0xea8>
		if(t <= t1){
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8001f82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <Trajectory_Evaluated+0x1e8>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fdb8 	bl	8000b00 <__aeabi_dcmple>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80de 	beq.w	8002154 <Trajectory_Evaluated+0x21c>
			setposition = initial_p + 1/6.0 * jmax * pow(t,3.0) * dir;
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <Trajectory_Evaluated+0x1ec>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fac9 	bl	8000534 <__aeabi_i2d>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fad6 	bl	8000558 <__aeabi_f2d>
 8001fac:	a356      	add	r3, pc, #344	; (adr r3, 8002108 <Trajectory_Evaluated+0x1d0>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb29 	bl	8000608 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4690      	mov	r8, r2
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	4b56      	ldr	r3, [pc, #344]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8001fc0:	ed93 7b00 	vldr	d7, [r3]
 8001fc4:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8002110 <Trajectory_Evaluated+0x1d8>
 8001fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fcc:	eef0 0a67 	vmov.f32	s1, s15
 8001fd0:	f009 f81a 	bl	800b008 <pow>
 8001fd4:	ec53 2b10 	vmov	r2, r3, d0
 8001fd8:	4640      	mov	r0, r8
 8001fda:	4649      	mov	r1, r9
 8001fdc:	f7fe fb14 	bl	8000608 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4690      	mov	r8, r2
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <Trajectory_Evaluated+0x1f0>)
 8001fea:	f993 3000 	ldrsb.w	r3, [r3]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe faa0 	bl	8000534 <__aeabi_i2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4640      	mov	r0, r8
 8001ffa:	4649      	mov	r1, r9
 8001ffc:	f7fe fb04 	bl	8000608 <__aeabi_dmul>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f7fe f948 	bl	800029c <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4946      	ldr	r1, [pc, #280]	; (800212c <Trajectory_Evaluated+0x1f4>)
 8002012:	e9c1 2300 	strd	r2, r3, [r1]
			velocity =  1/2.0 * jmax * t * t * dir;
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fa9e 	bl	8000558 <__aeabi_f2d>
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <Trajectory_Evaluated+0x1f8>)
 8002022:	f7fe faf1 	bl	8000608 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fae8 	bl	8000608 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fadf 	bl	8000608 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4614      	mov	r4, r2
 8002050:	461d      	mov	r5, r3
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <Trajectory_Evaluated+0x1f0>)
 8002054:	f993 3000 	ldrsb.w	r3, [r3]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa6b 	bl	8000534 <__aeabi_i2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4620      	mov	r0, r4
 8002064:	4629      	mov	r1, r5
 8002066:	f7fe facf 	bl	8000608 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4931      	ldr	r1, [pc, #196]	; (8002134 <Trajectory_Evaluated+0x1fc>)
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
            acceleration = jmax *t* dir;
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7fe fa6f 	bl	8000558 <__aeabi_f2d>
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <Trajectory_Evaluated+0x1e0>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fac2 	bl	8000608 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4614      	mov	r4, r2
 800208a:	461d      	mov	r5, r3
 800208c:	4b26      	ldr	r3, [pc, #152]	; (8002128 <Trajectory_Evaluated+0x1f0>)
 800208e:	f993 3000 	ldrsb.w	r3, [r3]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa4e 	bl	8000534 <__aeabi_i2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe fab2 	bl	8000608 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4923      	ldr	r1, [pc, #140]	; (8002138 <Trajectory_Evaluated+0x200>)
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
			p2 = setposition;
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <Trajectory_Evaluated+0x1f4>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	4921      	ldr	r1, [pc, #132]	; (800213c <Trajectory_Evaluated+0x204>)
 80020b6:	e9c1 2300 	strd	r2, r3, [r1]
			p1 = p2;
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <Trajectory_Evaluated+0x204>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	491f      	ldr	r1, [pc, #124]	; (8002140 <Trajectory_Evaluated+0x208>)
 80020c2:	e9c1 2300 	strd	r2, r3, [r1]
			v2 = velocity;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <Trajectory_Evaluated+0x1fc>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	491d      	ldr	r1, [pc, #116]	; (8002144 <Trajectory_Evaluated+0x20c>)
 80020ce:	e9c1 2300 	strd	r2, r3, [r1]
			v1 = v2;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <Trajectory_Evaluated+0x20c>)
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	491b      	ldr	r1, [pc, #108]	; (8002148 <Trajectory_Evaluated+0x210>)
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
			a2 = acceleration;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <Trajectory_Evaluated+0x200>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	4919      	ldr	r1, [pc, #100]	; (800214c <Trajectory_Evaluated+0x214>)
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
			a1 = a2;
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <Trajectory_Evaluated+0x214>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	4917      	ldr	r1, [pc, #92]	; (8002150 <Trajectory_Evaluated+0x218>)
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80020f6:	f000 be73 	b.w	8002de0 <Trajectory_Evaluated+0xea8>
 80020fa:	bf00      	nop
 80020fc:	f3af 8000 	nop.w
 8002100:	d2f1a9fc 	.word	0xd2f1a9fc
 8002104:	3f40624d 	.word	0x3f40624d
 8002108:	55555555 	.word	0x55555555
 800210c:	3fc55555 	.word	0x3fc55555
 8002110:	00000000 	.word	0x00000000
 8002114:	40080000 	.word	0x40080000
 8002118:	200003c0 	.word	0x200003c0
 800211c:	200003b8 	.word	0x200003b8
 8002120:	200003e0 	.word	0x200003e0
 8002124:	200003a8 	.word	0x200003a8
 8002128:	20000418 	.word	0x20000418
 800212c:	20000390 	.word	0x20000390
 8002130:	3fe00000 	.word	0x3fe00000
 8002134:	20000398 	.word	0x20000398
 8002138:	200003a0 	.word	0x200003a0
 800213c:	20000420 	.word	0x20000420
 8002140:	20000428 	.word	0x20000428
 8002144:	20000430 	.word	0x20000430
 8002148:	20000438 	.word	0x20000438
 800214c:	20000440 	.word	0x20000440
 8002150:	20000448 	.word	0x20000448
		else if (t1 < t && t <= t2){
 8002154:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <Trajectory_Evaluated+0x388>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <Trajectory_Evaluated+0x38c>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fcc4 	bl	8000aec <__aeabi_dcmplt>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80ca 	beq.w	8002300 <Trajectory_Evaluated+0x3c8>
 800216c:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <Trajectory_Evaluated+0x38c>)
 800216e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <Trajectory_Evaluated+0x390>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	f7fe fcc2 	bl	8000b00 <__aeabi_dcmple>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80be 	beq.w	8002300 <Trajectory_Evaluated+0x3c8>
			setposition =  p1 + v1 * (t - t1) + 1/2.0 * a1 * pow((t - t1),2.0);
 8002184:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <Trajectory_Evaluated+0x38c>)
 8002186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800218a:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <Trajectory_Evaluated+0x388>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f882 	bl	8000298 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <Trajectory_Evaluated+0x394>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe fa31 	bl	8000608 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <Trajectory_Evaluated+0x398>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe f872 	bl	800029c <__adddf3>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461d      	mov	r5, r3
 80021c0:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <Trajectory_Evaluated+0x39c>)
 80021c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <Trajectory_Evaluated+0x3a0>)
 80021cc:	f7fe fa1c 	bl	8000608 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4690      	mov	r8, r2
 80021d6:	4699      	mov	r9, r3
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <Trajectory_Evaluated+0x38c>)
 80021da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <Trajectory_Evaluated+0x388>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe f858 	bl	8000298 <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	ec43 2b17 	vmov	d7, r2, r3
 80021f0:	ed9f 1b31 	vldr	d1, [pc, #196]	; 80022b8 <Trajectory_Evaluated+0x380>
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	f008 ff04 	bl	800b008 <pow>
 8002200:	ec53 2b10 	vmov	r2, r3, d0
 8002204:	4640      	mov	r0, r8
 8002206:	4649      	mov	r1, r9
 8002208:	f7fe f9fe 	bl	8000608 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fe f842 	bl	800029c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	492f      	ldr	r1, [pc, #188]	; (80022dc <Trajectory_Evaluated+0x3a4>)
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
			velocity = v1 + a1*(t-t1);
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <Trajectory_Evaluated+0x38c>)
 8002224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <Trajectory_Evaluated+0x388>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe f833 	bl	8000298 <__aeabi_dsub>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <Trajectory_Evaluated+0x39c>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f9e2 	bl	8000608 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <Trajectory_Evaluated+0x394>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f823 	bl	800029c <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4921      	ldr	r1, [pc, #132]	; (80022e0 <Trajectory_Evaluated+0x3a8>)
 800225c:	e9c1 2300 	strd	r2, r3, [r1]
			acceleration = a1;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <Trajectory_Evaluated+0x39c>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	491f      	ldr	r1, [pc, #124]	; (80022e4 <Trajectory_Evaluated+0x3ac>)
 8002268:	e9c1 2300 	strd	r2, r3, [r1]
			p3 = setposition;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <Trajectory_Evaluated+0x3a4>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	491d      	ldr	r1, [pc, #116]	; (80022e8 <Trajectory_Evaluated+0x3b0>)
 8002274:	e9c1 2300 	strd	r2, r3, [r1]
			p2 = p3;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <Trajectory_Evaluated+0x3b0>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	491b      	ldr	r1, [pc, #108]	; (80022ec <Trajectory_Evaluated+0x3b4>)
 8002280:	e9c1 2300 	strd	r2, r3, [r1]
			v3 = velocity;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <Trajectory_Evaluated+0x3a8>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	4919      	ldr	r1, [pc, #100]	; (80022f0 <Trajectory_Evaluated+0x3b8>)
 800228c:	e9c1 2300 	strd	r2, r3, [r1]
			v2 = v3;
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <Trajectory_Evaluated+0x3b8>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	4917      	ldr	r1, [pc, #92]	; (80022f4 <Trajectory_Evaluated+0x3bc>)
 8002298:	e9c1 2300 	strd	r2, r3, [r1]
			a3 = acceleration;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <Trajectory_Evaluated+0x3ac>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	4915      	ldr	r1, [pc, #84]	; (80022f8 <Trajectory_Evaluated+0x3c0>)
 80022a4:	e9c1 2300 	strd	r2, r3, [r1]
			a2 = a3;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <Trajectory_Evaluated+0x3c0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	4913      	ldr	r1, [pc, #76]	; (80022fc <Trajectory_Evaluated+0x3c4>)
 80022b0:	e9c1 2300 	strd	r2, r3, [r1]
 80022b4:	f000 bd94 	b.w	8002de0 <Trajectory_Evaluated+0xea8>
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40000000 	.word	0x40000000
 80022c0:	200003e0 	.word	0x200003e0
 80022c4:	200003c0 	.word	0x200003c0
 80022c8:	200003e8 	.word	0x200003e8
 80022cc:	20000438 	.word	0x20000438
 80022d0:	20000428 	.word	0x20000428
 80022d4:	20000448 	.word	0x20000448
 80022d8:	3fe00000 	.word	0x3fe00000
 80022dc:	20000390 	.word	0x20000390
 80022e0:	20000398 	.word	0x20000398
 80022e4:	200003a0 	.word	0x200003a0
 80022e8:	20000450 	.word	0x20000450
 80022ec:	20000420 	.word	0x20000420
 80022f0:	20000458 	.word	0x20000458
 80022f4:	20000430 	.word	0x20000430
 80022f8:	20000460 	.word	0x20000460
 80022fc:	20000440 	.word	0x20000440
		else if (t2 <= t && t <= t3){
 8002300:	4bbd      	ldr	r3, [pc, #756]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 8002302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002306:	4bbd      	ldr	r3, [pc, #756]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe fbf8 	bl	8000b00 <__aeabi_dcmple>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 81a1 	beq.w	800265a <Trajectory_Evaluated+0x722>
 8002318:	4bb8      	ldr	r3, [pc, #736]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 800231a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231e:	4bb8      	ldr	r3, [pc, #736]	; (8002600 <Trajectory_Evaluated+0x6c8>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe fbec 	bl	8000b00 <__aeabi_dcmple>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8195 	beq.w	800265a <Trajectory_Evaluated+0x722>
			setposition = p2 + v2 * (t - t2) + 1/2.0 * a2 * pow((t - t2),2.0) + 1.0/6.0 * - jmax * dir * pow((t - t2),3.0);
 8002330:	4bb2      	ldr	r3, [pc, #712]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 8002332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002336:	4bb0      	ldr	r3, [pc, #704]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fd ffac 	bl	8000298 <__aeabi_dsub>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	4bae      	ldr	r3, [pc, #696]	; (8002604 <Trajectory_Evaluated+0x6cc>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fe f95b 	bl	8000608 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	4bab      	ldr	r3, [pc, #684]	; (8002608 <Trajectory_Evaluated+0x6d0>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fd ff9c 	bl	800029c <__adddf3>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4614      	mov	r4, r2
 800236a:	461d      	mov	r5, r3
 800236c:	4ba7      	ldr	r3, [pc, #668]	; (800260c <Trajectory_Evaluated+0x6d4>)
 800236e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4ba6      	ldr	r3, [pc, #664]	; (8002610 <Trajectory_Evaluated+0x6d8>)
 8002378:	f7fe f946 	bl	8000608 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4690      	mov	r8, r2
 8002382:	4699      	mov	r9, r3
 8002384:	4b9d      	ldr	r3, [pc, #628]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 8002386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800238a:	4b9b      	ldr	r3, [pc, #620]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fd ff82 	bl	8000298 <__aeabi_dsub>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	ec43 2b17 	vmov	d7, r2, r3
 800239c:	ed9f 1b90 	vldr	d1, [pc, #576]	; 80025e0 <Trajectory_Evaluated+0x6a8>
 80023a0:	eeb0 0a47 	vmov.f32	s0, s14
 80023a4:	eef0 0a67 	vmov.f32	s1, s15
 80023a8:	f008 fe2e 	bl	800b008 <pow>
 80023ac:	ec53 2b10 	vmov	r2, r3, d0
 80023b0:	4640      	mov	r0, r8
 80023b2:	4649      	mov	r1, r9
 80023b4:	f7fe f928 	bl	8000608 <__aeabi_dmul>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4620      	mov	r0, r4
 80023be:	4629      	mov	r1, r5
 80023c0:	f7fd ff6c 	bl	800029c <__adddf3>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4614      	mov	r4, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eef1 7a67 	vneg.f32	s15, s15
 80023d4:	ee17 3a90 	vmov	r3, s15
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8bd 	bl	8000558 <__aeabi_f2d>
 80023de:	a382      	add	r3, pc, #520	; (adr r3, 80025e8 <Trajectory_Evaluated+0x6b0>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe f910 	bl	8000608 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4690      	mov	r8, r2
 80023ee:	4699      	mov	r9, r3
 80023f0:	4b88      	ldr	r3, [pc, #544]	; (8002614 <Trajectory_Evaluated+0x6dc>)
 80023f2:	f993 3000 	ldrsb.w	r3, [r3]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f89c 	bl	8000534 <__aeabi_i2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4640      	mov	r0, r8
 8002402:	4649      	mov	r1, r9
 8002404:	f7fe f900 	bl	8000608 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4690      	mov	r8, r2
 800240e:	4699      	mov	r9, r3
 8002410:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 8002412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fd ff3c 	bl	8000298 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	ec43 2b17 	vmov	d7, r2, r3
 8002428:	ed9f 1b71 	vldr	d1, [pc, #452]	; 80025f0 <Trajectory_Evaluated+0x6b8>
 800242c:	eeb0 0a47 	vmov.f32	s0, s14
 8002430:	eef0 0a67 	vmov.f32	s1, s15
 8002434:	f008 fde8 	bl	800b008 <pow>
 8002438:	ec53 2b10 	vmov	r2, r3, d0
 800243c:	4640      	mov	r0, r8
 800243e:	4649      	mov	r1, r9
 8002440:	f7fe f8e2 	bl	8000608 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff26 	bl	800029c <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4970      	ldr	r1, [pc, #448]	; (8002618 <Trajectory_Evaluated+0x6e0>)
 8002456:	e9c1 2300 	strd	r2, r3, [r1]
			velocity = v2 + a2 * (t - t2) + 1/2.0 * -jmax * dir * pow((t - t2),2.0);
 800245a:	4b68      	ldr	r3, [pc, #416]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 800245c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002460:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fd ff17 	bl	8000298 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	4b66      	ldr	r3, [pc, #408]	; (800260c <Trajectory_Evaluated+0x6d4>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f8c6 	bl	8000608 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <Trajectory_Evaluated+0x6cc>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fd ff07 	bl	800029c <__adddf3>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4614      	mov	r4, r2
 8002494:	461d      	mov	r5, r3
 8002496:	edd7 7a01 	vldr	s15, [r7, #4]
 800249a:	eef1 7a67 	vneg.f32	s15, s15
 800249e:	ee17 3a90 	vmov	r3, s15
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f858 	bl	8000558 <__aeabi_f2d>
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	4b58      	ldr	r3, [pc, #352]	; (8002610 <Trajectory_Evaluated+0x6d8>)
 80024ae:	f7fe f8ab 	bl	8000608 <__aeabi_dmul>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4690      	mov	r8, r2
 80024b8:	4699      	mov	r9, r3
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <Trajectory_Evaluated+0x6dc>)
 80024bc:	f993 3000 	ldrsb.w	r3, [r3]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f837 	bl	8000534 <__aeabi_i2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4640      	mov	r0, r8
 80024cc:	4649      	mov	r1, r9
 80024ce:	f7fe f89b 	bl	8000608 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	4699      	mov	r9, r3
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fd fed7 	bl	8000298 <__aeabi_dsub>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ec43 2b17 	vmov	d7, r2, r3
 80024f2:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 80025e0 <Trajectory_Evaluated+0x6a8>
 80024f6:	eeb0 0a47 	vmov.f32	s0, s14
 80024fa:	eef0 0a67 	vmov.f32	s1, s15
 80024fe:	f008 fd83 	bl	800b008 <pow>
 8002502:	ec53 2b10 	vmov	r2, r3, d0
 8002506:	4640      	mov	r0, r8
 8002508:	4649      	mov	r1, r9
 800250a:	f7fe f87d 	bl	8000608 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fd fec1 	bl	800029c <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	493f      	ldr	r1, [pc, #252]	; (800261c <Trajectory_Evaluated+0x6e4>)
 8002520:	e9c1 2300 	strd	r2, r3, [r1]
			acceleration = a2 - (jmax * (t - t2))*dir;
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <Trajectory_Evaluated+0x6d4>)
 8002526:	e9d3 4500 	ldrd	r4, r5, [r3]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe f814 	bl	8000558 <__aeabi_f2d>
 8002530:	4680      	mov	r8, r0
 8002532:	4689      	mov	r9, r1
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <Trajectory_Evaluated+0x6c4>)
 8002536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <Trajectory_Evaluated+0x6c0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fd feaa 	bl	8000298 <__aeabi_dsub>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4640      	mov	r0, r8
 800254a:	4649      	mov	r1, r9
 800254c:	f7fe f85c 	bl	8000608 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4690      	mov	r8, r2
 8002556:	4699      	mov	r9, r3
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <Trajectory_Evaluated+0x6dc>)
 800255a:	f993 3000 	ldrsb.w	r3, [r3]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ffe8 	bl	8000534 <__aeabi_i2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4640      	mov	r0, r8
 800256a:	4649      	mov	r1, r9
 800256c:	f7fe f84c 	bl	8000608 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4620      	mov	r0, r4
 8002576:	4629      	mov	r1, r5
 8002578:	f7fd fe8e 	bl	8000298 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4927      	ldr	r1, [pc, #156]	; (8002620 <Trajectory_Evaluated+0x6e8>)
 8002582:	e9c1 2300 	strd	r2, r3, [r1]
			p6 = setposition;
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <Trajectory_Evaluated+0x6e0>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	4925      	ldr	r1, [pc, #148]	; (8002624 <Trajectory_Evaluated+0x6ec>)
 800258e:	e9c1 2300 	strd	r2, r3, [r1]
			p4 = p6;
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <Trajectory_Evaluated+0x6ec>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	4923      	ldr	r1, [pc, #140]	; (8002628 <Trajectory_Evaluated+0x6f0>)
 800259a:	e9c1 2300 	strd	r2, r3, [r1]
			p3 = p4;
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <Trajectory_Evaluated+0x6f0>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	4921      	ldr	r1, [pc, #132]	; (800262c <Trajectory_Evaluated+0x6f4>)
 80025a6:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = velocity;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <Trajectory_Evaluated+0x6e4>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	491f      	ldr	r1, [pc, #124]	; (8002630 <Trajectory_Evaluated+0x6f8>)
 80025b2:	e9c1 2300 	strd	r2, r3, [r1]
			v4 = v6;
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <Trajectory_Evaluated+0x6f8>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	491d      	ldr	r1, [pc, #116]	; (8002634 <Trajectory_Evaluated+0x6fc>)
 80025be:	e9c1 2300 	strd	r2, r3, [r1]
			v3 = v4;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <Trajectory_Evaluated+0x6fc>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	491b      	ldr	r1, [pc, #108]	; (8002638 <Trajectory_Evaluated+0x700>)
 80025ca:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = acceleration;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <Trajectory_Evaluated+0x6e8>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	4919      	ldr	r1, [pc, #100]	; (800263c <Trajectory_Evaluated+0x704>)
 80025d6:	e9c1 2300 	strd	r2, r3, [r1]
 80025da:	e031      	b.n	8002640 <Trajectory_Evaluated+0x708>
 80025dc:	f3af 8000 	nop.w
 80025e0:	00000000 	.word	0x00000000
 80025e4:	40000000 	.word	0x40000000
 80025e8:	55555555 	.word	0x55555555
 80025ec:	3fc55555 	.word	0x3fc55555
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40080000 	.word	0x40080000
 80025f8:	200003e8 	.word	0x200003e8
 80025fc:	200003c0 	.word	0x200003c0
 8002600:	200003f0 	.word	0x200003f0
 8002604:	20000430 	.word	0x20000430
 8002608:	20000420 	.word	0x20000420
 800260c:	20000440 	.word	0x20000440
 8002610:	3fe00000 	.word	0x3fe00000
 8002614:	20000418 	.word	0x20000418
 8002618:	20000390 	.word	0x20000390
 800261c:	20000398 	.word	0x20000398
 8002620:	200003a0 	.word	0x200003a0
 8002624:	20000468 	.word	0x20000468
 8002628:	20000470 	.word	0x20000470
 800262c:	20000450 	.word	0x20000450
 8002630:	20000478 	.word	0x20000478
 8002634:	20000480 	.word	0x20000480
 8002638:	20000458 	.word	0x20000458
 800263c:	20000488 	.word	0x20000488
			a4 = a6;
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <Trajectory_Evaluated+0x7f0>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	4939      	ldr	r1, [pc, #228]	; (800272c <Trajectory_Evaluated+0x7f4>)
 8002648:	e9c1 2300 	strd	r2, r3, [r1]
			a3 = a4;
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <Trajectory_Evaluated+0x7f4>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	4937      	ldr	r1, [pc, #220]	; (8002730 <Trajectory_Evaluated+0x7f8>)
 8002654:	e9c1 2300 	strd	r2, r3, [r1]
 8002658:	e3c2      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
		else if (t3 < t && t < t4){
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <Trajectory_Evaluated+0x7fc>)
 800265c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <Trajectory_Evaluated+0x800>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fe fa41 	bl	8000aec <__aeabi_dcmplt>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d07b      	beq.n	8002768 <Trajectory_Evaluated+0x830>
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <Trajectory_Evaluated+0x800>)
 8002672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <Trajectory_Evaluated+0x804>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fe fa36 	bl	8000aec <__aeabi_dcmplt>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d070      	beq.n	8002768 <Trajectory_Evaluated+0x830>
			setposition = p3 + v3 * (t - t3);
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <Trajectory_Evaluated+0x800>)
 8002688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <Trajectory_Evaluated+0x7fc>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fd fe01 	bl	8000298 <__aeabi_dsub>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <Trajectory_Evaluated+0x808>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ffb0 	bl	8000608 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <Trajectory_Evaluated+0x80c>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fd fdf1 	bl	800029c <__adddf3>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4922      	ldr	r1, [pc, #136]	; (8002748 <Trajectory_Evaluated+0x810>)
 80026c0:	e9c1 2300 	strd	r2, r3, [r1]
			velocity = v3;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <Trajectory_Evaluated+0x808>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	4920      	ldr	r1, [pc, #128]	; (800274c <Trajectory_Evaluated+0x814>)
 80026cc:	e9c1 2300 	strd	r2, r3, [r1]
			acceleration = 0;
 80026d0:	491f      	ldr	r1, [pc, #124]	; (8002750 <Trajectory_Evaluated+0x818>)
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9c1 2300 	strd	r2, r3, [r1]
			p5 = setposition;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <Trajectory_Evaluated+0x810>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	491b      	ldr	r1, [pc, #108]	; (8002754 <Trajectory_Evaluated+0x81c>)
 80026e6:	e9c1 2300 	strd	r2, r3, [r1]
			p4 = p5;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <Trajectory_Evaluated+0x81c>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	4919      	ldr	r1, [pc, #100]	; (8002758 <Trajectory_Evaluated+0x820>)
 80026f2:	e9c1 2300 	strd	r2, r3, [r1]
			v5 = velocity;
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <Trajectory_Evaluated+0x814>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	4917      	ldr	r1, [pc, #92]	; (800275c <Trajectory_Evaluated+0x824>)
 80026fe:	e9c1 2300 	strd	r2, r3, [r1]
			v4 = v5;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <Trajectory_Evaluated+0x824>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	4915      	ldr	r1, [pc, #84]	; (8002760 <Trajectory_Evaluated+0x828>)
 800270a:	e9c1 2300 	strd	r2, r3, [r1]
			a5 = acceleration;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <Trajectory_Evaluated+0x818>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	4913      	ldr	r1, [pc, #76]	; (8002764 <Trajectory_Evaluated+0x82c>)
 8002716:	e9c1 2300 	strd	r2, r3, [r1]
			a4 = a5;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <Trajectory_Evaluated+0x82c>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	4902      	ldr	r1, [pc, #8]	; (800272c <Trajectory_Evaluated+0x7f4>)
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
 8002726:	e35b      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
 8002728:	20000488 	.word	0x20000488
 800272c:	20000490 	.word	0x20000490
 8002730:	20000460 	.word	0x20000460
 8002734:	200003f0 	.word	0x200003f0
 8002738:	200003c0 	.word	0x200003c0
 800273c:	200003f8 	.word	0x200003f8
 8002740:	20000458 	.word	0x20000458
 8002744:	20000450 	.word	0x20000450
 8002748:	20000390 	.word	0x20000390
 800274c:	20000398 	.word	0x20000398
 8002750:	200003a0 	.word	0x200003a0
 8002754:	20000498 	.word	0x20000498
 8002758:	20000470 	.word	0x20000470
 800275c:	200004a0 	.word	0x200004a0
 8002760:	20000480 	.word	0x20000480
 8002764:	200004a8 	.word	0x200004a8
		else if (t4 <= t && t <= t5){
 8002768:	4b93      	ldr	r3, [pc, #588]	; (80029b8 <Trajectory_Evaluated+0xa80>)
 800276a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800276e:	4b93      	ldr	r3, [pc, #588]	; (80029bc <Trajectory_Evaluated+0xa84>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fe f9c4 	bl	8000b00 <__aeabi_dcmple>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 813c 	beq.w	80029f8 <Trajectory_Evaluated+0xac0>
 8002780:	4b8e      	ldr	r3, [pc, #568]	; (80029bc <Trajectory_Evaluated+0xa84>)
 8002782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002786:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <Trajectory_Evaluated+0xa88>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f7fe f9b8 	bl	8000b00 <__aeabi_dcmple>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8130 	beq.w	80029f8 <Trajectory_Evaluated+0xac0>
			setposition = p4 + v4 * (t - t4) + (1.0/6.0) * dir *- jmax * pow((t - t4),3.0);
 8002798:	4b88      	ldr	r3, [pc, #544]	; (80029bc <Trajectory_Evaluated+0xa84>)
 800279a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800279e:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <Trajectory_Evaluated+0xa80>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd fd78 	bl	8000298 <__aeabi_dsub>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <Trajectory_Evaluated+0xa8c>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fd ff27 	bl	8000608 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <Trajectory_Evaluated+0xa90>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd fd68 	bl	800029c <__adddf3>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4614      	mov	r4, r2
 80027d2:	461d      	mov	r5, r3
 80027d4:	4b7d      	ldr	r3, [pc, #500]	; (80029cc <Trajectory_Evaluated+0xa94>)
 80027d6:	f993 3000 	ldrsb.w	r3, [r3]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd feaa 	bl	8000534 <__aeabi_i2d>
 80027e0:	a36f      	add	r3, pc, #444	; (adr r3, 80029a0 <Trajectory_Evaluated+0xa68>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd ff0f 	bl	8000608 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4690      	mov	r8, r2
 80027f0:	4699      	mov	r9, r3
 80027f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f6:	eef1 7a67 	vneg.f32	s15, s15
 80027fa:	ee17 3a90 	vmov	r3, s15
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd feaa 	bl	8000558 <__aeabi_f2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4640      	mov	r0, r8
 800280a:	4649      	mov	r1, r9
 800280c:	f7fd fefc 	bl	8000608 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4690      	mov	r8, r2
 8002816:	4699      	mov	r9, r3
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <Trajectory_Evaluated+0xa84>)
 800281a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281e:	4b66      	ldr	r3, [pc, #408]	; (80029b8 <Trajectory_Evaluated+0xa80>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fd38 	bl	8000298 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	ec43 2b17 	vmov	d7, r2, r3
 8002830:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 80029a8 <Trajectory_Evaluated+0xa70>
 8002834:	eeb0 0a47 	vmov.f32	s0, s14
 8002838:	eef0 0a67 	vmov.f32	s1, s15
 800283c:	f008 fbe4 	bl	800b008 <pow>
 8002840:	ec53 2b10 	vmov	r2, r3, d0
 8002844:	4640      	mov	r0, r8
 8002846:	4649      	mov	r1, r9
 8002848:	f7fd fede 	bl	8000608 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fd22 	bl	800029c <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	495c      	ldr	r1, [pc, #368]	; (80029d0 <Trajectory_Evaluated+0xa98>)
 800285e:	e9c1 2300 	strd	r2, r3, [r1]
			velocity = v4 + 1.0/2.0 * - jmax * dir * pow((t - t4),2.0);
 8002862:	edd7 7a01 	vldr	s15, [r7, #4]
 8002866:	eef1 7a67 	vneg.f32	s15, s15
 800286a:	ee17 3a90 	vmov	r3, s15
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe72 	bl	8000558 <__aeabi_f2d>
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <Trajectory_Evaluated+0xa9c>)
 800287a:	f7fd fec5 	bl	8000608 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4614      	mov	r4, r2
 8002884:	461d      	mov	r5, r3
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <Trajectory_Evaluated+0xa94>)
 8002888:	f993 3000 	ldrsb.w	r3, [r3]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe51 	bl	8000534 <__aeabi_i2d>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fd feb5 	bl	8000608 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	461d      	mov	r5, r3
 80028a6:	4b45      	ldr	r3, [pc, #276]	; (80029bc <Trajectory_Evaluated+0xa84>)
 80028a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <Trajectory_Evaluated+0xa80>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fcf1 	bl	8000298 <__aeabi_dsub>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	ec43 2b17 	vmov	d7, r2, r3
 80028be:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 80029b0 <Trajectory_Evaluated+0xa78>
 80028c2:	eeb0 0a47 	vmov.f32	s0, s14
 80028c6:	eef0 0a67 	vmov.f32	s1, s15
 80028ca:	f008 fb9d 	bl	800b008 <pow>
 80028ce:	ec53 2b10 	vmov	r2, r3, d0
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fe97 	bl	8000608 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <Trajectory_Evaluated+0xa8c>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fcd8 	bl	800029c <__adddf3>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4939      	ldr	r1, [pc, #228]	; (80029d8 <Trajectory_Evaluated+0xaa0>)
 80028f2:	e9c1 2300 	strd	r2, r3, [r1]
			acceleration = (-jmax * (t - t4))*dir;
 80028f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fa:	eef1 7a67 	vneg.f32	s15, s15
 80028fe:	ee17 3a90 	vmov	r3, s15
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe28 	bl	8000558 <__aeabi_f2d>
 8002908:	4604      	mov	r4, r0
 800290a:	460d      	mov	r5, r1
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <Trajectory_Evaluated+0xa84>)
 800290e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <Trajectory_Evaluated+0xa80>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fcbe 	bl	8000298 <__aeabi_dsub>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fe70 	bl	8000608 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4614      	mov	r4, r2
 800292e:	461d      	mov	r5, r3
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <Trajectory_Evaluated+0xa94>)
 8002932:	f993 3000 	ldrsb.w	r3, [r3]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fdfc 	bl	8000534 <__aeabi_i2d>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fe60 	bl	8000608 <__aeabi_dmul>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4923      	ldr	r1, [pc, #140]	; (80029dc <Trajectory_Evaluated+0xaa4>)
 800294e:	e9c1 2300 	strd	r2, r3, [r1]
			p6 = setposition;
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <Trajectory_Evaluated+0xa98>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	4921      	ldr	r1, [pc, #132]	; (80029e0 <Trajectory_Evaluated+0xaa8>)
 800295a:	e9c1 2300 	strd	r2, r3, [r1]
			p5 = p6;
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <Trajectory_Evaluated+0xaa8>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	491f      	ldr	r1, [pc, #124]	; (80029e4 <Trajectory_Evaluated+0xaac>)
 8002966:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = velocity;
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <Trajectory_Evaluated+0xaa0>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	491d      	ldr	r1, [pc, #116]	; (80029e8 <Trajectory_Evaluated+0xab0>)
 8002972:	e9c1 2300 	strd	r2, r3, [r1]
			v5 = v6;
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <Trajectory_Evaluated+0xab0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	491b      	ldr	r1, [pc, #108]	; (80029ec <Trajectory_Evaluated+0xab4>)
 800297e:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = acceleration;
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <Trajectory_Evaluated+0xaa4>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	4919      	ldr	r1, [pc, #100]	; (80029f0 <Trajectory_Evaluated+0xab8>)
 800298a:	e9c1 2300 	strd	r2, r3, [r1]
			a5 = a6;
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <Trajectory_Evaluated+0xab8>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	4917      	ldr	r1, [pc, #92]	; (80029f4 <Trajectory_Evaluated+0xabc>)
 8002996:	e9c1 2300 	strd	r2, r3, [r1]
 800299a:	e221      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
 800299c:	f3af 8000 	nop.w
 80029a0:	55555555 	.word	0x55555555
 80029a4:	3fc55555 	.word	0x3fc55555
 80029a8:	00000000 	.word	0x00000000
 80029ac:	40080000 	.word	0x40080000
 80029b0:	00000000 	.word	0x00000000
 80029b4:	40000000 	.word	0x40000000
 80029b8:	200003f8 	.word	0x200003f8
 80029bc:	200003c0 	.word	0x200003c0
 80029c0:	20000400 	.word	0x20000400
 80029c4:	20000480 	.word	0x20000480
 80029c8:	20000470 	.word	0x20000470
 80029cc:	20000418 	.word	0x20000418
 80029d0:	20000390 	.word	0x20000390
 80029d4:	3fe00000 	.word	0x3fe00000
 80029d8:	20000398 	.word	0x20000398
 80029dc:	200003a0 	.word	0x200003a0
 80029e0:	20000468 	.word	0x20000468
 80029e4:	20000498 	.word	0x20000498
 80029e8:	20000478 	.word	0x20000478
 80029ec:	200004a0 	.word	0x200004a0
 80029f0:	20000488 	.word	0x20000488
 80029f4:	200004a8 	.word	0x200004a8
		else if (t5 < t && t <= t6){
 80029f8:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <Trajectory_Evaluated+0xc38>)
 80029fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fe f872 	bl	8000aec <__aeabi_dcmplt>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8093 	beq.w	8002b36 <Trajectory_Evaluated+0xbfe>
 8002a10:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a16:	4b58      	ldr	r3, [pc, #352]	; (8002b78 <Trajectory_Evaluated+0xc40>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fe f870 	bl	8000b00 <__aeabi_dcmple>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <Trajectory_Evaluated+0xbfe>
			setposition = p5 + v5 * (t - t5) + 1/2.0 * a5 * pow((t - t5),2.0);
 8002a28:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a2e:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <Trajectory_Evaluated+0xc38>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fc30 	bl	8000298 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <Trajectory_Evaluated+0xc44>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fd fddf 	bl	8000608 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <Trajectory_Evaluated+0xc48>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fc20 	bl	800029c <__adddf3>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	461d      	mov	r5, r3
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <Trajectory_Evaluated+0xc4c>)
 8002a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <Trajectory_Evaluated+0xc50>)
 8002a70:	f7fd fdca 	bl	8000608 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4690      	mov	r8, r2
 8002a7a:	4699      	mov	r9, r3
 8002a7c:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <Trajectory_Evaluated+0xc38>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fc06 	bl	8000298 <__aeabi_dsub>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	ec43 2b17 	vmov	d7, r2, r3
 8002a94:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002b68 <Trajectory_Evaluated+0xc30>
 8002a98:	eeb0 0a47 	vmov.f32	s0, s14
 8002a9c:	eef0 0a67 	vmov.f32	s1, s15
 8002aa0:	f008 fab2 	bl	800b008 <pow>
 8002aa4:	ec53 2b10 	vmov	r2, r3, d0
 8002aa8:	4640      	mov	r0, r8
 8002aaa:	4649      	mov	r1, r9
 8002aac:	f7fd fdac 	bl	8000608 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	f7fd fbf0 	bl	800029c <__adddf3>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4932      	ldr	r1, [pc, #200]	; (8002b8c <Trajectory_Evaluated+0xc54>)
 8002ac2:	e9c1 2300 	strd	r2, r3, [r1]
			velocity = v5 + a5 * (t - t5);
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002acc:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <Trajectory_Evaluated+0xc38>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd fbe1 	bl	8000298 <__aeabi_dsub>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <Trajectory_Evaluated+0xc4c>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd fd90 	bl	8000608 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <Trajectory_Evaluated+0xc44>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fbd1 	bl	800029c <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4924      	ldr	r1, [pc, #144]	; (8002b90 <Trajectory_Evaluated+0xc58>)
 8002b00:	e9c1 2300 	strd	r2, r3, [r1]
			acceleration = a5;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <Trajectory_Evaluated+0xc4c>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	4922      	ldr	r1, [pc, #136]	; (8002b94 <Trajectory_Evaluated+0xc5c>)
 8002b0c:	e9c1 2300 	strd	r2, r3, [r1]
			p6 = setposition;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <Trajectory_Evaluated+0xc54>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	4920      	ldr	r1, [pc, #128]	; (8002b98 <Trajectory_Evaluated+0xc60>)
 8002b18:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = velocity;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <Trajectory_Evaluated+0xc58>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	491e      	ldr	r1, [pc, #120]	; (8002b9c <Trajectory_Evaluated+0xc64>)
 8002b24:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = acceleration;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <Trajectory_Evaluated+0xc5c>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	491c      	ldr	r1, [pc, #112]	; (8002ba0 <Trajectory_Evaluated+0xc68>)
 8002b30:	e9c1 2300 	strd	r2, r3, [r1]
 8002b34:	e154      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
		else if (t6 < t && t <= t7){
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <Trajectory_Evaluated+0xc40>)
 8002b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd ffd3 	bl	8000aec <__aeabi_dcmplt>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d100      	bne.n	8002b4e <Trajectory_Evaluated+0xc16>
}
 8002b4c:	e148      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
		else if (t6 < t && t <= t7){
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <Trajectory_Evaluated+0xc3c>)
 8002b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <Trajectory_Evaluated+0xc6c>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd ffd1 	bl	8000b00 <__aeabi_dcmple>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d121      	bne.n	8002ba8 <Trajectory_Evaluated+0xc70>
}
 8002b64:	e13c      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
 8002b66:	bf00      	nop
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	40000000 	.word	0x40000000
 8002b70:	20000400 	.word	0x20000400
 8002b74:	200003c0 	.word	0x200003c0
 8002b78:	20000408 	.word	0x20000408
 8002b7c:	200004a0 	.word	0x200004a0
 8002b80:	20000498 	.word	0x20000498
 8002b84:	200004a8 	.word	0x200004a8
 8002b88:	3fe00000 	.word	0x3fe00000
 8002b8c:	20000390 	.word	0x20000390
 8002b90:	20000398 	.word	0x20000398
 8002b94:	200003a0 	.word	0x200003a0
 8002b98:	20000468 	.word	0x20000468
 8002b9c:	20000478 	.word	0x20000478
 8002ba0:	20000488 	.word	0x20000488
 8002ba4:	20000410 	.word	0x20000410
			setposition = p6 + v6 * (t - t6) + 1.0/2.0 * a6 * pow((t - t6),2) + 1/6.0 * jmax* dir * pow((t - t6),3);
 8002ba8:	4b97      	ldr	r3, [pc, #604]	; (8002e08 <Trajectory_Evaluated+0xed0>)
 8002baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bae:	4b97      	ldr	r3, [pc, #604]	; (8002e0c <Trajectory_Evaluated+0xed4>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fb70 	bl	8000298 <__aeabi_dsub>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4b93      	ldr	r3, [pc, #588]	; (8002e10 <Trajectory_Evaluated+0xed8>)
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f7fd fd1f 	bl	8000608 <__aeabi_dmul>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <Trajectory_Evaluated+0xedc>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd fb60 	bl	800029c <__adddf3>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4614      	mov	r4, r2
 8002be2:	461d      	mov	r5, r3
 8002be4:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <Trajectory_Evaluated+0xee0>)
 8002be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <Trajectory_Evaluated+0xee4>)
 8002bf0:	f7fd fd0a 	bl	8000608 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4690      	mov	r8, r2
 8002bfa:	4699      	mov	r9, r3
 8002bfc:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <Trajectory_Evaluated+0xed0>)
 8002bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c02:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <Trajectory_Evaluated+0xed4>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fb46 	bl	8000298 <__aeabi_dsub>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	ec43 2b17 	vmov	d7, r2, r3
 8002c14:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8002df0 <Trajectory_Evaluated+0xeb8>
 8002c18:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1c:	eef0 0a67 	vmov.f32	s1, s15
 8002c20:	f008 f9f2 	bl	800b008 <pow>
 8002c24:	ec53 2b10 	vmov	r2, r3, d0
 8002c28:	4640      	mov	r0, r8
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	f7fd fcec 	bl	8000608 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4620      	mov	r0, r4
 8002c36:	4629      	mov	r1, r5
 8002c38:	f7fd fb30 	bl	800029c <__adddf3>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fd fc87 	bl	8000558 <__aeabi_f2d>
 8002c4a:	a36b      	add	r3, pc, #428	; (adr r3, 8002df8 <Trajectory_Evaluated+0xec0>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f7fd fcda 	bl	8000608 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4690      	mov	r8, r2
 8002c5a:	4699      	mov	r9, r3
 8002c5c:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <Trajectory_Evaluated+0xee8>)
 8002c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc66 	bl	8000534 <__aeabi_i2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	4649      	mov	r1, r9
 8002c70:	f7fd fcca 	bl	8000608 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4690      	mov	r8, r2
 8002c7a:	4699      	mov	r9, r3
 8002c7c:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <Trajectory_Evaluated+0xed0>)
 8002c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <Trajectory_Evaluated+0xed4>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fb06 	bl	8000298 <__aeabi_dsub>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	ec43 2b17 	vmov	d7, r2, r3
 8002c94:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8002e00 <Trajectory_Evaluated+0xec8>
 8002c98:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ca0:	f008 f9b2 	bl	800b008 <pow>
 8002ca4:	ec53 2b10 	vmov	r2, r3, d0
 8002ca8:	4640      	mov	r0, r8
 8002caa:	4649      	mov	r1, r9
 8002cac:	f7fd fcac 	bl	8000608 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	f7fd faf0 	bl	800029c <__adddf3>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4958      	ldr	r1, [pc, #352]	; (8002e24 <Trajectory_Evaluated+0xeec>)
 8002cc2:	e9c1 2300 	strd	r2, r3, [r1]
			velocity = v6 + a6 * (t - t6) + 1.0/2.0 * jmax*dir * pow((t - t6),2);
 8002cc6:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <Trajectory_Evaluated+0xed0>)
 8002cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <Trajectory_Evaluated+0xed4>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd fae1 	bl	8000298 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <Trajectory_Evaluated+0xee0>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	f7fd fc90 	bl	8000608 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <Trajectory_Evaluated+0xed8>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fad1 	bl	800029c <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4614      	mov	r4, r2
 8002d00:	461d      	mov	r5, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fc28 	bl	8000558 <__aeabi_f2d>
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <Trajectory_Evaluated+0xee4>)
 8002d0e:	f7fd fc7b 	bl	8000608 <__aeabi_dmul>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4690      	mov	r8, r2
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <Trajectory_Evaluated+0xee8>)
 8002d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc07 	bl	8000534 <__aeabi_i2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	f7fd fc6b 	bl	8000608 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <Trajectory_Evaluated+0xed0>)
 8002d3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <Trajectory_Evaluated+0xed4>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd faa7 	bl	8000298 <__aeabi_dsub>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	ec43 2b17 	vmov	d7, r2, r3
 8002d52:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8002df0 <Trajectory_Evaluated+0xeb8>
 8002d56:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5a:	eef0 0a67 	vmov.f32	s1, s15
 8002d5e:	f008 f953 	bl	800b008 <pow>
 8002d62:	ec53 2b10 	vmov	r2, r3, d0
 8002d66:	4640      	mov	r0, r8
 8002d68:	4649      	mov	r1, r9
 8002d6a:	f7fd fc4d 	bl	8000608 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f7fd fa91 	bl	800029c <__adddf3>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	492a      	ldr	r1, [pc, #168]	; (8002e28 <Trajectory_Evaluated+0xef0>)
 8002d80:	e9c1 2300 	strd	r2, r3, [r1]
			acceleration = a6 + dir *jmax * (t - t6);
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <Trajectory_Evaluated+0xee8>)
 8002d86:	f993 3000 	ldrsb.w	r3, [r3]
 8002d8a:	ee07 3a90 	vmov	s15, r3
 8002d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fbdb 	bl	8000558 <__aeabi_f2d>
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <Trajectory_Evaluated+0xed0>)
 8002da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dac:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <Trajectory_Evaluated+0xed4>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fa71 	bl	8000298 <__aeabi_dsub>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4620      	mov	r0, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7fd fc23 	bl	8000608 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <Trajectory_Evaluated+0xee0>)
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f7fd fa64 	bl	800029c <__adddf3>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4914      	ldr	r1, [pc, #80]	; (8002e2c <Trajectory_Evaluated+0xef4>)
 8002dda:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002dde:	e7ff      	b.n	8002de0 <Trajectory_Evaluated+0xea8>
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dea:	bf00      	nop
 8002dec:	f3af 8000 	nop.w
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40000000 	.word	0x40000000
 8002df8:	55555555 	.word	0x55555555
 8002dfc:	3fc55555 	.word	0x3fc55555
 8002e00:	00000000 	.word	0x00000000
 8002e04:	40080000 	.word	0x40080000
 8002e08:	200003c0 	.word	0x200003c0
 8002e0c:	20000408 	.word	0x20000408
 8002e10:	20000478 	.word	0x20000478
 8002e14:	20000468 	.word	0x20000468
 8002e18:	20000488 	.word	0x20000488
 8002e1c:	3fe00000 	.word	0x3fe00000
 8002e20:	20000418 	.word	0x20000418
 8002e24:	20000390 	.word	0x20000390
 8002e28:	20000398 	.word	0x20000398
 8002e2c:	200003a0 	.word	0x200003a0

08002e30 <Trajectory_Algolithms>:

void Trajectory_Algolithms(){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	target_p = Target_set;
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <Trajectory_Algolithms+0xd4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <Trajectory_Algolithms+0xd8>)
 8002e3a:	6013      	str	r3, [r2, #0]
	if(target_p != Ltarget_p){
 8002e3c:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <Trajectory_Algolithms+0xd8>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <Trajectory_Algolithms+0xdc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d01e      	beq.n	8002e86 <Trajectory_Algolithms+0x56>
		t = 0;
 8002e48:	4931      	ldr	r1, [pc, #196]	; (8002f10 <Trajectory_Algolithms+0xe0>)
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9c1 2300 	strd	r2, r3, [r1]
		initial_p = setposition;
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <Trajectory_Algolithms+0xe4>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7fd fe82 	bl	8000b68 <__aeabi_d2iz>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <Trajectory_Algolithms+0xe8>)
 8002e68:	6013      	str	r3, [r2, #0]
		Trajectory_Generator(initial_p,target_p,600,1000,2500); //650,2000,7000
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <Trajectory_Algolithms+0xe8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <Trajectory_Algolithms+0xd8>)
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8002f1c <Trajectory_Algolithms+0xec>
 8002e76:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002f20 <Trajectory_Algolithms+0xf0>
 8002e7a:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002f24 <Trajectory_Algolithms+0xf4>
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fca1 	bl	80017c8 <Trajectory_Generator>
	}
	if(t <= time_total){
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <Trajectory_Algolithms+0xe0>)
 8002e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <Trajectory_Algolithms+0xf8>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fe35 	bl	8000b00 <__aeabi_dcmple>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <Trajectory_Algolithms+0x7c>
		Trajectory_Evaluated(600,1000,2500); //600,1000,2500
 8002e9c:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8002f1c <Trajectory_Algolithms+0xec>
 8002ea0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002f20 <Trajectory_Algolithms+0xf0>
 8002ea4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002f24 <Trajectory_Algolithms+0xf4>
 8002ea8:	f7ff f846 	bl	8001f38 <Trajectory_Evaluated>
	}

	if (t >= time_total){//((setposition - QEIposition <= 1) && (setposition - QEIposition >= -1) && (t >= time_total)){
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <Trajectory_Algolithms+0xe0>)
 8002eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <Trajectory_Algolithms+0xf8>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd fe2c 	bl	8000b14 <__aeabi_dcmpge>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01a      	beq.n	8002ef8 <Trajectory_Algolithms+0xc8>
//		i += 1;
//		Target_set = dataset[i%20];
		setposition = Target_set;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <Trajectory_Algolithms+0xd4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb34 	bl	8000534 <__aeabi_i2d>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4910      	ldr	r1, [pc, #64]	; (8002f14 <Trajectory_Algolithms+0xe4>)
 8002ed2:	e9c1 2300 	strd	r2, r3, [r1]
		velocity = 0;
 8002ed6:	4915      	ldr	r1, [pc, #84]	; (8002f2c <Trajectory_Algolithms+0xfc>)
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9c1 2300 	strd	r2, r3, [r1]
		acceleration = 0;
 8002ee4:	4912      	ldr	r1, [pc, #72]	; (8002f30 <Trajectory_Algolithms+0x100>)
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9c1 2300 	strd	r2, r3, [r1]
		PWM = 0;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <Trajectory_Algolithms+0x104>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
	}
	Ltarget_p  = target_p;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <Trajectory_Algolithms+0xd8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <Trajectory_Algolithms+0xdc>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200003b4 	.word	0x200003b4
 8002f08:	200003ac 	.word	0x200003ac
 8002f0c:	200003b0 	.word	0x200003b0
 8002f10:	200003c0 	.word	0x200003c0
 8002f14:	20000390 	.word	0x20000390
 8002f18:	200003a8 	.word	0x200003a8
 8002f1c:	451c4000 	.word	0x451c4000
 8002f20:	447a0000 	.word	0x447a0000
 8002f24:	44160000 	.word	0x44160000
 8002f28:	200003b8 	.word	0x200003b8
 8002f2c:	20000398 	.word	0x20000398
 8002f30:	200003a0 	.word	0x200003a0
 8002f34:	20000378 	.word	0x20000378

08002f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f3c:	b672      	cpsid	i
}
 8002f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <Error_Handler+0x8>
	...

08002f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_MspInit+0x4c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HAL_MspInit+0x4c>)
 8002f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f58:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_MspInit+0x4c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_MspInit+0x4c>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <HAL_MspInit+0x4c>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_MspInit+0x4c>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f82:	2007      	movs	r0, #7
 8002f84:	f000 fb96 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_TIM_Base_MspInit+0x70>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_TIM_Base_MspInit+0x74>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a16      	ldr	r2, [pc, #88]	; (8003008 <HAL_TIM_Base_MspInit+0x74>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_TIM_Base_MspInit+0x74>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fc2:	e01a      	b.n	8002ffa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_TIM_Base_MspInit+0x78>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d115      	bne.n	8002ffa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_TIM_Base_MspInit+0x74>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_TIM_Base_MspInit+0x74>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_TIM_Base_MspInit+0x74>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	201d      	movs	r0, #29
 8002ff0:	f000 fb6b 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ff4:	201d      	movs	r0, #29
 8002ff6:	f000 fb84 	bl	8003702 <HAL_NVIC_EnableIRQ>
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40010000 	.word	0x40010000
 8003008:	40023800 	.word	0x40023800
 800300c:	40000400 	.word	0x40000400

08003010 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003030:	d12b      	bne.n	800308a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <HAL_TIM_Encoder_MspInit+0x84>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_TIM_Encoder_MspInit+0x84>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_TIM_Encoder_MspInit+0x84>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_TIM_Encoder_MspInit+0x84>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <HAL_TIM_Encoder_MspInit+0x84>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_TIM_Encoder_MspInit+0x84>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800306a:	2303      	movs	r3, #3
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003072:	2301      	movs	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800307a:	2301      	movs	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	4804      	ldr	r0, [pc, #16]	; (8003098 <HAL_TIM_Encoder_MspInit+0x88>)
 8003086:	f000 fbe9 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_TIM_MspPostInit+0x68>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d11e      	bne.n	80030fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_TIM_MspPostInit+0x6c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_TIM_MspPostInit+0x6c>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_TIM_MspPostInit+0x6c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2302      	movs	r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	4805      	ldr	r0, [pc, #20]	; (800310c <HAL_TIM_MspPostInit+0x70>)
 80030f8:	f000 fbb0 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40010000 	.word	0x40010000
 8003108:	40023800 	.word	0x40023800
 800310c:	40020000 	.word	0x40020000

08003110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_UART_MspInit+0x94>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d133      	bne.n	800319a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_UART_MspInit+0x98>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_UART_MspInit+0x98>)
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_UART_MspInit+0x98>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_UART_MspInit+0x98>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_UART_MspInit+0x98>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_UART_MspInit+0x98>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800316a:	230c      	movs	r3, #12
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003176:	2303      	movs	r3, #3
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800317a:	2307      	movs	r3, #7
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4809      	ldr	r0, [pc, #36]	; (80031ac <HAL_UART_MspInit+0x9c>)
 8003186:	f000 fb69 	bl	800385c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2026      	movs	r0, #38	; 0x26
 8003190:	f000 fa9b 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003194:	2026      	movs	r0, #38	; 0x26
 8003196:	f000 fab4 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020000 	.word	0x40020000

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <NMI_Handler+0x4>

080031b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <HardFault_Handler+0x4>

080031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <MemManage_Handler+0x4>

080031c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <UsageFault_Handler+0x4>

080031ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fc:	f000 f96a 	bl	80034d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <TIM3_IRQHandler+0x10>)
 800320a:	f001 fca7 	bl	8004b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000294 	.word	0x20000294

08003218 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <USART2_IRQHandler+0x10>)
 800321e:	f002 fb89 	bl	8005934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200002dc 	.word	0x200002dc

0800322c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return 1;
 8003230:	2301      	movs	r3, #1
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <_kill>:

int _kill(int pid, int sig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003246:	f003 fa3b 	bl	80066c0 <__errno>
 800324a:	4603      	mov	r3, r0
 800324c:	2216      	movs	r2, #22
 800324e:	601a      	str	r2, [r3, #0]
  return -1;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <_exit>:

void _exit (int status)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ffe7 	bl	800323c <_kill>
  while (1) {}    /* Make sure we hang here */
 800326e:	e7fe      	b.n	800326e <_exit+0x12>

08003270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e00a      	b.n	8003298 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003282:	f3af 8000 	nop.w
 8003286:	4601      	mov	r1, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	b2ca      	uxtb	r2, r1
 8003290:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	dbf0      	blt.n	8003282 <_read+0x12>
  }

  return len;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e009      	b.n	80032d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	60ba      	str	r2, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbf1      	blt.n	80032bc <_write+0x12>
  }
  return len;
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_close>:

int _close(int file)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330a:	605a      	str	r2, [r3, #4]
  return 0;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_isatty>:

int _isatty(int file)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <_sbrk+0x5c>)
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <_sbrk+0x60>)
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <_sbrk+0x64>)
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <_sbrk+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800337c:	f003 f9a0 	bl	80066c0 <__errno>
 8003380:	4603      	mov	r3, r0
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	e009      	b.n	80033a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <_sbrk+0x64>)
 800339c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20020000 	.word	0x20020000
 80033ac:	00000400 	.word	0x00000400
 80033b0:	200004b0 	.word	0x200004b0
 80033b4:	200004c8 	.word	0x200004c8

080033b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <SystemInit+0x20>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <SystemInit+0x20>)
 80033c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033e2:	490e      	ldr	r1, [pc, #56]	; (800341c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e8:	e002      	b.n	80033f0 <LoopCopyDataInit>

080033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ee:	3304      	adds	r3, #4

080033f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f4:	d3f9      	bcc.n	80033ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f6:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033f8:	4c0b      	ldr	r4, [pc, #44]	; (8003428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033fc:	e001      	b.n	8003402 <LoopFillZerobss>

080033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003400:	3204      	adds	r2, #4

08003402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003404:	d3fb      	bcc.n	80033fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003406:	f7ff ffd7 	bl	80033b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800340a:	f003 f95f 	bl	80066cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800340e:	f7fd fdfb 	bl	8001008 <main>
  bx  lr    
 8003412:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800341c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003420:	0800c3c8 	.word	0x0800c3c8
  ldr r2, =_sbss
 8003424:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003428:	200004c8 	.word	0x200004c8

0800342c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800342c:	e7fe      	b.n	800342c <ADC_IRQHandler>
	...

08003430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_Init+0x40>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <HAL_Init+0x40>)
 800343a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800343e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_Init+0x40>)
 8003446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800344a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a07      	ldr	r2, [pc, #28]	; (8003470 <HAL_Init+0x40>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003458:	2003      	movs	r0, #3
 800345a:	f000 f92b 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345e:	2000      	movs	r0, #0
 8003460:	f000 f808 	bl	8003474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003464:	f7ff fd6e 	bl	8002f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_InitTick+0x54>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_InitTick+0x58>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800348a:	fbb3 f3f1 	udiv	r3, r3, r1
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f943 	bl	800371e <HAL_SYSTICK_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e00e      	b.n	80034c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d80a      	bhi.n	80034be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a8:	2200      	movs	r2, #0
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f000 f90b 	bl	80036ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b4:	4a06      	ldr	r2, [pc, #24]	; (80034d0 <HAL_InitTick+0x5c>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000008 	.word	0x20000008
 80034cc:	20000010 	.word	0x20000010
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_IncTick+0x20>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_IncTick+0x24>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_IncTick+0x24>)
 80034e6:	6013      	str	r3, [r2, #0]
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000010 	.word	0x20000010
 80034f8:	200004b4 	.word	0x200004b4

080034fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_GetTick+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	200004b4 	.word	0x200004b4

08003514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003546:	4a04      	ldr	r2, [pc, #16]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60d3      	str	r3, [r2, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
         );
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d301      	bcc.n	8003686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <SysTick_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368e:	210f      	movs	r1, #15
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f7ff ff8e 	bl	80035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Config+0x40>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SysTick_Config+0x40>)
 80036a0:	2207      	movs	r2, #7
 80036a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff29 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff3e 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff8e 	bl	8003608 <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5d 	bl	80035b4 <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff31 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffa2 	bl	8003670 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7ff feda 	bl	80034fc <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d008      	beq.n	8003768 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e052      	b.n	800380e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0216 	bic.w	r2, r2, #22
 8003776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003786:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_DMA_Abort+0x62>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0208 	bic.w	r2, r2, #8
 80037a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b8:	e013      	b.n	80037e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ba:	f7ff fe9f 	bl	80034fc <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d90c      	bls.n	80037e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e015      	b.n	800380e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e4      	bne.n	80037ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	223f      	movs	r2, #63	; 0x3f
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d004      	beq.n	8003834 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e00c      	b.n	800384e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2205      	movs	r2, #5
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e159      	b.n	8003b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	f040 8148 	bne.w	8003b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d005      	beq.n	80038ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d130      	bne.n	8003910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0201 	and.w	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b03      	cmp	r3, #3
 800391a:	d017      	beq.n	800394c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d123      	bne.n	80039a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	08da      	lsrs	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3208      	adds	r2, #8
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0203 	and.w	r2, r3, #3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a2 	beq.w	8003b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a56      	ldr	r2, [pc, #344]	; (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fe:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_GPIO_Init+0x2ec>)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a49      	ldr	r2, [pc, #292]	; (8003b4c <HAL_GPIO_Init+0x2f0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x202>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a48      	ldr	r2, [pc, #288]	; (8003b50 <HAL_GPIO_Init+0x2f4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x1fe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a47      	ldr	r2, [pc, #284]	; (8003b54 <HAL_GPIO_Init+0x2f8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a46      	ldr	r2, [pc, #280]	; (8003b58 <HAL_GPIO_Init+0x2fc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x1f6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a45      	ldr	r2, [pc, #276]	; (8003b5c <HAL_GPIO_Init+0x300>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x1f2>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e008      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a4e:	2307      	movs	r3, #7
 8003a50:	e006      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a52:	2303      	movs	r3, #3
 8003a54:	e004      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e002      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f002 0203 	and.w	r2, r2, #3
 8003a66:	0092      	lsls	r2, r2, #2
 8003a68:	4093      	lsls	r3, r2
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a70:	4935      	ldr	r1, [pc, #212]	; (8003b48 <HAL_GPIO_Init+0x2ec>)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	3302      	adds	r3, #2
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a7e:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa2:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b20:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	f67f aea2 	bls.w	8003878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40013800 	.word	0x40013800
 8003b4c:	40020000 	.word	0x40020000
 8003b50:	40020400 	.word	0x40020400
 8003b54:	40020800 	.word	0x40020800
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e267      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d075      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b85      	ldr	r3, [pc, #532]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d112      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4b82      	ldr	r3, [pc, #520]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	4b7e      	ldr	r3, [pc, #504]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d157      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e242      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_OscConfig+0x74>
 8003bfe:	4b76      	ldr	r3, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a75      	ldr	r2, [pc, #468]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x98>
 8003c16:	4b70      	ldr	r3, [pc, #448]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6f      	ldr	r2, [pc, #444]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b6d      	ldr	r3, [pc, #436]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6c      	ldr	r2, [pc, #432]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c30:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b66      	ldr	r3, [pc, #408]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a65      	ldr	r2, [pc, #404]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7ff fc54 	bl	80034fc <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7ff fc50 	bl	80034fc <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e207      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7ff fc40 	bl	80034fc <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c80:	f7ff fc3c 	bl	80034fc <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1f3      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	4b4a      	ldr	r3, [pc, #296]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1c7      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4937      	ldr	r1, [pc, #220]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e03a      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x244>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7ff fbf5 	bl	80034fc <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d16:	f7ff fbf1 	bl	80034fc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1a8      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4925      	ldr	r1, [pc, #148]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_OscConfig+0x244>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7ff fbd4 	bl	80034fc <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d58:	f7ff fbd0 	bl	80034fc <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e187      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d036      	beq.n	8003df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_RCC_OscConfig+0x248>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7ff fbb4 	bl	80034fc <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7ff fbb0 	bl	80034fc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e167      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_OscConfig+0x240>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x200>
 8003db6:	e01b      	b.n	8003df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_OscConfig+0x248>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7ff fb9d 	bl	80034fc <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	e00e      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7ff fb99 	bl	80034fc <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d907      	bls.n	8003de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e150      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470000 	.word	0x42470000
 8003de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	4b88      	ldr	r3, [pc, #544]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ea      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8097 	beq.w	8003f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b81      	ldr	r3, [pc, #516]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	4b7d      	ldr	r3, [pc, #500]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a7c      	ldr	r2, [pc, #496]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b7a      	ldr	r3, [pc, #488]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b77      	ldr	r3, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d118      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b74      	ldr	r3, [pc, #464]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7ff fb59 	bl	80034fc <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4e:	f7ff fb55 	bl	80034fc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e10c      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	4b6a      	ldr	r3, [pc, #424]	; (800400c <HAL_RCC_OscConfig+0x474>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2ea>
 8003e74:	4b64      	ldr	r3, [pc, #400]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a63      	ldr	r2, [pc, #396]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	e01c      	b.n	8003ebc <HAL_RCC_OscConfig+0x324>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x30c>
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a5e      	ldr	r2, [pc, #376]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
 8003e96:	4b5c      	ldr	r3, [pc, #368]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a5b      	ldr	r2, [pc, #364]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0x324>
 8003ea4:	4b58      	ldr	r3, [pc, #352]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a57      	ldr	r2, [pc, #348]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4a54      	ldr	r2, [pc, #336]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d015      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7ff fb1a 	bl	80034fc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7ff fb16 	bl	80034fc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0cb      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	4b49      	ldr	r3, [pc, #292]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ee      	beq.n	8003ecc <HAL_RCC_OscConfig+0x334>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7ff fb04 	bl	80034fc <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7ff fb00 	bl	80034fc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0b5      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ee      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4a38      	ldr	r2, [pc, #224]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a1 	beq.w	8004078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f36:	4b34      	ldr	r3, [pc, #208]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d05c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d141      	bne.n	8003fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_OscConfig+0x478>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7ff fad4 	bl	80034fc <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f58:	f7ff fad0 	bl	80034fc <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e087      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	041b      	lsls	r3, r3, #16
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	491b      	ldr	r1, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_OscConfig+0x478>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7ff faa9 	bl	80034fc <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fae:	f7ff faa5 	bl	80034fc <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e05c      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x416>
 8003fcc:	e054      	b.n	8004078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7ff fa92 	bl	80034fc <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7ff fa8e 	bl	80034fc <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e045      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x444>
 8003ffa:	e03d      	b.n	8004078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e038      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
 8004008:	40023800 	.word	0x40023800
 800400c:	40007000 	.word	0x40007000
 8004010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCC_OscConfig+0x4ec>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d028      	beq.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d121      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11a      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004044:	4013      	ands	r3, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800404a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404c:	4293      	cmp	r3, r2
 800404e:	d111      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	3b01      	subs	r3, #1
 800405e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800

08004088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0cc      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800409c:	4b68      	ldr	r3, [pc, #416]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d90c      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b65      	ldr	r3, [pc, #404]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0b8      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040dc:	4b59      	ldr	r3, [pc, #356]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a58      	ldr	r2, [pc, #352]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f4:	4b53      	ldr	r3, [pc, #332]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004100:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	494d      	ldr	r1, [pc, #308]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d044      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d119      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e07f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d003      	beq.n	8004146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004142:	2b03      	cmp	r3, #3
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e06f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e067      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4934      	ldr	r1, [pc, #208]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004178:	f7ff f9c0 	bl	80034fc <HAL_GetTick>
 800417c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	e00a      	b.n	8004196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004180:	f7ff f9bc 	bl	80034fc <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e04f      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 020c 	and.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1eb      	bne.n	8004180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d20c      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e032      	b.n	8004236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4916      	ldr	r1, [pc, #88]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	490e      	ldr	r1, [pc, #56]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420e:	f000 f821 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004212:	4602      	mov	r2, r0
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	490a      	ldr	r1, [pc, #40]	; (8004248 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f920 	bl	8003474 <HAL_InitTick>

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00
 8004244:	40023800 	.word	0x40023800
 8004248:	0800bec8 	.word	0x0800bec8
 800424c:	20000008 	.word	0x20000008
 8004250:	2000000c 	.word	0x2000000c

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b094      	sub	sp, #80	; 0x50
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	647b      	str	r3, [r7, #68]	; 0x44
 8004260:	2300      	movs	r3, #0
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	2300      	movs	r3, #0
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426c:	4b79      	ldr	r3, [pc, #484]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d00d      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 8004278:	2b08      	cmp	r3, #8
 800427a:	f200 80e1 	bhi.w	8004440 <HAL_RCC_GetSysClockFreq+0x1ec>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 8004282:	2b04      	cmp	r3, #4
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004286:	e0db      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b73      	ldr	r3, [pc, #460]	; (8004458 <HAL_RCC_GetSysClockFreq+0x204>)
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800428c:	e0db      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b73      	ldr	r3, [pc, #460]	; (800445c <HAL_RCC_GetSysClockFreq+0x208>)
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004292:	e0d8      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d063      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	2200      	movs	r2, #0
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
 80042be:	2300      	movs	r3, #0
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
 80042c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4621      	mov	r1, r4
 80042e0:	1a51      	subs	r1, r2, r1
 80042e2:	6139      	str	r1, [r7, #16]
 80042e4:	4629      	mov	r1, r5
 80042e6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f8:	4659      	mov	r1, fp
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004302:	4651      	mov	r1, sl
 8004304:	018a      	lsls	r2, r1, #6
 8004306:	4651      	mov	r1, sl
 8004308:	ebb2 0801 	subs.w	r8, r2, r1
 800430c:	4659      	mov	r1, fp
 800430e:	eb63 0901 	sbc.w	r9, r3, r1
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800431e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004326:	4690      	mov	r8, r2
 8004328:	4699      	mov	r9, r3
 800432a:	4623      	mov	r3, r4
 800432c:	eb18 0303 	adds.w	r3, r8, r3
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	462b      	mov	r3, r5
 8004334:	eb49 0303 	adc.w	r3, r9, r3
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004346:	4629      	mov	r1, r5
 8004348:	024b      	lsls	r3, r1, #9
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004350:	4621      	mov	r1, r4
 8004352:	024a      	lsls	r2, r1, #9
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 800435e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004360:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004364:	f7fc fc98 	bl	8000c98 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	e058      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	2200      	movs	r2, #0
 800437a:	4618      	mov	r0, r3
 800437c:	4611      	mov	r1, r2
 800437e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004382:	623b      	str	r3, [r7, #32]
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439e:	0150      	lsls	r0, r2, #5
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4641      	mov	r1, r8
 80043a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043aa:	4649      	mov	r1, r9
 80043ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043c4:	ebb2 040a 	subs.w	r4, r2, sl
 80043c8:	eb63 050b 	sbc.w	r5, r3, fp
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	00eb      	lsls	r3, r5, #3
 80043d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	4643      	mov	r3, r8
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb45 0303 	adc.w	r3, r5, r3
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fa:	4629      	mov	r1, r5
 80043fc:	028b      	lsls	r3, r1, #10
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004404:	4621      	mov	r1, r4
 8004406:	028a      	lsls	r2, r1, #10
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440e:	2200      	movs	r2, #0
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	61fa      	str	r2, [r7, #28]
 8004414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004418:	f7fc fc3e 	bl	8000c98 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_GetSysClockFreq+0x200>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetSysClockFreq+0x204>)
 8004442:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004448:	4618      	mov	r0, r3
 800444a:	3750      	adds	r7, #80	; 0x50
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	007a1200 	.word	0x007a1200

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000008 	.word	0x20000008

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	0800bed8 	.word	0x0800bed8

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffdc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0b5b      	lsrs	r3, r3, #13
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	0800bed8 	.word	0x0800bed8

080044c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e041      	b.n	800455e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe fd50 	bl	8002f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 fde2 	bl	80050d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e03c      	b.n	80045fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <HAL_TIM_Base_Start+0xa0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_TIM_Base_Start+0x5c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d013      	beq.n	80045c4 <HAL_TIM_Base_Start+0x5c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_TIM_Base_Start+0xa4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_TIM_Base_Start+0x5c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_TIM_Base_Start+0xa8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_TIM_Base_Start+0x5c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_TIM_Base_Start+0xac>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_TIM_Base_Start+0x5c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_TIM_Base_Start+0xb0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d010      	beq.n	80045f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	e007      	b.n	80045f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40014000 	.word	0x40014000

0800461c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e044      	b.n	80046be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <HAL_TIM_Base_Start_IT+0xb0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_TIM_Base_Start_IT+0xc0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d010      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e007      	b.n	80046bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40014000 	.word	0x40014000

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e041      	b.n	8004776 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f839 	bl	800477e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fcd6 	bl	80050d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x24>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e022      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x3e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e015      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x58>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e008      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e068      	b.n	80048d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0x82>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004814:	e013      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0x92>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004824:	e00b      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xa2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004834:	e003      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fee8 	bl	800561c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <HAL_TIM_PWM_Start+0x14c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d107      	bne.n	8004866 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_TIM_PWM_Start+0x14c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x10e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d013      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x10e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <HAL_TIM_PWM_Start+0x150>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x10e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_TIM_PWM_Start+0x154>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x10e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a16      	ldr	r2, [pc, #88]	; (80048ec <HAL_TIM_PWM_Start+0x158>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x10e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <HAL_TIM_PWM_Start+0x15c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d111      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	d010      	beq.n	80048d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	e007      	b.n	80048d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40014000 	.word	0x40014000

080048f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e097      	b.n	8004a38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fe fb77 	bl	8003010 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 fbc1 	bl	80050d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	4313      	orrs	r3, r2
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004994:	f023 030c 	bic.w	r3, r3, #12
 8004998:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	4313      	orrs	r3, r2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	011a      	lsls	r2, r3, #4
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	031b      	lsls	r3, r3, #12
 80049c4:	4313      	orrs	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	4313      	orrs	r3, r2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d102      	bne.n	8004a7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a76:	7b7b      	ldrb	r3, [r7, #13]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e069      	b.n	8004b54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	e031      	b.n	8004af6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d110      	bne.n	8004aba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d102      	bne.n	8004aa4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a9e:	7b3b      	ldrb	r3, [r7, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d001      	beq.n	8004aa8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e055      	b.n	8004b54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab8:	e01d      	b.n	8004af6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d108      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac0:	7bbb      	ldrb	r3, [r7, #14]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac6:	7b7b      	ldrb	r3, [r7, #13]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004acc:	7b3b      	ldrb	r3, [r7, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e03e      	b.n	8004b54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_TIM_Encoder_Start+0xc4>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d008      	beq.n	8004b14 <HAL_TIM_Encoder_Start+0xd4>
 8004b02:	e00f      	b.n	8004b24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fd85 	bl	800561c <TIM_CCxChannelCmd>
      break;
 8004b12:	e016      	b.n	8004b42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fd7d 	bl	800561c <TIM_CCxChannelCmd>
      break;
 8004b22:	e00e      	b.n	8004b42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fd75 	bl	800561c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	2104      	movs	r1, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fd6e 	bl	800561c <TIM_CCxChannelCmd>
      break;
 8004b40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0202 	mvn.w	r2, #2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa77 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa69 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa7a 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0204 	mvn.w	r2, #4
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fa4d 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa3f 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fa50 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa23 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa15 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa26 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f9f9 	bl	8005092 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9eb 	bl	800507e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f9fc 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fd00 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fd78 	bl	80057fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9c1 	bl	80050ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0220 	mvn.w	r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fd42 	bl	80057e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0ae      	b.n	8004ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	f200 809f 	bhi.w	8004ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004ed9 	.word	0x08004ed9
 8004da8:	08004ed9 	.word	0x08004ed9
 8004dac:	08004ed9 	.word	0x08004ed9
 8004db0:	08004e15 	.word	0x08004e15
 8004db4:	08004ed9 	.word	0x08004ed9
 8004db8:	08004ed9 	.word	0x08004ed9
 8004dbc:	08004ed9 	.word	0x08004ed9
 8004dc0:	08004e57 	.word	0x08004e57
 8004dc4:	08004ed9 	.word	0x08004ed9
 8004dc8:	08004ed9 	.word	0x08004ed9
 8004dcc:	08004ed9 	.word	0x08004ed9
 8004dd0:	08004e97 	.word	0x08004e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f9f8 	bl	80051d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	619a      	str	r2, [r3, #24]
      break;
 8004e12:	e064      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fa3e 	bl	800529c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
      break;
 8004e54:	e043      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fa89 	bl	8005374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0208 	orr.w	r2, r2, #8
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0204 	bic.w	r2, r2, #4
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	61da      	str	r2, [r3, #28]
      break;
 8004e94:	e023      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fad3 	bl	8005448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	61da      	str	r2, [r3, #28]
      break;
 8004ed6:	e002      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
      break;
 8004edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIM_ConfigClockSource+0x1c>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e0b4      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x186>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f44:	d03e      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	f200 8087 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	f000 8086 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x172>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	d87f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b70      	cmp	r3, #112	; 0x70
 8004f5e:	d01a      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xa6>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d87b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b60      	cmp	r3, #96	; 0x60
 8004f66:	d050      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x11a>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d877      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b50      	cmp	r3, #80	; 0x50
 8004f6e:	d03c      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0xfa>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d873      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d058      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x13a>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d86f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d064      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d86b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d060      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d867      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05c      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d05a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	e062      	b.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f000 fb19 	bl	80055dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
      break;
 8004fc2:	e04f      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6899      	ldr	r1, [r3, #8]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f000 fb02 	bl	80055dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe6:	609a      	str	r2, [r3, #8]
      break;
 8004fe8:	e03c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 fa76 	bl	80054e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2150      	movs	r1, #80	; 0x50
 8005002:	4618      	mov	r0, r3
 8005004:	f000 facf 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005008:	e02c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	461a      	mov	r2, r3
 8005018:	f000 fa95 	bl	8005546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2160      	movs	r1, #96	; 0x60
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fabf 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005028:	e01c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	461a      	mov	r2, r3
 8005038:	f000 fa56 	bl	80054e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2140      	movs	r1, #64	; 0x40
 8005042:	4618      	mov	r0, r3
 8005044:	f000 faaf 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005048:	e00c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 faa6 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 800505a:	e003      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e000      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a34      	ldr	r2, [pc, #208]	; (80051b4 <TIM_Base_SetConfig+0xe4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ee:	d00b      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a31      	ldr	r2, [pc, #196]	; (80051b8 <TIM_Base_SetConfig+0xe8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a30      	ldr	r2, [pc, #192]	; (80051bc <TIM_Base_SetConfig+0xec>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0x38>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <TIM_Base_SetConfig+0xf0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d108      	bne.n	800511a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <TIM_Base_SetConfig+0xe4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01b      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d017      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <TIM_Base_SetConfig+0xe8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <TIM_Base_SetConfig+0xec>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00f      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <TIM_Base_SetConfig+0xf0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00b      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <TIM_Base_SetConfig+0xf4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <TIM_Base_SetConfig+0xf8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <TIM_Base_SetConfig+0xfc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d108      	bne.n	800516c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <TIM_Base_SetConfig+0xe4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d103      	bne.n	80051a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	615a      	str	r2, [r3, #20]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0302 	bic.w	r3, r3, #2
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <TIM_OC1_SetConfig+0xc8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0308 	bic.w	r3, r3, #8
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0304 	bic.w	r3, r3, #4
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a13      	ldr	r2, [pc, #76]	; (8005298 <TIM_OC1_SetConfig+0xc8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d111      	bne.n	8005272 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40010000 	.word	0x40010000

0800529c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0210 	bic.w	r2, r3, #16
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0320 	bic.w	r3, r3, #32
 80052e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <TIM_OC2_SetConfig+0xd4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10d      	bne.n	8005318 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <TIM_OC2_SetConfig+0xd4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d113      	bne.n	8005348 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000

08005374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <TIM_OC3_SetConfig+0xd0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10d      	bne.n	80053ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <TIM_OC3_SetConfig+0xd0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d113      	bne.n	800541e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40010000 	.word	0x40010000

08005448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	031b      	lsls	r3, r3, #12
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <TIM_OC4_SetConfig+0x9c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d109      	bne.n	80054bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000

080054e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 030a 	bic.w	r3, r3, #10
 8005524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005546:	b480      	push	{r7}
 8005548:	b087      	sub	sp, #28
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f023 0210 	bic.w	r2, r3, #16
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	031b      	lsls	r3, r3, #12
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f043 0307 	orr.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	431a      	orrs	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	2201      	movs	r2, #1
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1a      	ldr	r2, [r3, #32]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	43db      	mvns	r3, r3
 800563e:	401a      	ands	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1a      	ldr	r2, [r3, #32]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	431a      	orrs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800567c:	2302      	movs	r3, #2
 800567e:	e050      	b.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d013      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a13      	ldr	r2, [pc, #76]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10c      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40014000 	.word	0x40014000

08005744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e03d      	b.n	80057dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e03f      	b.n	80058a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fc6a 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2224      	movs	r2, #36	; 0x24
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fcbf 	bl	80061d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	4613      	mov	r3, r2
 80058b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d130      	bne.n	8005926 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_UART_Transmit_IT+0x26>
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e029      	b.n	8005928 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Transmit_IT+0x38>
 80058de:	2302      	movs	r3, #2
 80058e0:	e022      	b.n	8005928 <HAL_UART_Transmit_IT+0x7e>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2221      	movs	r2, #33	; 0x21
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005920:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b0ba      	sub	sp, #232	; 0xe8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_UART_IRQHandler+0x66>
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fb65 	bl	8006062 <UART_Receive_IT>
      return;
 8005998:	e256      	b.n	8005e48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800599a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80de 	beq.w	8005b60 <HAL_UART_IRQHandler+0x22c>
 80059a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80d1 	beq.w	8005b60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <HAL_UART_IRQHandler+0xae>
 80059ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f043 0201 	orr.w	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <HAL_UART_IRQHandler+0xd2>
 80059ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f043 0202 	orr.w	r2, r3, #2
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_UART_IRQHandler+0xf6>
 8005a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0204 	orr.w	r2, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d011      	beq.n	8005a5a <HAL_UART_IRQHandler+0x126>
 8005a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d105      	bne.n	8005a4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0208 	orr.w	r2, r3, #8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 81ed 	beq.w	8005e3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_UART_IRQHandler+0x14e>
 8005a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 faf0 	bl	8006062 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b40      	cmp	r3, #64	; 0x40
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_UART_IRQHandler+0x17a>
 8005aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d04f      	beq.n	8005b4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9f8 	bl	8005ea4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d141      	bne.n	8005b46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3314      	adds	r3, #20
 8005ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1d9      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d013      	beq.n	8005b3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	4a7d      	ldr	r2, [pc, #500]	; (8005d10 <HAL_UART_IRQHandler+0x3dc>)
 8005b1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd fe77 	bl	8003816 <HAL_DMA_Abort_IT>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3c:	e00e      	b.n	8005b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f99a 	bl	8005e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e00a      	b.n	8005b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f996 	bl	8005e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	e006      	b.n	8005b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f992 	bl	8005e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b5a:	e170      	b.n	8005e3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	bf00      	nop
    return;
 8005b5e:	e16e      	b.n	8005e3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	f040 814a 	bne.w	8005dfe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8143 	beq.w	8005dfe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 813c 	beq.w	8005dfe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	f040 80b4 	bne.w	8005d14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8140 	beq.w	8005e42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f080 8139 	bcs.w	8005e42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be2:	f000 8088 	beq.w	8005cf6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	330c      	adds	r3, #12
 8005bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1d9      	bne.n	8005be6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3314      	adds	r3, #20
 8005c38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3314      	adds	r3, #20
 8005c52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e1      	bne.n	8005c32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc6:	f023 0310 	bic.w	r3, r3, #16
 8005cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e3      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fd fd20 	bl	8003736 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8c0 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d0c:	e099      	b.n	8005e42 <HAL_UART_IRQHandler+0x50e>
 8005d0e:	bf00      	nop
 8005d10:	08005f6b 	.word	0x08005f6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 808b 	beq.w	8005e46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8086 	beq.w	8005e46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8005d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e3      	bne.n	8005d3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	623b      	str	r3, [r7, #32]
   return(result);
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3314      	adds	r3, #20
 8005d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d96:	633a      	str	r2, [r7, #48]	; 0x30
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ddc:	61fa      	str	r2, [r7, #28]
 8005dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e3      	bne.n	8005db8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f848 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dfc:	e023      	b.n	8005e46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_UART_IRQHandler+0x4ea>
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8bb 	bl	8005f92 <UART_Transmit_IT>
    return;
 8005e1c:	e014      	b.n	8005e48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00e      	beq.n	8005e48 <HAL_UART_IRQHandler+0x514>
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f8fb 	bl	8006032 <UART_EndTransmit_IT>
    return;
 8005e3c:	e004      	b.n	8005e48 <HAL_UART_IRQHandler+0x514>
    return;
 8005e3e:	bf00      	nop
 8005e40:	e002      	b.n	8005e48 <HAL_UART_IRQHandler+0x514>
      return;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <HAL_UART_IRQHandler+0x514>
      return;
 8005e46:	bf00      	nop
  }
}
 8005e48:	37e8      	adds	r7, #232	; 0xe8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop

08005e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b095      	sub	sp, #84	; 0x54
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	330c      	adds	r3, #12
 8005eca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ecc:	643a      	str	r2, [r7, #64]	; 0x40
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e5      	bne.n	8005eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f023 0301 	bic.w	r3, r3, #1
 8005ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d119      	bne.n	8005f50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f023 0310 	bic.w	r3, r3, #16
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f3c:	61ba      	str	r2, [r7, #24]
 8005f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e5      	bne.n	8005f1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f5e:	bf00      	nop
 8005f60:	3754      	adds	r7, #84	; 0x54
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff ff77 	bl	8005e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8a:	bf00      	nop
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b21      	cmp	r3, #33	; 0x21
 8005fa4:	d13e      	bne.n	8006024 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fae:	d114      	bne.n	8005fda <UART_Transmit_IT+0x48>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d110      	bne.n	8005fda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]
 8005fd8:	e008      	b.n	8005fec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	1c59      	adds	r1, r3, #1
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6211      	str	r1, [r2, #32]
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10f      	bne.n	8006020 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800600e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800601e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	e000      	b.n	8006026 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006024:	2302      	movs	r3, #2
  }
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006048:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fefc 	bl	8005e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b08c      	sub	sp, #48	; 0x30
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b22      	cmp	r3, #34	; 0x22
 8006074:	f040 80ab 	bne.w	80061ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d117      	bne.n	80060b2 <UART_Receive_IT+0x50>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d113      	bne.n	80060b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	1c9a      	adds	r2, r3, #2
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
 80060b0:	e026      	b.n	8006100 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c4:	d007      	beq.n	80060d6 <UART_Receive_IT+0x74>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <UART_Receive_IT+0x82>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e008      	b.n	80060f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4619      	mov	r1, r3
 800610e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006110:	2b00      	cmp	r3, #0
 8006112:	d15a      	bne.n	80061ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0220 	bic.w	r2, r2, #32
 8006122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	d135      	bne.n	80061c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	613b      	str	r3, [r7, #16]
   return(result);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f023 0310 	bic.w	r3, r3, #16
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	623a      	str	r2, [r7, #32]
 800617c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	69f9      	ldr	r1, [r7, #28]
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	61bb      	str	r3, [r7, #24]
   return(result);
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e5      	bne.n	800615a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b10      	cmp	r3, #16
 800619a:	d10a      	bne.n	80061b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe67 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
 80061be:	e002      	b.n	80061c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fe4f 	bl	8005e64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e002      	b.n	80061d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3730      	adds	r7, #48	; 0x30
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061dc:	b0c0      	sub	sp, #256	; 0x100
 80061de:	af00      	add	r7, sp, #0
 80061e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f4:	68d9      	ldr	r1, [r3, #12]
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	ea40 0301 	orr.w	r3, r0, r1
 8006200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	431a      	orrs	r2, r3
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	431a      	orrs	r2, r3
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006230:	f021 010c 	bic.w	r1, r1, #12
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800623e:	430b      	orrs	r3, r1
 8006240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006252:	6999      	ldr	r1, [r3, #24]
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	ea40 0301 	orr.w	r3, r0, r1
 800625e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b8f      	ldr	r3, [pc, #572]	; (80064a4 <UART_SetConfig+0x2cc>)
 8006268:	429a      	cmp	r2, r3
 800626a:	d005      	beq.n	8006278 <UART_SetConfig+0xa0>
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	4b8d      	ldr	r3, [pc, #564]	; (80064a8 <UART_SetConfig+0x2d0>)
 8006274:	429a      	cmp	r2, r3
 8006276:	d104      	bne.n	8006282 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006278:	f7fe f912 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 800627c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006280:	e003      	b.n	800628a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006282:	f7fe f8f9 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8006286:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006294:	f040 810c 	bne.w	80064b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800629c:	2200      	movs	r2, #0
 800629e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062aa:	4622      	mov	r2, r4
 80062ac:	462b      	mov	r3, r5
 80062ae:	1891      	adds	r1, r2, r2
 80062b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062b2:	415b      	adcs	r3, r3
 80062b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ba:	4621      	mov	r1, r4
 80062bc:	eb12 0801 	adds.w	r8, r2, r1
 80062c0:	4629      	mov	r1, r5
 80062c2:	eb43 0901 	adc.w	r9, r3, r1
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062da:	4690      	mov	r8, r2
 80062dc:	4699      	mov	r9, r3
 80062de:	4623      	mov	r3, r4
 80062e0:	eb18 0303 	adds.w	r3, r8, r3
 80062e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062e8:	462b      	mov	r3, r5
 80062ea:	eb49 0303 	adc.w	r3, r9, r3
 80062ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006306:	460b      	mov	r3, r1
 8006308:	18db      	adds	r3, r3, r3
 800630a:	653b      	str	r3, [r7, #80]	; 0x50
 800630c:	4613      	mov	r3, r2
 800630e:	eb42 0303 	adc.w	r3, r2, r3
 8006312:	657b      	str	r3, [r7, #84]	; 0x54
 8006314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800631c:	f7fa fcbc 	bl	8000c98 <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4b61      	ldr	r3, [pc, #388]	; (80064ac <UART_SetConfig+0x2d4>)
 8006326:	fba3 2302 	umull	r2, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	011c      	lsls	r4, r3, #4
 800632e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006338:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800633c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	1891      	adds	r1, r2, r2
 8006346:	64b9      	str	r1, [r7, #72]	; 0x48
 8006348:	415b      	adcs	r3, r3
 800634a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800634c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006350:	4641      	mov	r1, r8
 8006352:	eb12 0a01 	adds.w	sl, r2, r1
 8006356:	4649      	mov	r1, r9
 8006358:	eb43 0b01 	adc.w	fp, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800636c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006370:	4692      	mov	sl, r2
 8006372:	469b      	mov	fp, r3
 8006374:	4643      	mov	r3, r8
 8006376:	eb1a 0303 	adds.w	r3, sl, r3
 800637a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800637e:	464b      	mov	r3, r9
 8006380:	eb4b 0303 	adc.w	r3, fp, r3
 8006384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006394:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800639c:	460b      	mov	r3, r1
 800639e:	18db      	adds	r3, r3, r3
 80063a0:	643b      	str	r3, [r7, #64]	; 0x40
 80063a2:	4613      	mov	r3, r2
 80063a4:	eb42 0303 	adc.w	r3, r2, r3
 80063a8:	647b      	str	r3, [r7, #68]	; 0x44
 80063aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063b2:	f7fa fc71 	bl	8000c98 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4611      	mov	r1, r2
 80063bc:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <UART_SetConfig+0x2d4>)
 80063be:	fba3 2301 	umull	r2, r3, r3, r1
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2264      	movs	r2, #100	; 0x64
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	1acb      	subs	r3, r1, r3
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063d2:	4b36      	ldr	r3, [pc, #216]	; (80064ac <UART_SetConfig+0x2d4>)
 80063d4:	fba3 2302 	umull	r2, r3, r3, r2
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063e0:	441c      	add	r4, r3
 80063e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	1891      	adds	r1, r2, r2
 80063fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80063fc:	415b      	adcs	r3, r3
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006404:	4641      	mov	r1, r8
 8006406:	1851      	adds	r1, r2, r1
 8006408:	6339      	str	r1, [r7, #48]	; 0x30
 800640a:	4649      	mov	r1, r9
 800640c:	414b      	adcs	r3, r1
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800641c:	4659      	mov	r1, fp
 800641e:	00cb      	lsls	r3, r1, #3
 8006420:	4651      	mov	r1, sl
 8006422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006426:	4651      	mov	r1, sl
 8006428:	00ca      	lsls	r2, r1, #3
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	4603      	mov	r3, r0
 8006430:	4642      	mov	r2, r8
 8006432:	189b      	adds	r3, r3, r2
 8006434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006438:	464b      	mov	r3, r9
 800643a:	460a      	mov	r2, r1
 800643c:	eb42 0303 	adc.w	r3, r2, r3
 8006440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006450:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006458:	460b      	mov	r3, r1
 800645a:	18db      	adds	r3, r3, r3
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
 800645e:	4613      	mov	r3, r2
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800646a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800646e:	f7fa fc13 	bl	8000c98 <__aeabi_uldivmod>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <UART_SetConfig+0x2d4>)
 8006478:	fba3 1302 	umull	r1, r3, r3, r2
 800647c:	095b      	lsrs	r3, r3, #5
 800647e:	2164      	movs	r1, #100	; 0x64
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	3332      	adds	r3, #50	; 0x32
 800648a:	4a08      	ldr	r2, [pc, #32]	; (80064ac <UART_SetConfig+0x2d4>)
 800648c:	fba2 2303 	umull	r2, r3, r2, r3
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	f003 0207 	and.w	r2, r3, #7
 8006496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4422      	add	r2, r4
 800649e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064a0:	e105      	b.n	80066ae <UART_SetConfig+0x4d6>
 80064a2:	bf00      	nop
 80064a4:	40011000 	.word	0x40011000
 80064a8:	40011400 	.word	0x40011400
 80064ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064c2:	4642      	mov	r2, r8
 80064c4:	464b      	mov	r3, r9
 80064c6:	1891      	adds	r1, r2, r2
 80064c8:	6239      	str	r1, [r7, #32]
 80064ca:	415b      	adcs	r3, r3
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
 80064ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064d2:	4641      	mov	r1, r8
 80064d4:	1854      	adds	r4, r2, r1
 80064d6:	4649      	mov	r1, r9
 80064d8:	eb43 0501 	adc.w	r5, r3, r1
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	00eb      	lsls	r3, r5, #3
 80064e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ea:	00e2      	lsls	r2, r4, #3
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	4643      	mov	r3, r8
 80064f2:	18e3      	adds	r3, r4, r3
 80064f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064f8:	464b      	mov	r3, r9
 80064fa:	eb45 0303 	adc.w	r3, r5, r3
 80064fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800650e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800651e:	4629      	mov	r1, r5
 8006520:	008b      	lsls	r3, r1, #2
 8006522:	4621      	mov	r1, r4
 8006524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006528:	4621      	mov	r1, r4
 800652a:	008a      	lsls	r2, r1, #2
 800652c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006530:	f7fa fbb2 	bl	8000c98 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4b60      	ldr	r3, [pc, #384]	; (80066bc <UART_SetConfig+0x4e4>)
 800653a:	fba3 2302 	umull	r2, r3, r3, r2
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	011c      	lsls	r4, r3, #4
 8006542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006546:	2200      	movs	r2, #0
 8006548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800654c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006550:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	1891      	adds	r1, r2, r2
 800655a:	61b9      	str	r1, [r7, #24]
 800655c:	415b      	adcs	r3, r3
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006564:	4641      	mov	r1, r8
 8006566:	1851      	adds	r1, r2, r1
 8006568:	6139      	str	r1, [r7, #16]
 800656a:	4649      	mov	r1, r9
 800656c:	414b      	adcs	r3, r1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800657c:	4659      	mov	r1, fp
 800657e:	00cb      	lsls	r3, r1, #3
 8006580:	4651      	mov	r1, sl
 8006582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006586:	4651      	mov	r1, sl
 8006588:	00ca      	lsls	r2, r1, #3
 800658a:	4610      	mov	r0, r2
 800658c:	4619      	mov	r1, r3
 800658e:	4603      	mov	r3, r0
 8006590:	4642      	mov	r2, r8
 8006592:	189b      	adds	r3, r3, r2
 8006594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006598:	464b      	mov	r3, r9
 800659a:	460a      	mov	r2, r1
 800659c:	eb42 0303 	adc.w	r3, r2, r3
 80065a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065bc:	4649      	mov	r1, r9
 80065be:	008b      	lsls	r3, r1, #2
 80065c0:	4641      	mov	r1, r8
 80065c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c6:	4641      	mov	r1, r8
 80065c8:	008a      	lsls	r2, r1, #2
 80065ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065ce:	f7fa fb63 	bl	8000c98 <__aeabi_uldivmod>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4b39      	ldr	r3, [pc, #228]	; (80066bc <UART_SetConfig+0x4e4>)
 80065d8:	fba3 1302 	umull	r1, r3, r3, r2
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	2164      	movs	r1, #100	; 0x64
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	3332      	adds	r3, #50	; 0x32
 80065ea:	4a34      	ldr	r2, [pc, #208]	; (80066bc <UART_SetConfig+0x4e4>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065f6:	441c      	add	r4, r3
 80065f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065fc:	2200      	movs	r2, #0
 80065fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006600:	677a      	str	r2, [r7, #116]	; 0x74
 8006602:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006606:	4642      	mov	r2, r8
 8006608:	464b      	mov	r3, r9
 800660a:	1891      	adds	r1, r2, r2
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	415b      	adcs	r3, r3
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006616:	4641      	mov	r1, r8
 8006618:	1851      	adds	r1, r2, r1
 800661a:	6039      	str	r1, [r7, #0]
 800661c:	4649      	mov	r1, r9
 800661e:	414b      	adcs	r3, r1
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800662e:	4659      	mov	r1, fp
 8006630:	00cb      	lsls	r3, r1, #3
 8006632:	4651      	mov	r1, sl
 8006634:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006638:	4651      	mov	r1, sl
 800663a:	00ca      	lsls	r2, r1, #3
 800663c:	4610      	mov	r0, r2
 800663e:	4619      	mov	r1, r3
 8006640:	4603      	mov	r3, r0
 8006642:	4642      	mov	r2, r8
 8006644:	189b      	adds	r3, r3, r2
 8006646:	66bb      	str	r3, [r7, #104]	; 0x68
 8006648:	464b      	mov	r3, r9
 800664a:	460a      	mov	r2, r1
 800664c:	eb42 0303 	adc.w	r3, r2, r3
 8006650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	663b      	str	r3, [r7, #96]	; 0x60
 800665c:	667a      	str	r2, [r7, #100]	; 0x64
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800666a:	4649      	mov	r1, r9
 800666c:	008b      	lsls	r3, r1, #2
 800666e:	4641      	mov	r1, r8
 8006670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006674:	4641      	mov	r1, r8
 8006676:	008a      	lsls	r2, r1, #2
 8006678:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800667c:	f7fa fb0c 	bl	8000c98 <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <UART_SetConfig+0x4e4>)
 8006686:	fba3 1302 	umull	r1, r3, r3, r2
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	2164      	movs	r1, #100	; 0x64
 800668e:	fb01 f303 	mul.w	r3, r1, r3
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	3332      	adds	r3, #50	; 0x32
 8006698:	4a08      	ldr	r2, [pc, #32]	; (80066bc <UART_SetConfig+0x4e4>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4422      	add	r2, r4
 80066ac:	609a      	str	r2, [r3, #8]
}
 80066ae:	bf00      	nop
 80066b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066b4:	46bd      	mov	sp, r7
 80066b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ba:	bf00      	nop
 80066bc:	51eb851f 	.word	0x51eb851f

080066c0 <__errno>:
 80066c0:	4b01      	ldr	r3, [pc, #4]	; (80066c8 <__errno+0x8>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000014 	.word	0x20000014

080066cc <__libc_init_array>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	4d0d      	ldr	r5, [pc, #52]	; (8006704 <__libc_init_array+0x38>)
 80066d0:	4c0d      	ldr	r4, [pc, #52]	; (8006708 <__libc_init_array+0x3c>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	2600      	movs	r6, #0
 80066d8:	42a6      	cmp	r6, r4
 80066da:	d109      	bne.n	80066f0 <__libc_init_array+0x24>
 80066dc:	4d0b      	ldr	r5, [pc, #44]	; (800670c <__libc_init_array+0x40>)
 80066de:	4c0c      	ldr	r4, [pc, #48]	; (8006710 <__libc_init_array+0x44>)
 80066e0:	f005 fbd8 	bl	800be94 <_init>
 80066e4:	1b64      	subs	r4, r4, r5
 80066e6:	10a4      	asrs	r4, r4, #2
 80066e8:	2600      	movs	r6, #0
 80066ea:	42a6      	cmp	r6, r4
 80066ec:	d105      	bne.n	80066fa <__libc_init_array+0x2e>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f4:	4798      	blx	r3
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7ee      	b.n	80066d8 <__libc_init_array+0xc>
 80066fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fe:	4798      	blx	r3
 8006700:	3601      	adds	r6, #1
 8006702:	e7f2      	b.n	80066ea <__libc_init_array+0x1e>
 8006704:	0800c3c0 	.word	0x0800c3c0
 8006708:	0800c3c0 	.word	0x0800c3c0
 800670c:	0800c3c0 	.word	0x0800c3c0
 8006710:	0800c3c4 	.word	0x0800c3c4

08006714 <memset>:
 8006714:	4402      	add	r2, r0
 8006716:	4603      	mov	r3, r0
 8006718:	4293      	cmp	r3, r2
 800671a:	d100      	bne.n	800671e <memset+0xa>
 800671c:	4770      	bx	lr
 800671e:	f803 1b01 	strb.w	r1, [r3], #1
 8006722:	e7f9      	b.n	8006718 <memset+0x4>

08006724 <__cvt>:
 8006724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006728:	ec55 4b10 	vmov	r4, r5, d0
 800672c:	2d00      	cmp	r5, #0
 800672e:	460e      	mov	r6, r1
 8006730:	4619      	mov	r1, r3
 8006732:	462b      	mov	r3, r5
 8006734:	bfbb      	ittet	lt
 8006736:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800673a:	461d      	movlt	r5, r3
 800673c:	2300      	movge	r3, #0
 800673e:	232d      	movlt	r3, #45	; 0x2d
 8006740:	700b      	strb	r3, [r1, #0]
 8006742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006744:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006748:	4691      	mov	r9, r2
 800674a:	f023 0820 	bic.w	r8, r3, #32
 800674e:	bfbc      	itt	lt
 8006750:	4622      	movlt	r2, r4
 8006752:	4614      	movlt	r4, r2
 8006754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006758:	d005      	beq.n	8006766 <__cvt+0x42>
 800675a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800675e:	d100      	bne.n	8006762 <__cvt+0x3e>
 8006760:	3601      	adds	r6, #1
 8006762:	2102      	movs	r1, #2
 8006764:	e000      	b.n	8006768 <__cvt+0x44>
 8006766:	2103      	movs	r1, #3
 8006768:	ab03      	add	r3, sp, #12
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	ab02      	add	r3, sp, #8
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	ec45 4b10 	vmov	d0, r4, r5
 8006774:	4653      	mov	r3, sl
 8006776:	4632      	mov	r2, r6
 8006778:	f001 fdae 	bl	80082d8 <_dtoa_r>
 800677c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006780:	4607      	mov	r7, r0
 8006782:	d102      	bne.n	800678a <__cvt+0x66>
 8006784:	f019 0f01 	tst.w	r9, #1
 8006788:	d022      	beq.n	80067d0 <__cvt+0xac>
 800678a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800678e:	eb07 0906 	add.w	r9, r7, r6
 8006792:	d110      	bne.n	80067b6 <__cvt+0x92>
 8006794:	783b      	ldrb	r3, [r7, #0]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	d10a      	bne.n	80067b0 <__cvt+0x8c>
 800679a:	2200      	movs	r2, #0
 800679c:	2300      	movs	r3, #0
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f999 	bl	8000ad8 <__aeabi_dcmpeq>
 80067a6:	b918      	cbnz	r0, 80067b0 <__cvt+0x8c>
 80067a8:	f1c6 0601 	rsb	r6, r6, #1
 80067ac:	f8ca 6000 	str.w	r6, [sl]
 80067b0:	f8da 3000 	ldr.w	r3, [sl]
 80067b4:	4499      	add	r9, r3
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7fa f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c2:	b108      	cbz	r0, 80067c8 <__cvt+0xa4>
 80067c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067c8:	2230      	movs	r2, #48	; 0x30
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	454b      	cmp	r3, r9
 80067ce:	d307      	bcc.n	80067e0 <__cvt+0xbc>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d4:	1bdb      	subs	r3, r3, r7
 80067d6:	4638      	mov	r0, r7
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	b004      	add	sp, #16
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	9103      	str	r1, [sp, #12]
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e7f0      	b.n	80067ca <__cvt+0xa6>

080067e8 <__exponent>:
 80067e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ea:	4603      	mov	r3, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	bfb8      	it	lt
 80067f0:	4249      	neglt	r1, r1
 80067f2:	f803 2b02 	strb.w	r2, [r3], #2
 80067f6:	bfb4      	ite	lt
 80067f8:	222d      	movlt	r2, #45	; 0x2d
 80067fa:	222b      	movge	r2, #43	; 0x2b
 80067fc:	2909      	cmp	r1, #9
 80067fe:	7042      	strb	r2, [r0, #1]
 8006800:	dd2a      	ble.n	8006858 <__exponent+0x70>
 8006802:	f10d 0407 	add.w	r4, sp, #7
 8006806:	46a4      	mov	ip, r4
 8006808:	270a      	movs	r7, #10
 800680a:	46a6      	mov	lr, r4
 800680c:	460a      	mov	r2, r1
 800680e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006812:	fb07 1516 	mls	r5, r7, r6, r1
 8006816:	3530      	adds	r5, #48	; 0x30
 8006818:	2a63      	cmp	r2, #99	; 0x63
 800681a:	f104 34ff 	add.w	r4, r4, #4294967295
 800681e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006822:	4631      	mov	r1, r6
 8006824:	dcf1      	bgt.n	800680a <__exponent+0x22>
 8006826:	3130      	adds	r1, #48	; 0x30
 8006828:	f1ae 0502 	sub.w	r5, lr, #2
 800682c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006830:	1c44      	adds	r4, r0, #1
 8006832:	4629      	mov	r1, r5
 8006834:	4561      	cmp	r1, ip
 8006836:	d30a      	bcc.n	800684e <__exponent+0x66>
 8006838:	f10d 0209 	add.w	r2, sp, #9
 800683c:	eba2 020e 	sub.w	r2, r2, lr
 8006840:	4565      	cmp	r5, ip
 8006842:	bf88      	it	hi
 8006844:	2200      	movhi	r2, #0
 8006846:	4413      	add	r3, r2
 8006848:	1a18      	subs	r0, r3, r0
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006852:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006856:	e7ed      	b.n	8006834 <__exponent+0x4c>
 8006858:	2330      	movs	r3, #48	; 0x30
 800685a:	3130      	adds	r1, #48	; 0x30
 800685c:	7083      	strb	r3, [r0, #2]
 800685e:	70c1      	strb	r1, [r0, #3]
 8006860:	1d03      	adds	r3, r0, #4
 8006862:	e7f1      	b.n	8006848 <__exponent+0x60>

08006864 <_printf_float>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	ed2d 8b02 	vpush	{d8}
 800686c:	b08d      	sub	sp, #52	; 0x34
 800686e:	460c      	mov	r4, r1
 8006870:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006874:	4616      	mov	r6, r2
 8006876:	461f      	mov	r7, r3
 8006878:	4605      	mov	r5, r0
 800687a:	f002 fe8b 	bl	8009594 <_localeconv_r>
 800687e:	f8d0 a000 	ldr.w	sl, [r0]
 8006882:	4650      	mov	r0, sl
 8006884:	f7f9 fcac 	bl	80001e0 <strlen>
 8006888:	2300      	movs	r3, #0
 800688a:	930a      	str	r3, [sp, #40]	; 0x28
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	f8d8 3000 	ldr.w	r3, [r8]
 8006894:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006898:	3307      	adds	r3, #7
 800689a:	f023 0307 	bic.w	r3, r3, #7
 800689e:	f103 0208 	add.w	r2, r3, #8
 80068a2:	f8c8 2000 	str.w	r2, [r8]
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068b6:	9307      	str	r3, [sp, #28]
 80068b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80068bc:	ee08 0a10 	vmov	s16, r0
 80068c0:	4b9f      	ldr	r3, [pc, #636]	; (8006b40 <_printf_float+0x2dc>)
 80068c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ca:	f7fa f937 	bl	8000b3c <__aeabi_dcmpun>
 80068ce:	bb88      	cbnz	r0, 8006934 <_printf_float+0xd0>
 80068d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d4:	4b9a      	ldr	r3, [pc, #616]	; (8006b40 <_printf_float+0x2dc>)
 80068d6:	f04f 32ff 	mov.w	r2, #4294967295
 80068da:	f7fa f911 	bl	8000b00 <__aeabi_dcmple>
 80068de:	bb48      	cbnz	r0, 8006934 <_printf_float+0xd0>
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	f7fa f900 	bl	8000aec <__aeabi_dcmplt>
 80068ec:	b110      	cbz	r0, 80068f4 <_printf_float+0x90>
 80068ee:	232d      	movs	r3, #45	; 0x2d
 80068f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f4:	4b93      	ldr	r3, [pc, #588]	; (8006b44 <_printf_float+0x2e0>)
 80068f6:	4894      	ldr	r0, [pc, #592]	; (8006b48 <_printf_float+0x2e4>)
 80068f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068fc:	bf94      	ite	ls
 80068fe:	4698      	movls	r8, r3
 8006900:	4680      	movhi	r8, r0
 8006902:	2303      	movs	r3, #3
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	9b05      	ldr	r3, [sp, #20]
 8006908:	f023 0204 	bic.w	r2, r3, #4
 800690c:	6022      	str	r2, [r4, #0]
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	9700      	str	r7, [sp, #0]
 8006914:	4633      	mov	r3, r6
 8006916:	aa0b      	add	r2, sp, #44	; 0x2c
 8006918:	4621      	mov	r1, r4
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f9d8 	bl	8006cd0 <_printf_common>
 8006920:	3001      	adds	r0, #1
 8006922:	f040 8090 	bne.w	8006a46 <_printf_float+0x1e2>
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	b00d      	add	sp, #52	; 0x34
 800692c:	ecbd 8b02 	vpop	{d8}
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f7fa f8fe 	bl	8000b3c <__aeabi_dcmpun>
 8006940:	b140      	cbz	r0, 8006954 <_printf_float+0xf0>
 8006942:	464b      	mov	r3, r9
 8006944:	2b00      	cmp	r3, #0
 8006946:	bfbc      	itt	lt
 8006948:	232d      	movlt	r3, #45	; 0x2d
 800694a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800694e:	487f      	ldr	r0, [pc, #508]	; (8006b4c <_printf_float+0x2e8>)
 8006950:	4b7f      	ldr	r3, [pc, #508]	; (8006b50 <_printf_float+0x2ec>)
 8006952:	e7d1      	b.n	80068f8 <_printf_float+0x94>
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800695a:	9206      	str	r2, [sp, #24]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	d13f      	bne.n	80069e0 <_printf_float+0x17c>
 8006960:	2306      	movs	r3, #6
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	6861      	ldr	r1, [r4, #4]
 8006968:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800696c:	2300      	movs	r3, #0
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	ab0a      	add	r3, sp, #40	; 0x28
 8006972:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006976:	ab09      	add	r3, sp, #36	; 0x24
 8006978:	ec49 8b10 	vmov	d0, r8, r9
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006984:	4628      	mov	r0, r5
 8006986:	f7ff fecd 	bl	8006724 <__cvt>
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800698e:	2b47      	cmp	r3, #71	; 0x47
 8006990:	4680      	mov	r8, r0
 8006992:	d108      	bne.n	80069a6 <_printf_float+0x142>
 8006994:	1cc8      	adds	r0, r1, #3
 8006996:	db02      	blt.n	800699e <_printf_float+0x13a>
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	4299      	cmp	r1, r3
 800699c:	dd41      	ble.n	8006a22 <_printf_float+0x1be>
 800699e:	f1ab 0b02 	sub.w	fp, fp, #2
 80069a2:	fa5f fb8b 	uxtb.w	fp, fp
 80069a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069aa:	d820      	bhi.n	80069ee <_printf_float+0x18a>
 80069ac:	3901      	subs	r1, #1
 80069ae:	465a      	mov	r2, fp
 80069b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069b4:	9109      	str	r1, [sp, #36]	; 0x24
 80069b6:	f7ff ff17 	bl	80067e8 <__exponent>
 80069ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069bc:	1813      	adds	r3, r2, r0
 80069be:	2a01      	cmp	r2, #1
 80069c0:	4681      	mov	r9, r0
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	dc02      	bgt.n	80069cc <_printf_float+0x168>
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	07d2      	lsls	r2, r2, #31
 80069ca:	d501      	bpl.n	80069d0 <_printf_float+0x16c>
 80069cc:	3301      	adds	r3, #1
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d09c      	beq.n	8006912 <_printf_float+0xae>
 80069d8:	232d      	movs	r3, #45	; 0x2d
 80069da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069de:	e798      	b.n	8006912 <_printf_float+0xae>
 80069e0:	9a06      	ldr	r2, [sp, #24]
 80069e2:	2a47      	cmp	r2, #71	; 0x47
 80069e4:	d1be      	bne.n	8006964 <_printf_float+0x100>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1bc      	bne.n	8006964 <_printf_float+0x100>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e7b9      	b.n	8006962 <_printf_float+0xfe>
 80069ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069f2:	d118      	bne.n	8006a26 <_printf_float+0x1c2>
 80069f4:	2900      	cmp	r1, #0
 80069f6:	6863      	ldr	r3, [r4, #4]
 80069f8:	dd0b      	ble.n	8006a12 <_printf_float+0x1ae>
 80069fa:	6121      	str	r1, [r4, #16]
 80069fc:	b913      	cbnz	r3, 8006a04 <_printf_float+0x1a0>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	07d0      	lsls	r0, r2, #31
 8006a02:	d502      	bpl.n	8006a0a <_printf_float+0x1a6>
 8006a04:	3301      	adds	r3, #1
 8006a06:	440b      	add	r3, r1
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a0c:	f04f 0900 	mov.w	r9, #0
 8006a10:	e7de      	b.n	80069d0 <_printf_float+0x16c>
 8006a12:	b913      	cbnz	r3, 8006a1a <_printf_float+0x1b6>
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	07d2      	lsls	r2, r2, #31
 8006a18:	d501      	bpl.n	8006a1e <_printf_float+0x1ba>
 8006a1a:	3302      	adds	r3, #2
 8006a1c:	e7f4      	b.n	8006a08 <_printf_float+0x1a4>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7f2      	b.n	8006a08 <_printf_float+0x1a4>
 8006a22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	db05      	blt.n	8006a38 <_printf_float+0x1d4>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	6121      	str	r1, [r4, #16]
 8006a30:	07d8      	lsls	r0, r3, #31
 8006a32:	d5ea      	bpl.n	8006a0a <_printf_float+0x1a6>
 8006a34:	1c4b      	adds	r3, r1, #1
 8006a36:	e7e7      	b.n	8006a08 <_printf_float+0x1a4>
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	bfd4      	ite	le
 8006a3c:	f1c1 0202 	rsble	r2, r1, #2
 8006a40:	2201      	movgt	r2, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	e7e0      	b.n	8006a08 <_printf_float+0x1a4>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	055a      	lsls	r2, r3, #21
 8006a4a:	d407      	bmi.n	8006a5c <_printf_float+0x1f8>
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	4642      	mov	r2, r8
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	d12c      	bne.n	8006ab4 <_printf_float+0x250>
 8006a5a:	e764      	b.n	8006926 <_printf_float+0xc2>
 8006a5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a60:	f240 80e0 	bls.w	8006c24 <_printf_float+0x3c0>
 8006a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f7fa f834 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d034      	beq.n	8006ade <_printf_float+0x27a>
 8006a74:	4a37      	ldr	r2, [pc, #220]	; (8006b54 <_printf_float+0x2f0>)
 8006a76:	2301      	movs	r3, #1
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f af51 	beq.w	8006926 <_printf_float+0xc2>
 8006a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	db02      	blt.n	8006a92 <_printf_float+0x22e>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	07d8      	lsls	r0, r3, #31
 8006a90:	d510      	bpl.n	8006ab4 <_printf_float+0x250>
 8006a92:	ee18 3a10 	vmov	r3, s16
 8006a96:	4652      	mov	r2, sl
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f af41 	beq.w	8006926 <_printf_float+0xc2>
 8006aa4:	f04f 0800 	mov.w	r8, #0
 8006aa8:	f104 091a 	add.w	r9, r4, #26
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4543      	cmp	r3, r8
 8006ab2:	dc09      	bgt.n	8006ac8 <_printf_float+0x264>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	f100 8105 	bmi.w	8006cc6 <_printf_float+0x462>
 8006abc:	68e0      	ldr	r0, [r4, #12]
 8006abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac0:	4298      	cmp	r0, r3
 8006ac2:	bfb8      	it	lt
 8006ac4:	4618      	movlt	r0, r3
 8006ac6:	e730      	b.n	800692a <_printf_float+0xc6>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	464a      	mov	r2, r9
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	f43f af27 	beq.w	8006926 <_printf_float+0xc2>
 8006ad8:	f108 0801 	add.w	r8, r8, #1
 8006adc:	e7e6      	b.n	8006aac <_printf_float+0x248>
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dc39      	bgt.n	8006b58 <_printf_float+0x2f4>
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <_printf_float+0x2f0>)
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f af19 	beq.w	8006926 <_printf_float+0xc2>
 8006af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af8:	4313      	orrs	r3, r2
 8006afa:	d102      	bne.n	8006b02 <_printf_float+0x29e>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d5d8      	bpl.n	8006ab4 <_printf_float+0x250>
 8006b02:	ee18 3a10 	vmov	r3, s16
 8006b06:	4652      	mov	r2, sl
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f af09 	beq.w	8006926 <_printf_float+0xc2>
 8006b14:	f04f 0900 	mov.w	r9, #0
 8006b18:	f104 0a1a 	add.w	sl, r4, #26
 8006b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1e:	425b      	negs	r3, r3
 8006b20:	454b      	cmp	r3, r9
 8006b22:	dc01      	bgt.n	8006b28 <_printf_float+0x2c4>
 8006b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b26:	e792      	b.n	8006a4e <_printf_float+0x1ea>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4652      	mov	r2, sl
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f aef7 	beq.w	8006926 <_printf_float+0xc2>
 8006b38:	f109 0901 	add.w	r9, r9, #1
 8006b3c:	e7ee      	b.n	8006b1c <_printf_float+0x2b8>
 8006b3e:	bf00      	nop
 8006b40:	7fefffff 	.word	0x7fefffff
 8006b44:	0800bee4 	.word	0x0800bee4
 8006b48:	0800bee8 	.word	0x0800bee8
 8006b4c:	0800bef0 	.word	0x0800bef0
 8006b50:	0800beec 	.word	0x0800beec
 8006b54:	0800bef4 	.word	0x0800bef4
 8006b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	bfa8      	it	ge
 8006b60:	461a      	movge	r2, r3
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	4691      	mov	r9, r2
 8006b66:	dc37      	bgt.n	8006bd8 <_printf_float+0x374>
 8006b68:	f04f 0b00 	mov.w	fp, #0
 8006b6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b70:	f104 021a 	add.w	r2, r4, #26
 8006b74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	eba3 0309 	sub.w	r3, r3, r9
 8006b7c:	455b      	cmp	r3, fp
 8006b7e:	dc33      	bgt.n	8006be8 <_printf_float+0x384>
 8006b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b84:	429a      	cmp	r2, r3
 8006b86:	db3b      	blt.n	8006c00 <_printf_float+0x39c>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	07da      	lsls	r2, r3, #31
 8006b8c:	d438      	bmi.n	8006c00 <_printf_float+0x39c>
 8006b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b90:	9a05      	ldr	r2, [sp, #20]
 8006b92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b94:	1a9a      	subs	r2, r3, r2
 8006b96:	eba3 0901 	sub.w	r9, r3, r1
 8006b9a:	4591      	cmp	r9, r2
 8006b9c:	bfa8      	it	ge
 8006b9e:	4691      	movge	r9, r2
 8006ba0:	f1b9 0f00 	cmp.w	r9, #0
 8006ba4:	dc35      	bgt.n	8006c12 <_printf_float+0x3ae>
 8006ba6:	f04f 0800 	mov.w	r8, #0
 8006baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bae:	f104 0a1a 	add.w	sl, r4, #26
 8006bb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	eba3 0309 	sub.w	r3, r3, r9
 8006bbc:	4543      	cmp	r3, r8
 8006bbe:	f77f af79 	ble.w	8006ab4 <_printf_float+0x250>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	47b8      	blx	r7
 8006bcc:	3001      	adds	r0, #1
 8006bce:	f43f aeaa 	beq.w	8006926 <_printf_float+0xc2>
 8006bd2:	f108 0801 	add.w	r8, r8, #1
 8006bd6:	e7ec      	b.n	8006bb2 <_printf_float+0x34e>
 8006bd8:	4613      	mov	r3, r2
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4642      	mov	r2, r8
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	d1c0      	bne.n	8006b68 <_printf_float+0x304>
 8006be6:	e69e      	b.n	8006926 <_printf_float+0xc2>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	9205      	str	r2, [sp, #20]
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f43f ae97 	beq.w	8006926 <_printf_float+0xc2>
 8006bf8:	9a05      	ldr	r2, [sp, #20]
 8006bfa:	f10b 0b01 	add.w	fp, fp, #1
 8006bfe:	e7b9      	b.n	8006b74 <_printf_float+0x310>
 8006c00:	ee18 3a10 	vmov	r3, s16
 8006c04:	4652      	mov	r2, sl
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d1be      	bne.n	8006b8e <_printf_float+0x32a>
 8006c10:	e689      	b.n	8006926 <_printf_float+0xc2>
 8006c12:	9a05      	ldr	r2, [sp, #20]
 8006c14:	464b      	mov	r3, r9
 8006c16:	4442      	add	r2, r8
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d1c1      	bne.n	8006ba6 <_printf_float+0x342>
 8006c22:	e680      	b.n	8006926 <_printf_float+0xc2>
 8006c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c26:	2a01      	cmp	r2, #1
 8006c28:	dc01      	bgt.n	8006c2e <_printf_float+0x3ca>
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d538      	bpl.n	8006ca0 <_printf_float+0x43c>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4642      	mov	r2, r8
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae74 	beq.w	8006926 <_printf_float+0xc2>
 8006c3e:	ee18 3a10 	vmov	r3, s16
 8006c42:	4652      	mov	r2, sl
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f ae6b 	beq.w	8006926 <_printf_float+0xc2>
 8006c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c54:	2200      	movs	r2, #0
 8006c56:	2300      	movs	r3, #0
 8006c58:	f7f9 ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_printf_float+0x432>
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	f108 0201 	add.w	r2, r8, #1
 8006c64:	3b01      	subs	r3, #1
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d10e      	bne.n	8006c8e <_printf_float+0x42a>
 8006c70:	e659      	b.n	8006926 <_printf_float+0xc2>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f ae52 	beq.w	8006926 <_printf_float+0xc2>
 8006c82:	f108 0801 	add.w	r8, r8, #1
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4543      	cmp	r3, r8
 8006c8c:	dcf1      	bgt.n	8006c72 <_printf_float+0x40e>
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c94:	e6dc      	b.n	8006a50 <_printf_float+0x1ec>
 8006c96:	f04f 0800 	mov.w	r8, #0
 8006c9a:	f104 0a1a 	add.w	sl, r4, #26
 8006c9e:	e7f2      	b.n	8006c86 <_printf_float+0x422>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	e7df      	b.n	8006c66 <_printf_float+0x402>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	464a      	mov	r2, r9
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f43f ae38 	beq.w	8006926 <_printf_float+0xc2>
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cbe:	1a5b      	subs	r3, r3, r1
 8006cc0:	4543      	cmp	r3, r8
 8006cc2:	dcf0      	bgt.n	8006ca6 <_printf_float+0x442>
 8006cc4:	e6fa      	b.n	8006abc <_printf_float+0x258>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f104 0919 	add.w	r9, r4, #25
 8006cce:	e7f4      	b.n	8006cba <_printf_float+0x456>

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	4699      	mov	r9, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cec:	4607      	mov	r7, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_printf_common+0x26>
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	0699      	lsls	r1, r3, #26
 8006cfa:	bf42      	ittt	mi
 8006cfc:	6833      	ldrmi	r3, [r6, #0]
 8006cfe:	3302      	addmi	r3, #2
 8006d00:	6033      	strmi	r3, [r6, #0]
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	f015 0506 	ands.w	r5, r5, #6
 8006d08:	d106      	bne.n	8006d18 <_printf_common+0x48>
 8006d0a:	f104 0a19 	add.w	sl, r4, #25
 8006d0e:	68e3      	ldr	r3, [r4, #12]
 8006d10:	6832      	ldr	r2, [r6, #0]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc26      	bgt.n	8006d66 <_printf_common+0x96>
 8006d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d1c:	1e13      	subs	r3, r2, #0
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	0692      	lsls	r2, r2, #26
 8006d26:	d42b      	bmi.n	8006d80 <_printf_common+0xb0>
 8006d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c0      	blx	r8
 8006d32:	3001      	adds	r0, #1
 8006d34:	d01e      	beq.n	8006d74 <_printf_common+0xa4>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	68e5      	ldr	r5, [r4, #12]
 8006d3a:	6832      	ldr	r2, [r6, #0]
 8006d3c:	f003 0306 	and.w	r3, r3, #6
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	bf08      	it	eq
 8006d44:	1aad      	subeq	r5, r5, r2
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	bf0c      	ite	eq
 8006d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d50:	2500      	movne	r5, #0
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bfc4      	itt	gt
 8006d56:	1a9b      	subgt	r3, r3, r2
 8006d58:	18ed      	addgt	r5, r5, r3
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	341a      	adds	r4, #26
 8006d5e:	42b5      	cmp	r5, r6
 8006d60:	d11a      	bne.n	8006d98 <_printf_common+0xc8>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e008      	b.n	8006d78 <_printf_common+0xa8>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0xac>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7c6      	b.n	8006d0e <_printf_common+0x3e>
 8006d80:	18e1      	adds	r1, r4, r3
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	2030      	movs	r0, #48	; 0x30
 8006d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8a:	4422      	add	r2, r4
 8006d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d94:	3302      	adds	r3, #2
 8006d96:	e7c7      	b.n	8006d28 <_printf_common+0x58>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0e6      	beq.n	8006d74 <_printf_common+0xa4>
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7d9      	b.n	8006d5e <_printf_common+0x8e>
	...

08006dac <_printf_i>:
 8006dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	7e0f      	ldrb	r7, [r1, #24]
 8006db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006db4:	2f78      	cmp	r7, #120	; 0x78
 8006db6:	4691      	mov	r9, r2
 8006db8:	4680      	mov	r8, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	469a      	mov	sl, r3
 8006dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dc2:	d807      	bhi.n	8006dd4 <_printf_i+0x28>
 8006dc4:	2f62      	cmp	r7, #98	; 0x62
 8006dc6:	d80a      	bhi.n	8006dde <_printf_i+0x32>
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	f000 80d8 	beq.w	8006f7e <_printf_i+0x1d2>
 8006dce:	2f58      	cmp	r7, #88	; 0x58
 8006dd0:	f000 80a3 	beq.w	8006f1a <_printf_i+0x16e>
 8006dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ddc:	e03a      	b.n	8006e54 <_printf_i+0xa8>
 8006dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de2:	2b15      	cmp	r3, #21
 8006de4:	d8f6      	bhi.n	8006dd4 <_printf_i+0x28>
 8006de6:	a101      	add	r1, pc, #4	; (adr r1, 8006dec <_printf_i+0x40>)
 8006de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006dd5 	.word	0x08006dd5
 8006df8:	08006dd5 	.word	0x08006dd5
 8006dfc:	08006dd5 	.word	0x08006dd5
 8006e00:	08006dd5 	.word	0x08006dd5
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006dd5 	.word	0x08006dd5
 8006e0c:	08006dd5 	.word	0x08006dd5
 8006e10:	08006dd5 	.word	0x08006dd5
 8006e14:	08006dd5 	.word	0x08006dd5
 8006e18:	08006f65 	.word	0x08006f65
 8006e1c:	08006e89 	.word	0x08006e89
 8006e20:	08006f47 	.word	0x08006f47
 8006e24:	08006dd5 	.word	0x08006dd5
 8006e28:	08006dd5 	.word	0x08006dd5
 8006e2c:	08006f87 	.word	0x08006f87
 8006e30:	08006dd5 	.word	0x08006dd5
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006dd5 	.word	0x08006dd5
 8006e3c:	08006dd5 	.word	0x08006dd5
 8006e40:	08006f4f 	.word	0x08006f4f
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	602a      	str	r2, [r5, #0]
 8006e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0a3      	b.n	8006fa0 <_printf_i+0x1f4>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	6829      	ldr	r1, [r5, #0]
 8006e5c:	0606      	lsls	r6, r0, #24
 8006e5e:	f101 0304 	add.w	r3, r1, #4
 8006e62:	d50a      	bpl.n	8006e7a <_printf_i+0xce>
 8006e64:	680e      	ldr	r6, [r1, #0]
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	da03      	bge.n	8006e74 <_printf_i+0xc8>
 8006e6c:	232d      	movs	r3, #45	; 0x2d
 8006e6e:	4276      	negs	r6, r6
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	485e      	ldr	r0, [pc, #376]	; (8006ff0 <_printf_i+0x244>)
 8006e76:	230a      	movs	r3, #10
 8006e78:	e019      	b.n	8006eae <_printf_i+0x102>
 8006e7a:	680e      	ldr	r6, [r1, #0]
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e82:	bf18      	it	ne
 8006e84:	b236      	sxthne	r6, r6
 8006e86:	e7ef      	b.n	8006e68 <_printf_i+0xbc>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	1d19      	adds	r1, r3, #4
 8006e8e:	6029      	str	r1, [r5, #0]
 8006e90:	0601      	lsls	r1, r0, #24
 8006e92:	d501      	bpl.n	8006e98 <_printf_i+0xec>
 8006e94:	681e      	ldr	r6, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <_printf_i+0xf2>
 8006e98:	0646      	lsls	r6, r0, #25
 8006e9a:	d5fb      	bpl.n	8006e94 <_printf_i+0xe8>
 8006e9c:	881e      	ldrh	r6, [r3, #0]
 8006e9e:	4854      	ldr	r0, [pc, #336]	; (8006ff0 <_printf_i+0x244>)
 8006ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2308      	moveq	r3, #8
 8006ea6:	230a      	movne	r3, #10
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eae:	6865      	ldr	r5, [r4, #4]
 8006eb0:	60a5      	str	r5, [r4, #8]
 8006eb2:	2d00      	cmp	r5, #0
 8006eb4:	bfa2      	ittt	ge
 8006eb6:	6821      	ldrge	r1, [r4, #0]
 8006eb8:	f021 0104 	bicge.w	r1, r1, #4
 8006ebc:	6021      	strge	r1, [r4, #0]
 8006ebe:	b90e      	cbnz	r6, 8006ec4 <_printf_i+0x118>
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	d04d      	beq.n	8006f60 <_printf_i+0x1b4>
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eca:	fb03 6711 	mls	r7, r3, r1, r6
 8006ece:	5dc7      	ldrb	r7, [r0, r7]
 8006ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ed4:	4637      	mov	r7, r6
 8006ed6:	42bb      	cmp	r3, r7
 8006ed8:	460e      	mov	r6, r1
 8006eda:	d9f4      	bls.n	8006ec6 <_printf_i+0x11a>
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10b      	bne.n	8006ef8 <_printf_i+0x14c>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07de      	lsls	r6, r3, #31
 8006ee4:	d508      	bpl.n	8006ef8 <_printf_i+0x14c>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4299      	cmp	r1, r3
 8006eec:	bfde      	ittt	le
 8006eee:	2330      	movle	r3, #48	; 0x30
 8006ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ef8:	1b52      	subs	r2, r2, r5
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	f8cd a000 	str.w	sl, [sp]
 8006f00:	464b      	mov	r3, r9
 8006f02:	aa03      	add	r2, sp, #12
 8006f04:	4621      	mov	r1, r4
 8006f06:	4640      	mov	r0, r8
 8006f08:	f7ff fee2 	bl	8006cd0 <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d14c      	bne.n	8006faa <_printf_i+0x1fe>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	b004      	add	sp, #16
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	4835      	ldr	r0, [pc, #212]	; (8006ff0 <_printf_i+0x244>)
 8006f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f20:	6829      	ldr	r1, [r5, #0]
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f28:	6029      	str	r1, [r5, #0]
 8006f2a:	061d      	lsls	r5, r3, #24
 8006f2c:	d514      	bpl.n	8006f58 <_printf_i+0x1ac>
 8006f2e:	07df      	lsls	r7, r3, #31
 8006f30:	bf44      	itt	mi
 8006f32:	f043 0320 	orrmi.w	r3, r3, #32
 8006f36:	6023      	strmi	r3, [r4, #0]
 8006f38:	b91e      	cbnz	r6, 8006f42 <_printf_i+0x196>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2310      	movs	r3, #16
 8006f44:	e7b0      	b.n	8006ea8 <_printf_i+0xfc>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f043 0320 	orr.w	r3, r3, #32
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	2378      	movs	r3, #120	; 0x78
 8006f50:	4828      	ldr	r0, [pc, #160]	; (8006ff4 <_printf_i+0x248>)
 8006f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f56:	e7e3      	b.n	8006f20 <_printf_i+0x174>
 8006f58:	0659      	lsls	r1, r3, #25
 8006f5a:	bf48      	it	mi
 8006f5c:	b2b6      	uxthmi	r6, r6
 8006f5e:	e7e6      	b.n	8006f2e <_printf_i+0x182>
 8006f60:	4615      	mov	r5, r2
 8006f62:	e7bb      	b.n	8006edc <_printf_i+0x130>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	6826      	ldr	r6, [r4, #0]
 8006f68:	6961      	ldr	r1, [r4, #20]
 8006f6a:	1d18      	adds	r0, r3, #4
 8006f6c:	6028      	str	r0, [r5, #0]
 8006f6e:	0635      	lsls	r5, r6, #24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x1cc>
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1d2>
 8006f78:	0670      	lsls	r0, r6, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x1c8>
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	4615      	mov	r5, r2
 8006f84:	e7ba      	b.n	8006efc <_printf_i+0x150>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	602a      	str	r2, [r5, #0]
 8006f8c:	681d      	ldr	r5, [r3, #0]
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7f9 f92c 	bl	80001f0 <memchr>
 8006f98:	b108      	cbz	r0, 8006f9e <_printf_i+0x1f2>
 8006f9a:	1b40      	subs	r0, r0, r5
 8006f9c:	6060      	str	r0, [r4, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa8:	e7a8      	b.n	8006efc <_printf_i+0x150>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	462a      	mov	r2, r5
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0ab      	beq.n	8006f10 <_printf_i+0x164>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	079b      	lsls	r3, r3, #30
 8006fbc:	d413      	bmi.n	8006fe6 <_printf_i+0x23a>
 8006fbe:	68e0      	ldr	r0, [r4, #12]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	bfb8      	it	lt
 8006fc6:	4618      	movlt	r0, r3
 8006fc8:	e7a4      	b.n	8006f14 <_printf_i+0x168>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d09b      	beq.n	8006f10 <_printf_i+0x164>
 8006fd8:	3501      	adds	r5, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf2      	bgt.n	8006fca <_printf_i+0x21e>
 8006fe4:	e7eb      	b.n	8006fbe <_printf_i+0x212>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	f104 0619 	add.w	r6, r4, #25
 8006fec:	e7f5      	b.n	8006fda <_printf_i+0x22e>
 8006fee:	bf00      	nop
 8006ff0:	0800bef6 	.word	0x0800bef6
 8006ff4:	0800bf07 	.word	0x0800bf07

08006ff8 <_scanf_float>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	4617      	mov	r7, r2
 8007000:	9303      	str	r3, [sp, #12]
 8007002:	688b      	ldr	r3, [r1, #8]
 8007004:	1e5a      	subs	r2, r3, #1
 8007006:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800700a:	bf83      	ittte	hi
 800700c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007010:	195b      	addhi	r3, r3, r5
 8007012:	9302      	strhi	r3, [sp, #8]
 8007014:	2300      	movls	r3, #0
 8007016:	bf86      	itte	hi
 8007018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800701c:	608b      	strhi	r3, [r1, #8]
 800701e:	9302      	strls	r3, [sp, #8]
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	468b      	mov	fp, r1
 8007024:	2500      	movs	r5, #0
 8007026:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800702a:	f84b 3b1c 	str.w	r3, [fp], #28
 800702e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007032:	4680      	mov	r8, r0
 8007034:	460c      	mov	r4, r1
 8007036:	465e      	mov	r6, fp
 8007038:	46aa      	mov	sl, r5
 800703a:	46a9      	mov	r9, r5
 800703c:	9501      	str	r5, [sp, #4]
 800703e:	68a2      	ldr	r2, [r4, #8]
 8007040:	b152      	cbz	r2, 8007058 <_scanf_float+0x60>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b4e      	cmp	r3, #78	; 0x4e
 8007048:	d864      	bhi.n	8007114 <_scanf_float+0x11c>
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d83c      	bhi.n	80070c8 <_scanf_float+0xd0>
 800704e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007052:	b2c8      	uxtb	r0, r1
 8007054:	280e      	cmp	r0, #14
 8007056:	d93a      	bls.n	80070ce <_scanf_float+0xd6>
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	d003      	beq.n	8007066 <_scanf_float+0x6e>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800706a:	f1ba 0f01 	cmp.w	sl, #1
 800706e:	f200 8113 	bhi.w	8007298 <_scanf_float+0x2a0>
 8007072:	455e      	cmp	r6, fp
 8007074:	f200 8105 	bhi.w	8007282 <_scanf_float+0x28a>
 8007078:	2501      	movs	r5, #1
 800707a:	4628      	mov	r0, r5
 800707c:	b007      	add	sp, #28
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007086:	2a0d      	cmp	r2, #13
 8007088:	d8e6      	bhi.n	8007058 <_scanf_float+0x60>
 800708a:	a101      	add	r1, pc, #4	; (adr r1, 8007090 <_scanf_float+0x98>)
 800708c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007090:	080071cf 	.word	0x080071cf
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	08007059 	.word	0x08007059
 80070a0:	0800722f 	.word	0x0800722f
 80070a4:	08007207 	.word	0x08007207
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	080071dd 	.word	0x080071dd
 80070b4:	08007059 	.word	0x08007059
 80070b8:	08007059 	.word	0x08007059
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	08007195 	.word	0x08007195
 80070c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070cc:	e7db      	b.n	8007086 <_scanf_float+0x8e>
 80070ce:	290e      	cmp	r1, #14
 80070d0:	d8c2      	bhi.n	8007058 <_scanf_float+0x60>
 80070d2:	a001      	add	r0, pc, #4	; (adr r0, 80070d8 <_scanf_float+0xe0>)
 80070d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070d8:	08007187 	.word	0x08007187
 80070dc:	08007059 	.word	0x08007059
 80070e0:	08007187 	.word	0x08007187
 80070e4:	0800721b 	.word	0x0800721b
 80070e8:	08007059 	.word	0x08007059
 80070ec:	08007135 	.word	0x08007135
 80070f0:	08007171 	.word	0x08007171
 80070f4:	08007171 	.word	0x08007171
 80070f8:	08007171 	.word	0x08007171
 80070fc:	08007171 	.word	0x08007171
 8007100:	08007171 	.word	0x08007171
 8007104:	08007171 	.word	0x08007171
 8007108:	08007171 	.word	0x08007171
 800710c:	08007171 	.word	0x08007171
 8007110:	08007171 	.word	0x08007171
 8007114:	2b6e      	cmp	r3, #110	; 0x6e
 8007116:	d809      	bhi.n	800712c <_scanf_float+0x134>
 8007118:	2b60      	cmp	r3, #96	; 0x60
 800711a:	d8b2      	bhi.n	8007082 <_scanf_float+0x8a>
 800711c:	2b54      	cmp	r3, #84	; 0x54
 800711e:	d077      	beq.n	8007210 <_scanf_float+0x218>
 8007120:	2b59      	cmp	r3, #89	; 0x59
 8007122:	d199      	bne.n	8007058 <_scanf_float+0x60>
 8007124:	2d07      	cmp	r5, #7
 8007126:	d197      	bne.n	8007058 <_scanf_float+0x60>
 8007128:	2508      	movs	r5, #8
 800712a:	e029      	b.n	8007180 <_scanf_float+0x188>
 800712c:	2b74      	cmp	r3, #116	; 0x74
 800712e:	d06f      	beq.n	8007210 <_scanf_float+0x218>
 8007130:	2b79      	cmp	r3, #121	; 0x79
 8007132:	e7f6      	b.n	8007122 <_scanf_float+0x12a>
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	05c8      	lsls	r0, r1, #23
 8007138:	d51a      	bpl.n	8007170 <_scanf_float+0x178>
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007140:	6021      	str	r1, [r4, #0]
 8007142:	f109 0901 	add.w	r9, r9, #1
 8007146:	b11b      	cbz	r3, 8007150 <_scanf_float+0x158>
 8007148:	3b01      	subs	r3, #1
 800714a:	3201      	adds	r2, #1
 800714c:	9302      	str	r3, [sp, #8]
 800714e:	60a2      	str	r2, [r4, #8]
 8007150:	68a3      	ldr	r3, [r4, #8]
 8007152:	3b01      	subs	r3, #1
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	f340 8084 	ble.w	8007270 <_scanf_float+0x278>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	e766      	b.n	800703e <_scanf_float+0x46>
 8007170:	eb1a 0f05 	cmn.w	sl, r5
 8007174:	f47f af70 	bne.w	8007058 <_scanf_float+0x60>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	f806 3b01 	strb.w	r3, [r6], #1
 8007184:	e7e4      	b.n	8007150 <_scanf_float+0x158>
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	0610      	lsls	r0, r2, #24
 800718a:	f57f af65 	bpl.w	8007058 <_scanf_float+0x60>
 800718e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007192:	e7f4      	b.n	800717e <_scanf_float+0x186>
 8007194:	f1ba 0f00 	cmp.w	sl, #0
 8007198:	d10e      	bne.n	80071b8 <_scanf_float+0x1c0>
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	d10e      	bne.n	80071be <_scanf_float+0x1c6>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071aa:	d108      	bne.n	80071be <_scanf_float+0x1c6>
 80071ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071b0:	6022      	str	r2, [r4, #0]
 80071b2:	f04f 0a01 	mov.w	sl, #1
 80071b6:	e7e3      	b.n	8007180 <_scanf_float+0x188>
 80071b8:	f1ba 0f02 	cmp.w	sl, #2
 80071bc:	d055      	beq.n	800726a <_scanf_float+0x272>
 80071be:	2d01      	cmp	r5, #1
 80071c0:	d002      	beq.n	80071c8 <_scanf_float+0x1d0>
 80071c2:	2d04      	cmp	r5, #4
 80071c4:	f47f af48 	bne.w	8007058 <_scanf_float+0x60>
 80071c8:	3501      	adds	r5, #1
 80071ca:	b2ed      	uxtb	r5, r5
 80071cc:	e7d8      	b.n	8007180 <_scanf_float+0x188>
 80071ce:	f1ba 0f01 	cmp.w	sl, #1
 80071d2:	f47f af41 	bne.w	8007058 <_scanf_float+0x60>
 80071d6:	f04f 0a02 	mov.w	sl, #2
 80071da:	e7d1      	b.n	8007180 <_scanf_float+0x188>
 80071dc:	b97d      	cbnz	r5, 80071fe <_scanf_float+0x206>
 80071de:	f1b9 0f00 	cmp.w	r9, #0
 80071e2:	f47f af3c 	bne.w	800705e <_scanf_float+0x66>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071f0:	f47f af39 	bne.w	8007066 <_scanf_float+0x6e>
 80071f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	2501      	movs	r5, #1
 80071fc:	e7c0      	b.n	8007180 <_scanf_float+0x188>
 80071fe:	2d03      	cmp	r5, #3
 8007200:	d0e2      	beq.n	80071c8 <_scanf_float+0x1d0>
 8007202:	2d05      	cmp	r5, #5
 8007204:	e7de      	b.n	80071c4 <_scanf_float+0x1cc>
 8007206:	2d02      	cmp	r5, #2
 8007208:	f47f af26 	bne.w	8007058 <_scanf_float+0x60>
 800720c:	2503      	movs	r5, #3
 800720e:	e7b7      	b.n	8007180 <_scanf_float+0x188>
 8007210:	2d06      	cmp	r5, #6
 8007212:	f47f af21 	bne.w	8007058 <_scanf_float+0x60>
 8007216:	2507      	movs	r5, #7
 8007218:	e7b2      	b.n	8007180 <_scanf_float+0x188>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	0591      	lsls	r1, r2, #22
 800721e:	f57f af1b 	bpl.w	8007058 <_scanf_float+0x60>
 8007222:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	f8cd 9004 	str.w	r9, [sp, #4]
 800722c:	e7a8      	b.n	8007180 <_scanf_float+0x188>
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007234:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007238:	d006      	beq.n	8007248 <_scanf_float+0x250>
 800723a:	0550      	lsls	r0, r2, #21
 800723c:	f57f af0c 	bpl.w	8007058 <_scanf_float+0x60>
 8007240:	f1b9 0f00 	cmp.w	r9, #0
 8007244:	f43f af0f 	beq.w	8007066 <_scanf_float+0x6e>
 8007248:	0591      	lsls	r1, r2, #22
 800724a:	bf58      	it	pl
 800724c:	9901      	ldrpl	r1, [sp, #4]
 800724e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007252:	bf58      	it	pl
 8007254:	eba9 0101 	subpl.w	r1, r9, r1
 8007258:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800725c:	bf58      	it	pl
 800725e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	f04f 0900 	mov.w	r9, #0
 8007268:	e78a      	b.n	8007180 <_scanf_float+0x188>
 800726a:	f04f 0a03 	mov.w	sl, #3
 800726e:	e787      	b.n	8007180 <_scanf_float+0x188>
 8007270:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007274:	4639      	mov	r1, r7
 8007276:	4640      	mov	r0, r8
 8007278:	4798      	blx	r3
 800727a:	2800      	cmp	r0, #0
 800727c:	f43f aedf 	beq.w	800703e <_scanf_float+0x46>
 8007280:	e6ea      	b.n	8007058 <_scanf_float+0x60>
 8007282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800728a:	463a      	mov	r2, r7
 800728c:	4640      	mov	r0, r8
 800728e:	4798      	blx	r3
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	3b01      	subs	r3, #1
 8007294:	6123      	str	r3, [r4, #16]
 8007296:	e6ec      	b.n	8007072 <_scanf_float+0x7a>
 8007298:	1e6b      	subs	r3, r5, #1
 800729a:	2b06      	cmp	r3, #6
 800729c:	d825      	bhi.n	80072ea <_scanf_float+0x2f2>
 800729e:	2d02      	cmp	r5, #2
 80072a0:	d836      	bhi.n	8007310 <_scanf_float+0x318>
 80072a2:	455e      	cmp	r6, fp
 80072a4:	f67f aee8 	bls.w	8007078 <_scanf_float+0x80>
 80072a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072b0:	463a      	mov	r2, r7
 80072b2:	4640      	mov	r0, r8
 80072b4:	4798      	blx	r3
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	e7f1      	b.n	80072a2 <_scanf_float+0x2aa>
 80072be:	9802      	ldr	r0, [sp, #8]
 80072c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	463a      	mov	r2, r7
 80072cc:	4640      	mov	r0, r8
 80072ce:	4798      	blx	r3
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072da:	fa5f fa8a 	uxtb.w	sl, sl
 80072de:	f1ba 0f02 	cmp.w	sl, #2
 80072e2:	d1ec      	bne.n	80072be <_scanf_float+0x2c6>
 80072e4:	3d03      	subs	r5, #3
 80072e6:	b2ed      	uxtb	r5, r5
 80072e8:	1b76      	subs	r6, r6, r5
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	05da      	lsls	r2, r3, #23
 80072ee:	d52f      	bpl.n	8007350 <_scanf_float+0x358>
 80072f0:	055b      	lsls	r3, r3, #21
 80072f2:	d510      	bpl.n	8007316 <_scanf_float+0x31e>
 80072f4:	455e      	cmp	r6, fp
 80072f6:	f67f aebf 	bls.w	8007078 <_scanf_float+0x80>
 80072fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007302:	463a      	mov	r2, r7
 8007304:	4640      	mov	r0, r8
 8007306:	4798      	blx	r3
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	3b01      	subs	r3, #1
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	e7f1      	b.n	80072f4 <_scanf_float+0x2fc>
 8007310:	46aa      	mov	sl, r5
 8007312:	9602      	str	r6, [sp, #8]
 8007314:	e7df      	b.n	80072d6 <_scanf_float+0x2de>
 8007316:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	2965      	cmp	r1, #101	; 0x65
 800731e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007322:	f106 35ff 	add.w	r5, r6, #4294967295
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	d00c      	beq.n	8007344 <_scanf_float+0x34c>
 800732a:	2945      	cmp	r1, #69	; 0x45
 800732c:	d00a      	beq.n	8007344 <_scanf_float+0x34c>
 800732e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007332:	463a      	mov	r2, r7
 8007334:	4640      	mov	r0, r8
 8007336:	4798      	blx	r3
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800733e:	3b01      	subs	r3, #1
 8007340:	1eb5      	subs	r5, r6, #2
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007348:	463a      	mov	r2, r7
 800734a:	4640      	mov	r0, r8
 800734c:	4798      	blx	r3
 800734e:	462e      	mov	r6, r5
 8007350:	6825      	ldr	r5, [r4, #0]
 8007352:	f015 0510 	ands.w	r5, r5, #16
 8007356:	d159      	bne.n	800740c <_scanf_float+0x414>
 8007358:	7035      	strb	r5, [r6, #0]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d11b      	bne.n	800739e <_scanf_float+0x3a6>
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	454b      	cmp	r3, r9
 800736a:	eba3 0209 	sub.w	r2, r3, r9
 800736e:	d123      	bne.n	80073b8 <_scanf_float+0x3c0>
 8007370:	2200      	movs	r2, #0
 8007372:	4659      	mov	r1, fp
 8007374:	4640      	mov	r0, r8
 8007376:	f000 fe99 	bl	80080ac <_strtod_r>
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	f012 0f02 	tst.w	r2, #2
 8007382:	ec57 6b10 	vmov	r6, r7, d0
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	d021      	beq.n	80073ce <_scanf_float+0x3d6>
 800738a:	9903      	ldr	r1, [sp, #12]
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	600a      	str	r2, [r1, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	e9c3 6700 	strd	r6, r7, [r3]
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60e3      	str	r3, [r4, #12]
 800739c:	e66d      	b.n	800707a <_scanf_float+0x82>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0e5      	beq.n	8007370 <_scanf_float+0x378>
 80073a4:	9905      	ldr	r1, [sp, #20]
 80073a6:	230a      	movs	r3, #10
 80073a8:	462a      	mov	r2, r5
 80073aa:	3101      	adds	r1, #1
 80073ac:	4640      	mov	r0, r8
 80073ae:	f000 ff05 	bl	80081bc <_strtol_r>
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	9e05      	ldr	r6, [sp, #20]
 80073b6:	1ac2      	subs	r2, r0, r3
 80073b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073bc:	429e      	cmp	r6, r3
 80073be:	bf28      	it	cs
 80073c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073c4:	4912      	ldr	r1, [pc, #72]	; (8007410 <_scanf_float+0x418>)
 80073c6:	4630      	mov	r0, r6
 80073c8:	f000 f82c 	bl	8007424 <siprintf>
 80073cc:	e7d0      	b.n	8007370 <_scanf_float+0x378>
 80073ce:	9903      	ldr	r1, [sp, #12]
 80073d0:	f012 0f04 	tst.w	r2, #4
 80073d4:	f103 0204 	add.w	r2, r3, #4
 80073d8:	600a      	str	r2, [r1, #0]
 80073da:	d1d9      	bne.n	8007390 <_scanf_float+0x398>
 80073dc:	f8d3 8000 	ldr.w	r8, [r3]
 80073e0:	ee10 2a10 	vmov	r2, s0
 80073e4:	ee10 0a10 	vmov	r0, s0
 80073e8:	463b      	mov	r3, r7
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f9 fba6 	bl	8000b3c <__aeabi_dcmpun>
 80073f0:	b128      	cbz	r0, 80073fe <_scanf_float+0x406>
 80073f2:	4808      	ldr	r0, [pc, #32]	; (8007414 <_scanf_float+0x41c>)
 80073f4:	f000 f810 	bl	8007418 <nanf>
 80073f8:	ed88 0a00 	vstr	s0, [r8]
 80073fc:	e7cb      	b.n	8007396 <_scanf_float+0x39e>
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 fbf9 	bl	8000bf8 <__aeabi_d2f>
 8007406:	f8c8 0000 	str.w	r0, [r8]
 800740a:	e7c4      	b.n	8007396 <_scanf_float+0x39e>
 800740c:	2500      	movs	r5, #0
 800740e:	e634      	b.n	800707a <_scanf_float+0x82>
 8007410:	0800bf18 	.word	0x0800bf18
 8007414:	0800c320 	.word	0x0800c320

08007418 <nanf>:
 8007418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007420 <nanf+0x8>
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	7fc00000 	.word	0x7fc00000

08007424 <siprintf>:
 8007424:	b40e      	push	{r1, r2, r3}
 8007426:	b500      	push	{lr}
 8007428:	b09c      	sub	sp, #112	; 0x70
 800742a:	ab1d      	add	r3, sp, #116	; 0x74
 800742c:	9002      	str	r0, [sp, #8]
 800742e:	9006      	str	r0, [sp, #24]
 8007430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007434:	4809      	ldr	r0, [pc, #36]	; (800745c <siprintf+0x38>)
 8007436:	9107      	str	r1, [sp, #28]
 8007438:	9104      	str	r1, [sp, #16]
 800743a:	4909      	ldr	r1, [pc, #36]	; (8007460 <siprintf+0x3c>)
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	9105      	str	r1, [sp, #20]
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	a902      	add	r1, sp, #8
 8007448:	f002 fee4 	bl	800a214 <_svfiprintf_r>
 800744c:	9b02      	ldr	r3, [sp, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	b01c      	add	sp, #112	; 0x70
 8007454:	f85d eb04 	ldr.w	lr, [sp], #4
 8007458:	b003      	add	sp, #12
 800745a:	4770      	bx	lr
 800745c:	20000014 	.word	0x20000014
 8007460:	ffff0208 	.word	0xffff0208

08007464 <sulp>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	ec45 4b10 	vmov	d0, r4, r5
 800746e:	4616      	mov	r6, r2
 8007470:	f002 fc2e 	bl	8009cd0 <__ulp>
 8007474:	ec51 0b10 	vmov	r0, r1, d0
 8007478:	b17e      	cbz	r6, 800749a <sulp+0x36>
 800747a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800747e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007482:	2b00      	cmp	r3, #0
 8007484:	dd09      	ble.n	800749a <sulp+0x36>
 8007486:	051b      	lsls	r3, r3, #20
 8007488:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800748c:	2400      	movs	r4, #0
 800748e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007492:	4622      	mov	r2, r4
 8007494:	462b      	mov	r3, r5
 8007496:	f7f9 f8b7 	bl	8000608 <__aeabi_dmul>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	0000      	movs	r0, r0
	...

080074a0 <_strtod_l>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	ed2d 8b02 	vpush	{d8}
 80074a8:	b09d      	sub	sp, #116	; 0x74
 80074aa:	461f      	mov	r7, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	9318      	str	r3, [sp, #96]	; 0x60
 80074b0:	4ba2      	ldr	r3, [pc, #648]	; (800773c <_strtod_l+0x29c>)
 80074b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	4604      	mov	r4, r0
 80074ba:	4618      	mov	r0, r3
 80074bc:	4688      	mov	r8, r1
 80074be:	f7f8 fe8f 	bl	80001e0 <strlen>
 80074c2:	f04f 0a00 	mov.w	sl, #0
 80074c6:	4605      	mov	r5, r0
 80074c8:	f04f 0b00 	mov.w	fp, #0
 80074cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	2a2b      	cmp	r2, #43	; 0x2b
 80074d6:	d04e      	beq.n	8007576 <_strtod_l+0xd6>
 80074d8:	d83b      	bhi.n	8007552 <_strtod_l+0xb2>
 80074da:	2a0d      	cmp	r2, #13
 80074dc:	d834      	bhi.n	8007548 <_strtod_l+0xa8>
 80074de:	2a08      	cmp	r2, #8
 80074e0:	d834      	bhi.n	800754c <_strtod_l+0xac>
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d03e      	beq.n	8007564 <_strtod_l+0xc4>
 80074e6:	2300      	movs	r3, #0
 80074e8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80074ec:	7833      	ldrb	r3, [r6, #0]
 80074ee:	2b30      	cmp	r3, #48	; 0x30
 80074f0:	f040 80b0 	bne.w	8007654 <_strtod_l+0x1b4>
 80074f4:	7873      	ldrb	r3, [r6, #1]
 80074f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074fa:	2b58      	cmp	r3, #88	; 0x58
 80074fc:	d168      	bne.n	80075d0 <_strtod_l+0x130>
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	ab18      	add	r3, sp, #96	; 0x60
 8007504:	9702      	str	r7, [sp, #8]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4a8d      	ldr	r2, [pc, #564]	; (8007740 <_strtod_l+0x2a0>)
 800750a:	ab19      	add	r3, sp, #100	; 0x64
 800750c:	a917      	add	r1, sp, #92	; 0x5c
 800750e:	4620      	mov	r0, r4
 8007510:	f001 fd38 	bl	8008f84 <__gethex>
 8007514:	f010 0707 	ands.w	r7, r0, #7
 8007518:	4605      	mov	r5, r0
 800751a:	d005      	beq.n	8007528 <_strtod_l+0x88>
 800751c:	2f06      	cmp	r7, #6
 800751e:	d12c      	bne.n	800757a <_strtod_l+0xda>
 8007520:	3601      	adds	r6, #1
 8007522:	2300      	movs	r3, #0
 8007524:	9617      	str	r6, [sp, #92]	; 0x5c
 8007526:	930a      	str	r3, [sp, #40]	; 0x28
 8007528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800752a:	2b00      	cmp	r3, #0
 800752c:	f040 8590 	bne.w	8008050 <_strtod_l+0xbb0>
 8007530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007532:	b1eb      	cbz	r3, 8007570 <_strtod_l+0xd0>
 8007534:	4652      	mov	r2, sl
 8007536:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800753a:	ec43 2b10 	vmov	d0, r2, r3
 800753e:	b01d      	add	sp, #116	; 0x74
 8007540:	ecbd 8b02 	vpop	{d8}
 8007544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007548:	2a20      	cmp	r2, #32
 800754a:	d1cc      	bne.n	80074e6 <_strtod_l+0x46>
 800754c:	3301      	adds	r3, #1
 800754e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007550:	e7be      	b.n	80074d0 <_strtod_l+0x30>
 8007552:	2a2d      	cmp	r2, #45	; 0x2d
 8007554:	d1c7      	bne.n	80074e6 <_strtod_l+0x46>
 8007556:	2201      	movs	r2, #1
 8007558:	920a      	str	r2, [sp, #40]	; 0x28
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	9217      	str	r2, [sp, #92]	; 0x5c
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1c2      	bne.n	80074ea <_strtod_l+0x4a>
 8007564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007566:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 856e 	bne.w	800804c <_strtod_l+0xbac>
 8007570:	4652      	mov	r2, sl
 8007572:	465b      	mov	r3, fp
 8007574:	e7e1      	b.n	800753a <_strtod_l+0x9a>
 8007576:	2200      	movs	r2, #0
 8007578:	e7ee      	b.n	8007558 <_strtod_l+0xb8>
 800757a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800757c:	b13a      	cbz	r2, 800758e <_strtod_l+0xee>
 800757e:	2135      	movs	r1, #53	; 0x35
 8007580:	a81a      	add	r0, sp, #104	; 0x68
 8007582:	f002 fcb0 	bl	8009ee6 <__copybits>
 8007586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007588:	4620      	mov	r0, r4
 800758a:	f002 f86f 	bl	800966c <_Bfree>
 800758e:	3f01      	subs	r7, #1
 8007590:	2f04      	cmp	r7, #4
 8007592:	d806      	bhi.n	80075a2 <_strtod_l+0x102>
 8007594:	e8df f007 	tbb	[pc, r7]
 8007598:	1714030a 	.word	0x1714030a
 800759c:	0a          	.byte	0x0a
 800759d:	00          	.byte	0x00
 800759e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80075a2:	0728      	lsls	r0, r5, #28
 80075a4:	d5c0      	bpl.n	8007528 <_strtod_l+0x88>
 80075a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80075aa:	e7bd      	b.n	8007528 <_strtod_l+0x88>
 80075ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80075b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075be:	e7f0      	b.n	80075a2 <_strtod_l+0x102>
 80075c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007744 <_strtod_l+0x2a4>
 80075c4:	e7ed      	b.n	80075a2 <_strtod_l+0x102>
 80075c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80075ca:	f04f 3aff 	mov.w	sl, #4294967295
 80075ce:	e7e8      	b.n	80075a2 <_strtod_l+0x102>
 80075d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d0f9      	beq.n	80075d0 <_strtod_l+0x130>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0a3      	beq.n	8007528 <_strtod_l+0x88>
 80075e0:	2301      	movs	r3, #1
 80075e2:	f04f 0900 	mov.w	r9, #0
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80075f0:	464f      	mov	r7, r9
 80075f2:	220a      	movs	r2, #10
 80075f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80075f6:	7806      	ldrb	r6, [r0, #0]
 80075f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80075fc:	b2d9      	uxtb	r1, r3
 80075fe:	2909      	cmp	r1, #9
 8007600:	d92a      	bls.n	8007658 <_strtod_l+0x1b8>
 8007602:	9905      	ldr	r1, [sp, #20]
 8007604:	462a      	mov	r2, r5
 8007606:	f002 ff1f 	bl	800a448 <strncmp>
 800760a:	b398      	cbz	r0, 8007674 <_strtod_l+0x1d4>
 800760c:	2000      	movs	r0, #0
 800760e:	4632      	mov	r2, r6
 8007610:	463d      	mov	r5, r7
 8007612:	9005      	str	r0, [sp, #20]
 8007614:	4603      	mov	r3, r0
 8007616:	2a65      	cmp	r2, #101	; 0x65
 8007618:	d001      	beq.n	800761e <_strtod_l+0x17e>
 800761a:	2a45      	cmp	r2, #69	; 0x45
 800761c:	d118      	bne.n	8007650 <_strtod_l+0x1b0>
 800761e:	b91d      	cbnz	r5, 8007628 <_strtod_l+0x188>
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	4302      	orrs	r2, r0
 8007624:	d09e      	beq.n	8007564 <_strtod_l+0xc4>
 8007626:	2500      	movs	r5, #0
 8007628:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800762c:	f108 0201 	add.w	r2, r8, #1
 8007630:	9217      	str	r2, [sp, #92]	; 0x5c
 8007632:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007636:	2a2b      	cmp	r2, #43	; 0x2b
 8007638:	d075      	beq.n	8007726 <_strtod_l+0x286>
 800763a:	2a2d      	cmp	r2, #45	; 0x2d
 800763c:	d07b      	beq.n	8007736 <_strtod_l+0x296>
 800763e:	f04f 0c00 	mov.w	ip, #0
 8007642:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007646:	2909      	cmp	r1, #9
 8007648:	f240 8082 	bls.w	8007750 <_strtod_l+0x2b0>
 800764c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007650:	2600      	movs	r6, #0
 8007652:	e09d      	b.n	8007790 <_strtod_l+0x2f0>
 8007654:	2300      	movs	r3, #0
 8007656:	e7c4      	b.n	80075e2 <_strtod_l+0x142>
 8007658:	2f08      	cmp	r7, #8
 800765a:	bfd8      	it	le
 800765c:	9907      	ldrle	r1, [sp, #28]
 800765e:	f100 0001 	add.w	r0, r0, #1
 8007662:	bfda      	itte	le
 8007664:	fb02 3301 	mlale	r3, r2, r1, r3
 8007668:	9307      	strle	r3, [sp, #28]
 800766a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800766e:	3701      	adds	r7, #1
 8007670:	9017      	str	r0, [sp, #92]	; 0x5c
 8007672:	e7bf      	b.n	80075f4 <_strtod_l+0x154>
 8007674:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007676:	195a      	adds	r2, r3, r5
 8007678:	9217      	str	r2, [sp, #92]	; 0x5c
 800767a:	5d5a      	ldrb	r2, [r3, r5]
 800767c:	2f00      	cmp	r7, #0
 800767e:	d037      	beq.n	80076f0 <_strtod_l+0x250>
 8007680:	9005      	str	r0, [sp, #20]
 8007682:	463d      	mov	r5, r7
 8007684:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007688:	2b09      	cmp	r3, #9
 800768a:	d912      	bls.n	80076b2 <_strtod_l+0x212>
 800768c:	2301      	movs	r3, #1
 800768e:	e7c2      	b.n	8007616 <_strtod_l+0x176>
 8007690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	9217      	str	r2, [sp, #92]	; 0x5c
 8007696:	785a      	ldrb	r2, [r3, #1]
 8007698:	3001      	adds	r0, #1
 800769a:	2a30      	cmp	r2, #48	; 0x30
 800769c:	d0f8      	beq.n	8007690 <_strtod_l+0x1f0>
 800769e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	f200 84d9 	bhi.w	800805a <_strtod_l+0xbba>
 80076a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076aa:	9005      	str	r0, [sp, #20]
 80076ac:	2000      	movs	r0, #0
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	4605      	mov	r5, r0
 80076b2:	3a30      	subs	r2, #48	; 0x30
 80076b4:	f100 0301 	add.w	r3, r0, #1
 80076b8:	d014      	beq.n	80076e4 <_strtod_l+0x244>
 80076ba:	9905      	ldr	r1, [sp, #20]
 80076bc:	4419      	add	r1, r3
 80076be:	9105      	str	r1, [sp, #20]
 80076c0:	462b      	mov	r3, r5
 80076c2:	eb00 0e05 	add.w	lr, r0, r5
 80076c6:	210a      	movs	r1, #10
 80076c8:	4573      	cmp	r3, lr
 80076ca:	d113      	bne.n	80076f4 <_strtod_l+0x254>
 80076cc:	182b      	adds	r3, r5, r0
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	f105 0501 	add.w	r5, r5, #1
 80076d4:	4405      	add	r5, r0
 80076d6:	dc1c      	bgt.n	8007712 <_strtod_l+0x272>
 80076d8:	9907      	ldr	r1, [sp, #28]
 80076da:	230a      	movs	r3, #10
 80076dc:	fb03 2301 	mla	r3, r3, r1, r2
 80076e0:	9307      	str	r3, [sp, #28]
 80076e2:	2300      	movs	r3, #0
 80076e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076e6:	1c51      	adds	r1, r2, #1
 80076e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ea:	7852      	ldrb	r2, [r2, #1]
 80076ec:	4618      	mov	r0, r3
 80076ee:	e7c9      	b.n	8007684 <_strtod_l+0x1e4>
 80076f0:	4638      	mov	r0, r7
 80076f2:	e7d2      	b.n	800769a <_strtod_l+0x1fa>
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	dc04      	bgt.n	8007702 <_strtod_l+0x262>
 80076f8:	9e07      	ldr	r6, [sp, #28]
 80076fa:	434e      	muls	r6, r1
 80076fc:	9607      	str	r6, [sp, #28]
 80076fe:	3301      	adds	r3, #1
 8007700:	e7e2      	b.n	80076c8 <_strtod_l+0x228>
 8007702:	f103 0c01 	add.w	ip, r3, #1
 8007706:	f1bc 0f10 	cmp.w	ip, #16
 800770a:	bfd8      	it	le
 800770c:	fb01 f909 	mulle.w	r9, r1, r9
 8007710:	e7f5      	b.n	80076fe <_strtod_l+0x25e>
 8007712:	2d10      	cmp	r5, #16
 8007714:	bfdc      	itt	le
 8007716:	230a      	movle	r3, #10
 8007718:	fb03 2909 	mlale	r9, r3, r9, r2
 800771c:	e7e1      	b.n	80076e2 <_strtod_l+0x242>
 800771e:	2300      	movs	r3, #0
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	2301      	movs	r3, #1
 8007724:	e77c      	b.n	8007620 <_strtod_l+0x180>
 8007726:	f04f 0c00 	mov.w	ip, #0
 800772a:	f108 0202 	add.w	r2, r8, #2
 800772e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007730:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007734:	e785      	b.n	8007642 <_strtod_l+0x1a2>
 8007736:	f04f 0c01 	mov.w	ip, #1
 800773a:	e7f6      	b.n	800772a <_strtod_l+0x28a>
 800773c:	0800c168 	.word	0x0800c168
 8007740:	0800bf20 	.word	0x0800bf20
 8007744:	7ff00000 	.word	0x7ff00000
 8007748:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800774a:	1c51      	adds	r1, r2, #1
 800774c:	9117      	str	r1, [sp, #92]	; 0x5c
 800774e:	7852      	ldrb	r2, [r2, #1]
 8007750:	2a30      	cmp	r2, #48	; 0x30
 8007752:	d0f9      	beq.n	8007748 <_strtod_l+0x2a8>
 8007754:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007758:	2908      	cmp	r1, #8
 800775a:	f63f af79 	bhi.w	8007650 <_strtod_l+0x1b0>
 800775e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007762:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007764:	9206      	str	r2, [sp, #24]
 8007766:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007768:	1c51      	adds	r1, r2, #1
 800776a:	9117      	str	r1, [sp, #92]	; 0x5c
 800776c:	7852      	ldrb	r2, [r2, #1]
 800776e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007772:	2e09      	cmp	r6, #9
 8007774:	d937      	bls.n	80077e6 <_strtod_l+0x346>
 8007776:	9e06      	ldr	r6, [sp, #24]
 8007778:	1b89      	subs	r1, r1, r6
 800777a:	2908      	cmp	r1, #8
 800777c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007780:	dc02      	bgt.n	8007788 <_strtod_l+0x2e8>
 8007782:	4576      	cmp	r6, lr
 8007784:	bfa8      	it	ge
 8007786:	4676      	movge	r6, lr
 8007788:	f1bc 0f00 	cmp.w	ip, #0
 800778c:	d000      	beq.n	8007790 <_strtod_l+0x2f0>
 800778e:	4276      	negs	r6, r6
 8007790:	2d00      	cmp	r5, #0
 8007792:	d14d      	bne.n	8007830 <_strtod_l+0x390>
 8007794:	9904      	ldr	r1, [sp, #16]
 8007796:	4301      	orrs	r1, r0
 8007798:	f47f aec6 	bne.w	8007528 <_strtod_l+0x88>
 800779c:	2b00      	cmp	r3, #0
 800779e:	f47f aee1 	bne.w	8007564 <_strtod_l+0xc4>
 80077a2:	2a69      	cmp	r2, #105	; 0x69
 80077a4:	d027      	beq.n	80077f6 <_strtod_l+0x356>
 80077a6:	dc24      	bgt.n	80077f2 <_strtod_l+0x352>
 80077a8:	2a49      	cmp	r2, #73	; 0x49
 80077aa:	d024      	beq.n	80077f6 <_strtod_l+0x356>
 80077ac:	2a4e      	cmp	r2, #78	; 0x4e
 80077ae:	f47f aed9 	bne.w	8007564 <_strtod_l+0xc4>
 80077b2:	499f      	ldr	r1, [pc, #636]	; (8007a30 <_strtod_l+0x590>)
 80077b4:	a817      	add	r0, sp, #92	; 0x5c
 80077b6:	f001 fe3d 	bl	8009434 <__match>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f aed2 	beq.w	8007564 <_strtod_l+0xc4>
 80077c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b28      	cmp	r3, #40	; 0x28
 80077c6:	d12d      	bne.n	8007824 <_strtod_l+0x384>
 80077c8:	499a      	ldr	r1, [pc, #616]	; (8007a34 <_strtod_l+0x594>)
 80077ca:	aa1a      	add	r2, sp, #104	; 0x68
 80077cc:	a817      	add	r0, sp, #92	; 0x5c
 80077ce:	f001 fe45 	bl	800945c <__hexnan>
 80077d2:	2805      	cmp	r0, #5
 80077d4:	d126      	bne.n	8007824 <_strtod_l+0x384>
 80077d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80077dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80077e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80077e4:	e6a0      	b.n	8007528 <_strtod_l+0x88>
 80077e6:	210a      	movs	r1, #10
 80077e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80077ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80077f0:	e7b9      	b.n	8007766 <_strtod_l+0x2c6>
 80077f2:	2a6e      	cmp	r2, #110	; 0x6e
 80077f4:	e7db      	b.n	80077ae <_strtod_l+0x30e>
 80077f6:	4990      	ldr	r1, [pc, #576]	; (8007a38 <_strtod_l+0x598>)
 80077f8:	a817      	add	r0, sp, #92	; 0x5c
 80077fa:	f001 fe1b 	bl	8009434 <__match>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f43f aeb0 	beq.w	8007564 <_strtod_l+0xc4>
 8007804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007806:	498d      	ldr	r1, [pc, #564]	; (8007a3c <_strtod_l+0x59c>)
 8007808:	3b01      	subs	r3, #1
 800780a:	a817      	add	r0, sp, #92	; 0x5c
 800780c:	9317      	str	r3, [sp, #92]	; 0x5c
 800780e:	f001 fe11 	bl	8009434 <__match>
 8007812:	b910      	cbnz	r0, 800781a <_strtod_l+0x37a>
 8007814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007816:	3301      	adds	r3, #1
 8007818:	9317      	str	r3, [sp, #92]	; 0x5c
 800781a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a4c <_strtod_l+0x5ac>
 800781e:	f04f 0a00 	mov.w	sl, #0
 8007822:	e681      	b.n	8007528 <_strtod_l+0x88>
 8007824:	4886      	ldr	r0, [pc, #536]	; (8007a40 <_strtod_l+0x5a0>)
 8007826:	f002 fdf7 	bl	800a418 <nan>
 800782a:	ec5b ab10 	vmov	sl, fp, d0
 800782e:	e67b      	b.n	8007528 <_strtod_l+0x88>
 8007830:	9b05      	ldr	r3, [sp, #20]
 8007832:	9807      	ldr	r0, [sp, #28]
 8007834:	1af3      	subs	r3, r6, r3
 8007836:	2f00      	cmp	r7, #0
 8007838:	bf08      	it	eq
 800783a:	462f      	moveq	r7, r5
 800783c:	2d10      	cmp	r5, #16
 800783e:	9306      	str	r3, [sp, #24]
 8007840:	46a8      	mov	r8, r5
 8007842:	bfa8      	it	ge
 8007844:	f04f 0810 	movge.w	r8, #16
 8007848:	f7f8 fe64 	bl	8000514 <__aeabi_ui2d>
 800784c:	2d09      	cmp	r5, #9
 800784e:	4682      	mov	sl, r0
 8007850:	468b      	mov	fp, r1
 8007852:	dd13      	ble.n	800787c <_strtod_l+0x3dc>
 8007854:	4b7b      	ldr	r3, [pc, #492]	; (8007a44 <_strtod_l+0x5a4>)
 8007856:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800785a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800785e:	f7f8 fed3 	bl	8000608 <__aeabi_dmul>
 8007862:	4682      	mov	sl, r0
 8007864:	4648      	mov	r0, r9
 8007866:	468b      	mov	fp, r1
 8007868:	f7f8 fe54 	bl	8000514 <__aeabi_ui2d>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4650      	mov	r0, sl
 8007872:	4659      	mov	r1, fp
 8007874:	f7f8 fd12 	bl	800029c <__adddf3>
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	2d0f      	cmp	r5, #15
 800787e:	dc38      	bgt.n	80078f2 <_strtod_l+0x452>
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f43f ae50 	beq.w	8007528 <_strtod_l+0x88>
 8007888:	dd24      	ble.n	80078d4 <_strtod_l+0x434>
 800788a:	2b16      	cmp	r3, #22
 800788c:	dc0b      	bgt.n	80078a6 <_strtod_l+0x406>
 800788e:	496d      	ldr	r1, [pc, #436]	; (8007a44 <_strtod_l+0x5a4>)
 8007890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007898:	4652      	mov	r2, sl
 800789a:	465b      	mov	r3, fp
 800789c:	f7f8 feb4 	bl	8000608 <__aeabi_dmul>
 80078a0:	4682      	mov	sl, r0
 80078a2:	468b      	mov	fp, r1
 80078a4:	e640      	b.n	8007528 <_strtod_l+0x88>
 80078a6:	9a06      	ldr	r2, [sp, #24]
 80078a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80078ac:	4293      	cmp	r3, r2
 80078ae:	db20      	blt.n	80078f2 <_strtod_l+0x452>
 80078b0:	4c64      	ldr	r4, [pc, #400]	; (8007a44 <_strtod_l+0x5a4>)
 80078b2:	f1c5 050f 	rsb	r5, r5, #15
 80078b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078ba:	4652      	mov	r2, sl
 80078bc:	465b      	mov	r3, fp
 80078be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c2:	f7f8 fea1 	bl	8000608 <__aeabi_dmul>
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	1b5d      	subs	r5, r3, r5
 80078ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078d2:	e7e3      	b.n	800789c <_strtod_l+0x3fc>
 80078d4:	9b06      	ldr	r3, [sp, #24]
 80078d6:	3316      	adds	r3, #22
 80078d8:	db0b      	blt.n	80078f2 <_strtod_l+0x452>
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	1b9e      	subs	r6, r3, r6
 80078de:	4b59      	ldr	r3, [pc, #356]	; (8007a44 <_strtod_l+0x5a4>)
 80078e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80078e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078e8:	4650      	mov	r0, sl
 80078ea:	4659      	mov	r1, fp
 80078ec:	f7f8 ffb6 	bl	800085c <__aeabi_ddiv>
 80078f0:	e7d6      	b.n	80078a0 <_strtod_l+0x400>
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	eba5 0808 	sub.w	r8, r5, r8
 80078f8:	4498      	add	r8, r3
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	dd74      	ble.n	80079ea <_strtod_l+0x54a>
 8007900:	f018 030f 	ands.w	r3, r8, #15
 8007904:	d00a      	beq.n	800791c <_strtod_l+0x47c>
 8007906:	494f      	ldr	r1, [pc, #316]	; (8007a44 <_strtod_l+0x5a4>)
 8007908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800790c:	4652      	mov	r2, sl
 800790e:	465b      	mov	r3, fp
 8007910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007914:	f7f8 fe78 	bl	8000608 <__aeabi_dmul>
 8007918:	4682      	mov	sl, r0
 800791a:	468b      	mov	fp, r1
 800791c:	f038 080f 	bics.w	r8, r8, #15
 8007920:	d04f      	beq.n	80079c2 <_strtod_l+0x522>
 8007922:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007926:	dd22      	ble.n	800796e <_strtod_l+0x4ce>
 8007928:	2500      	movs	r5, #0
 800792a:	462e      	mov	r6, r5
 800792c:	9507      	str	r5, [sp, #28]
 800792e:	9505      	str	r5, [sp, #20]
 8007930:	2322      	movs	r3, #34	; 0x22
 8007932:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a4c <_strtod_l+0x5ac>
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	f04f 0a00 	mov.w	sl, #0
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f43f adf2 	beq.w	8007528 <_strtod_l+0x88>
 8007944:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007946:	4620      	mov	r0, r4
 8007948:	f001 fe90 	bl	800966c <_Bfree>
 800794c:	9905      	ldr	r1, [sp, #20]
 800794e:	4620      	mov	r0, r4
 8007950:	f001 fe8c 	bl	800966c <_Bfree>
 8007954:	4631      	mov	r1, r6
 8007956:	4620      	mov	r0, r4
 8007958:	f001 fe88 	bl	800966c <_Bfree>
 800795c:	9907      	ldr	r1, [sp, #28]
 800795e:	4620      	mov	r0, r4
 8007960:	f001 fe84 	bl	800966c <_Bfree>
 8007964:	4629      	mov	r1, r5
 8007966:	4620      	mov	r0, r4
 8007968:	f001 fe80 	bl	800966c <_Bfree>
 800796c:	e5dc      	b.n	8007528 <_strtod_l+0x88>
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <_strtod_l+0x5a8>)
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	2300      	movs	r3, #0
 8007974:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	4699      	mov	r9, r3
 800797e:	f1b8 0f01 	cmp.w	r8, #1
 8007982:	dc21      	bgt.n	80079c8 <_strtod_l+0x528>
 8007984:	b10b      	cbz	r3, 800798a <_strtod_l+0x4ea>
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	4b2f      	ldr	r3, [pc, #188]	; (8007a48 <_strtod_l+0x5a8>)
 800798c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007990:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007994:	4652      	mov	r2, sl
 8007996:	465b      	mov	r3, fp
 8007998:	e9d9 0100 	ldrd	r0, r1, [r9]
 800799c:	f7f8 fe34 	bl	8000608 <__aeabi_dmul>
 80079a0:	4b2a      	ldr	r3, [pc, #168]	; (8007a4c <_strtod_l+0x5ac>)
 80079a2:	460a      	mov	r2, r1
 80079a4:	400b      	ands	r3, r1
 80079a6:	492a      	ldr	r1, [pc, #168]	; (8007a50 <_strtod_l+0x5b0>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	4682      	mov	sl, r0
 80079ac:	d8bc      	bhi.n	8007928 <_strtod_l+0x488>
 80079ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079b2:	428b      	cmp	r3, r1
 80079b4:	bf86      	itte	hi
 80079b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a54 <_strtod_l+0x5b4>
 80079ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80079be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079c2:	2300      	movs	r3, #0
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	e084      	b.n	8007ad2 <_strtod_l+0x632>
 80079c8:	f018 0f01 	tst.w	r8, #1
 80079cc:	d005      	beq.n	80079da <_strtod_l+0x53a>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	2301      	movs	r3, #1
 80079da:	9a04      	ldr	r2, [sp, #16]
 80079dc:	3208      	adds	r2, #8
 80079de:	f109 0901 	add.w	r9, r9, #1
 80079e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079e6:	9204      	str	r2, [sp, #16]
 80079e8:	e7c9      	b.n	800797e <_strtod_l+0x4de>
 80079ea:	d0ea      	beq.n	80079c2 <_strtod_l+0x522>
 80079ec:	f1c8 0800 	rsb	r8, r8, #0
 80079f0:	f018 020f 	ands.w	r2, r8, #15
 80079f4:	d00a      	beq.n	8007a0c <_strtod_l+0x56c>
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <_strtod_l+0x5a4>)
 80079f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079fc:	4650      	mov	r0, sl
 80079fe:	4659      	mov	r1, fp
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 ff2a 	bl	800085c <__aeabi_ddiv>
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a10:	d0d7      	beq.n	80079c2 <_strtod_l+0x522>
 8007a12:	f1b8 0f1f 	cmp.w	r8, #31
 8007a16:	dd1f      	ble.n	8007a58 <_strtod_l+0x5b8>
 8007a18:	2500      	movs	r5, #0
 8007a1a:	462e      	mov	r6, r5
 8007a1c:	9507      	str	r5, [sp, #28]
 8007a1e:	9505      	str	r5, [sp, #20]
 8007a20:	2322      	movs	r3, #34	; 0x22
 8007a22:	f04f 0a00 	mov.w	sl, #0
 8007a26:	f04f 0b00 	mov.w	fp, #0
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	e786      	b.n	800793c <_strtod_l+0x49c>
 8007a2e:	bf00      	nop
 8007a30:	0800bef1 	.word	0x0800bef1
 8007a34:	0800bf34 	.word	0x0800bf34
 8007a38:	0800bee9 	.word	0x0800bee9
 8007a3c:	0800c074 	.word	0x0800c074
 8007a40:	0800c320 	.word	0x0800c320
 8007a44:	0800c200 	.word	0x0800c200
 8007a48:	0800c1d8 	.word	0x0800c1d8
 8007a4c:	7ff00000 	.word	0x7ff00000
 8007a50:	7ca00000 	.word	0x7ca00000
 8007a54:	7fefffff 	.word	0x7fefffff
 8007a58:	f018 0310 	ands.w	r3, r8, #16
 8007a5c:	bf18      	it	ne
 8007a5e:	236a      	movne	r3, #106	; 0x6a
 8007a60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007e10 <_strtod_l+0x970>
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	4650      	mov	r0, sl
 8007a68:	4659      	mov	r1, fp
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f018 0f01 	tst.w	r8, #1
 8007a70:	d004      	beq.n	8007a7c <_strtod_l+0x5dc>
 8007a72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a76:	f7f8 fdc7 	bl	8000608 <__aeabi_dmul>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a80:	f109 0908 	add.w	r9, r9, #8
 8007a84:	d1f2      	bne.n	8007a6c <_strtod_l+0x5cc>
 8007a86:	b10b      	cbz	r3, 8007a8c <_strtod_l+0x5ec>
 8007a88:	4682      	mov	sl, r0
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	9b04      	ldr	r3, [sp, #16]
 8007a8e:	b1c3      	cbz	r3, 8007ac2 <_strtod_l+0x622>
 8007a90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	4659      	mov	r1, fp
 8007a9c:	dd11      	ble.n	8007ac2 <_strtod_l+0x622>
 8007a9e:	2b1f      	cmp	r3, #31
 8007aa0:	f340 8124 	ble.w	8007cec <_strtod_l+0x84c>
 8007aa4:	2b34      	cmp	r3, #52	; 0x34
 8007aa6:	bfde      	ittt	le
 8007aa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007aac:	f04f 33ff 	movle.w	r3, #4294967295
 8007ab0:	fa03 f202 	lslle.w	r2, r3, r2
 8007ab4:	f04f 0a00 	mov.w	sl, #0
 8007ab8:	bfcc      	ite	gt
 8007aba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007abe:	ea02 0b01 	andle.w	fp, r2, r1
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4650      	mov	r0, sl
 8007ac8:	4659      	mov	r1, fp
 8007aca:	f7f9 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d1a2      	bne.n	8007a18 <_strtod_l+0x578>
 8007ad2:	9b07      	ldr	r3, [sp, #28]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	9908      	ldr	r1, [sp, #32]
 8007ad8:	462b      	mov	r3, r5
 8007ada:	463a      	mov	r2, r7
 8007adc:	4620      	mov	r0, r4
 8007ade:	f001 fe2d 	bl	800973c <__s2b>
 8007ae2:	9007      	str	r0, [sp, #28]
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f43f af1f 	beq.w	8007928 <_strtod_l+0x488>
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	1b9e      	subs	r6, r3, r6
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfb4      	ite	lt
 8007af4:	4633      	movlt	r3, r6
 8007af6:	2300      	movge	r3, #0
 8007af8:	930c      	str	r3, [sp, #48]	; 0x30
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	2500      	movs	r5, #0
 8007afe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b02:	9312      	str	r3, [sp, #72]	; 0x48
 8007b04:	462e      	mov	r6, r5
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	f001 fd6e 	bl	80095ec <_Balloc>
 8007b10:	9005      	str	r0, [sp, #20]
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f43f af0c 	beq.w	8007930 <_strtod_l+0x490>
 8007b18:	9b07      	ldr	r3, [sp, #28]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	3202      	adds	r2, #2
 8007b1e:	f103 010c 	add.w	r1, r3, #12
 8007b22:	0092      	lsls	r2, r2, #2
 8007b24:	300c      	adds	r0, #12
 8007b26:	f001 fd53 	bl	80095d0 <memcpy>
 8007b2a:	ec4b ab10 	vmov	d0, sl, fp
 8007b2e:	aa1a      	add	r2, sp, #104	; 0x68
 8007b30:	a919      	add	r1, sp, #100	; 0x64
 8007b32:	4620      	mov	r0, r4
 8007b34:	f002 f948 	bl	8009dc8 <__d2b>
 8007b38:	ec4b ab18 	vmov	d8, sl, fp
 8007b3c:	9018      	str	r0, [sp, #96]	; 0x60
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f43f aef6 	beq.w	8007930 <_strtod_l+0x490>
 8007b44:	2101      	movs	r1, #1
 8007b46:	4620      	mov	r0, r4
 8007b48:	f001 fe92 	bl	8009870 <__i2b>
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f43f aeee 	beq.w	8007930 <_strtod_l+0x490>
 8007b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b56:	9904      	ldr	r1, [sp, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfab      	itete	ge
 8007b5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b66:	bfac      	ite	ge
 8007b68:	eb03 0902 	addge.w	r9, r3, r2
 8007b6c:	1ad7      	sublt	r7, r2, r3
 8007b6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b70:	eba3 0801 	sub.w	r8, r3, r1
 8007b74:	4490      	add	r8, r2
 8007b76:	4ba1      	ldr	r3, [pc, #644]	; (8007dfc <_strtod_l+0x95c>)
 8007b78:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b7c:	4598      	cmp	r8, r3
 8007b7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b82:	f280 80c7 	bge.w	8007d14 <_strtod_l+0x874>
 8007b86:	eba3 0308 	sub.w	r3, r3, r8
 8007b8a:	2b1f      	cmp	r3, #31
 8007b8c:	eba2 0203 	sub.w	r2, r2, r3
 8007b90:	f04f 0101 	mov.w	r1, #1
 8007b94:	f300 80b1 	bgt.w	8007cfa <_strtod_l+0x85a>
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	eb09 0802 	add.w	r8, r9, r2
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	45c1      	cmp	r9, r8
 8007baa:	4417      	add	r7, r2
 8007bac:	441f      	add	r7, r3
 8007bae:	464b      	mov	r3, r9
 8007bb0:	bfa8      	it	ge
 8007bb2:	4643      	movge	r3, r8
 8007bb4:	42bb      	cmp	r3, r7
 8007bb6:	bfa8      	it	ge
 8007bb8:	463b      	movge	r3, r7
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfc2      	ittt	gt
 8007bbe:	eba8 0803 	subgt.w	r8, r8, r3
 8007bc2:	1aff      	subgt	r7, r7, r3
 8007bc4:	eba9 0903 	subgt.w	r9, r9, r3
 8007bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd17      	ble.n	8007bfe <_strtod_l+0x75e>
 8007bce:	4631      	mov	r1, r6
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f001 ff0c 	bl	80099f0 <__pow5mult>
 8007bd8:	4606      	mov	r6, r0
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f43f aea8 	beq.w	8007930 <_strtod_l+0x490>
 8007be0:	4601      	mov	r1, r0
 8007be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007be4:	4620      	mov	r0, r4
 8007be6:	f001 fe59 	bl	800989c <__multiply>
 8007bea:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f43f ae9f 	beq.w	8007930 <_strtod_l+0x490>
 8007bf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f001 fd39 	bl	800966c <_Bfree>
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	9318      	str	r3, [sp, #96]	; 0x60
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	f300 808c 	bgt.w	8007d1e <_strtod_l+0x87e>
 8007c06:	9b06      	ldr	r3, [sp, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dd08      	ble.n	8007c1e <_strtod_l+0x77e>
 8007c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c0e:	9905      	ldr	r1, [sp, #20]
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 feed 	bl	80099f0 <__pow5mult>
 8007c16:	9005      	str	r0, [sp, #20]
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f ae89 	beq.w	8007930 <_strtod_l+0x490>
 8007c1e:	2f00      	cmp	r7, #0
 8007c20:	dd08      	ble.n	8007c34 <_strtod_l+0x794>
 8007c22:	9905      	ldr	r1, [sp, #20]
 8007c24:	463a      	mov	r2, r7
 8007c26:	4620      	mov	r0, r4
 8007c28:	f001 ff3c 	bl	8009aa4 <__lshift>
 8007c2c:	9005      	str	r0, [sp, #20]
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f43f ae7e 	beq.w	8007930 <_strtod_l+0x490>
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	dd08      	ble.n	8007c4c <_strtod_l+0x7ac>
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	464a      	mov	r2, r9
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f001 ff30 	bl	8009aa4 <__lshift>
 8007c44:	4606      	mov	r6, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f43f ae72 	beq.w	8007930 <_strtod_l+0x490>
 8007c4c:	9a05      	ldr	r2, [sp, #20]
 8007c4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c50:	4620      	mov	r0, r4
 8007c52:	f001 ffb3 	bl	8009bbc <__mdiff>
 8007c56:	4605      	mov	r5, r0
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f43f ae69 	beq.w	8007930 <_strtod_l+0x490>
 8007c5e:	68c3      	ldr	r3, [r0, #12]
 8007c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c62:	2300      	movs	r3, #0
 8007c64:	60c3      	str	r3, [r0, #12]
 8007c66:	4631      	mov	r1, r6
 8007c68:	f001 ff8c 	bl	8009b84 <__mcmp>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	da60      	bge.n	8007d32 <_strtod_l+0x892>
 8007c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c72:	ea53 030a 	orrs.w	r3, r3, sl
 8007c76:	f040 8082 	bne.w	8007d7e <_strtod_l+0x8de>
 8007c7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d17d      	bne.n	8007d7e <_strtod_l+0x8de>
 8007c82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c86:	0d1b      	lsrs	r3, r3, #20
 8007c88:	051b      	lsls	r3, r3, #20
 8007c8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c8e:	d976      	bls.n	8007d7e <_strtod_l+0x8de>
 8007c90:	696b      	ldr	r3, [r5, #20]
 8007c92:	b913      	cbnz	r3, 8007c9a <_strtod_l+0x7fa>
 8007c94:	692b      	ldr	r3, [r5, #16]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	dd71      	ble.n	8007d7e <_strtod_l+0x8de>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f001 ff00 	bl	8009aa4 <__lshift>
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	f001 ff6c 	bl	8009b84 <__mcmp>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	dd66      	ble.n	8007d7e <_strtod_l+0x8de>
 8007cb0:	9904      	ldr	r1, [sp, #16]
 8007cb2:	4a53      	ldr	r2, [pc, #332]	; (8007e00 <_strtod_l+0x960>)
 8007cb4:	465b      	mov	r3, fp
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	f000 8081 	beq.w	8007dbe <_strtod_l+0x91e>
 8007cbc:	ea02 010b 	and.w	r1, r2, fp
 8007cc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cc4:	dc7b      	bgt.n	8007dbe <_strtod_l+0x91e>
 8007cc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007cca:	f77f aea9 	ble.w	8007a20 <_strtod_l+0x580>
 8007cce:	4b4d      	ldr	r3, [pc, #308]	; (8007e04 <_strtod_l+0x964>)
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f7f8 fc97 	bl	8000608 <__aeabi_dmul>
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4303      	orrs	r3, r0
 8007cde:	bf08      	it	eq
 8007ce0:	2322      	moveq	r3, #34	; 0x22
 8007ce2:	4682      	mov	sl, r0
 8007ce4:	468b      	mov	fp, r1
 8007ce6:	bf08      	it	eq
 8007ce8:	6023      	streq	r3, [r4, #0]
 8007cea:	e62b      	b.n	8007944 <_strtod_l+0x4a4>
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	ea03 0a0a 	and.w	sl, r3, sl
 8007cf8:	e6e3      	b.n	8007ac2 <_strtod_l+0x622>
 8007cfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007cfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007d02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007d06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007d0a:	fa01 f308 	lsl.w	r3, r1, r8
 8007d0e:	9308      	str	r3, [sp, #32]
 8007d10:	910d      	str	r1, [sp, #52]	; 0x34
 8007d12:	e746      	b.n	8007ba2 <_strtod_l+0x702>
 8007d14:	2300      	movs	r3, #0
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d1c:	e741      	b.n	8007ba2 <_strtod_l+0x702>
 8007d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d20:	4642      	mov	r2, r8
 8007d22:	4620      	mov	r0, r4
 8007d24:	f001 febe 	bl	8009aa4 <__lshift>
 8007d28:	9018      	str	r0, [sp, #96]	; 0x60
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f47f af6b 	bne.w	8007c06 <_strtod_l+0x766>
 8007d30:	e5fe      	b.n	8007930 <_strtod_l+0x490>
 8007d32:	465f      	mov	r7, fp
 8007d34:	d16e      	bne.n	8007e14 <_strtod_l+0x974>
 8007d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d3c:	b342      	cbz	r2, 8007d90 <_strtod_l+0x8f0>
 8007d3e:	4a32      	ldr	r2, [pc, #200]	; (8007e08 <_strtod_l+0x968>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d128      	bne.n	8007d96 <_strtod_l+0x8f6>
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	4651      	mov	r1, sl
 8007d48:	b1eb      	cbz	r3, 8007d86 <_strtod_l+0x8e6>
 8007d4a:	4b2d      	ldr	r3, [pc, #180]	; (8007e00 <_strtod_l+0x960>)
 8007d4c:	403b      	ands	r3, r7
 8007d4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d52:	f04f 32ff 	mov.w	r2, #4294967295
 8007d56:	d819      	bhi.n	8007d8c <_strtod_l+0x8ec>
 8007d58:	0d1b      	lsrs	r3, r3, #20
 8007d5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	4299      	cmp	r1, r3
 8007d64:	d117      	bne.n	8007d96 <_strtod_l+0x8f6>
 8007d66:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <_strtod_l+0x96c>)
 8007d68:	429f      	cmp	r7, r3
 8007d6a:	d102      	bne.n	8007d72 <_strtod_l+0x8d2>
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	f43f addf 	beq.w	8007930 <_strtod_l+0x490>
 8007d72:	4b23      	ldr	r3, [pc, #140]	; (8007e00 <_strtod_l+0x960>)
 8007d74:	403b      	ands	r3, r7
 8007d76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d7a:	f04f 0a00 	mov.w	sl, #0
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1a4      	bne.n	8007cce <_strtod_l+0x82e>
 8007d84:	e5de      	b.n	8007944 <_strtod_l+0x4a4>
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	e7ea      	b.n	8007d62 <_strtod_l+0x8c2>
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	e7e8      	b.n	8007d62 <_strtod_l+0x8c2>
 8007d90:	ea53 030a 	orrs.w	r3, r3, sl
 8007d94:	d08c      	beq.n	8007cb0 <_strtod_l+0x810>
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	b1db      	cbz	r3, 8007dd2 <_strtod_l+0x932>
 8007d9a:	423b      	tst	r3, r7
 8007d9c:	d0ef      	beq.n	8007d7e <_strtod_l+0x8de>
 8007d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da0:	9a04      	ldr	r2, [sp, #16]
 8007da2:	4650      	mov	r0, sl
 8007da4:	4659      	mov	r1, fp
 8007da6:	b1c3      	cbz	r3, 8007dda <_strtod_l+0x93a>
 8007da8:	f7ff fb5c 	bl	8007464 <sulp>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	ec51 0b18 	vmov	r0, r1, d8
 8007db4:	f7f8 fa72 	bl	800029c <__adddf3>
 8007db8:	4682      	mov	sl, r0
 8007dba:	468b      	mov	fp, r1
 8007dbc:	e7df      	b.n	8007d7e <_strtod_l+0x8de>
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007dc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dcc:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd0:	e7d5      	b.n	8007d7e <_strtod_l+0x8de>
 8007dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dd4:	ea13 0f0a 	tst.w	r3, sl
 8007dd8:	e7e0      	b.n	8007d9c <_strtod_l+0x8fc>
 8007dda:	f7ff fb43 	bl	8007464 <sulp>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	ec51 0b18 	vmov	r0, r1, d8
 8007de6:	f7f8 fa57 	bl	8000298 <__aeabi_dsub>
 8007dea:	2200      	movs	r2, #0
 8007dec:	2300      	movs	r3, #0
 8007dee:	4682      	mov	sl, r0
 8007df0:	468b      	mov	fp, r1
 8007df2:	f7f8 fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d0c1      	beq.n	8007d7e <_strtod_l+0x8de>
 8007dfa:	e611      	b.n	8007a20 <_strtod_l+0x580>
 8007dfc:	fffffc02 	.word	0xfffffc02
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	39500000 	.word	0x39500000
 8007e08:	000fffff 	.word	0x000fffff
 8007e0c:	7fefffff 	.word	0x7fefffff
 8007e10:	0800bf48 	.word	0x0800bf48
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	f002 f832 	bl	8009e80 <__ratio>
 8007e1c:	ec59 8b10 	vmov	r8, r9, d0
 8007e20:	ee10 0a10 	vmov	r0, s0
 8007e24:	2200      	movs	r2, #0
 8007e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fe68 	bl	8000b00 <__aeabi_dcmple>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d07a      	beq.n	8007f2a <_strtod_l+0xa8a>
 8007e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d04a      	beq.n	8007ed0 <_strtod_l+0xa30>
 8007e3a:	4b95      	ldr	r3, [pc, #596]	; (8008090 <_strtod_l+0xbf0>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008090 <_strtod_l+0xbf0>
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	4b92      	ldr	r3, [pc, #584]	; (8008094 <_strtod_l+0xbf4>)
 8007e4c:	403b      	ands	r3, r7
 8007e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e52:	4b91      	ldr	r3, [pc, #580]	; (8008098 <_strtod_l+0xbf8>)
 8007e54:	429a      	cmp	r2, r3
 8007e56:	f040 80b0 	bne.w	8007fba <_strtod_l+0xb1a>
 8007e5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e62:	ec4b ab10 	vmov	d0, sl, fp
 8007e66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e6a:	f001 ff31 	bl	8009cd0 <__ulp>
 8007e6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e72:	ec53 2b10 	vmov	r2, r3, d0
 8007e76:	f7f8 fbc7 	bl	8000608 <__aeabi_dmul>
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f7f8 fa0d 	bl	800029c <__adddf3>
 8007e82:	460b      	mov	r3, r1
 8007e84:	4983      	ldr	r1, [pc, #524]	; (8008094 <_strtod_l+0xbf4>)
 8007e86:	4a85      	ldr	r2, [pc, #532]	; (800809c <_strtod_l+0xbfc>)
 8007e88:	4019      	ands	r1, r3
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	d960      	bls.n	8007f52 <_strtod_l+0xab2>
 8007e90:	ee18 3a90 	vmov	r3, s17
 8007e94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d104      	bne.n	8007ea6 <_strtod_l+0xa06>
 8007e9c:	ee18 3a10 	vmov	r3, s16
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	f43f ad45 	beq.w	8007930 <_strtod_l+0x490>
 8007ea6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80080a8 <_strtod_l+0xc08>
 8007eaa:	f04f 3aff 	mov.w	sl, #4294967295
 8007eae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f001 fbdb 	bl	800966c <_Bfree>
 8007eb6:	9905      	ldr	r1, [sp, #20]
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f001 fbd7 	bl	800966c <_Bfree>
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 fbd3 	bl	800966c <_Bfree>
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 fbcf 	bl	800966c <_Bfree>
 8007ece:	e61a      	b.n	8007b06 <_strtod_l+0x666>
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	d11b      	bne.n	8007f0e <_strtod_l+0xa6e>
 8007ed6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eda:	b9f3      	cbnz	r3, 8007f1a <_strtod_l+0xa7a>
 8007edc:	4b6c      	ldr	r3, [pc, #432]	; (8008090 <_strtod_l+0xbf0>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe02 	bl	8000aec <__aeabi_dcmplt>
 8007ee8:	b9d0      	cbnz	r0, 8007f20 <_strtod_l+0xa80>
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	4b6c      	ldr	r3, [pc, #432]	; (80080a0 <_strtod_l+0xc00>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f7f8 fb89 	bl	8000608 <__aeabi_dmul>
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	4689      	mov	r9, r1
 8007efa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007efe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007f02:	9315      	str	r3, [sp, #84]	; 0x54
 8007f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f0c:	e79d      	b.n	8007e4a <_strtod_l+0x9aa>
 8007f0e:	f1ba 0f01 	cmp.w	sl, #1
 8007f12:	d102      	bne.n	8007f1a <_strtod_l+0xa7a>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f43f ad83 	beq.w	8007a20 <_strtod_l+0x580>
 8007f1a:	4b62      	ldr	r3, [pc, #392]	; (80080a4 <_strtod_l+0xc04>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	e78e      	b.n	8007e3e <_strtod_l+0x99e>
 8007f20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80080a0 <_strtod_l+0xc00>
 8007f24:	f04f 0800 	mov.w	r8, #0
 8007f28:	e7e7      	b.n	8007efa <_strtod_l+0xa5a>
 8007f2a:	4b5d      	ldr	r3, [pc, #372]	; (80080a0 <_strtod_l+0xc00>)
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	2200      	movs	r2, #0
 8007f32:	f7f8 fb69 	bl	8000608 <__aeabi_dmul>
 8007f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f38:	4680      	mov	r8, r0
 8007f3a:	4689      	mov	r9, r1
 8007f3c:	b933      	cbnz	r3, 8007f4c <_strtod_l+0xaac>
 8007f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f42:	900e      	str	r0, [sp, #56]	; 0x38
 8007f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f4a:	e7dd      	b.n	8007f08 <_strtod_l+0xa68>
 8007f4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f50:	e7f9      	b.n	8007f46 <_strtod_l+0xaa6>
 8007f52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1a8      	bne.n	8007eae <_strtod_l+0xa0e>
 8007f5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f62:	0d1b      	lsrs	r3, r3, #20
 8007f64:	051b      	lsls	r3, r3, #20
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d1a1      	bne.n	8007eae <_strtod_l+0xa0e>
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	f7f8 feab 	bl	8000cc8 <__aeabi_d2lz>
 8007f72:	f7f8 fb1b 	bl	80005ac <__aeabi_l2d>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f98b 	bl	8000298 <__aeabi_dsub>
 8007f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f88:	ea43 030a 	orr.w	r3, r3, sl
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	4680      	mov	r8, r0
 8007f90:	4689      	mov	r9, r1
 8007f92:	d055      	beq.n	8008040 <_strtod_l+0xba0>
 8007f94:	a336      	add	r3, pc, #216	; (adr r3, 8008070 <_strtod_l+0xbd0>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f7f8 fda7 	bl	8000aec <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f47f acd0 	bne.w	8007944 <_strtod_l+0x4a4>
 8007fa4:	a334      	add	r3, pc, #208	; (adr r3, 8008078 <_strtod_l+0xbd8>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f43f af7b 	beq.w	8007eae <_strtod_l+0xa0e>
 8007fb8:	e4c4      	b.n	8007944 <_strtod_l+0x4a4>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	b333      	cbz	r3, 800800c <_strtod_l+0xb6c>
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fc4:	d822      	bhi.n	800800c <_strtod_l+0xb6c>
 8007fc6:	a32e      	add	r3, pc, #184	; (adr r3, 8008080 <_strtod_l+0xbe0>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fd96 	bl	8000b00 <__aeabi_dcmple>
 8007fd4:	b1a0      	cbz	r0, 8008000 <_strtod_l+0xb60>
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	f7f8 fded 	bl	8000bb8 <__aeabi_d2uiz>
 8007fde:	2801      	cmp	r0, #1
 8007fe0:	bf38      	it	cc
 8007fe2:	2001      	movcc	r0, #1
 8007fe4:	f7f8 fa96 	bl	8000514 <__aeabi_ui2d>
 8007fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fea:	4680      	mov	r8, r0
 8007fec:	4689      	mov	r9, r1
 8007fee:	bb23      	cbnz	r3, 800803a <_strtod_l+0xb9a>
 8007ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ff4:	9010      	str	r0, [sp, #64]	; 0x40
 8007ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8007ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ffc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008004:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008010:	eeb0 0a48 	vmov.f32	s0, s16
 8008014:	eef0 0a68 	vmov.f32	s1, s17
 8008018:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800801c:	f001 fe58 	bl	8009cd0 <__ulp>
 8008020:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008024:	ec53 2b10 	vmov	r2, r3, d0
 8008028:	f7f8 faee 	bl	8000608 <__aeabi_dmul>
 800802c:	ec53 2b18 	vmov	r2, r3, d8
 8008030:	f7f8 f934 	bl	800029c <__adddf3>
 8008034:	4682      	mov	sl, r0
 8008036:	468b      	mov	fp, r1
 8008038:	e78d      	b.n	8007f56 <_strtod_l+0xab6>
 800803a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800803e:	e7db      	b.n	8007ff8 <_strtod_l+0xb58>
 8008040:	a311      	add	r3, pc, #68	; (adr r3, 8008088 <_strtod_l+0xbe8>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 fd51 	bl	8000aec <__aeabi_dcmplt>
 800804a:	e7b2      	b.n	8007fb2 <_strtod_l+0xb12>
 800804c:	2300      	movs	r3, #0
 800804e:	930a      	str	r3, [sp, #40]	; 0x28
 8008050:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	f7ff ba6b 	b.w	8007530 <_strtod_l+0x90>
 800805a:	2a65      	cmp	r2, #101	; 0x65
 800805c:	f43f ab5f 	beq.w	800771e <_strtod_l+0x27e>
 8008060:	2a45      	cmp	r2, #69	; 0x45
 8008062:	f43f ab5c 	beq.w	800771e <_strtod_l+0x27e>
 8008066:	2301      	movs	r3, #1
 8008068:	f7ff bb94 	b.w	8007794 <_strtod_l+0x2f4>
 800806c:	f3af 8000 	nop.w
 8008070:	94a03595 	.word	0x94a03595
 8008074:	3fdfffff 	.word	0x3fdfffff
 8008078:	35afe535 	.word	0x35afe535
 800807c:	3fe00000 	.word	0x3fe00000
 8008080:	ffc00000 	.word	0xffc00000
 8008084:	41dfffff 	.word	0x41dfffff
 8008088:	94a03595 	.word	0x94a03595
 800808c:	3fcfffff 	.word	0x3fcfffff
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	7fe00000 	.word	0x7fe00000
 800809c:	7c9fffff 	.word	0x7c9fffff
 80080a0:	3fe00000 	.word	0x3fe00000
 80080a4:	bff00000 	.word	0xbff00000
 80080a8:	7fefffff 	.word	0x7fefffff

080080ac <_strtod_r>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	; (80080b4 <_strtod_r+0x8>)
 80080ae:	f7ff b9f7 	b.w	80074a0 <_strtod_l>
 80080b2:	bf00      	nop
 80080b4:	2000007c 	.word	0x2000007c

080080b8 <_strtol_l.constprop.0>:
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080be:	d001      	beq.n	80080c4 <_strtol_l.constprop.0+0xc>
 80080c0:	2b24      	cmp	r3, #36	; 0x24
 80080c2:	d906      	bls.n	80080d2 <_strtol_l.constprop.0+0x1a>
 80080c4:	f7fe fafc 	bl	80066c0 <__errno>
 80080c8:	2316      	movs	r3, #22
 80080ca:	6003      	str	r3, [r0, #0]
 80080cc:	2000      	movs	r0, #0
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081b8 <_strtol_l.constprop.0+0x100>
 80080d6:	460d      	mov	r5, r1
 80080d8:	462e      	mov	r6, r5
 80080da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80080e2:	f017 0708 	ands.w	r7, r7, #8
 80080e6:	d1f7      	bne.n	80080d8 <_strtol_l.constprop.0+0x20>
 80080e8:	2c2d      	cmp	r4, #45	; 0x2d
 80080ea:	d132      	bne.n	8008152 <_strtol_l.constprop.0+0x9a>
 80080ec:	782c      	ldrb	r4, [r5, #0]
 80080ee:	2701      	movs	r7, #1
 80080f0:	1cb5      	adds	r5, r6, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d05b      	beq.n	80081ae <_strtol_l.constprop.0+0xf6>
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d109      	bne.n	800810e <_strtol_l.constprop.0+0x56>
 80080fa:	2c30      	cmp	r4, #48	; 0x30
 80080fc:	d107      	bne.n	800810e <_strtol_l.constprop.0+0x56>
 80080fe:	782c      	ldrb	r4, [r5, #0]
 8008100:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008104:	2c58      	cmp	r4, #88	; 0x58
 8008106:	d14d      	bne.n	80081a4 <_strtol_l.constprop.0+0xec>
 8008108:	786c      	ldrb	r4, [r5, #1]
 800810a:	2310      	movs	r3, #16
 800810c:	3502      	adds	r5, #2
 800810e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008112:	f108 38ff 	add.w	r8, r8, #4294967295
 8008116:	f04f 0c00 	mov.w	ip, #0
 800811a:	fbb8 f9f3 	udiv	r9, r8, r3
 800811e:	4666      	mov	r6, ip
 8008120:	fb03 8a19 	mls	sl, r3, r9, r8
 8008124:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008128:	f1be 0f09 	cmp.w	lr, #9
 800812c:	d816      	bhi.n	800815c <_strtol_l.constprop.0+0xa4>
 800812e:	4674      	mov	r4, lr
 8008130:	42a3      	cmp	r3, r4
 8008132:	dd24      	ble.n	800817e <_strtol_l.constprop.0+0xc6>
 8008134:	f1bc 0f00 	cmp.w	ip, #0
 8008138:	db1e      	blt.n	8008178 <_strtol_l.constprop.0+0xc0>
 800813a:	45b1      	cmp	r9, r6
 800813c:	d31c      	bcc.n	8008178 <_strtol_l.constprop.0+0xc0>
 800813e:	d101      	bne.n	8008144 <_strtol_l.constprop.0+0x8c>
 8008140:	45a2      	cmp	sl, r4
 8008142:	db19      	blt.n	8008178 <_strtol_l.constprop.0+0xc0>
 8008144:	fb06 4603 	mla	r6, r6, r3, r4
 8008148:	f04f 0c01 	mov.w	ip, #1
 800814c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008150:	e7e8      	b.n	8008124 <_strtol_l.constprop.0+0x6c>
 8008152:	2c2b      	cmp	r4, #43	; 0x2b
 8008154:	bf04      	itt	eq
 8008156:	782c      	ldrbeq	r4, [r5, #0]
 8008158:	1cb5      	addeq	r5, r6, #2
 800815a:	e7ca      	b.n	80080f2 <_strtol_l.constprop.0+0x3a>
 800815c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008160:	f1be 0f19 	cmp.w	lr, #25
 8008164:	d801      	bhi.n	800816a <_strtol_l.constprop.0+0xb2>
 8008166:	3c37      	subs	r4, #55	; 0x37
 8008168:	e7e2      	b.n	8008130 <_strtol_l.constprop.0+0x78>
 800816a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800816e:	f1be 0f19 	cmp.w	lr, #25
 8008172:	d804      	bhi.n	800817e <_strtol_l.constprop.0+0xc6>
 8008174:	3c57      	subs	r4, #87	; 0x57
 8008176:	e7db      	b.n	8008130 <_strtol_l.constprop.0+0x78>
 8008178:	f04f 3cff 	mov.w	ip, #4294967295
 800817c:	e7e6      	b.n	800814c <_strtol_l.constprop.0+0x94>
 800817e:	f1bc 0f00 	cmp.w	ip, #0
 8008182:	da05      	bge.n	8008190 <_strtol_l.constprop.0+0xd8>
 8008184:	2322      	movs	r3, #34	; 0x22
 8008186:	6003      	str	r3, [r0, #0]
 8008188:	4646      	mov	r6, r8
 800818a:	b942      	cbnz	r2, 800819e <_strtol_l.constprop.0+0xe6>
 800818c:	4630      	mov	r0, r6
 800818e:	e79e      	b.n	80080ce <_strtol_l.constprop.0+0x16>
 8008190:	b107      	cbz	r7, 8008194 <_strtol_l.constprop.0+0xdc>
 8008192:	4276      	negs	r6, r6
 8008194:	2a00      	cmp	r2, #0
 8008196:	d0f9      	beq.n	800818c <_strtol_l.constprop.0+0xd4>
 8008198:	f1bc 0f00 	cmp.w	ip, #0
 800819c:	d000      	beq.n	80081a0 <_strtol_l.constprop.0+0xe8>
 800819e:	1e69      	subs	r1, r5, #1
 80081a0:	6011      	str	r1, [r2, #0]
 80081a2:	e7f3      	b.n	800818c <_strtol_l.constprop.0+0xd4>
 80081a4:	2430      	movs	r4, #48	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1b1      	bne.n	800810e <_strtol_l.constprop.0+0x56>
 80081aa:	2308      	movs	r3, #8
 80081ac:	e7af      	b.n	800810e <_strtol_l.constprop.0+0x56>
 80081ae:	2c30      	cmp	r4, #48	; 0x30
 80081b0:	d0a5      	beq.n	80080fe <_strtol_l.constprop.0+0x46>
 80081b2:	230a      	movs	r3, #10
 80081b4:	e7ab      	b.n	800810e <_strtol_l.constprop.0+0x56>
 80081b6:	bf00      	nop
 80081b8:	0800bf71 	.word	0x0800bf71

080081bc <_strtol_r>:
 80081bc:	f7ff bf7c 	b.w	80080b8 <_strtol_l.constprop.0>

080081c0 <quorem>:
 80081c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	6903      	ldr	r3, [r0, #16]
 80081c6:	690c      	ldr	r4, [r1, #16]
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	4607      	mov	r7, r0
 80081cc:	f2c0 8081 	blt.w	80082d2 <quorem+0x112>
 80081d0:	3c01      	subs	r4, #1
 80081d2:	f101 0814 	add.w	r8, r1, #20
 80081d6:	f100 0514 	add.w	r5, r0, #20
 80081da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e8:	3301      	adds	r3, #1
 80081ea:	429a      	cmp	r2, r3
 80081ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80081f8:	d331      	bcc.n	800825e <quorem+0x9e>
 80081fa:	f04f 0e00 	mov.w	lr, #0
 80081fe:	4640      	mov	r0, r8
 8008200:	46ac      	mov	ip, r5
 8008202:	46f2      	mov	sl, lr
 8008204:	f850 2b04 	ldr.w	r2, [r0], #4
 8008208:	b293      	uxth	r3, r2
 800820a:	fb06 e303 	mla	r3, r6, r3, lr
 800820e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008212:	b29b      	uxth	r3, r3
 8008214:	ebaa 0303 	sub.w	r3, sl, r3
 8008218:	f8dc a000 	ldr.w	sl, [ip]
 800821c:	0c12      	lsrs	r2, r2, #16
 800821e:	fa13 f38a 	uxtah	r3, r3, sl
 8008222:	fb06 e202 	mla	r2, r6, r2, lr
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	9b00      	ldr	r3, [sp, #0]
 800822a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800822e:	b292      	uxth	r2, r2
 8008230:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008238:	f8bd 3000 	ldrh.w	r3, [sp]
 800823c:	4581      	cmp	r9, r0
 800823e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008242:	f84c 3b04 	str.w	r3, [ip], #4
 8008246:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800824a:	d2db      	bcs.n	8008204 <quorem+0x44>
 800824c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008250:	b92b      	cbnz	r3, 800825e <quorem+0x9e>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	3b04      	subs	r3, #4
 8008256:	429d      	cmp	r5, r3
 8008258:	461a      	mov	r2, r3
 800825a:	d32e      	bcc.n	80082ba <quorem+0xfa>
 800825c:	613c      	str	r4, [r7, #16]
 800825e:	4638      	mov	r0, r7
 8008260:	f001 fc90 	bl	8009b84 <__mcmp>
 8008264:	2800      	cmp	r0, #0
 8008266:	db24      	blt.n	80082b2 <quorem+0xf2>
 8008268:	3601      	adds	r6, #1
 800826a:	4628      	mov	r0, r5
 800826c:	f04f 0c00 	mov.w	ip, #0
 8008270:	f858 2b04 	ldr.w	r2, [r8], #4
 8008274:	f8d0 e000 	ldr.w	lr, [r0]
 8008278:	b293      	uxth	r3, r2
 800827a:	ebac 0303 	sub.w	r3, ip, r3
 800827e:	0c12      	lsrs	r2, r2, #16
 8008280:	fa13 f38e 	uxtah	r3, r3, lr
 8008284:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800828c:	b29b      	uxth	r3, r3
 800828e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008292:	45c1      	cmp	r9, r8
 8008294:	f840 3b04 	str.w	r3, [r0], #4
 8008298:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800829c:	d2e8      	bcs.n	8008270 <quorem+0xb0>
 800829e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a6:	b922      	cbnz	r2, 80082b2 <quorem+0xf2>
 80082a8:	3b04      	subs	r3, #4
 80082aa:	429d      	cmp	r5, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	d30a      	bcc.n	80082c6 <quorem+0x106>
 80082b0:	613c      	str	r4, [r7, #16]
 80082b2:	4630      	mov	r0, r6
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	3b04      	subs	r3, #4
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d1cc      	bne.n	800825c <quorem+0x9c>
 80082c2:	3c01      	subs	r4, #1
 80082c4:	e7c7      	b.n	8008256 <quorem+0x96>
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	d1f0      	bne.n	80082b0 <quorem+0xf0>
 80082ce:	3c01      	subs	r4, #1
 80082d0:	e7eb      	b.n	80082aa <quorem+0xea>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7ee      	b.n	80082b4 <quorem+0xf4>
	...

080082d8 <_dtoa_r>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	ed2d 8b04 	vpush	{d8-d9}
 80082e0:	ec57 6b10 	vmov	r6, r7, d0
 80082e4:	b093      	sub	sp, #76	; 0x4c
 80082e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082ec:	9106      	str	r1, [sp, #24]
 80082ee:	ee10 aa10 	vmov	sl, s0
 80082f2:	4604      	mov	r4, r0
 80082f4:	9209      	str	r2, [sp, #36]	; 0x24
 80082f6:	930c      	str	r3, [sp, #48]	; 0x30
 80082f8:	46bb      	mov	fp, r7
 80082fa:	b975      	cbnz	r5, 800831a <_dtoa_r+0x42>
 80082fc:	2010      	movs	r0, #16
 80082fe:	f001 f94d 	bl	800959c <malloc>
 8008302:	4602      	mov	r2, r0
 8008304:	6260      	str	r0, [r4, #36]	; 0x24
 8008306:	b920      	cbnz	r0, 8008312 <_dtoa_r+0x3a>
 8008308:	4ba7      	ldr	r3, [pc, #668]	; (80085a8 <_dtoa_r+0x2d0>)
 800830a:	21ea      	movs	r1, #234	; 0xea
 800830c:	48a7      	ldr	r0, [pc, #668]	; (80085ac <_dtoa_r+0x2d4>)
 800830e:	f002 f8bd 	bl	800a48c <__assert_func>
 8008312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008316:	6005      	str	r5, [r0, #0]
 8008318:	60c5      	str	r5, [r0, #12]
 800831a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	b151      	cbz	r1, 8008336 <_dtoa_r+0x5e>
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	604a      	str	r2, [r1, #4]
 8008324:	2301      	movs	r3, #1
 8008326:	4093      	lsls	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
 800832a:	4620      	mov	r0, r4
 800832c:	f001 f99e 	bl	800966c <_Bfree>
 8008330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	1e3b      	subs	r3, r7, #0
 8008338:	bfaa      	itet	ge
 800833a:	2300      	movge	r3, #0
 800833c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008340:	f8c8 3000 	strge.w	r3, [r8]
 8008344:	4b9a      	ldr	r3, [pc, #616]	; (80085b0 <_dtoa_r+0x2d8>)
 8008346:	bfbc      	itt	lt
 8008348:	2201      	movlt	r2, #1
 800834a:	f8c8 2000 	strlt.w	r2, [r8]
 800834e:	ea33 030b 	bics.w	r3, r3, fp
 8008352:	d11b      	bne.n	800838c <_dtoa_r+0xb4>
 8008354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008356:	f242 730f 	movw	r3, #9999	; 0x270f
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008360:	4333      	orrs	r3, r6
 8008362:	f000 8592 	beq.w	8008e8a <_dtoa_r+0xbb2>
 8008366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008368:	b963      	cbnz	r3, 8008384 <_dtoa_r+0xac>
 800836a:	4b92      	ldr	r3, [pc, #584]	; (80085b4 <_dtoa_r+0x2dc>)
 800836c:	e022      	b.n	80083b4 <_dtoa_r+0xdc>
 800836e:	4b92      	ldr	r3, [pc, #584]	; (80085b8 <_dtoa_r+0x2e0>)
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	3308      	adds	r3, #8
 8008374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9801      	ldr	r0, [sp, #4]
 800837a:	b013      	add	sp, #76	; 0x4c
 800837c:	ecbd 8b04 	vpop	{d8-d9}
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	4b8b      	ldr	r3, [pc, #556]	; (80085b4 <_dtoa_r+0x2dc>)
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	3303      	adds	r3, #3
 800838a:	e7f3      	b.n	8008374 <_dtoa_r+0x9c>
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	f7f8 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008398:	ec4b ab19 	vmov	d9, sl, fp
 800839c:	4680      	mov	r8, r0
 800839e:	b158      	cbz	r0, 80083b8 <_dtoa_r+0xe0>
 80083a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a2:	2301      	movs	r3, #1
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 856b 	beq.w	8008e84 <_dtoa_r+0xbac>
 80083ae:	4883      	ldr	r0, [pc, #524]	; (80085bc <_dtoa_r+0x2e4>)
 80083b0:	6018      	str	r0, [r3, #0]
 80083b2:	1e43      	subs	r3, r0, #1
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	e7df      	b.n	8008378 <_dtoa_r+0xa0>
 80083b8:	ec4b ab10 	vmov	d0, sl, fp
 80083bc:	aa10      	add	r2, sp, #64	; 0x40
 80083be:	a911      	add	r1, sp, #68	; 0x44
 80083c0:	4620      	mov	r0, r4
 80083c2:	f001 fd01 	bl	8009dc8 <__d2b>
 80083c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083ca:	ee08 0a10 	vmov	s16, r0
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	f000 8084 	beq.w	80084dc <_dtoa_r+0x204>
 80083d4:	ee19 3a90 	vmov	r3, s19
 80083d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083e0:	4656      	mov	r6, sl
 80083e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083ee:	4b74      	ldr	r3, [pc, #464]	; (80085c0 <_dtoa_r+0x2e8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f7 ff4f 	bl	8000298 <__aeabi_dsub>
 80083fa:	a365      	add	r3, pc, #404	; (adr r3, 8008590 <_dtoa_r+0x2b8>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f8 f902 	bl	8000608 <__aeabi_dmul>
 8008404:	a364      	add	r3, pc, #400	; (adr r3, 8008598 <_dtoa_r+0x2c0>)
 8008406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840a:	f7f7 ff47 	bl	800029c <__adddf3>
 800840e:	4606      	mov	r6, r0
 8008410:	4628      	mov	r0, r5
 8008412:	460f      	mov	r7, r1
 8008414:	f7f8 f88e 	bl	8000534 <__aeabi_i2d>
 8008418:	a361      	add	r3, pc, #388	; (adr r3, 80085a0 <_dtoa_r+0x2c8>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f8 f8f3 	bl	8000608 <__aeabi_dmul>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	4630      	mov	r0, r6
 8008428:	4639      	mov	r1, r7
 800842a:	f7f7 ff37 	bl	800029c <__adddf3>
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	f7f8 fb99 	bl	8000b68 <__aeabi_d2iz>
 8008436:	2200      	movs	r2, #0
 8008438:	9000      	str	r0, [sp, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 fb54 	bl	8000aec <__aeabi_dcmplt>
 8008444:	b150      	cbz	r0, 800845c <_dtoa_r+0x184>
 8008446:	9800      	ldr	r0, [sp, #0]
 8008448:	f7f8 f874 	bl	8000534 <__aeabi_i2d>
 800844c:	4632      	mov	r2, r6
 800844e:	463b      	mov	r3, r7
 8008450:	f7f8 fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8008454:	b910      	cbnz	r0, 800845c <_dtoa_r+0x184>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	3b01      	subs	r3, #1
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	2b16      	cmp	r3, #22
 8008460:	d85a      	bhi.n	8008518 <_dtoa_r+0x240>
 8008462:	9a00      	ldr	r2, [sp, #0]
 8008464:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <_dtoa_r+0x2ec>)
 8008466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	ec51 0b19 	vmov	r0, r1, d9
 8008472:	f7f8 fb3b 	bl	8000aec <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d050      	beq.n	800851c <_dtoa_r+0x244>
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	930b      	str	r3, [sp, #44]	; 0x2c
 8008484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008486:	1b5d      	subs	r5, r3, r5
 8008488:	1e6b      	subs	r3, r5, #1
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	bf45      	ittet	mi
 800848e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008492:	9304      	strmi	r3, [sp, #16]
 8008494:	2300      	movpl	r3, #0
 8008496:	2300      	movmi	r3, #0
 8008498:	bf4c      	ite	mi
 800849a:	9305      	strmi	r3, [sp, #20]
 800849c:	9304      	strpl	r3, [sp, #16]
 800849e:	9b00      	ldr	r3, [sp, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db3d      	blt.n	8008520 <_dtoa_r+0x248>
 80084a4:	9b05      	ldr	r3, [sp, #20]
 80084a6:	9a00      	ldr	r2, [sp, #0]
 80084a8:	920a      	str	r2, [sp, #40]	; 0x28
 80084aa:	4413      	add	r3, r2
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	2300      	movs	r3, #0
 80084b0:	9307      	str	r3, [sp, #28]
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	2b09      	cmp	r3, #9
 80084b6:	f200 8089 	bhi.w	80085cc <_dtoa_r+0x2f4>
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	bfc4      	itt	gt
 80084be:	3b04      	subgt	r3, #4
 80084c0:	9306      	strgt	r3, [sp, #24]
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	f1a3 0302 	sub.w	r3, r3, #2
 80084c8:	bfcc      	ite	gt
 80084ca:	2500      	movgt	r5, #0
 80084cc:	2501      	movle	r5, #1
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f200 8087 	bhi.w	80085e2 <_dtoa_r+0x30a>
 80084d4:	e8df f003 	tbb	[pc, r3]
 80084d8:	59383a2d 	.word	0x59383a2d
 80084dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084e0:	441d      	add	r5, r3
 80084e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	bfc1      	itttt	gt
 80084ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80084f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084fa:	bfda      	itte	le
 80084fc:	f1c3 0320 	rsble	r3, r3, #32
 8008500:	fa06 f003 	lslle.w	r0, r6, r3
 8008504:	4318      	orrgt	r0, r3
 8008506:	f7f8 f805 	bl	8000514 <__aeabi_ui2d>
 800850a:	2301      	movs	r3, #1
 800850c:	4606      	mov	r6, r0
 800850e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008512:	3d01      	subs	r5, #1
 8008514:	930e      	str	r3, [sp, #56]	; 0x38
 8008516:	e76a      	b.n	80083ee <_dtoa_r+0x116>
 8008518:	2301      	movs	r3, #1
 800851a:	e7b2      	b.n	8008482 <_dtoa_r+0x1aa>
 800851c:	900b      	str	r0, [sp, #44]	; 0x2c
 800851e:	e7b1      	b.n	8008484 <_dtoa_r+0x1ac>
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	4253      	negs	r3, r2
 800852a:	9307      	str	r3, [sp, #28]
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
 8008530:	e7bf      	b.n	80084b2 <_dtoa_r+0x1da>
 8008532:	2300      	movs	r3, #0
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	dc55      	bgt.n	80085e8 <_dtoa_r+0x310>
 800853c:	2301      	movs	r3, #1
 800853e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008542:	461a      	mov	r2, r3
 8008544:	9209      	str	r2, [sp, #36]	; 0x24
 8008546:	e00c      	b.n	8008562 <_dtoa_r+0x28a>
 8008548:	2301      	movs	r3, #1
 800854a:	e7f3      	b.n	8008534 <_dtoa_r+0x25c>
 800854c:	2300      	movs	r3, #0
 800854e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008550:	9308      	str	r3, [sp, #32]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	4413      	add	r3, r2
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	3301      	adds	r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	bfb8      	it	lt
 8008560:	2301      	movlt	r3, #1
 8008562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008564:	2200      	movs	r2, #0
 8008566:	6042      	str	r2, [r0, #4]
 8008568:	2204      	movs	r2, #4
 800856a:	f102 0614 	add.w	r6, r2, #20
 800856e:	429e      	cmp	r6, r3
 8008570:	6841      	ldr	r1, [r0, #4]
 8008572:	d93d      	bls.n	80085f0 <_dtoa_r+0x318>
 8008574:	4620      	mov	r0, r4
 8008576:	f001 f839 	bl	80095ec <_Balloc>
 800857a:	9001      	str	r0, [sp, #4]
 800857c:	2800      	cmp	r0, #0
 800857e:	d13b      	bne.n	80085f8 <_dtoa_r+0x320>
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <_dtoa_r+0x2f0>)
 8008582:	4602      	mov	r2, r0
 8008584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008588:	e6c0      	b.n	800830c <_dtoa_r+0x34>
 800858a:	2301      	movs	r3, #1
 800858c:	e7df      	b.n	800854e <_dtoa_r+0x276>
 800858e:	bf00      	nop
 8008590:	636f4361 	.word	0x636f4361
 8008594:	3fd287a7 	.word	0x3fd287a7
 8008598:	8b60c8b3 	.word	0x8b60c8b3
 800859c:	3fc68a28 	.word	0x3fc68a28
 80085a0:	509f79fb 	.word	0x509f79fb
 80085a4:	3fd34413 	.word	0x3fd34413
 80085a8:	0800c07e 	.word	0x0800c07e
 80085ac:	0800c095 	.word	0x0800c095
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	0800c07a 	.word	0x0800c07a
 80085b8:	0800c071 	.word	0x0800c071
 80085bc:	0800bef5 	.word	0x0800bef5
 80085c0:	3ff80000 	.word	0x3ff80000
 80085c4:	0800c200 	.word	0x0800c200
 80085c8:	0800c0f0 	.word	0x0800c0f0
 80085cc:	2501      	movs	r5, #1
 80085ce:	2300      	movs	r3, #0
 80085d0:	9306      	str	r3, [sp, #24]
 80085d2:	9508      	str	r5, [sp, #32]
 80085d4:	f04f 33ff 	mov.w	r3, #4294967295
 80085d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	2312      	movs	r3, #18
 80085e0:	e7b0      	b.n	8008544 <_dtoa_r+0x26c>
 80085e2:	2301      	movs	r3, #1
 80085e4:	9308      	str	r3, [sp, #32]
 80085e6:	e7f5      	b.n	80085d4 <_dtoa_r+0x2fc>
 80085e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ee:	e7b8      	b.n	8008562 <_dtoa_r+0x28a>
 80085f0:	3101      	adds	r1, #1
 80085f2:	6041      	str	r1, [r0, #4]
 80085f4:	0052      	lsls	r2, r2, #1
 80085f6:	e7b8      	b.n	800856a <_dtoa_r+0x292>
 80085f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085fa:	9a01      	ldr	r2, [sp, #4]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	2b0e      	cmp	r3, #14
 8008602:	f200 809d 	bhi.w	8008740 <_dtoa_r+0x468>
 8008606:	2d00      	cmp	r5, #0
 8008608:	f000 809a 	beq.w	8008740 <_dtoa_r+0x468>
 800860c:	9b00      	ldr	r3, [sp, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	dd32      	ble.n	8008678 <_dtoa_r+0x3a0>
 8008612:	4ab7      	ldr	r2, [pc, #732]	; (80088f0 <_dtoa_r+0x618>)
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800861c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	05d8      	lsls	r0, r3, #23
 8008624:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008628:	d516      	bpl.n	8008658 <_dtoa_r+0x380>
 800862a:	4bb2      	ldr	r3, [pc, #712]	; (80088f4 <_dtoa_r+0x61c>)
 800862c:	ec51 0b19 	vmov	r0, r1, d9
 8008630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008634:	f7f8 f912 	bl	800085c <__aeabi_ddiv>
 8008638:	f007 070f 	and.w	r7, r7, #15
 800863c:	4682      	mov	sl, r0
 800863e:	468b      	mov	fp, r1
 8008640:	2503      	movs	r5, #3
 8008642:	4eac      	ldr	r6, [pc, #688]	; (80088f4 <_dtoa_r+0x61c>)
 8008644:	b957      	cbnz	r7, 800865c <_dtoa_r+0x384>
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	4650      	mov	r0, sl
 800864c:	4659      	mov	r1, fp
 800864e:	f7f8 f905 	bl	800085c <__aeabi_ddiv>
 8008652:	4682      	mov	sl, r0
 8008654:	468b      	mov	fp, r1
 8008656:	e028      	b.n	80086aa <_dtoa_r+0x3d2>
 8008658:	2502      	movs	r5, #2
 800865a:	e7f2      	b.n	8008642 <_dtoa_r+0x36a>
 800865c:	07f9      	lsls	r1, r7, #31
 800865e:	d508      	bpl.n	8008672 <_dtoa_r+0x39a>
 8008660:	4640      	mov	r0, r8
 8008662:	4649      	mov	r1, r9
 8008664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008668:	f7f7 ffce 	bl	8000608 <__aeabi_dmul>
 800866c:	3501      	adds	r5, #1
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	107f      	asrs	r7, r7, #1
 8008674:	3608      	adds	r6, #8
 8008676:	e7e5      	b.n	8008644 <_dtoa_r+0x36c>
 8008678:	f000 809b 	beq.w	80087b2 <_dtoa_r+0x4da>
 800867c:	9b00      	ldr	r3, [sp, #0]
 800867e:	4f9d      	ldr	r7, [pc, #628]	; (80088f4 <_dtoa_r+0x61c>)
 8008680:	425e      	negs	r6, r3
 8008682:	4b9b      	ldr	r3, [pc, #620]	; (80088f0 <_dtoa_r+0x618>)
 8008684:	f006 020f 	and.w	r2, r6, #15
 8008688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	ec51 0b19 	vmov	r0, r1, d9
 8008694:	f7f7 ffb8 	bl	8000608 <__aeabi_dmul>
 8008698:	1136      	asrs	r6, r6, #4
 800869a:	4682      	mov	sl, r0
 800869c:	468b      	mov	fp, r1
 800869e:	2300      	movs	r3, #0
 80086a0:	2502      	movs	r5, #2
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d17a      	bne.n	800879c <_dtoa_r+0x4c4>
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d3      	bne.n	8008652 <_dtoa_r+0x37a>
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8082 	beq.w	80087b6 <_dtoa_r+0x4de>
 80086b2:	4b91      	ldr	r3, [pc, #580]	; (80088f8 <_dtoa_r+0x620>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4650      	mov	r0, sl
 80086b8:	4659      	mov	r1, fp
 80086ba:	f7f8 fa17 	bl	8000aec <__aeabi_dcmplt>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d079      	beq.n	80087b6 <_dtoa_r+0x4de>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d076      	beq.n	80087b6 <_dtoa_r+0x4de>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd36      	ble.n	800873c <_dtoa_r+0x464>
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	1e5f      	subs	r7, r3, #1
 80086d6:	2200      	movs	r2, #0
 80086d8:	4b88      	ldr	r3, [pc, #544]	; (80088fc <_dtoa_r+0x624>)
 80086da:	f7f7 ff95 	bl	8000608 <__aeabi_dmul>
 80086de:	9e02      	ldr	r6, [sp, #8]
 80086e0:	4682      	mov	sl, r0
 80086e2:	468b      	mov	fp, r1
 80086e4:	3501      	adds	r5, #1
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7f7 ff24 	bl	8000534 <__aeabi_i2d>
 80086ec:	4652      	mov	r2, sl
 80086ee:	465b      	mov	r3, fp
 80086f0:	f7f7 ff8a 	bl	8000608 <__aeabi_dmul>
 80086f4:	4b82      	ldr	r3, [pc, #520]	; (8008900 <_dtoa_r+0x628>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7f7 fdd0 	bl	800029c <__adddf3>
 80086fc:	46d0      	mov	r8, sl
 80086fe:	46d9      	mov	r9, fp
 8008700:	4682      	mov	sl, r0
 8008702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008706:	2e00      	cmp	r6, #0
 8008708:	d158      	bne.n	80087bc <_dtoa_r+0x4e4>
 800870a:	4b7e      	ldr	r3, [pc, #504]	; (8008904 <_dtoa_r+0x62c>)
 800870c:	2200      	movs	r2, #0
 800870e:	4640      	mov	r0, r8
 8008710:	4649      	mov	r1, r9
 8008712:	f7f7 fdc1 	bl	8000298 <__aeabi_dsub>
 8008716:	4652      	mov	r2, sl
 8008718:	465b      	mov	r3, fp
 800871a:	4680      	mov	r8, r0
 800871c:	4689      	mov	r9, r1
 800871e:	f7f8 fa03 	bl	8000b28 <__aeabi_dcmpgt>
 8008722:	2800      	cmp	r0, #0
 8008724:	f040 8295 	bne.w	8008c52 <_dtoa_r+0x97a>
 8008728:	4652      	mov	r2, sl
 800872a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	f7f8 f9db 	bl	8000aec <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8289 	bne.w	8008c4e <_dtoa_r+0x976>
 800873c:	ec5b ab19 	vmov	sl, fp, d9
 8008740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 8148 	blt.w	80089d8 <_dtoa_r+0x700>
 8008748:	9a00      	ldr	r2, [sp, #0]
 800874a:	2a0e      	cmp	r2, #14
 800874c:	f300 8144 	bgt.w	80089d8 <_dtoa_r+0x700>
 8008750:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <_dtoa_r+0x618>)
 8008752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	f280 80d5 	bge.w	800890c <_dtoa_r+0x634>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f300 80d1 	bgt.w	800890c <_dtoa_r+0x634>
 800876a:	f040 826f 	bne.w	8008c4c <_dtoa_r+0x974>
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <_dtoa_r+0x62c>)
 8008770:	2200      	movs	r2, #0
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f8 f9c9 	bl	8000b14 <__aeabi_dcmpge>
 8008782:	9e03      	ldr	r6, [sp, #12]
 8008784:	4637      	mov	r7, r6
 8008786:	2800      	cmp	r0, #0
 8008788:	f040 8245 	bne.w	8008c16 <_dtoa_r+0x93e>
 800878c:	9d01      	ldr	r5, [sp, #4]
 800878e:	2331      	movs	r3, #49	; 0x31
 8008790:	f805 3b01 	strb.w	r3, [r5], #1
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	e240      	b.n	8008c1e <_dtoa_r+0x946>
 800879c:	07f2      	lsls	r2, r6, #31
 800879e:	d505      	bpl.n	80087ac <_dtoa_r+0x4d4>
 80087a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a4:	f7f7 ff30 	bl	8000608 <__aeabi_dmul>
 80087a8:	3501      	adds	r5, #1
 80087aa:	2301      	movs	r3, #1
 80087ac:	1076      	asrs	r6, r6, #1
 80087ae:	3708      	adds	r7, #8
 80087b0:	e777      	b.n	80086a2 <_dtoa_r+0x3ca>
 80087b2:	2502      	movs	r5, #2
 80087b4:	e779      	b.n	80086aa <_dtoa_r+0x3d2>
 80087b6:	9f00      	ldr	r7, [sp, #0]
 80087b8:	9e03      	ldr	r6, [sp, #12]
 80087ba:	e794      	b.n	80086e6 <_dtoa_r+0x40e>
 80087bc:	9901      	ldr	r1, [sp, #4]
 80087be:	4b4c      	ldr	r3, [pc, #304]	; (80088f0 <_dtoa_r+0x618>)
 80087c0:	4431      	add	r1, r6
 80087c2:	910d      	str	r1, [sp, #52]	; 0x34
 80087c4:	9908      	ldr	r1, [sp, #32]
 80087c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d043      	beq.n	800885a <_dtoa_r+0x582>
 80087d2:	494d      	ldr	r1, [pc, #308]	; (8008908 <_dtoa_r+0x630>)
 80087d4:	2000      	movs	r0, #0
 80087d6:	f7f8 f841 	bl	800085c <__aeabi_ddiv>
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f7f7 fd5b 	bl	8000298 <__aeabi_dsub>
 80087e2:	9d01      	ldr	r5, [sp, #4]
 80087e4:	4682      	mov	sl, r0
 80087e6:	468b      	mov	fp, r1
 80087e8:	4649      	mov	r1, r9
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7f8 f9bc 	bl	8000b68 <__aeabi_d2iz>
 80087f0:	4606      	mov	r6, r0
 80087f2:	f7f7 fe9f 	bl	8000534 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4640      	mov	r0, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	f7f7 fd4b 	bl	8000298 <__aeabi_dsub>
 8008802:	3630      	adds	r6, #48	; 0x30
 8008804:	f805 6b01 	strb.w	r6, [r5], #1
 8008808:	4652      	mov	r2, sl
 800880a:	465b      	mov	r3, fp
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	f7f8 f96c 	bl	8000aec <__aeabi_dcmplt>
 8008814:	2800      	cmp	r0, #0
 8008816:	d163      	bne.n	80088e0 <_dtoa_r+0x608>
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	4936      	ldr	r1, [pc, #216]	; (80088f8 <_dtoa_r+0x620>)
 800881e:	2000      	movs	r0, #0
 8008820:	f7f7 fd3a 	bl	8000298 <__aeabi_dsub>
 8008824:	4652      	mov	r2, sl
 8008826:	465b      	mov	r3, fp
 8008828:	f7f8 f960 	bl	8000aec <__aeabi_dcmplt>
 800882c:	2800      	cmp	r0, #0
 800882e:	f040 80b5 	bne.w	800899c <_dtoa_r+0x6c4>
 8008832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008834:	429d      	cmp	r5, r3
 8008836:	d081      	beq.n	800873c <_dtoa_r+0x464>
 8008838:	4b30      	ldr	r3, [pc, #192]	; (80088fc <_dtoa_r+0x624>)
 800883a:	2200      	movs	r2, #0
 800883c:	4650      	mov	r0, sl
 800883e:	4659      	mov	r1, fp
 8008840:	f7f7 fee2 	bl	8000608 <__aeabi_dmul>
 8008844:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <_dtoa_r+0x624>)
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	2200      	movs	r2, #0
 8008850:	f7f7 feda 	bl	8000608 <__aeabi_dmul>
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	e7c6      	b.n	80087e8 <_dtoa_r+0x510>
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	f7f7 fed3 	bl	8000608 <__aeabi_dmul>
 8008862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008864:	9d01      	ldr	r5, [sp, #4]
 8008866:	930f      	str	r3, [sp, #60]	; 0x3c
 8008868:	4682      	mov	sl, r0
 800886a:	468b      	mov	fp, r1
 800886c:	4649      	mov	r1, r9
 800886e:	4640      	mov	r0, r8
 8008870:	f7f8 f97a 	bl	8000b68 <__aeabi_d2iz>
 8008874:	4606      	mov	r6, r0
 8008876:	f7f7 fe5d 	bl	8000534 <__aeabi_i2d>
 800887a:	3630      	adds	r6, #48	; 0x30
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f7 fd08 	bl	8000298 <__aeabi_dsub>
 8008888:	f805 6b01 	strb.w	r6, [r5], #1
 800888c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800888e:	429d      	cmp	r5, r3
 8008890:	4680      	mov	r8, r0
 8008892:	4689      	mov	r9, r1
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	d124      	bne.n	80088e4 <_dtoa_r+0x60c>
 800889a:	4b1b      	ldr	r3, [pc, #108]	; (8008908 <_dtoa_r+0x630>)
 800889c:	4650      	mov	r0, sl
 800889e:	4659      	mov	r1, fp
 80088a0:	f7f7 fcfc 	bl	800029c <__adddf3>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f8 f93c 	bl	8000b28 <__aeabi_dcmpgt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d173      	bne.n	800899c <_dtoa_r+0x6c4>
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	4913      	ldr	r1, [pc, #76]	; (8008908 <_dtoa_r+0x630>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 fcec 	bl	8000298 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f8 f910 	bl	8000aec <__aeabi_dcmplt>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f43f af35 	beq.w	800873c <_dtoa_r+0x464>
 80088d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088d4:	1e6b      	subs	r3, r5, #1
 80088d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088dc:	2b30      	cmp	r3, #48	; 0x30
 80088de:	d0f8      	beq.n	80088d2 <_dtoa_r+0x5fa>
 80088e0:	9700      	str	r7, [sp, #0]
 80088e2:	e049      	b.n	8008978 <_dtoa_r+0x6a0>
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <_dtoa_r+0x624>)
 80088e6:	f7f7 fe8f 	bl	8000608 <__aeabi_dmul>
 80088ea:	4680      	mov	r8, r0
 80088ec:	4689      	mov	r9, r1
 80088ee:	e7bd      	b.n	800886c <_dtoa_r+0x594>
 80088f0:	0800c200 	.word	0x0800c200
 80088f4:	0800c1d8 	.word	0x0800c1d8
 80088f8:	3ff00000 	.word	0x3ff00000
 80088fc:	40240000 	.word	0x40240000
 8008900:	401c0000 	.word	0x401c0000
 8008904:	40140000 	.word	0x40140000
 8008908:	3fe00000 	.word	0x3fe00000
 800890c:	9d01      	ldr	r5, [sp, #4]
 800890e:	4656      	mov	r6, sl
 8008910:	465f      	mov	r7, fp
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 ff9f 	bl	800085c <__aeabi_ddiv>
 800891e:	f7f8 f923 	bl	8000b68 <__aeabi_d2iz>
 8008922:	4682      	mov	sl, r0
 8008924:	f7f7 fe06 	bl	8000534 <__aeabi_i2d>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe6c 	bl	8000608 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800893c:	f7f7 fcac 	bl	8000298 <__aeabi_dsub>
 8008940:	f805 6b01 	strb.w	r6, [r5], #1
 8008944:	9e01      	ldr	r6, [sp, #4]
 8008946:	9f03      	ldr	r7, [sp, #12]
 8008948:	1bae      	subs	r6, r5, r6
 800894a:	42b7      	cmp	r7, r6
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	d135      	bne.n	80089be <_dtoa_r+0x6e6>
 8008952:	f7f7 fca3 	bl	800029c <__adddf3>
 8008956:	4642      	mov	r2, r8
 8008958:	464b      	mov	r3, r9
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	f7f8 f8e3 	bl	8000b28 <__aeabi_dcmpgt>
 8008962:	b9d0      	cbnz	r0, 800899a <_dtoa_r+0x6c2>
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f8 f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008970:	b110      	cbz	r0, 8008978 <_dtoa_r+0x6a0>
 8008972:	f01a 0f01 	tst.w	sl, #1
 8008976:	d110      	bne.n	800899a <_dtoa_r+0x6c2>
 8008978:	4620      	mov	r0, r4
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	f000 fe75 	bl	800966c <_Bfree>
 8008982:	2300      	movs	r3, #0
 8008984:	9800      	ldr	r0, [sp, #0]
 8008986:	702b      	strb	r3, [r5, #0]
 8008988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800898a:	3001      	adds	r0, #1
 800898c:	6018      	str	r0, [r3, #0]
 800898e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008990:	2b00      	cmp	r3, #0
 8008992:	f43f acf1 	beq.w	8008378 <_dtoa_r+0xa0>
 8008996:	601d      	str	r5, [r3, #0]
 8008998:	e4ee      	b.n	8008378 <_dtoa_r+0xa0>
 800899a:	9f00      	ldr	r7, [sp, #0]
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a39      	cmp	r2, #57	; 0x39
 80089a6:	d106      	bne.n	80089b6 <_dtoa_r+0x6de>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d1f7      	bne.n	800899e <_dtoa_r+0x6c6>
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	2230      	movs	r2, #48	; 0x30
 80089b2:	3701      	adds	r7, #1
 80089b4:	700a      	strb	r2, [r1, #0]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	3201      	adds	r2, #1
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e790      	b.n	80088e0 <_dtoa_r+0x608>
 80089be:	4ba6      	ldr	r3, [pc, #664]	; (8008c58 <_dtoa_r+0x980>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	f7f7 fe21 	bl	8000608 <__aeabi_dmul>
 80089c6:	2200      	movs	r2, #0
 80089c8:	2300      	movs	r3, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	f7f8 f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d09d      	beq.n	8008912 <_dtoa_r+0x63a>
 80089d6:	e7cf      	b.n	8008978 <_dtoa_r+0x6a0>
 80089d8:	9a08      	ldr	r2, [sp, #32]
 80089da:	2a00      	cmp	r2, #0
 80089dc:	f000 80d7 	beq.w	8008b8e <_dtoa_r+0x8b6>
 80089e0:	9a06      	ldr	r2, [sp, #24]
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	f300 80ba 	bgt.w	8008b5c <_dtoa_r+0x884>
 80089e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	f000 80b2 	beq.w	8008b54 <_dtoa_r+0x87c>
 80089f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089f4:	9e07      	ldr	r6, [sp, #28]
 80089f6:	9d04      	ldr	r5, [sp, #16]
 80089f8:	9a04      	ldr	r2, [sp, #16]
 80089fa:	441a      	add	r2, r3
 80089fc:	9204      	str	r2, [sp, #16]
 80089fe:	9a05      	ldr	r2, [sp, #20]
 8008a00:	2101      	movs	r1, #1
 8008a02:	441a      	add	r2, r3
 8008a04:	4620      	mov	r0, r4
 8008a06:	9205      	str	r2, [sp, #20]
 8008a08:	f000 ff32 	bl	8009870 <__i2b>
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	dd0c      	ble.n	8008a2c <_dtoa_r+0x754>
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd09      	ble.n	8008a2c <_dtoa_r+0x754>
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	9a04      	ldr	r2, [sp, #16]
 8008a1c:	bfa8      	it	ge
 8008a1e:	462b      	movge	r3, r5
 8008a20:	1ad2      	subs	r2, r2, r3
 8008a22:	9204      	str	r2, [sp, #16]
 8008a24:	9a05      	ldr	r2, [sp, #20]
 8008a26:	1aed      	subs	r5, r5, r3
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	9b07      	ldr	r3, [sp, #28]
 8008a2e:	b31b      	cbz	r3, 8008a78 <_dtoa_r+0x7a0>
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80af 	beq.w	8008b96 <_dtoa_r+0x8be>
 8008a38:	2e00      	cmp	r6, #0
 8008a3a:	dd13      	ble.n	8008a64 <_dtoa_r+0x78c>
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4632      	mov	r2, r6
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 ffd5 	bl	80099f0 <__pow5mult>
 8008a46:	ee18 2a10 	vmov	r2, s16
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 ff24 	bl	800989c <__multiply>
 8008a54:	ee18 1a10 	vmov	r1, s16
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fe06 	bl	800966c <_Bfree>
 8008a60:	ee08 8a10 	vmov	s16, r8
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	1b9a      	subs	r2, r3, r6
 8008a68:	d006      	beq.n	8008a78 <_dtoa_r+0x7a0>
 8008a6a:	ee18 1a10 	vmov	r1, s16
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 ffbe 	bl	80099f0 <__pow5mult>
 8008a74:	ee08 0a10 	vmov	s16, r0
 8008a78:	2101      	movs	r1, #1
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fef8 	bl	8009870 <__i2b>
 8008a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	4606      	mov	r6, r0
 8008a86:	f340 8088 	ble.w	8008b9a <_dtoa_r+0x8c2>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4601      	mov	r1, r0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 ffae 	bl	80099f0 <__pow5mult>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	4606      	mov	r6, r0
 8008a9a:	f340 8081 	ble.w	8008ba0 <_dtoa_r+0x8c8>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	6933      	ldr	r3, [r6, #16]
 8008aa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa8:	6918      	ldr	r0, [r3, #16]
 8008aaa:	f000 fe91 	bl	80097d0 <__hi0bits>
 8008aae:	f1c0 0020 	rsb	r0, r0, #32
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	4418      	add	r0, r3
 8008ab6:	f010 001f 	ands.w	r0, r0, #31
 8008aba:	f000 8092 	beq.w	8008be2 <_dtoa_r+0x90a>
 8008abe:	f1c0 0320 	rsb	r3, r0, #32
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	f340 808a 	ble.w	8008bdc <_dtoa_r+0x904>
 8008ac8:	f1c0 001c 	rsb	r0, r0, #28
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	4403      	add	r3, r0
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	4403      	add	r3, r0
 8008ad6:	4405      	add	r5, r0
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd07      	ble.n	8008af0 <_dtoa_r+0x818>
 8008ae0:	ee18 1a10 	vmov	r1, s16
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 ffdc 	bl	8009aa4 <__lshift>
 8008aec:	ee08 0a10 	vmov	s16, r0
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	dd05      	ble.n	8008b02 <_dtoa_r+0x82a>
 8008af6:	4631      	mov	r1, r6
 8008af8:	461a      	mov	r2, r3
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 ffd2 	bl	8009aa4 <__lshift>
 8008b00:	4606      	mov	r6, r0
 8008b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d06e      	beq.n	8008be6 <_dtoa_r+0x90e>
 8008b08:	ee18 0a10 	vmov	r0, s16
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	f001 f839 	bl	8009b84 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da67      	bge.n	8008be6 <_dtoa_r+0x90e>
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	ee18 1a10 	vmov	r1, s16
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	220a      	movs	r2, #10
 8008b22:	2300      	movs	r3, #0
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fdc3 	bl	80096b0 <__multadd>
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	ee08 0a10 	vmov	s16, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 81b1 	beq.w	8008e98 <_dtoa_r+0xbc0>
 8008b36:	2300      	movs	r3, #0
 8008b38:	4639      	mov	r1, r7
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 fdb7 	bl	80096b0 <__multadd>
 8008b42:	9b02      	ldr	r3, [sp, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	4607      	mov	r7, r0
 8008b48:	f300 808e 	bgt.w	8008c68 <_dtoa_r+0x990>
 8008b4c:	9b06      	ldr	r3, [sp, #24]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	dc51      	bgt.n	8008bf6 <_dtoa_r+0x91e>
 8008b52:	e089      	b.n	8008c68 <_dtoa_r+0x990>
 8008b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b5a:	e74b      	b.n	80089f4 <_dtoa_r+0x71c>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	1e5e      	subs	r6, r3, #1
 8008b60:	9b07      	ldr	r3, [sp, #28]
 8008b62:	42b3      	cmp	r3, r6
 8008b64:	bfbf      	itttt	lt
 8008b66:	9b07      	ldrlt	r3, [sp, #28]
 8008b68:	9607      	strlt	r6, [sp, #28]
 8008b6a:	1af2      	sublt	r2, r6, r3
 8008b6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b6e:	bfb6      	itet	lt
 8008b70:	189b      	addlt	r3, r3, r2
 8008b72:	1b9e      	subge	r6, r3, r6
 8008b74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	bfb8      	it	lt
 8008b7a:	2600      	movlt	r6, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfb7      	itett	lt
 8008b80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b88:	1a9d      	sublt	r5, r3, r2
 8008b8a:	2300      	movlt	r3, #0
 8008b8c:	e734      	b.n	80089f8 <_dtoa_r+0x720>
 8008b8e:	9e07      	ldr	r6, [sp, #28]
 8008b90:	9d04      	ldr	r5, [sp, #16]
 8008b92:	9f08      	ldr	r7, [sp, #32]
 8008b94:	e73b      	b.n	8008a0e <_dtoa_r+0x736>
 8008b96:	9a07      	ldr	r2, [sp, #28]
 8008b98:	e767      	b.n	8008a6a <_dtoa_r+0x792>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	dc18      	bgt.n	8008bd2 <_dtoa_r+0x8fa>
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	d115      	bne.n	8008bd2 <_dtoa_r+0x8fa>
 8008ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008baa:	b993      	cbnz	r3, 8008bd2 <_dtoa_r+0x8fa>
 8008bac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	051b      	lsls	r3, r3, #20
 8008bb4:	b183      	cbz	r3, 8008bd8 <_dtoa_r+0x900>
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	9b05      	ldr	r3, [sp, #20]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	9305      	str	r3, [sp, #20]
 8008bc2:	f04f 0801 	mov.w	r8, #1
 8008bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f47f af6a 	bne.w	8008aa2 <_dtoa_r+0x7ca>
 8008bce:	2001      	movs	r0, #1
 8008bd0:	e76f      	b.n	8008ab2 <_dtoa_r+0x7da>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	e7f6      	b.n	8008bc6 <_dtoa_r+0x8ee>
 8008bd8:	4698      	mov	r8, r3
 8008bda:	e7f4      	b.n	8008bc6 <_dtoa_r+0x8ee>
 8008bdc:	f43f af7d 	beq.w	8008ada <_dtoa_r+0x802>
 8008be0:	4618      	mov	r0, r3
 8008be2:	301c      	adds	r0, #28
 8008be4:	e772      	b.n	8008acc <_dtoa_r+0x7f4>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc37      	bgt.n	8008c5c <_dtoa_r+0x984>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	dd34      	ble.n	8008c5c <_dtoa_r+0x984>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	9b02      	ldr	r3, [sp, #8]
 8008bf8:	b96b      	cbnz	r3, 8008c16 <_dtoa_r+0x93e>
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	2205      	movs	r2, #5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 fd56 	bl	80096b0 <__multadd>
 8008c04:	4601      	mov	r1, r0
 8008c06:	4606      	mov	r6, r0
 8008c08:	ee18 0a10 	vmov	r0, s16
 8008c0c:	f000 ffba 	bl	8009b84 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f73f adbb 	bgt.w	800878c <_dtoa_r+0x4b4>
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	9d01      	ldr	r5, [sp, #4]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	4631      	mov	r1, r6
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 fd21 	bl	800966c <_Bfree>
 8008c2a:	2f00      	cmp	r7, #0
 8008c2c:	f43f aea4 	beq.w	8008978 <_dtoa_r+0x6a0>
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	d005      	beq.n	8008c42 <_dtoa_r+0x96a>
 8008c36:	45b8      	cmp	r8, r7
 8008c38:	d003      	beq.n	8008c42 <_dtoa_r+0x96a>
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fd15 	bl	800966c <_Bfree>
 8008c42:	4639      	mov	r1, r7
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fd11 	bl	800966c <_Bfree>
 8008c4a:	e695      	b.n	8008978 <_dtoa_r+0x6a0>
 8008c4c:	2600      	movs	r6, #0
 8008c4e:	4637      	mov	r7, r6
 8008c50:	e7e1      	b.n	8008c16 <_dtoa_r+0x93e>
 8008c52:	9700      	str	r7, [sp, #0]
 8008c54:	4637      	mov	r7, r6
 8008c56:	e599      	b.n	800878c <_dtoa_r+0x4b4>
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	9b08      	ldr	r3, [sp, #32]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 80ca 	beq.w	8008df8 <_dtoa_r+0xb20>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	dd05      	ble.n	8008c78 <_dtoa_r+0x9a0>
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 ff17 	bl	8009aa4 <__lshift>
 8008c76:	4607      	mov	r7, r0
 8008c78:	f1b8 0f00 	cmp.w	r8, #0
 8008c7c:	d05b      	beq.n	8008d36 <_dtoa_r+0xa5e>
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 fcb3 	bl	80095ec <_Balloc>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b928      	cbnz	r0, 8008c96 <_dtoa_r+0x9be>
 8008c8a:	4b87      	ldr	r3, [pc, #540]	; (8008ea8 <_dtoa_r+0xbd0>)
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c92:	f7ff bb3b 	b.w	800830c <_dtoa_r+0x34>
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	3202      	adds	r2, #2
 8008c9a:	0092      	lsls	r2, r2, #2
 8008c9c:	f107 010c 	add.w	r1, r7, #12
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	f000 fc95 	bl	80095d0 <memcpy>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fefa 	bl	8009aa4 <__lshift>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	f103 0901 	add.w	r9, r3, #1
 8008cb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	9305      	str	r3, [sp, #20]
 8008cbe:	f00a 0301 	and.w	r3, sl, #1
 8008cc2:	46b8      	mov	r8, r7
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	4631      	mov	r1, r6
 8008cca:	ee18 0a10 	vmov	r0, s16
 8008cce:	f7ff fa77 	bl	80081c0 <quorem>
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	9002      	str	r0, [sp, #8]
 8008cd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cda:	ee18 0a10 	vmov	r0, s16
 8008cde:	f000 ff51 	bl	8009b84 <__mcmp>
 8008ce2:	463a      	mov	r2, r7
 8008ce4:	9003      	str	r0, [sp, #12]
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 ff67 	bl	8009bbc <__mdiff>
 8008cee:	68c2      	ldr	r2, [r0, #12]
 8008cf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	bb02      	cbnz	r2, 8008d3a <_dtoa_r+0xa62>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	ee18 0a10 	vmov	r0, s16
 8008cfe:	f000 ff41 	bl	8009b84 <__mcmp>
 8008d02:	4602      	mov	r2, r0
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	9207      	str	r2, [sp, #28]
 8008d0a:	f000 fcaf 	bl	800966c <_Bfree>
 8008d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d12:	ea43 0102 	orr.w	r1, r3, r2
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	464d      	mov	r5, r9
 8008d1c:	d10f      	bne.n	8008d3e <_dtoa_r+0xa66>
 8008d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d22:	d02a      	beq.n	8008d7a <_dtoa_r+0xaa2>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd02      	ble.n	8008d30 <_dtoa_r+0xa58>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d30:	f88b a000 	strb.w	sl, [fp]
 8008d34:	e775      	b.n	8008c22 <_dtoa_r+0x94a>
 8008d36:	4638      	mov	r0, r7
 8008d38:	e7ba      	b.n	8008cb0 <_dtoa_r+0x9d8>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	e7e2      	b.n	8008d04 <_dtoa_r+0xa2c>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db04      	blt.n	8008d4e <_dtoa_r+0xa76>
 8008d44:	9906      	ldr	r1, [sp, #24]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	9904      	ldr	r1, [sp, #16]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	d122      	bne.n	8008d94 <_dtoa_r+0xabc>
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	ddee      	ble.n	8008d30 <_dtoa_r+0xa58>
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	2201      	movs	r2, #1
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fea3 	bl	8009aa4 <__lshift>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	ee08 0a10 	vmov	s16, r0
 8008d64:	f000 ff0e 	bl	8009b84 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	dc03      	bgt.n	8008d74 <_dtoa_r+0xa9c>
 8008d6c:	d1e0      	bne.n	8008d30 <_dtoa_r+0xa58>
 8008d6e:	f01a 0f01 	tst.w	sl, #1
 8008d72:	d0dd      	beq.n	8008d30 <_dtoa_r+0xa58>
 8008d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d78:	d1d7      	bne.n	8008d2a <_dtoa_r+0xa52>
 8008d7a:	2339      	movs	r3, #57	; 0x39
 8008d7c:	f88b 3000 	strb.w	r3, [fp]
 8008d80:	462b      	mov	r3, r5
 8008d82:	461d      	mov	r5, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d8a:	2a39      	cmp	r2, #57	; 0x39
 8008d8c:	d071      	beq.n	8008e72 <_dtoa_r+0xb9a>
 8008d8e:	3201      	adds	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e746      	b.n	8008c22 <_dtoa_r+0x94a>
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	dd07      	ble.n	8008da8 <_dtoa_r+0xad0>
 8008d98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d9c:	d0ed      	beq.n	8008d7a <_dtoa_r+0xaa2>
 8008d9e:	f10a 0301 	add.w	r3, sl, #1
 8008da2:	f88b 3000 	strb.w	r3, [fp]
 8008da6:	e73c      	b.n	8008c22 <_dtoa_r+0x94a>
 8008da8:	9b05      	ldr	r3, [sp, #20]
 8008daa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dae:	4599      	cmp	r9, r3
 8008db0:	d047      	beq.n	8008e42 <_dtoa_r+0xb6a>
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	2300      	movs	r3, #0
 8008db8:	220a      	movs	r2, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fc78 	bl	80096b0 <__multadd>
 8008dc0:	45b8      	cmp	r8, r7
 8008dc2:	ee08 0a10 	vmov	s16, r0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 020a 	mov.w	r2, #10
 8008dce:	4641      	mov	r1, r8
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	d106      	bne.n	8008de2 <_dtoa_r+0xb0a>
 8008dd4:	f000 fc6c 	bl	80096b0 <__multadd>
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4607      	mov	r7, r0
 8008ddc:	f109 0901 	add.w	r9, r9, #1
 8008de0:	e772      	b.n	8008cc8 <_dtoa_r+0x9f0>
 8008de2:	f000 fc65 	bl	80096b0 <__multadd>
 8008de6:	4639      	mov	r1, r7
 8008de8:	4680      	mov	r8, r0
 8008dea:	2300      	movs	r3, #0
 8008dec:	220a      	movs	r2, #10
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fc5e 	bl	80096b0 <__multadd>
 8008df4:	4607      	mov	r7, r0
 8008df6:	e7f1      	b.n	8008ddc <_dtoa_r+0xb04>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	9302      	str	r3, [sp, #8]
 8008dfc:	9d01      	ldr	r5, [sp, #4]
 8008dfe:	ee18 0a10 	vmov	r0, s16
 8008e02:	4631      	mov	r1, r6
 8008e04:	f7ff f9dc 	bl	80081c0 <quorem>
 8008e08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e12:	1aea      	subs	r2, r5, r3
 8008e14:	9b02      	ldr	r3, [sp, #8]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	dd09      	ble.n	8008e2e <_dtoa_r+0xb56>
 8008e1a:	ee18 1a10 	vmov	r1, s16
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 fc44 	bl	80096b0 <__multadd>
 8008e28:	ee08 0a10 	vmov	s16, r0
 8008e2c:	e7e7      	b.n	8008dfe <_dtoa_r+0xb26>
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bfc8      	it	gt
 8008e34:	461d      	movgt	r5, r3
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	bfd8      	it	le
 8008e3a:	2501      	movle	r5, #1
 8008e3c:	441d      	add	r5, r3
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	ee18 1a10 	vmov	r1, s16
 8008e46:	2201      	movs	r2, #1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fe2b 	bl	8009aa4 <__lshift>
 8008e4e:	4631      	mov	r1, r6
 8008e50:	ee08 0a10 	vmov	s16, r0
 8008e54:	f000 fe96 	bl	8009b84 <__mcmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dc91      	bgt.n	8008d80 <_dtoa_r+0xaa8>
 8008e5c:	d102      	bne.n	8008e64 <_dtoa_r+0xb8c>
 8008e5e:	f01a 0f01 	tst.w	sl, #1
 8008e62:	d18d      	bne.n	8008d80 <_dtoa_r+0xaa8>
 8008e64:	462b      	mov	r3, r5
 8008e66:	461d      	mov	r5, r3
 8008e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e6c:	2a30      	cmp	r2, #48	; 0x30
 8008e6e:	d0fa      	beq.n	8008e66 <_dtoa_r+0xb8e>
 8008e70:	e6d7      	b.n	8008c22 <_dtoa_r+0x94a>
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d184      	bne.n	8008d82 <_dtoa_r+0xaaa>
 8008e78:	9b00      	ldr	r3, [sp, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2331      	movs	r3, #49	; 0x31
 8008e80:	7013      	strb	r3, [r2, #0]
 8008e82:	e6ce      	b.n	8008c22 <_dtoa_r+0x94a>
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <_dtoa_r+0xbd4>)
 8008e86:	f7ff ba95 	b.w	80083b4 <_dtoa_r+0xdc>
 8008e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aa6e 	bne.w	800836e <_dtoa_r+0x96>
 8008e92:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <_dtoa_r+0xbd8>)
 8008e94:	f7ff ba8e 	b.w	80083b4 <_dtoa_r+0xdc>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dcae      	bgt.n	8008dfc <_dtoa_r+0xb24>
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	f73f aea8 	bgt.w	8008bf6 <_dtoa_r+0x91e>
 8008ea6:	e7a9      	b.n	8008dfc <_dtoa_r+0xb24>
 8008ea8:	0800c0f0 	.word	0x0800c0f0
 8008eac:	0800bef4 	.word	0x0800bef4
 8008eb0:	0800c071 	.word	0x0800c071

08008eb4 <rshift>:
 8008eb4:	6903      	ldr	r3, [r0, #16]
 8008eb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008eba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ebe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ec2:	f100 0414 	add.w	r4, r0, #20
 8008ec6:	dd45      	ble.n	8008f54 <rshift+0xa0>
 8008ec8:	f011 011f 	ands.w	r1, r1, #31
 8008ecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ed0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ed4:	d10c      	bne.n	8008ef0 <rshift+0x3c>
 8008ed6:	f100 0710 	add.w	r7, r0, #16
 8008eda:	4629      	mov	r1, r5
 8008edc:	42b1      	cmp	r1, r6
 8008ede:	d334      	bcc.n	8008f4a <rshift+0x96>
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	1eea      	subs	r2, r5, #3
 8008ee6:	4296      	cmp	r6, r2
 8008ee8:	bf38      	it	cc
 8008eea:	2300      	movcc	r3, #0
 8008eec:	4423      	add	r3, r4
 8008eee:	e015      	b.n	8008f1c <rshift+0x68>
 8008ef0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ef4:	f1c1 0820 	rsb	r8, r1, #32
 8008ef8:	40cf      	lsrs	r7, r1
 8008efa:	f105 0e04 	add.w	lr, r5, #4
 8008efe:	46a1      	mov	r9, r4
 8008f00:	4576      	cmp	r6, lr
 8008f02:	46f4      	mov	ip, lr
 8008f04:	d815      	bhi.n	8008f32 <rshift+0x7e>
 8008f06:	1a9a      	subs	r2, r3, r2
 8008f08:	0092      	lsls	r2, r2, #2
 8008f0a:	3a04      	subs	r2, #4
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	42ae      	cmp	r6, r5
 8008f10:	bf38      	it	cc
 8008f12:	2200      	movcc	r2, #0
 8008f14:	18a3      	adds	r3, r4, r2
 8008f16:	50a7      	str	r7, [r4, r2]
 8008f18:	b107      	cbz	r7, 8008f1c <rshift+0x68>
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	1b1a      	subs	r2, r3, r4
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f24:	bf08      	it	eq
 8008f26:	2300      	moveq	r3, #0
 8008f28:	6102      	str	r2, [r0, #16]
 8008f2a:	bf08      	it	eq
 8008f2c:	6143      	streq	r3, [r0, #20]
 8008f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f32:	f8dc c000 	ldr.w	ip, [ip]
 8008f36:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f3a:	ea4c 0707 	orr.w	r7, ip, r7
 8008f3e:	f849 7b04 	str.w	r7, [r9], #4
 8008f42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f46:	40cf      	lsrs	r7, r1
 8008f48:	e7da      	b.n	8008f00 <rshift+0x4c>
 8008f4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f52:	e7c3      	b.n	8008edc <rshift+0x28>
 8008f54:	4623      	mov	r3, r4
 8008f56:	e7e1      	b.n	8008f1c <rshift+0x68>

08008f58 <__hexdig_fun>:
 8008f58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d802      	bhi.n	8008f66 <__hexdig_fun+0xe>
 8008f60:	3820      	subs	r0, #32
 8008f62:	b2c0      	uxtb	r0, r0
 8008f64:	4770      	bx	lr
 8008f66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d801      	bhi.n	8008f72 <__hexdig_fun+0x1a>
 8008f6e:	3847      	subs	r0, #71	; 0x47
 8008f70:	e7f7      	b.n	8008f62 <__hexdig_fun+0xa>
 8008f72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d801      	bhi.n	8008f7e <__hexdig_fun+0x26>
 8008f7a:	3827      	subs	r0, #39	; 0x27
 8008f7c:	e7f1      	b.n	8008f62 <__hexdig_fun+0xa>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	4770      	bx	lr
	...

08008f84 <__gethex>:
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	ed2d 8b02 	vpush	{d8}
 8008f8c:	b089      	sub	sp, #36	; 0x24
 8008f8e:	ee08 0a10 	vmov	s16, r0
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	4bb4      	ldr	r3, [pc, #720]	; (8009268 <__gethex+0x2e4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	468b      	mov	fp, r1
 8008f9e:	4690      	mov	r8, r2
 8008fa0:	f7f7 f91e 	bl	80001e0 <strlen>
 8008fa4:	9b01      	ldr	r3, [sp, #4]
 8008fa6:	f8db 2000 	ldr.w	r2, [fp]
 8008faa:	4403      	add	r3, r0
 8008fac:	4682      	mov	sl, r0
 8008fae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fb2:	9305      	str	r3, [sp, #20]
 8008fb4:	1c93      	adds	r3, r2, #2
 8008fb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008fba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008fbe:	32fe      	adds	r2, #254	; 0xfe
 8008fc0:	18d1      	adds	r1, r2, r3
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008fc8:	9100      	str	r1, [sp, #0]
 8008fca:	2830      	cmp	r0, #48	; 0x30
 8008fcc:	d0f8      	beq.n	8008fc0 <__gethex+0x3c>
 8008fce:	f7ff ffc3 	bl	8008f58 <__hexdig_fun>
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d13a      	bne.n	800904e <__gethex+0xca>
 8008fd8:	9901      	ldr	r1, [sp, #4]
 8008fda:	4652      	mov	r2, sl
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f001 fa33 	bl	800a448 <strncmp>
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d168      	bne.n	80090ba <__gethex+0x136>
 8008fe8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008fec:	eb07 060a 	add.w	r6, r7, sl
 8008ff0:	f7ff ffb2 	bl	8008f58 <__hexdig_fun>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d062      	beq.n	80090be <__gethex+0x13a>
 8008ff8:	4633      	mov	r3, r6
 8008ffa:	7818      	ldrb	r0, [r3, #0]
 8008ffc:	2830      	cmp	r0, #48	; 0x30
 8008ffe:	461f      	mov	r7, r3
 8009000:	f103 0301 	add.w	r3, r3, #1
 8009004:	d0f9      	beq.n	8008ffa <__gethex+0x76>
 8009006:	f7ff ffa7 	bl	8008f58 <__hexdig_fun>
 800900a:	2301      	movs	r3, #1
 800900c:	fab0 f480 	clz	r4, r0
 8009010:	0964      	lsrs	r4, r4, #5
 8009012:	4635      	mov	r5, r6
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	463a      	mov	r2, r7
 8009018:	4616      	mov	r6, r2
 800901a:	3201      	adds	r2, #1
 800901c:	7830      	ldrb	r0, [r6, #0]
 800901e:	f7ff ff9b 	bl	8008f58 <__hexdig_fun>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1f8      	bne.n	8009018 <__gethex+0x94>
 8009026:	9901      	ldr	r1, [sp, #4]
 8009028:	4652      	mov	r2, sl
 800902a:	4630      	mov	r0, r6
 800902c:	f001 fa0c 	bl	800a448 <strncmp>
 8009030:	b980      	cbnz	r0, 8009054 <__gethex+0xd0>
 8009032:	b94d      	cbnz	r5, 8009048 <__gethex+0xc4>
 8009034:	eb06 050a 	add.w	r5, r6, sl
 8009038:	462a      	mov	r2, r5
 800903a:	4616      	mov	r6, r2
 800903c:	3201      	adds	r2, #1
 800903e:	7830      	ldrb	r0, [r6, #0]
 8009040:	f7ff ff8a 	bl	8008f58 <__hexdig_fun>
 8009044:	2800      	cmp	r0, #0
 8009046:	d1f8      	bne.n	800903a <__gethex+0xb6>
 8009048:	1bad      	subs	r5, r5, r6
 800904a:	00ad      	lsls	r5, r5, #2
 800904c:	e004      	b.n	8009058 <__gethex+0xd4>
 800904e:	2400      	movs	r4, #0
 8009050:	4625      	mov	r5, r4
 8009052:	e7e0      	b.n	8009016 <__gethex+0x92>
 8009054:	2d00      	cmp	r5, #0
 8009056:	d1f7      	bne.n	8009048 <__gethex+0xc4>
 8009058:	7833      	ldrb	r3, [r6, #0]
 800905a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800905e:	2b50      	cmp	r3, #80	; 0x50
 8009060:	d13b      	bne.n	80090da <__gethex+0x156>
 8009062:	7873      	ldrb	r3, [r6, #1]
 8009064:	2b2b      	cmp	r3, #43	; 0x2b
 8009066:	d02c      	beq.n	80090c2 <__gethex+0x13e>
 8009068:	2b2d      	cmp	r3, #45	; 0x2d
 800906a:	d02e      	beq.n	80090ca <__gethex+0x146>
 800906c:	1c71      	adds	r1, r6, #1
 800906e:	f04f 0900 	mov.w	r9, #0
 8009072:	7808      	ldrb	r0, [r1, #0]
 8009074:	f7ff ff70 	bl	8008f58 <__hexdig_fun>
 8009078:	1e43      	subs	r3, r0, #1
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b18      	cmp	r3, #24
 800907e:	d82c      	bhi.n	80090da <__gethex+0x156>
 8009080:	f1a0 0210 	sub.w	r2, r0, #16
 8009084:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009088:	f7ff ff66 	bl	8008f58 <__hexdig_fun>
 800908c:	1e43      	subs	r3, r0, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b18      	cmp	r3, #24
 8009092:	d91d      	bls.n	80090d0 <__gethex+0x14c>
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	d000      	beq.n	800909c <__gethex+0x118>
 800909a:	4252      	negs	r2, r2
 800909c:	4415      	add	r5, r2
 800909e:	f8cb 1000 	str.w	r1, [fp]
 80090a2:	b1e4      	cbz	r4, 80090de <__gethex+0x15a>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bf14      	ite	ne
 80090aa:	2700      	movne	r7, #0
 80090ac:	2706      	moveq	r7, #6
 80090ae:	4638      	mov	r0, r7
 80090b0:	b009      	add	sp, #36	; 0x24
 80090b2:	ecbd 8b02 	vpop	{d8}
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	463e      	mov	r6, r7
 80090bc:	4625      	mov	r5, r4
 80090be:	2401      	movs	r4, #1
 80090c0:	e7ca      	b.n	8009058 <__gethex+0xd4>
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	1cb1      	adds	r1, r6, #2
 80090c8:	e7d3      	b.n	8009072 <__gethex+0xee>
 80090ca:	f04f 0901 	mov.w	r9, #1
 80090ce:	e7fa      	b.n	80090c6 <__gethex+0x142>
 80090d0:	230a      	movs	r3, #10
 80090d2:	fb03 0202 	mla	r2, r3, r2, r0
 80090d6:	3a10      	subs	r2, #16
 80090d8:	e7d4      	b.n	8009084 <__gethex+0x100>
 80090da:	4631      	mov	r1, r6
 80090dc:	e7df      	b.n	800909e <__gethex+0x11a>
 80090de:	1bf3      	subs	r3, r6, r7
 80090e0:	3b01      	subs	r3, #1
 80090e2:	4621      	mov	r1, r4
 80090e4:	2b07      	cmp	r3, #7
 80090e6:	dc0b      	bgt.n	8009100 <__gethex+0x17c>
 80090e8:	ee18 0a10 	vmov	r0, s16
 80090ec:	f000 fa7e 	bl	80095ec <_Balloc>
 80090f0:	4604      	mov	r4, r0
 80090f2:	b940      	cbnz	r0, 8009106 <__gethex+0x182>
 80090f4:	4b5d      	ldr	r3, [pc, #372]	; (800926c <__gethex+0x2e8>)
 80090f6:	4602      	mov	r2, r0
 80090f8:	21de      	movs	r1, #222	; 0xde
 80090fa:	485d      	ldr	r0, [pc, #372]	; (8009270 <__gethex+0x2ec>)
 80090fc:	f001 f9c6 	bl	800a48c <__assert_func>
 8009100:	3101      	adds	r1, #1
 8009102:	105b      	asrs	r3, r3, #1
 8009104:	e7ee      	b.n	80090e4 <__gethex+0x160>
 8009106:	f100 0914 	add.w	r9, r0, #20
 800910a:	f04f 0b00 	mov.w	fp, #0
 800910e:	f1ca 0301 	rsb	r3, sl, #1
 8009112:	f8cd 9008 	str.w	r9, [sp, #8]
 8009116:	f8cd b000 	str.w	fp, [sp]
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	42b7      	cmp	r7, r6
 800911e:	d340      	bcc.n	80091a2 <__gethex+0x21e>
 8009120:	9802      	ldr	r0, [sp, #8]
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	f840 3b04 	str.w	r3, [r0], #4
 8009128:	eba0 0009 	sub.w	r0, r0, r9
 800912c:	1080      	asrs	r0, r0, #2
 800912e:	0146      	lsls	r6, r0, #5
 8009130:	6120      	str	r0, [r4, #16]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fb4c 	bl	80097d0 <__hi0bits>
 8009138:	1a30      	subs	r0, r6, r0
 800913a:	f8d8 6000 	ldr.w	r6, [r8]
 800913e:	42b0      	cmp	r0, r6
 8009140:	dd63      	ble.n	800920a <__gethex+0x286>
 8009142:	1b87      	subs	r7, r0, r6
 8009144:	4639      	mov	r1, r7
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fef0 	bl	8009f2c <__any_on>
 800914c:	4682      	mov	sl, r0
 800914e:	b1a8      	cbz	r0, 800917c <__gethex+0x1f8>
 8009150:	1e7b      	subs	r3, r7, #1
 8009152:	1159      	asrs	r1, r3, #5
 8009154:	f003 021f 	and.w	r2, r3, #31
 8009158:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800915c:	f04f 0a01 	mov.w	sl, #1
 8009160:	fa0a f202 	lsl.w	r2, sl, r2
 8009164:	420a      	tst	r2, r1
 8009166:	d009      	beq.n	800917c <__gethex+0x1f8>
 8009168:	4553      	cmp	r3, sl
 800916a:	dd05      	ble.n	8009178 <__gethex+0x1f4>
 800916c:	1eb9      	subs	r1, r7, #2
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fedc 	bl	8009f2c <__any_on>
 8009174:	2800      	cmp	r0, #0
 8009176:	d145      	bne.n	8009204 <__gethex+0x280>
 8009178:	f04f 0a02 	mov.w	sl, #2
 800917c:	4639      	mov	r1, r7
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff fe98 	bl	8008eb4 <rshift>
 8009184:	443d      	add	r5, r7
 8009186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800918a:	42ab      	cmp	r3, r5
 800918c:	da4c      	bge.n	8009228 <__gethex+0x2a4>
 800918e:	ee18 0a10 	vmov	r0, s16
 8009192:	4621      	mov	r1, r4
 8009194:	f000 fa6a 	bl	800966c <_Bfree>
 8009198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800919a:	2300      	movs	r3, #0
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	27a3      	movs	r7, #163	; 0xa3
 80091a0:	e785      	b.n	80090ae <__gethex+0x12a>
 80091a2:	1e73      	subs	r3, r6, #1
 80091a4:	9a05      	ldr	r2, [sp, #20]
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d019      	beq.n	80091e4 <__gethex+0x260>
 80091b0:	f1bb 0f20 	cmp.w	fp, #32
 80091b4:	d107      	bne.n	80091c6 <__gethex+0x242>
 80091b6:	9b02      	ldr	r3, [sp, #8]
 80091b8:	9a00      	ldr	r2, [sp, #0]
 80091ba:	f843 2b04 	str.w	r2, [r3], #4
 80091be:	9302      	str	r3, [sp, #8]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	469b      	mov	fp, r3
 80091c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80091ca:	f7ff fec5 	bl	8008f58 <__hexdig_fun>
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	f000 000f 	and.w	r0, r0, #15
 80091d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80091d8:	4303      	orrs	r3, r0
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	f10b 0b04 	add.w	fp, fp, #4
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	e00d      	b.n	8009200 <__gethex+0x27c>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	9a06      	ldr	r2, [sp, #24]
 80091e8:	4413      	add	r3, r2
 80091ea:	42bb      	cmp	r3, r7
 80091ec:	d3e0      	bcc.n	80091b0 <__gethex+0x22c>
 80091ee:	4618      	mov	r0, r3
 80091f0:	9901      	ldr	r1, [sp, #4]
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	4652      	mov	r2, sl
 80091f6:	f001 f927 	bl	800a448 <strncmp>
 80091fa:	9b07      	ldr	r3, [sp, #28]
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1d7      	bne.n	80091b0 <__gethex+0x22c>
 8009200:	461e      	mov	r6, r3
 8009202:	e78b      	b.n	800911c <__gethex+0x198>
 8009204:	f04f 0a03 	mov.w	sl, #3
 8009208:	e7b8      	b.n	800917c <__gethex+0x1f8>
 800920a:	da0a      	bge.n	8009222 <__gethex+0x29e>
 800920c:	1a37      	subs	r7, r6, r0
 800920e:	4621      	mov	r1, r4
 8009210:	ee18 0a10 	vmov	r0, s16
 8009214:	463a      	mov	r2, r7
 8009216:	f000 fc45 	bl	8009aa4 <__lshift>
 800921a:	1bed      	subs	r5, r5, r7
 800921c:	4604      	mov	r4, r0
 800921e:	f100 0914 	add.w	r9, r0, #20
 8009222:	f04f 0a00 	mov.w	sl, #0
 8009226:	e7ae      	b.n	8009186 <__gethex+0x202>
 8009228:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800922c:	42a8      	cmp	r0, r5
 800922e:	dd72      	ble.n	8009316 <__gethex+0x392>
 8009230:	1b45      	subs	r5, r0, r5
 8009232:	42ae      	cmp	r6, r5
 8009234:	dc36      	bgt.n	80092a4 <__gethex+0x320>
 8009236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d02a      	beq.n	8009294 <__gethex+0x310>
 800923e:	2b03      	cmp	r3, #3
 8009240:	d02c      	beq.n	800929c <__gethex+0x318>
 8009242:	2b01      	cmp	r3, #1
 8009244:	d11c      	bne.n	8009280 <__gethex+0x2fc>
 8009246:	42ae      	cmp	r6, r5
 8009248:	d11a      	bne.n	8009280 <__gethex+0x2fc>
 800924a:	2e01      	cmp	r6, #1
 800924c:	d112      	bne.n	8009274 <__gethex+0x2f0>
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	2301      	movs	r3, #1
 8009258:	6123      	str	r3, [r4, #16]
 800925a:	f8c9 3000 	str.w	r3, [r9]
 800925e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009260:	2762      	movs	r7, #98	; 0x62
 8009262:	601c      	str	r4, [r3, #0]
 8009264:	e723      	b.n	80090ae <__gethex+0x12a>
 8009266:	bf00      	nop
 8009268:	0800c168 	.word	0x0800c168
 800926c:	0800c0f0 	.word	0x0800c0f0
 8009270:	0800c101 	.word	0x0800c101
 8009274:	1e71      	subs	r1, r6, #1
 8009276:	4620      	mov	r0, r4
 8009278:	f000 fe58 	bl	8009f2c <__any_on>
 800927c:	2800      	cmp	r0, #0
 800927e:	d1e6      	bne.n	800924e <__gethex+0x2ca>
 8009280:	ee18 0a10 	vmov	r0, s16
 8009284:	4621      	mov	r1, r4
 8009286:	f000 f9f1 	bl	800966c <_Bfree>
 800928a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800928c:	2300      	movs	r3, #0
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	2750      	movs	r7, #80	; 0x50
 8009292:	e70c      	b.n	80090ae <__gethex+0x12a>
 8009294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f2      	bne.n	8009280 <__gethex+0x2fc>
 800929a:	e7d8      	b.n	800924e <__gethex+0x2ca>
 800929c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1d5      	bne.n	800924e <__gethex+0x2ca>
 80092a2:	e7ed      	b.n	8009280 <__gethex+0x2fc>
 80092a4:	1e6f      	subs	r7, r5, #1
 80092a6:	f1ba 0f00 	cmp.w	sl, #0
 80092aa:	d131      	bne.n	8009310 <__gethex+0x38c>
 80092ac:	b127      	cbz	r7, 80092b8 <__gethex+0x334>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fe3b 	bl	8009f2c <__any_on>
 80092b6:	4682      	mov	sl, r0
 80092b8:	117b      	asrs	r3, r7, #5
 80092ba:	2101      	movs	r1, #1
 80092bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092c0:	f007 071f 	and.w	r7, r7, #31
 80092c4:	fa01 f707 	lsl.w	r7, r1, r7
 80092c8:	421f      	tst	r7, r3
 80092ca:	4629      	mov	r1, r5
 80092cc:	4620      	mov	r0, r4
 80092ce:	bf18      	it	ne
 80092d0:	f04a 0a02 	orrne.w	sl, sl, #2
 80092d4:	1b76      	subs	r6, r6, r5
 80092d6:	f7ff fded 	bl	8008eb4 <rshift>
 80092da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092de:	2702      	movs	r7, #2
 80092e0:	f1ba 0f00 	cmp.w	sl, #0
 80092e4:	d048      	beq.n	8009378 <__gethex+0x3f4>
 80092e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d015      	beq.n	800931a <__gethex+0x396>
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d017      	beq.n	8009322 <__gethex+0x39e>
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d109      	bne.n	800930a <__gethex+0x386>
 80092f6:	f01a 0f02 	tst.w	sl, #2
 80092fa:	d006      	beq.n	800930a <__gethex+0x386>
 80092fc:	f8d9 0000 	ldr.w	r0, [r9]
 8009300:	ea4a 0a00 	orr.w	sl, sl, r0
 8009304:	f01a 0f01 	tst.w	sl, #1
 8009308:	d10e      	bne.n	8009328 <__gethex+0x3a4>
 800930a:	f047 0710 	orr.w	r7, r7, #16
 800930e:	e033      	b.n	8009378 <__gethex+0x3f4>
 8009310:	f04f 0a01 	mov.w	sl, #1
 8009314:	e7d0      	b.n	80092b8 <__gethex+0x334>
 8009316:	2701      	movs	r7, #1
 8009318:	e7e2      	b.n	80092e0 <__gethex+0x35c>
 800931a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800931c:	f1c3 0301 	rsb	r3, r3, #1
 8009320:	9315      	str	r3, [sp, #84]	; 0x54
 8009322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f0      	beq.n	800930a <__gethex+0x386>
 8009328:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800932c:	f104 0314 	add.w	r3, r4, #20
 8009330:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009334:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009338:	f04f 0c00 	mov.w	ip, #0
 800933c:	4618      	mov	r0, r3
 800933e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009342:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009346:	d01c      	beq.n	8009382 <__gethex+0x3fe>
 8009348:	3201      	adds	r2, #1
 800934a:	6002      	str	r2, [r0, #0]
 800934c:	2f02      	cmp	r7, #2
 800934e:	f104 0314 	add.w	r3, r4, #20
 8009352:	d13f      	bne.n	80093d4 <__gethex+0x450>
 8009354:	f8d8 2000 	ldr.w	r2, [r8]
 8009358:	3a01      	subs	r2, #1
 800935a:	42b2      	cmp	r2, r6
 800935c:	d10a      	bne.n	8009374 <__gethex+0x3f0>
 800935e:	1171      	asrs	r1, r6, #5
 8009360:	2201      	movs	r2, #1
 8009362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009366:	f006 061f 	and.w	r6, r6, #31
 800936a:	fa02 f606 	lsl.w	r6, r2, r6
 800936e:	421e      	tst	r6, r3
 8009370:	bf18      	it	ne
 8009372:	4617      	movne	r7, r2
 8009374:	f047 0720 	orr.w	r7, r7, #32
 8009378:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800937a:	601c      	str	r4, [r3, #0]
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	601d      	str	r5, [r3, #0]
 8009380:	e695      	b.n	80090ae <__gethex+0x12a>
 8009382:	4299      	cmp	r1, r3
 8009384:	f843 cc04 	str.w	ip, [r3, #-4]
 8009388:	d8d8      	bhi.n	800933c <__gethex+0x3b8>
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	459b      	cmp	fp, r3
 800938e:	db19      	blt.n	80093c4 <__gethex+0x440>
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	ee18 0a10 	vmov	r0, s16
 8009396:	3101      	adds	r1, #1
 8009398:	f000 f928 	bl	80095ec <_Balloc>
 800939c:	4681      	mov	r9, r0
 800939e:	b918      	cbnz	r0, 80093a8 <__gethex+0x424>
 80093a0:	4b1a      	ldr	r3, [pc, #104]	; (800940c <__gethex+0x488>)
 80093a2:	4602      	mov	r2, r0
 80093a4:	2184      	movs	r1, #132	; 0x84
 80093a6:	e6a8      	b.n	80090fa <__gethex+0x176>
 80093a8:	6922      	ldr	r2, [r4, #16]
 80093aa:	3202      	adds	r2, #2
 80093ac:	f104 010c 	add.w	r1, r4, #12
 80093b0:	0092      	lsls	r2, r2, #2
 80093b2:	300c      	adds	r0, #12
 80093b4:	f000 f90c 	bl	80095d0 <memcpy>
 80093b8:	4621      	mov	r1, r4
 80093ba:	ee18 0a10 	vmov	r0, s16
 80093be:	f000 f955 	bl	800966c <_Bfree>
 80093c2:	464c      	mov	r4, r9
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093cc:	6122      	str	r2, [r4, #16]
 80093ce:	2201      	movs	r2, #1
 80093d0:	615a      	str	r2, [r3, #20]
 80093d2:	e7bb      	b.n	800934c <__gethex+0x3c8>
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	455a      	cmp	r2, fp
 80093d8:	dd0b      	ble.n	80093f2 <__gethex+0x46e>
 80093da:	2101      	movs	r1, #1
 80093dc:	4620      	mov	r0, r4
 80093de:	f7ff fd69 	bl	8008eb4 <rshift>
 80093e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093e6:	3501      	adds	r5, #1
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	f6ff aed0 	blt.w	800918e <__gethex+0x20a>
 80093ee:	2701      	movs	r7, #1
 80093f0:	e7c0      	b.n	8009374 <__gethex+0x3f0>
 80093f2:	f016 061f 	ands.w	r6, r6, #31
 80093f6:	d0fa      	beq.n	80093ee <__gethex+0x46a>
 80093f8:	4453      	add	r3, sl
 80093fa:	f1c6 0620 	rsb	r6, r6, #32
 80093fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009402:	f000 f9e5 	bl	80097d0 <__hi0bits>
 8009406:	42b0      	cmp	r0, r6
 8009408:	dbe7      	blt.n	80093da <__gethex+0x456>
 800940a:	e7f0      	b.n	80093ee <__gethex+0x46a>
 800940c:	0800c0f0 	.word	0x0800c0f0

08009410 <L_shift>:
 8009410:	f1c2 0208 	rsb	r2, r2, #8
 8009414:	0092      	lsls	r2, r2, #2
 8009416:	b570      	push	{r4, r5, r6, lr}
 8009418:	f1c2 0620 	rsb	r6, r2, #32
 800941c:	6843      	ldr	r3, [r0, #4]
 800941e:	6804      	ldr	r4, [r0, #0]
 8009420:	fa03 f506 	lsl.w	r5, r3, r6
 8009424:	432c      	orrs	r4, r5
 8009426:	40d3      	lsrs	r3, r2
 8009428:	6004      	str	r4, [r0, #0]
 800942a:	f840 3f04 	str.w	r3, [r0, #4]!
 800942e:	4288      	cmp	r0, r1
 8009430:	d3f4      	bcc.n	800941c <L_shift+0xc>
 8009432:	bd70      	pop	{r4, r5, r6, pc}

08009434 <__match>:
 8009434:	b530      	push	{r4, r5, lr}
 8009436:	6803      	ldr	r3, [r0, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800943e:	b914      	cbnz	r4, 8009446 <__match+0x12>
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	2001      	movs	r0, #1
 8009444:	bd30      	pop	{r4, r5, pc}
 8009446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800944e:	2d19      	cmp	r5, #25
 8009450:	bf98      	it	ls
 8009452:	3220      	addls	r2, #32
 8009454:	42a2      	cmp	r2, r4
 8009456:	d0f0      	beq.n	800943a <__match+0x6>
 8009458:	2000      	movs	r0, #0
 800945a:	e7f3      	b.n	8009444 <__match+0x10>

0800945c <__hexnan>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	680b      	ldr	r3, [r1, #0]
 8009462:	115e      	asrs	r6, r3, #5
 8009464:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009468:	f013 031f 	ands.w	r3, r3, #31
 800946c:	b087      	sub	sp, #28
 800946e:	bf18      	it	ne
 8009470:	3604      	addne	r6, #4
 8009472:	2500      	movs	r5, #0
 8009474:	1f37      	subs	r7, r6, #4
 8009476:	4690      	mov	r8, r2
 8009478:	6802      	ldr	r2, [r0, #0]
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	4682      	mov	sl, r0
 800947e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009482:	46b9      	mov	r9, r7
 8009484:	463c      	mov	r4, r7
 8009486:	9502      	str	r5, [sp, #8]
 8009488:	46ab      	mov	fp, r5
 800948a:	7851      	ldrb	r1, [r2, #1]
 800948c:	1c53      	adds	r3, r2, #1
 800948e:	9303      	str	r3, [sp, #12]
 8009490:	b341      	cbz	r1, 80094e4 <__hexnan+0x88>
 8009492:	4608      	mov	r0, r1
 8009494:	9205      	str	r2, [sp, #20]
 8009496:	9104      	str	r1, [sp, #16]
 8009498:	f7ff fd5e 	bl	8008f58 <__hexdig_fun>
 800949c:	2800      	cmp	r0, #0
 800949e:	d14f      	bne.n	8009540 <__hexnan+0xe4>
 80094a0:	9904      	ldr	r1, [sp, #16]
 80094a2:	9a05      	ldr	r2, [sp, #20]
 80094a4:	2920      	cmp	r1, #32
 80094a6:	d818      	bhi.n	80094da <__hexnan+0x7e>
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	459b      	cmp	fp, r3
 80094ac:	dd13      	ble.n	80094d6 <__hexnan+0x7a>
 80094ae:	454c      	cmp	r4, r9
 80094b0:	d206      	bcs.n	80094c0 <__hexnan+0x64>
 80094b2:	2d07      	cmp	r5, #7
 80094b4:	dc04      	bgt.n	80094c0 <__hexnan+0x64>
 80094b6:	462a      	mov	r2, r5
 80094b8:	4649      	mov	r1, r9
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff ffa8 	bl	8009410 <L_shift>
 80094c0:	4544      	cmp	r4, r8
 80094c2:	d950      	bls.n	8009566 <__hexnan+0x10a>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f1a4 0904 	sub.w	r9, r4, #4
 80094ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80094ce:	f8cd b008 	str.w	fp, [sp, #8]
 80094d2:	464c      	mov	r4, r9
 80094d4:	461d      	mov	r5, r3
 80094d6:	9a03      	ldr	r2, [sp, #12]
 80094d8:	e7d7      	b.n	800948a <__hexnan+0x2e>
 80094da:	2929      	cmp	r1, #41	; 0x29
 80094dc:	d156      	bne.n	800958c <__hexnan+0x130>
 80094de:	3202      	adds	r2, #2
 80094e0:	f8ca 2000 	str.w	r2, [sl]
 80094e4:	f1bb 0f00 	cmp.w	fp, #0
 80094e8:	d050      	beq.n	800958c <__hexnan+0x130>
 80094ea:	454c      	cmp	r4, r9
 80094ec:	d206      	bcs.n	80094fc <__hexnan+0xa0>
 80094ee:	2d07      	cmp	r5, #7
 80094f0:	dc04      	bgt.n	80094fc <__hexnan+0xa0>
 80094f2:	462a      	mov	r2, r5
 80094f4:	4649      	mov	r1, r9
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff ff8a 	bl	8009410 <L_shift>
 80094fc:	4544      	cmp	r4, r8
 80094fe:	d934      	bls.n	800956a <__hexnan+0x10e>
 8009500:	f1a8 0204 	sub.w	r2, r8, #4
 8009504:	4623      	mov	r3, r4
 8009506:	f853 1b04 	ldr.w	r1, [r3], #4
 800950a:	f842 1f04 	str.w	r1, [r2, #4]!
 800950e:	429f      	cmp	r7, r3
 8009510:	d2f9      	bcs.n	8009506 <__hexnan+0xaa>
 8009512:	1b3b      	subs	r3, r7, r4
 8009514:	f023 0303 	bic.w	r3, r3, #3
 8009518:	3304      	adds	r3, #4
 800951a:	3401      	adds	r4, #1
 800951c:	3e03      	subs	r6, #3
 800951e:	42b4      	cmp	r4, r6
 8009520:	bf88      	it	hi
 8009522:	2304      	movhi	r3, #4
 8009524:	4443      	add	r3, r8
 8009526:	2200      	movs	r2, #0
 8009528:	f843 2b04 	str.w	r2, [r3], #4
 800952c:	429f      	cmp	r7, r3
 800952e:	d2fb      	bcs.n	8009528 <__hexnan+0xcc>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	b91b      	cbnz	r3, 800953c <__hexnan+0xe0>
 8009534:	4547      	cmp	r7, r8
 8009536:	d127      	bne.n	8009588 <__hexnan+0x12c>
 8009538:	2301      	movs	r3, #1
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	2005      	movs	r0, #5
 800953e:	e026      	b.n	800958e <__hexnan+0x132>
 8009540:	3501      	adds	r5, #1
 8009542:	2d08      	cmp	r5, #8
 8009544:	f10b 0b01 	add.w	fp, fp, #1
 8009548:	dd06      	ble.n	8009558 <__hexnan+0xfc>
 800954a:	4544      	cmp	r4, r8
 800954c:	d9c3      	bls.n	80094d6 <__hexnan+0x7a>
 800954e:	2300      	movs	r3, #0
 8009550:	f844 3c04 	str.w	r3, [r4, #-4]
 8009554:	2501      	movs	r5, #1
 8009556:	3c04      	subs	r4, #4
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	f000 000f 	and.w	r0, r0, #15
 800955e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009562:	6022      	str	r2, [r4, #0]
 8009564:	e7b7      	b.n	80094d6 <__hexnan+0x7a>
 8009566:	2508      	movs	r5, #8
 8009568:	e7b5      	b.n	80094d6 <__hexnan+0x7a>
 800956a:	9b01      	ldr	r3, [sp, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0df      	beq.n	8009530 <__hexnan+0xd4>
 8009570:	f04f 32ff 	mov.w	r2, #4294967295
 8009574:	f1c3 0320 	rsb	r3, r3, #32
 8009578:	fa22 f303 	lsr.w	r3, r2, r3
 800957c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009580:	401a      	ands	r2, r3
 8009582:	f846 2c04 	str.w	r2, [r6, #-4]
 8009586:	e7d3      	b.n	8009530 <__hexnan+0xd4>
 8009588:	3f04      	subs	r7, #4
 800958a:	e7d1      	b.n	8009530 <__hexnan+0xd4>
 800958c:	2004      	movs	r0, #4
 800958e:	b007      	add	sp, #28
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009594 <_localeconv_r>:
 8009594:	4800      	ldr	r0, [pc, #0]	; (8009598 <_localeconv_r+0x4>)
 8009596:	4770      	bx	lr
 8009598:	2000016c 	.word	0x2000016c

0800959c <malloc>:
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <malloc+0xc>)
 800959e:	4601      	mov	r1, r0
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	f000 bd67 	b.w	800a074 <_malloc_r>
 80095a6:	bf00      	nop
 80095a8:	20000014 	.word	0x20000014

080095ac <__ascii_mbtowc>:
 80095ac:	b082      	sub	sp, #8
 80095ae:	b901      	cbnz	r1, 80095b2 <__ascii_mbtowc+0x6>
 80095b0:	a901      	add	r1, sp, #4
 80095b2:	b142      	cbz	r2, 80095c6 <__ascii_mbtowc+0x1a>
 80095b4:	b14b      	cbz	r3, 80095ca <__ascii_mbtowc+0x1e>
 80095b6:	7813      	ldrb	r3, [r2, #0]
 80095b8:	600b      	str	r3, [r1, #0]
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	1e10      	subs	r0, r2, #0
 80095be:	bf18      	it	ne
 80095c0:	2001      	movne	r0, #1
 80095c2:	b002      	add	sp, #8
 80095c4:	4770      	bx	lr
 80095c6:	4610      	mov	r0, r2
 80095c8:	e7fb      	b.n	80095c2 <__ascii_mbtowc+0x16>
 80095ca:	f06f 0001 	mvn.w	r0, #1
 80095ce:	e7f8      	b.n	80095c2 <__ascii_mbtowc+0x16>

080095d0 <memcpy>:
 80095d0:	440a      	add	r2, r1
 80095d2:	4291      	cmp	r1, r2
 80095d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d8:	d100      	bne.n	80095dc <memcpy+0xc>
 80095da:	4770      	bx	lr
 80095dc:	b510      	push	{r4, lr}
 80095de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e6:	4291      	cmp	r1, r2
 80095e8:	d1f9      	bne.n	80095de <memcpy+0xe>
 80095ea:	bd10      	pop	{r4, pc}

080095ec <_Balloc>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	b976      	cbnz	r6, 8009614 <_Balloc+0x28>
 80095f6:	2010      	movs	r0, #16
 80095f8:	f7ff ffd0 	bl	800959c <malloc>
 80095fc:	4602      	mov	r2, r0
 80095fe:	6260      	str	r0, [r4, #36]	; 0x24
 8009600:	b920      	cbnz	r0, 800960c <_Balloc+0x20>
 8009602:	4b18      	ldr	r3, [pc, #96]	; (8009664 <_Balloc+0x78>)
 8009604:	4818      	ldr	r0, [pc, #96]	; (8009668 <_Balloc+0x7c>)
 8009606:	2166      	movs	r1, #102	; 0x66
 8009608:	f000 ff40 	bl	800a48c <__assert_func>
 800960c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009610:	6006      	str	r6, [r0, #0]
 8009612:	60c6      	str	r6, [r0, #12]
 8009614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009616:	68f3      	ldr	r3, [r6, #12]
 8009618:	b183      	cbz	r3, 800963c <_Balloc+0x50>
 800961a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009622:	b9b8      	cbnz	r0, 8009654 <_Balloc+0x68>
 8009624:	2101      	movs	r1, #1
 8009626:	fa01 f605 	lsl.w	r6, r1, r5
 800962a:	1d72      	adds	r2, r6, #5
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	4620      	mov	r0, r4
 8009630:	f000 fc9d 	bl	8009f6e <_calloc_r>
 8009634:	b160      	cbz	r0, 8009650 <_Balloc+0x64>
 8009636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800963a:	e00e      	b.n	800965a <_Balloc+0x6e>
 800963c:	2221      	movs	r2, #33	; 0x21
 800963e:	2104      	movs	r1, #4
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fc94 	bl	8009f6e <_calloc_r>
 8009646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009648:	60f0      	str	r0, [r6, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e4      	bne.n	800961a <_Balloc+0x2e>
 8009650:	2000      	movs	r0, #0
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	6802      	ldr	r2, [r0, #0]
 8009656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800965a:	2300      	movs	r3, #0
 800965c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009660:	e7f7      	b.n	8009652 <_Balloc+0x66>
 8009662:	bf00      	nop
 8009664:	0800c07e 	.word	0x0800c07e
 8009668:	0800c17c 	.word	0x0800c17c

0800966c <_Bfree>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009670:	4605      	mov	r5, r0
 8009672:	460c      	mov	r4, r1
 8009674:	b976      	cbnz	r6, 8009694 <_Bfree+0x28>
 8009676:	2010      	movs	r0, #16
 8009678:	f7ff ff90 	bl	800959c <malloc>
 800967c:	4602      	mov	r2, r0
 800967e:	6268      	str	r0, [r5, #36]	; 0x24
 8009680:	b920      	cbnz	r0, 800968c <_Bfree+0x20>
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <_Bfree+0x3c>)
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <_Bfree+0x40>)
 8009686:	218a      	movs	r1, #138	; 0x8a
 8009688:	f000 ff00 	bl	800a48c <__assert_func>
 800968c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009690:	6006      	str	r6, [r0, #0]
 8009692:	60c6      	str	r6, [r0, #12]
 8009694:	b13c      	cbz	r4, 80096a6 <_Bfree+0x3a>
 8009696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009698:	6862      	ldr	r2, [r4, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096a0:	6021      	str	r1, [r4, #0]
 80096a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	0800c07e 	.word	0x0800c07e
 80096ac:	0800c17c 	.word	0x0800c17c

080096b0 <__multadd>:
 80096b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	690d      	ldr	r5, [r1, #16]
 80096b6:	4607      	mov	r7, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	461e      	mov	r6, r3
 80096bc:	f101 0c14 	add.w	ip, r1, #20
 80096c0:	2000      	movs	r0, #0
 80096c2:	f8dc 3000 	ldr.w	r3, [ip]
 80096c6:	b299      	uxth	r1, r3
 80096c8:	fb02 6101 	mla	r1, r2, r1, r6
 80096cc:	0c1e      	lsrs	r6, r3, #16
 80096ce:	0c0b      	lsrs	r3, r1, #16
 80096d0:	fb02 3306 	mla	r3, r2, r6, r3
 80096d4:	b289      	uxth	r1, r1
 80096d6:	3001      	adds	r0, #1
 80096d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096dc:	4285      	cmp	r5, r0
 80096de:	f84c 1b04 	str.w	r1, [ip], #4
 80096e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096e6:	dcec      	bgt.n	80096c2 <__multadd+0x12>
 80096e8:	b30e      	cbz	r6, 800972e <__multadd+0x7e>
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	42ab      	cmp	r3, r5
 80096ee:	dc19      	bgt.n	8009724 <__multadd+0x74>
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	4638      	mov	r0, r7
 80096f4:	3101      	adds	r1, #1
 80096f6:	f7ff ff79 	bl	80095ec <_Balloc>
 80096fa:	4680      	mov	r8, r0
 80096fc:	b928      	cbnz	r0, 800970a <__multadd+0x5a>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <__multadd+0x84>)
 8009702:	480d      	ldr	r0, [pc, #52]	; (8009738 <__multadd+0x88>)
 8009704:	21b5      	movs	r1, #181	; 0xb5
 8009706:	f000 fec1 	bl	800a48c <__assert_func>
 800970a:	6922      	ldr	r2, [r4, #16]
 800970c:	3202      	adds	r2, #2
 800970e:	f104 010c 	add.w	r1, r4, #12
 8009712:	0092      	lsls	r2, r2, #2
 8009714:	300c      	adds	r0, #12
 8009716:	f7ff ff5b 	bl	80095d0 <memcpy>
 800971a:	4621      	mov	r1, r4
 800971c:	4638      	mov	r0, r7
 800971e:	f7ff ffa5 	bl	800966c <_Bfree>
 8009722:	4644      	mov	r4, r8
 8009724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009728:	3501      	adds	r5, #1
 800972a:	615e      	str	r6, [r3, #20]
 800972c:	6125      	str	r5, [r4, #16]
 800972e:	4620      	mov	r0, r4
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	0800c0f0 	.word	0x0800c0f0
 8009738:	0800c17c 	.word	0x0800c17c

0800973c <__s2b>:
 800973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009740:	460c      	mov	r4, r1
 8009742:	4615      	mov	r5, r2
 8009744:	461f      	mov	r7, r3
 8009746:	2209      	movs	r2, #9
 8009748:	3308      	adds	r3, #8
 800974a:	4606      	mov	r6, r0
 800974c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009750:	2100      	movs	r1, #0
 8009752:	2201      	movs	r2, #1
 8009754:	429a      	cmp	r2, r3
 8009756:	db09      	blt.n	800976c <__s2b+0x30>
 8009758:	4630      	mov	r0, r6
 800975a:	f7ff ff47 	bl	80095ec <_Balloc>
 800975e:	b940      	cbnz	r0, 8009772 <__s2b+0x36>
 8009760:	4602      	mov	r2, r0
 8009762:	4b19      	ldr	r3, [pc, #100]	; (80097c8 <__s2b+0x8c>)
 8009764:	4819      	ldr	r0, [pc, #100]	; (80097cc <__s2b+0x90>)
 8009766:	21ce      	movs	r1, #206	; 0xce
 8009768:	f000 fe90 	bl	800a48c <__assert_func>
 800976c:	0052      	lsls	r2, r2, #1
 800976e:	3101      	adds	r1, #1
 8009770:	e7f0      	b.n	8009754 <__s2b+0x18>
 8009772:	9b08      	ldr	r3, [sp, #32]
 8009774:	6143      	str	r3, [r0, #20]
 8009776:	2d09      	cmp	r5, #9
 8009778:	f04f 0301 	mov.w	r3, #1
 800977c:	6103      	str	r3, [r0, #16]
 800977e:	dd16      	ble.n	80097ae <__s2b+0x72>
 8009780:	f104 0909 	add.w	r9, r4, #9
 8009784:	46c8      	mov	r8, r9
 8009786:	442c      	add	r4, r5
 8009788:	f818 3b01 	ldrb.w	r3, [r8], #1
 800978c:	4601      	mov	r1, r0
 800978e:	3b30      	subs	r3, #48	; 0x30
 8009790:	220a      	movs	r2, #10
 8009792:	4630      	mov	r0, r6
 8009794:	f7ff ff8c 	bl	80096b0 <__multadd>
 8009798:	45a0      	cmp	r8, r4
 800979a:	d1f5      	bne.n	8009788 <__s2b+0x4c>
 800979c:	f1a5 0408 	sub.w	r4, r5, #8
 80097a0:	444c      	add	r4, r9
 80097a2:	1b2d      	subs	r5, r5, r4
 80097a4:	1963      	adds	r3, r4, r5
 80097a6:	42bb      	cmp	r3, r7
 80097a8:	db04      	blt.n	80097b4 <__s2b+0x78>
 80097aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ae:	340a      	adds	r4, #10
 80097b0:	2509      	movs	r5, #9
 80097b2:	e7f6      	b.n	80097a2 <__s2b+0x66>
 80097b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097b8:	4601      	mov	r1, r0
 80097ba:	3b30      	subs	r3, #48	; 0x30
 80097bc:	220a      	movs	r2, #10
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff ff76 	bl	80096b0 <__multadd>
 80097c4:	e7ee      	b.n	80097a4 <__s2b+0x68>
 80097c6:	bf00      	nop
 80097c8:	0800c0f0 	.word	0x0800c0f0
 80097cc:	0800c17c 	.word	0x0800c17c

080097d0 <__hi0bits>:
 80097d0:	0c03      	lsrs	r3, r0, #16
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	b9d3      	cbnz	r3, 800980c <__hi0bits+0x3c>
 80097d6:	0400      	lsls	r0, r0, #16
 80097d8:	2310      	movs	r3, #16
 80097da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097de:	bf04      	itt	eq
 80097e0:	0200      	lsleq	r0, r0, #8
 80097e2:	3308      	addeq	r3, #8
 80097e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097e8:	bf04      	itt	eq
 80097ea:	0100      	lsleq	r0, r0, #4
 80097ec:	3304      	addeq	r3, #4
 80097ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097f2:	bf04      	itt	eq
 80097f4:	0080      	lsleq	r0, r0, #2
 80097f6:	3302      	addeq	r3, #2
 80097f8:	2800      	cmp	r0, #0
 80097fa:	db05      	blt.n	8009808 <__hi0bits+0x38>
 80097fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009800:	f103 0301 	add.w	r3, r3, #1
 8009804:	bf08      	it	eq
 8009806:	2320      	moveq	r3, #32
 8009808:	4618      	mov	r0, r3
 800980a:	4770      	bx	lr
 800980c:	2300      	movs	r3, #0
 800980e:	e7e4      	b.n	80097da <__hi0bits+0xa>

08009810 <__lo0bits>:
 8009810:	6803      	ldr	r3, [r0, #0]
 8009812:	f013 0207 	ands.w	r2, r3, #7
 8009816:	4601      	mov	r1, r0
 8009818:	d00b      	beq.n	8009832 <__lo0bits+0x22>
 800981a:	07da      	lsls	r2, r3, #31
 800981c:	d423      	bmi.n	8009866 <__lo0bits+0x56>
 800981e:	0798      	lsls	r0, r3, #30
 8009820:	bf49      	itett	mi
 8009822:	085b      	lsrmi	r3, r3, #1
 8009824:	089b      	lsrpl	r3, r3, #2
 8009826:	2001      	movmi	r0, #1
 8009828:	600b      	strmi	r3, [r1, #0]
 800982a:	bf5c      	itt	pl
 800982c:	600b      	strpl	r3, [r1, #0]
 800982e:	2002      	movpl	r0, #2
 8009830:	4770      	bx	lr
 8009832:	b298      	uxth	r0, r3
 8009834:	b9a8      	cbnz	r0, 8009862 <__lo0bits+0x52>
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	2010      	movs	r0, #16
 800983a:	b2da      	uxtb	r2, r3
 800983c:	b90a      	cbnz	r2, 8009842 <__lo0bits+0x32>
 800983e:	3008      	adds	r0, #8
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	071a      	lsls	r2, r3, #28
 8009844:	bf04      	itt	eq
 8009846:	091b      	lsreq	r3, r3, #4
 8009848:	3004      	addeq	r0, #4
 800984a:	079a      	lsls	r2, r3, #30
 800984c:	bf04      	itt	eq
 800984e:	089b      	lsreq	r3, r3, #2
 8009850:	3002      	addeq	r0, #2
 8009852:	07da      	lsls	r2, r3, #31
 8009854:	d403      	bmi.n	800985e <__lo0bits+0x4e>
 8009856:	085b      	lsrs	r3, r3, #1
 8009858:	f100 0001 	add.w	r0, r0, #1
 800985c:	d005      	beq.n	800986a <__lo0bits+0x5a>
 800985e:	600b      	str	r3, [r1, #0]
 8009860:	4770      	bx	lr
 8009862:	4610      	mov	r0, r2
 8009864:	e7e9      	b.n	800983a <__lo0bits+0x2a>
 8009866:	2000      	movs	r0, #0
 8009868:	4770      	bx	lr
 800986a:	2020      	movs	r0, #32
 800986c:	4770      	bx	lr
	...

08009870 <__i2b>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	2101      	movs	r1, #1
 8009876:	f7ff feb9 	bl	80095ec <_Balloc>
 800987a:	4602      	mov	r2, r0
 800987c:	b928      	cbnz	r0, 800988a <__i2b+0x1a>
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <__i2b+0x24>)
 8009880:	4805      	ldr	r0, [pc, #20]	; (8009898 <__i2b+0x28>)
 8009882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009886:	f000 fe01 	bl	800a48c <__assert_func>
 800988a:	2301      	movs	r3, #1
 800988c:	6144      	str	r4, [r0, #20]
 800988e:	6103      	str	r3, [r0, #16]
 8009890:	bd10      	pop	{r4, pc}
 8009892:	bf00      	nop
 8009894:	0800c0f0 	.word	0x0800c0f0
 8009898:	0800c17c 	.word	0x0800c17c

0800989c <__multiply>:
 800989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	4691      	mov	r9, r2
 80098a2:	690a      	ldr	r2, [r1, #16]
 80098a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	bfb8      	it	lt
 80098ac:	460b      	movlt	r3, r1
 80098ae:	460c      	mov	r4, r1
 80098b0:	bfbc      	itt	lt
 80098b2:	464c      	movlt	r4, r9
 80098b4:	4699      	movlt	r9, r3
 80098b6:	6927      	ldr	r7, [r4, #16]
 80098b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098bc:	68a3      	ldr	r3, [r4, #8]
 80098be:	6861      	ldr	r1, [r4, #4]
 80098c0:	eb07 060a 	add.w	r6, r7, sl
 80098c4:	42b3      	cmp	r3, r6
 80098c6:	b085      	sub	sp, #20
 80098c8:	bfb8      	it	lt
 80098ca:	3101      	addlt	r1, #1
 80098cc:	f7ff fe8e 	bl	80095ec <_Balloc>
 80098d0:	b930      	cbnz	r0, 80098e0 <__multiply+0x44>
 80098d2:	4602      	mov	r2, r0
 80098d4:	4b44      	ldr	r3, [pc, #272]	; (80099e8 <__multiply+0x14c>)
 80098d6:	4845      	ldr	r0, [pc, #276]	; (80099ec <__multiply+0x150>)
 80098d8:	f240 115d 	movw	r1, #349	; 0x15d
 80098dc:	f000 fdd6 	bl	800a48c <__assert_func>
 80098e0:	f100 0514 	add.w	r5, r0, #20
 80098e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098e8:	462b      	mov	r3, r5
 80098ea:	2200      	movs	r2, #0
 80098ec:	4543      	cmp	r3, r8
 80098ee:	d321      	bcc.n	8009934 <__multiply+0x98>
 80098f0:	f104 0314 	add.w	r3, r4, #20
 80098f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098f8:	f109 0314 	add.w	r3, r9, #20
 80098fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009900:	9202      	str	r2, [sp, #8]
 8009902:	1b3a      	subs	r2, r7, r4
 8009904:	3a15      	subs	r2, #21
 8009906:	f022 0203 	bic.w	r2, r2, #3
 800990a:	3204      	adds	r2, #4
 800990c:	f104 0115 	add.w	r1, r4, #21
 8009910:	428f      	cmp	r7, r1
 8009912:	bf38      	it	cc
 8009914:	2204      	movcc	r2, #4
 8009916:	9201      	str	r2, [sp, #4]
 8009918:	9a02      	ldr	r2, [sp, #8]
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d80c      	bhi.n	800993a <__multiply+0x9e>
 8009920:	2e00      	cmp	r6, #0
 8009922:	dd03      	ble.n	800992c <__multiply+0x90>
 8009924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009928:	2b00      	cmp	r3, #0
 800992a:	d05a      	beq.n	80099e2 <__multiply+0x146>
 800992c:	6106      	str	r6, [r0, #16]
 800992e:	b005      	add	sp, #20
 8009930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009934:	f843 2b04 	str.w	r2, [r3], #4
 8009938:	e7d8      	b.n	80098ec <__multiply+0x50>
 800993a:	f8b3 a000 	ldrh.w	sl, [r3]
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	d024      	beq.n	800998e <__multiply+0xf2>
 8009944:	f104 0e14 	add.w	lr, r4, #20
 8009948:	46a9      	mov	r9, r5
 800994a:	f04f 0c00 	mov.w	ip, #0
 800994e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009952:	f8d9 1000 	ldr.w	r1, [r9]
 8009956:	fa1f fb82 	uxth.w	fp, r2
 800995a:	b289      	uxth	r1, r1
 800995c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009964:	f8d9 2000 	ldr.w	r2, [r9]
 8009968:	4461      	add	r1, ip
 800996a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800996e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009976:	b289      	uxth	r1, r1
 8009978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800997c:	4577      	cmp	r7, lr
 800997e:	f849 1b04 	str.w	r1, [r9], #4
 8009982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009986:	d8e2      	bhi.n	800994e <__multiply+0xb2>
 8009988:	9a01      	ldr	r2, [sp, #4]
 800998a:	f845 c002 	str.w	ip, [r5, r2]
 800998e:	9a03      	ldr	r2, [sp, #12]
 8009990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009994:	3304      	adds	r3, #4
 8009996:	f1b9 0f00 	cmp.w	r9, #0
 800999a:	d020      	beq.n	80099de <__multiply+0x142>
 800999c:	6829      	ldr	r1, [r5, #0]
 800999e:	f104 0c14 	add.w	ip, r4, #20
 80099a2:	46ae      	mov	lr, r5
 80099a4:	f04f 0a00 	mov.w	sl, #0
 80099a8:	f8bc b000 	ldrh.w	fp, [ip]
 80099ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099b0:	fb09 220b 	mla	r2, r9, fp, r2
 80099b4:	4492      	add	sl, r2
 80099b6:	b289      	uxth	r1, r1
 80099b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099bc:	f84e 1b04 	str.w	r1, [lr], #4
 80099c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099c4:	f8be 1000 	ldrh.w	r1, [lr]
 80099c8:	0c12      	lsrs	r2, r2, #16
 80099ca:	fb09 1102 	mla	r1, r9, r2, r1
 80099ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099d2:	4567      	cmp	r7, ip
 80099d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099d8:	d8e6      	bhi.n	80099a8 <__multiply+0x10c>
 80099da:	9a01      	ldr	r2, [sp, #4]
 80099dc:	50a9      	str	r1, [r5, r2]
 80099de:	3504      	adds	r5, #4
 80099e0:	e79a      	b.n	8009918 <__multiply+0x7c>
 80099e2:	3e01      	subs	r6, #1
 80099e4:	e79c      	b.n	8009920 <__multiply+0x84>
 80099e6:	bf00      	nop
 80099e8:	0800c0f0 	.word	0x0800c0f0
 80099ec:	0800c17c 	.word	0x0800c17c

080099f0 <__pow5mult>:
 80099f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f4:	4615      	mov	r5, r2
 80099f6:	f012 0203 	ands.w	r2, r2, #3
 80099fa:	4606      	mov	r6, r0
 80099fc:	460f      	mov	r7, r1
 80099fe:	d007      	beq.n	8009a10 <__pow5mult+0x20>
 8009a00:	4c25      	ldr	r4, [pc, #148]	; (8009a98 <__pow5mult+0xa8>)
 8009a02:	3a01      	subs	r2, #1
 8009a04:	2300      	movs	r3, #0
 8009a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a0a:	f7ff fe51 	bl	80096b0 <__multadd>
 8009a0e:	4607      	mov	r7, r0
 8009a10:	10ad      	asrs	r5, r5, #2
 8009a12:	d03d      	beq.n	8009a90 <__pow5mult+0xa0>
 8009a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a16:	b97c      	cbnz	r4, 8009a38 <__pow5mult+0x48>
 8009a18:	2010      	movs	r0, #16
 8009a1a:	f7ff fdbf 	bl	800959c <malloc>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	6270      	str	r0, [r6, #36]	; 0x24
 8009a22:	b928      	cbnz	r0, 8009a30 <__pow5mult+0x40>
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <__pow5mult+0xac>)
 8009a26:	481e      	ldr	r0, [pc, #120]	; (8009aa0 <__pow5mult+0xb0>)
 8009a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a2c:	f000 fd2e 	bl	800a48c <__assert_func>
 8009a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a34:	6004      	str	r4, [r0, #0]
 8009a36:	60c4      	str	r4, [r0, #12]
 8009a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a40:	b94c      	cbnz	r4, 8009a56 <__pow5mult+0x66>
 8009a42:	f240 2171 	movw	r1, #625	; 0x271
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ff12 	bl	8009870 <__i2b>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a52:	4604      	mov	r4, r0
 8009a54:	6003      	str	r3, [r0, #0]
 8009a56:	f04f 0900 	mov.w	r9, #0
 8009a5a:	07eb      	lsls	r3, r5, #31
 8009a5c:	d50a      	bpl.n	8009a74 <__pow5mult+0x84>
 8009a5e:	4639      	mov	r1, r7
 8009a60:	4622      	mov	r2, r4
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7ff ff1a 	bl	800989c <__multiply>
 8009a68:	4639      	mov	r1, r7
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff fdfd 	bl	800966c <_Bfree>
 8009a72:	4647      	mov	r7, r8
 8009a74:	106d      	asrs	r5, r5, #1
 8009a76:	d00b      	beq.n	8009a90 <__pow5mult+0xa0>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	b938      	cbnz	r0, 8009a8c <__pow5mult+0x9c>
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff ff0b 	bl	800989c <__multiply>
 8009a86:	6020      	str	r0, [r4, #0]
 8009a88:	f8c0 9000 	str.w	r9, [r0]
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	e7e4      	b.n	8009a5a <__pow5mult+0x6a>
 8009a90:	4638      	mov	r0, r7
 8009a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a96:	bf00      	nop
 8009a98:	0800c2c8 	.word	0x0800c2c8
 8009a9c:	0800c07e 	.word	0x0800c07e
 8009aa0:	0800c17c 	.word	0x0800c17c

08009aa4 <__lshift>:
 8009aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	6849      	ldr	r1, [r1, #4]
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ab2:	68a3      	ldr	r3, [r4, #8]
 8009ab4:	4607      	mov	r7, r0
 8009ab6:	4691      	mov	r9, r2
 8009ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009abc:	f108 0601 	add.w	r6, r8, #1
 8009ac0:	42b3      	cmp	r3, r6
 8009ac2:	db0b      	blt.n	8009adc <__lshift+0x38>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7ff fd91 	bl	80095ec <_Balloc>
 8009aca:	4605      	mov	r5, r0
 8009acc:	b948      	cbnz	r0, 8009ae2 <__lshift+0x3e>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b2a      	ldr	r3, [pc, #168]	; (8009b7c <__lshift+0xd8>)
 8009ad2:	482b      	ldr	r0, [pc, #172]	; (8009b80 <__lshift+0xdc>)
 8009ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ad8:	f000 fcd8 	bl	800a48c <__assert_func>
 8009adc:	3101      	adds	r1, #1
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	e7ee      	b.n	8009ac0 <__lshift+0x1c>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f100 0114 	add.w	r1, r0, #20
 8009ae8:	f100 0210 	add.w	r2, r0, #16
 8009aec:	4618      	mov	r0, r3
 8009aee:	4553      	cmp	r3, sl
 8009af0:	db37      	blt.n	8009b62 <__lshift+0xbe>
 8009af2:	6920      	ldr	r0, [r4, #16]
 8009af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009af8:	f104 0314 	add.w	r3, r4, #20
 8009afc:	f019 091f 	ands.w	r9, r9, #31
 8009b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b08:	d02f      	beq.n	8009b6a <__lshift+0xc6>
 8009b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b0e:	468a      	mov	sl, r1
 8009b10:	f04f 0c00 	mov.w	ip, #0
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	fa02 f209 	lsl.w	r2, r2, r9
 8009b1a:	ea42 020c 	orr.w	r2, r2, ip
 8009b1e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b26:	4298      	cmp	r0, r3
 8009b28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b2c:	d8f2      	bhi.n	8009b14 <__lshift+0x70>
 8009b2e:	1b03      	subs	r3, r0, r4
 8009b30:	3b15      	subs	r3, #21
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	3304      	adds	r3, #4
 8009b38:	f104 0215 	add.w	r2, r4, #21
 8009b3c:	4290      	cmp	r0, r2
 8009b3e:	bf38      	it	cc
 8009b40:	2304      	movcc	r3, #4
 8009b42:	f841 c003 	str.w	ip, [r1, r3]
 8009b46:	f1bc 0f00 	cmp.w	ip, #0
 8009b4a:	d001      	beq.n	8009b50 <__lshift+0xac>
 8009b4c:	f108 0602 	add.w	r6, r8, #2
 8009b50:	3e01      	subs	r6, #1
 8009b52:	4638      	mov	r0, r7
 8009b54:	612e      	str	r6, [r5, #16]
 8009b56:	4621      	mov	r1, r4
 8009b58:	f7ff fd88 	bl	800966c <_Bfree>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b66:	3301      	adds	r3, #1
 8009b68:	e7c1      	b.n	8009aee <__lshift+0x4a>
 8009b6a:	3904      	subs	r1, #4
 8009b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b70:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b74:	4298      	cmp	r0, r3
 8009b76:	d8f9      	bhi.n	8009b6c <__lshift+0xc8>
 8009b78:	e7ea      	b.n	8009b50 <__lshift+0xac>
 8009b7a:	bf00      	nop
 8009b7c:	0800c0f0 	.word	0x0800c0f0
 8009b80:	0800c17c 	.word	0x0800c17c

08009b84 <__mcmp>:
 8009b84:	b530      	push	{r4, r5, lr}
 8009b86:	6902      	ldr	r2, [r0, #16]
 8009b88:	690c      	ldr	r4, [r1, #16]
 8009b8a:	1b12      	subs	r2, r2, r4
 8009b8c:	d10e      	bne.n	8009bac <__mcmp+0x28>
 8009b8e:	f100 0314 	add.w	r3, r0, #20
 8009b92:	3114      	adds	r1, #20
 8009b94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ba4:	42a5      	cmp	r5, r4
 8009ba6:	d003      	beq.n	8009bb0 <__mcmp+0x2c>
 8009ba8:	d305      	bcc.n	8009bb6 <__mcmp+0x32>
 8009baa:	2201      	movs	r2, #1
 8009bac:	4610      	mov	r0, r2
 8009bae:	bd30      	pop	{r4, r5, pc}
 8009bb0:	4283      	cmp	r3, r0
 8009bb2:	d3f3      	bcc.n	8009b9c <__mcmp+0x18>
 8009bb4:	e7fa      	b.n	8009bac <__mcmp+0x28>
 8009bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bba:	e7f7      	b.n	8009bac <__mcmp+0x28>

08009bbc <__mdiff>:
 8009bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4690      	mov	r8, r2
 8009bca:	f7ff ffdb 	bl	8009b84 <__mcmp>
 8009bce:	1e05      	subs	r5, r0, #0
 8009bd0:	d110      	bne.n	8009bf4 <__mdiff+0x38>
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f7ff fd09 	bl	80095ec <_Balloc>
 8009bda:	b930      	cbnz	r0, 8009bea <__mdiff+0x2e>
 8009bdc:	4b3a      	ldr	r3, [pc, #232]	; (8009cc8 <__mdiff+0x10c>)
 8009bde:	4602      	mov	r2, r0
 8009be0:	f240 2132 	movw	r1, #562	; 0x232
 8009be4:	4839      	ldr	r0, [pc, #228]	; (8009ccc <__mdiff+0x110>)
 8009be6:	f000 fc51 	bl	800a48c <__assert_func>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	bfa4      	itt	ge
 8009bf6:	4643      	movge	r3, r8
 8009bf8:	46a0      	movge	r8, r4
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c00:	bfa6      	itte	ge
 8009c02:	461c      	movge	r4, r3
 8009c04:	2500      	movge	r5, #0
 8009c06:	2501      	movlt	r5, #1
 8009c08:	f7ff fcf0 	bl	80095ec <_Balloc>
 8009c0c:	b920      	cbnz	r0, 8009c18 <__mdiff+0x5c>
 8009c0e:	4b2e      	ldr	r3, [pc, #184]	; (8009cc8 <__mdiff+0x10c>)
 8009c10:	4602      	mov	r2, r0
 8009c12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c16:	e7e5      	b.n	8009be4 <__mdiff+0x28>
 8009c18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c1c:	6926      	ldr	r6, [r4, #16]
 8009c1e:	60c5      	str	r5, [r0, #12]
 8009c20:	f104 0914 	add.w	r9, r4, #20
 8009c24:	f108 0514 	add.w	r5, r8, #20
 8009c28:	f100 0e14 	add.w	lr, r0, #20
 8009c2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c34:	f108 0210 	add.w	r2, r8, #16
 8009c38:	46f2      	mov	sl, lr
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c44:	fa1f f883 	uxth.w	r8, r3
 8009c48:	fa11 f18b 	uxtah	r1, r1, fp
 8009c4c:	0c1b      	lsrs	r3, r3, #16
 8009c4e:	eba1 0808 	sub.w	r8, r1, r8
 8009c52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c5a:	fa1f f888 	uxth.w	r8, r8
 8009c5e:	1419      	asrs	r1, r3, #16
 8009c60:	454e      	cmp	r6, r9
 8009c62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c66:	f84a 3b04 	str.w	r3, [sl], #4
 8009c6a:	d8e7      	bhi.n	8009c3c <__mdiff+0x80>
 8009c6c:	1b33      	subs	r3, r6, r4
 8009c6e:	3b15      	subs	r3, #21
 8009c70:	f023 0303 	bic.w	r3, r3, #3
 8009c74:	3304      	adds	r3, #4
 8009c76:	3415      	adds	r4, #21
 8009c78:	42a6      	cmp	r6, r4
 8009c7a:	bf38      	it	cc
 8009c7c:	2304      	movcc	r3, #4
 8009c7e:	441d      	add	r5, r3
 8009c80:	4473      	add	r3, lr
 8009c82:	469e      	mov	lr, r3
 8009c84:	462e      	mov	r6, r5
 8009c86:	4566      	cmp	r6, ip
 8009c88:	d30e      	bcc.n	8009ca8 <__mdiff+0xec>
 8009c8a:	f10c 0203 	add.w	r2, ip, #3
 8009c8e:	1b52      	subs	r2, r2, r5
 8009c90:	f022 0203 	bic.w	r2, r2, #3
 8009c94:	3d03      	subs	r5, #3
 8009c96:	45ac      	cmp	ip, r5
 8009c98:	bf38      	it	cc
 8009c9a:	2200      	movcc	r2, #0
 8009c9c:	441a      	add	r2, r3
 8009c9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ca2:	b17b      	cbz	r3, 8009cc4 <__mdiff+0x108>
 8009ca4:	6107      	str	r7, [r0, #16]
 8009ca6:	e7a3      	b.n	8009bf0 <__mdiff+0x34>
 8009ca8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cac:	fa11 f288 	uxtah	r2, r1, r8
 8009cb0:	1414      	asrs	r4, r2, #16
 8009cb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cb6:	b292      	uxth	r2, r2
 8009cb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cbc:	f84e 2b04 	str.w	r2, [lr], #4
 8009cc0:	1421      	asrs	r1, r4, #16
 8009cc2:	e7e0      	b.n	8009c86 <__mdiff+0xca>
 8009cc4:	3f01      	subs	r7, #1
 8009cc6:	e7ea      	b.n	8009c9e <__mdiff+0xe2>
 8009cc8:	0800c0f0 	.word	0x0800c0f0
 8009ccc:	0800c17c 	.word	0x0800c17c

08009cd0 <__ulp>:
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	ed8d 0b00 	vstr	d0, [sp]
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	4912      	ldr	r1, [pc, #72]	; (8009d24 <__ulp+0x54>)
 8009cda:	4019      	ands	r1, r3
 8009cdc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009ce0:	2900      	cmp	r1, #0
 8009ce2:	dd05      	ble.n	8009cf0 <__ulp+0x20>
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	ec43 2b10 	vmov	d0, r2, r3
 8009cec:	b002      	add	sp, #8
 8009cee:	4770      	bx	lr
 8009cf0:	4249      	negs	r1, r1
 8009cf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009cf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009cfa:	f04f 0200 	mov.w	r2, #0
 8009cfe:	f04f 0300 	mov.w	r3, #0
 8009d02:	da04      	bge.n	8009d0e <__ulp+0x3e>
 8009d04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d08:	fa41 f300 	asr.w	r3, r1, r0
 8009d0c:	e7ec      	b.n	8009ce8 <__ulp+0x18>
 8009d0e:	f1a0 0114 	sub.w	r1, r0, #20
 8009d12:	291e      	cmp	r1, #30
 8009d14:	bfda      	itte	le
 8009d16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d1a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d1e:	2101      	movgt	r1, #1
 8009d20:	460a      	mov	r2, r1
 8009d22:	e7e1      	b.n	8009ce8 <__ulp+0x18>
 8009d24:	7ff00000 	.word	0x7ff00000

08009d28 <__b2d>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	6905      	ldr	r5, [r0, #16]
 8009d2c:	f100 0714 	add.w	r7, r0, #20
 8009d30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d34:	1f2e      	subs	r6, r5, #4
 8009d36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7ff fd48 	bl	80097d0 <__hi0bits>
 8009d40:	f1c0 0320 	rsb	r3, r0, #32
 8009d44:	280a      	cmp	r0, #10
 8009d46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009dc4 <__b2d+0x9c>
 8009d4a:	600b      	str	r3, [r1, #0]
 8009d4c:	dc14      	bgt.n	8009d78 <__b2d+0x50>
 8009d4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d52:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d56:	42b7      	cmp	r7, r6
 8009d58:	ea41 030c 	orr.w	r3, r1, ip
 8009d5c:	bf34      	ite	cc
 8009d5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d62:	2100      	movcs	r1, #0
 8009d64:	3015      	adds	r0, #21
 8009d66:	fa04 f000 	lsl.w	r0, r4, r0
 8009d6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d6e:	ea40 0201 	orr.w	r2, r0, r1
 8009d72:	ec43 2b10 	vmov	d0, r2, r3
 8009d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d78:	42b7      	cmp	r7, r6
 8009d7a:	bf3a      	itte	cc
 8009d7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d80:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d84:	2100      	movcs	r1, #0
 8009d86:	380b      	subs	r0, #11
 8009d88:	d017      	beq.n	8009dba <__b2d+0x92>
 8009d8a:	f1c0 0c20 	rsb	ip, r0, #32
 8009d8e:	fa04 f500 	lsl.w	r5, r4, r0
 8009d92:	42be      	cmp	r6, r7
 8009d94:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d98:	ea45 0504 	orr.w	r5, r5, r4
 8009d9c:	bf8c      	ite	hi
 8009d9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009da2:	2400      	movls	r4, #0
 8009da4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009da8:	fa01 f000 	lsl.w	r0, r1, r0
 8009dac:	fa24 f40c 	lsr.w	r4, r4, ip
 8009db0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009db4:	ea40 0204 	orr.w	r2, r0, r4
 8009db8:	e7db      	b.n	8009d72 <__b2d+0x4a>
 8009dba:	ea44 030c 	orr.w	r3, r4, ip
 8009dbe:	460a      	mov	r2, r1
 8009dc0:	e7d7      	b.n	8009d72 <__b2d+0x4a>
 8009dc2:	bf00      	nop
 8009dc4:	3ff00000 	.word	0x3ff00000

08009dc8 <__d2b>:
 8009dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dcc:	4689      	mov	r9, r1
 8009dce:	2101      	movs	r1, #1
 8009dd0:	ec57 6b10 	vmov	r6, r7, d0
 8009dd4:	4690      	mov	r8, r2
 8009dd6:	f7ff fc09 	bl	80095ec <_Balloc>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	b930      	cbnz	r0, 8009dec <__d2b+0x24>
 8009dde:	4602      	mov	r2, r0
 8009de0:	4b25      	ldr	r3, [pc, #148]	; (8009e78 <__d2b+0xb0>)
 8009de2:	4826      	ldr	r0, [pc, #152]	; (8009e7c <__d2b+0xb4>)
 8009de4:	f240 310a 	movw	r1, #778	; 0x30a
 8009de8:	f000 fb50 	bl	800a48c <__assert_func>
 8009dec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009df4:	bb35      	cbnz	r5, 8009e44 <__d2b+0x7c>
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	d028      	beq.n	8009e4e <__d2b+0x86>
 8009dfc:	4668      	mov	r0, sp
 8009dfe:	9600      	str	r6, [sp, #0]
 8009e00:	f7ff fd06 	bl	8009810 <__lo0bits>
 8009e04:	9900      	ldr	r1, [sp, #0]
 8009e06:	b300      	cbz	r0, 8009e4a <__d2b+0x82>
 8009e08:	9a01      	ldr	r2, [sp, #4]
 8009e0a:	f1c0 0320 	rsb	r3, r0, #32
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	430b      	orrs	r3, r1
 8009e14:	40c2      	lsrs	r2, r0
 8009e16:	6163      	str	r3, [r4, #20]
 8009e18:	9201      	str	r2, [sp, #4]
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	61a3      	str	r3, [r4, #24]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bf14      	ite	ne
 8009e22:	2202      	movne	r2, #2
 8009e24:	2201      	moveq	r2, #1
 8009e26:	6122      	str	r2, [r4, #16]
 8009e28:	b1d5      	cbz	r5, 8009e60 <__d2b+0x98>
 8009e2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e2e:	4405      	add	r5, r0
 8009e30:	f8c9 5000 	str.w	r5, [r9]
 8009e34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e38:	f8c8 0000 	str.w	r0, [r8]
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	b003      	add	sp, #12
 8009e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e48:	e7d5      	b.n	8009df6 <__d2b+0x2e>
 8009e4a:	6161      	str	r1, [r4, #20]
 8009e4c:	e7e5      	b.n	8009e1a <__d2b+0x52>
 8009e4e:	a801      	add	r0, sp, #4
 8009e50:	f7ff fcde 	bl	8009810 <__lo0bits>
 8009e54:	9b01      	ldr	r3, [sp, #4]
 8009e56:	6163      	str	r3, [r4, #20]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	6122      	str	r2, [r4, #16]
 8009e5c:	3020      	adds	r0, #32
 8009e5e:	e7e3      	b.n	8009e28 <__d2b+0x60>
 8009e60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e68:	f8c9 0000 	str.w	r0, [r9]
 8009e6c:	6918      	ldr	r0, [r3, #16]
 8009e6e:	f7ff fcaf 	bl	80097d0 <__hi0bits>
 8009e72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e76:	e7df      	b.n	8009e38 <__d2b+0x70>
 8009e78:	0800c0f0 	.word	0x0800c0f0
 8009e7c:	0800c17c 	.word	0x0800c17c

08009e80 <__ratio>:
 8009e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	4688      	mov	r8, r1
 8009e86:	4669      	mov	r1, sp
 8009e88:	4681      	mov	r9, r0
 8009e8a:	f7ff ff4d 	bl	8009d28 <__b2d>
 8009e8e:	a901      	add	r1, sp, #4
 8009e90:	4640      	mov	r0, r8
 8009e92:	ec55 4b10 	vmov	r4, r5, d0
 8009e96:	f7ff ff47 	bl	8009d28 <__b2d>
 8009e9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ea2:	eba3 0c02 	sub.w	ip, r3, r2
 8009ea6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009eaa:	1a9b      	subs	r3, r3, r2
 8009eac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009eb0:	ec51 0b10 	vmov	r0, r1, d0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bfd6      	itet	le
 8009eb8:	460a      	movle	r2, r1
 8009eba:	462a      	movgt	r2, r5
 8009ebc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ec0:	468b      	mov	fp, r1
 8009ec2:	462f      	mov	r7, r5
 8009ec4:	bfd4      	ite	le
 8009ec6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009eca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ece:	4620      	mov	r0, r4
 8009ed0:	ee10 2a10 	vmov	r2, s0
 8009ed4:	465b      	mov	r3, fp
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 fcc0 	bl	800085c <__aeabi_ddiv>
 8009edc:	ec41 0b10 	vmov	d0, r0, r1
 8009ee0:	b003      	add	sp, #12
 8009ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee6 <__copybits>:
 8009ee6:	3901      	subs	r1, #1
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	1149      	asrs	r1, r1, #5
 8009eec:	6914      	ldr	r4, [r2, #16]
 8009eee:	3101      	adds	r1, #1
 8009ef0:	f102 0314 	add.w	r3, r2, #20
 8009ef4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ef8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009efc:	1f05      	subs	r5, r0, #4
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	d30c      	bcc.n	8009f1c <__copybits+0x36>
 8009f02:	1aa3      	subs	r3, r4, r2
 8009f04:	3b11      	subs	r3, #17
 8009f06:	f023 0303 	bic.w	r3, r3, #3
 8009f0a:	3211      	adds	r2, #17
 8009f0c:	42a2      	cmp	r2, r4
 8009f0e:	bf88      	it	hi
 8009f10:	2300      	movhi	r3, #0
 8009f12:	4418      	add	r0, r3
 8009f14:	2300      	movs	r3, #0
 8009f16:	4288      	cmp	r0, r1
 8009f18:	d305      	bcc.n	8009f26 <__copybits+0x40>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f20:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f24:	e7eb      	b.n	8009efe <__copybits+0x18>
 8009f26:	f840 3b04 	str.w	r3, [r0], #4
 8009f2a:	e7f4      	b.n	8009f16 <__copybits+0x30>

08009f2c <__any_on>:
 8009f2c:	f100 0214 	add.w	r2, r0, #20
 8009f30:	6900      	ldr	r0, [r0, #16]
 8009f32:	114b      	asrs	r3, r1, #5
 8009f34:	4298      	cmp	r0, r3
 8009f36:	b510      	push	{r4, lr}
 8009f38:	db11      	blt.n	8009f5e <__any_on+0x32>
 8009f3a:	dd0a      	ble.n	8009f52 <__any_on+0x26>
 8009f3c:	f011 011f 	ands.w	r1, r1, #31
 8009f40:	d007      	beq.n	8009f52 <__any_on+0x26>
 8009f42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f46:	fa24 f001 	lsr.w	r0, r4, r1
 8009f4a:	fa00 f101 	lsl.w	r1, r0, r1
 8009f4e:	428c      	cmp	r4, r1
 8009f50:	d10b      	bne.n	8009f6a <__any_on+0x3e>
 8009f52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d803      	bhi.n	8009f62 <__any_on+0x36>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	bd10      	pop	{r4, pc}
 8009f5e:	4603      	mov	r3, r0
 8009f60:	e7f7      	b.n	8009f52 <__any_on+0x26>
 8009f62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f66:	2900      	cmp	r1, #0
 8009f68:	d0f5      	beq.n	8009f56 <__any_on+0x2a>
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	e7f6      	b.n	8009f5c <__any_on+0x30>

08009f6e <_calloc_r>:
 8009f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f70:	fba1 2402 	umull	r2, r4, r1, r2
 8009f74:	b94c      	cbnz	r4, 8009f8a <_calloc_r+0x1c>
 8009f76:	4611      	mov	r1, r2
 8009f78:	9201      	str	r2, [sp, #4]
 8009f7a:	f000 f87b 	bl	800a074 <_malloc_r>
 8009f7e:	9a01      	ldr	r2, [sp, #4]
 8009f80:	4605      	mov	r5, r0
 8009f82:	b930      	cbnz	r0, 8009f92 <_calloc_r+0x24>
 8009f84:	4628      	mov	r0, r5
 8009f86:	b003      	add	sp, #12
 8009f88:	bd30      	pop	{r4, r5, pc}
 8009f8a:	220c      	movs	r2, #12
 8009f8c:	6002      	str	r2, [r0, #0]
 8009f8e:	2500      	movs	r5, #0
 8009f90:	e7f8      	b.n	8009f84 <_calloc_r+0x16>
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7fc fbbe 	bl	8006714 <memset>
 8009f98:	e7f4      	b.n	8009f84 <_calloc_r+0x16>
	...

08009f9c <_free_r>:
 8009f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	d044      	beq.n	800a02c <_free_r+0x90>
 8009fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa6:	9001      	str	r0, [sp, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f1a1 0404 	sub.w	r4, r1, #4
 8009fae:	bfb8      	it	lt
 8009fb0:	18e4      	addlt	r4, r4, r3
 8009fb2:	f000 fab5 	bl	800a520 <__malloc_lock>
 8009fb6:	4a1e      	ldr	r2, [pc, #120]	; (800a030 <_free_r+0x94>)
 8009fb8:	9801      	ldr	r0, [sp, #4]
 8009fba:	6813      	ldr	r3, [r2, #0]
 8009fbc:	b933      	cbnz	r3, 8009fcc <_free_r+0x30>
 8009fbe:	6063      	str	r3, [r4, #4]
 8009fc0:	6014      	str	r4, [r2, #0]
 8009fc2:	b003      	add	sp, #12
 8009fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fc8:	f000 bab0 	b.w	800a52c <__malloc_unlock>
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d908      	bls.n	8009fe2 <_free_r+0x46>
 8009fd0:	6825      	ldr	r5, [r4, #0]
 8009fd2:	1961      	adds	r1, r4, r5
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	bf01      	itttt	eq
 8009fd8:	6819      	ldreq	r1, [r3, #0]
 8009fda:	685b      	ldreq	r3, [r3, #4]
 8009fdc:	1949      	addeq	r1, r1, r5
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	e7ed      	b.n	8009fbe <_free_r+0x22>
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	b10b      	cbz	r3, 8009fec <_free_r+0x50>
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d9fa      	bls.n	8009fe2 <_free_r+0x46>
 8009fec:	6811      	ldr	r1, [r2, #0]
 8009fee:	1855      	adds	r5, r2, r1
 8009ff0:	42a5      	cmp	r5, r4
 8009ff2:	d10b      	bne.n	800a00c <_free_r+0x70>
 8009ff4:	6824      	ldr	r4, [r4, #0]
 8009ff6:	4421      	add	r1, r4
 8009ff8:	1854      	adds	r4, r2, r1
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	6011      	str	r1, [r2, #0]
 8009ffe:	d1e0      	bne.n	8009fc2 <_free_r+0x26>
 800a000:	681c      	ldr	r4, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	6053      	str	r3, [r2, #4]
 800a006:	4421      	add	r1, r4
 800a008:	6011      	str	r1, [r2, #0]
 800a00a:	e7da      	b.n	8009fc2 <_free_r+0x26>
 800a00c:	d902      	bls.n	800a014 <_free_r+0x78>
 800a00e:	230c      	movs	r3, #12
 800a010:	6003      	str	r3, [r0, #0]
 800a012:	e7d6      	b.n	8009fc2 <_free_r+0x26>
 800a014:	6825      	ldr	r5, [r4, #0]
 800a016:	1961      	adds	r1, r4, r5
 800a018:	428b      	cmp	r3, r1
 800a01a:	bf04      	itt	eq
 800a01c:	6819      	ldreq	r1, [r3, #0]
 800a01e:	685b      	ldreq	r3, [r3, #4]
 800a020:	6063      	str	r3, [r4, #4]
 800a022:	bf04      	itt	eq
 800a024:	1949      	addeq	r1, r1, r5
 800a026:	6021      	streq	r1, [r4, #0]
 800a028:	6054      	str	r4, [r2, #4]
 800a02a:	e7ca      	b.n	8009fc2 <_free_r+0x26>
 800a02c:	b003      	add	sp, #12
 800a02e:	bd30      	pop	{r4, r5, pc}
 800a030:	200004b8 	.word	0x200004b8

0800a034 <sbrk_aligned>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	4e0e      	ldr	r6, [pc, #56]	; (800a070 <sbrk_aligned+0x3c>)
 800a038:	460c      	mov	r4, r1
 800a03a:	6831      	ldr	r1, [r6, #0]
 800a03c:	4605      	mov	r5, r0
 800a03e:	b911      	cbnz	r1, 800a046 <sbrk_aligned+0x12>
 800a040:	f000 f9f2 	bl	800a428 <_sbrk_r>
 800a044:	6030      	str	r0, [r6, #0]
 800a046:	4621      	mov	r1, r4
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 f9ed 	bl	800a428 <_sbrk_r>
 800a04e:	1c43      	adds	r3, r0, #1
 800a050:	d00a      	beq.n	800a068 <sbrk_aligned+0x34>
 800a052:	1cc4      	adds	r4, r0, #3
 800a054:	f024 0403 	bic.w	r4, r4, #3
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d007      	beq.n	800a06c <sbrk_aligned+0x38>
 800a05c:	1a21      	subs	r1, r4, r0
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 f9e2 	bl	800a428 <_sbrk_r>
 800a064:	3001      	adds	r0, #1
 800a066:	d101      	bne.n	800a06c <sbrk_aligned+0x38>
 800a068:	f04f 34ff 	mov.w	r4, #4294967295
 800a06c:	4620      	mov	r0, r4
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	200004bc 	.word	0x200004bc

0800a074 <_malloc_r>:
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	1ccd      	adds	r5, r1, #3
 800a07a:	f025 0503 	bic.w	r5, r5, #3
 800a07e:	3508      	adds	r5, #8
 800a080:	2d0c      	cmp	r5, #12
 800a082:	bf38      	it	cc
 800a084:	250c      	movcc	r5, #12
 800a086:	2d00      	cmp	r5, #0
 800a088:	4607      	mov	r7, r0
 800a08a:	db01      	blt.n	800a090 <_malloc_r+0x1c>
 800a08c:	42a9      	cmp	r1, r5
 800a08e:	d905      	bls.n	800a09c <_malloc_r+0x28>
 800a090:	230c      	movs	r3, #12
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	2600      	movs	r6, #0
 800a096:	4630      	mov	r0, r6
 800a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09c:	4e2e      	ldr	r6, [pc, #184]	; (800a158 <_malloc_r+0xe4>)
 800a09e:	f000 fa3f 	bl	800a520 <__malloc_lock>
 800a0a2:	6833      	ldr	r3, [r6, #0]
 800a0a4:	461c      	mov	r4, r3
 800a0a6:	bb34      	cbnz	r4, 800a0f6 <_malloc_r+0x82>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	f7ff ffc2 	bl	800a034 <sbrk_aligned>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	d14d      	bne.n	800a152 <_malloc_r+0xde>
 800a0b6:	6834      	ldr	r4, [r6, #0]
 800a0b8:	4626      	mov	r6, r4
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	d140      	bne.n	800a140 <_malloc_r+0xcc>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	eb04 0803 	add.w	r8, r4, r3
 800a0c8:	f000 f9ae 	bl	800a428 <_sbrk_r>
 800a0cc:	4580      	cmp	r8, r0
 800a0ce:	d13a      	bne.n	800a146 <_malloc_r+0xd2>
 800a0d0:	6821      	ldr	r1, [r4, #0]
 800a0d2:	3503      	adds	r5, #3
 800a0d4:	1a6d      	subs	r5, r5, r1
 800a0d6:	f025 0503 	bic.w	r5, r5, #3
 800a0da:	3508      	adds	r5, #8
 800a0dc:	2d0c      	cmp	r5, #12
 800a0de:	bf38      	it	cc
 800a0e0:	250c      	movcc	r5, #12
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f7ff ffa5 	bl	800a034 <sbrk_aligned>
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	d02b      	beq.n	800a146 <_malloc_r+0xd2>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	442b      	add	r3, r5
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	e00e      	b.n	800a114 <_malloc_r+0xa0>
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	1b52      	subs	r2, r2, r5
 800a0fa:	d41e      	bmi.n	800a13a <_malloc_r+0xc6>
 800a0fc:	2a0b      	cmp	r2, #11
 800a0fe:	d916      	bls.n	800a12e <_malloc_r+0xba>
 800a100:	1961      	adds	r1, r4, r5
 800a102:	42a3      	cmp	r3, r4
 800a104:	6025      	str	r5, [r4, #0]
 800a106:	bf18      	it	ne
 800a108:	6059      	strne	r1, [r3, #4]
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	bf08      	it	eq
 800a10e:	6031      	streq	r1, [r6, #0]
 800a110:	5162      	str	r2, [r4, r5]
 800a112:	604b      	str	r3, [r1, #4]
 800a114:	4638      	mov	r0, r7
 800a116:	f104 060b 	add.w	r6, r4, #11
 800a11a:	f000 fa07 	bl	800a52c <__malloc_unlock>
 800a11e:	f026 0607 	bic.w	r6, r6, #7
 800a122:	1d23      	adds	r3, r4, #4
 800a124:	1af2      	subs	r2, r6, r3
 800a126:	d0b6      	beq.n	800a096 <_malloc_r+0x22>
 800a128:	1b9b      	subs	r3, r3, r6
 800a12a:	50a3      	str	r3, [r4, r2]
 800a12c:	e7b3      	b.n	800a096 <_malloc_r+0x22>
 800a12e:	6862      	ldr	r2, [r4, #4]
 800a130:	42a3      	cmp	r3, r4
 800a132:	bf0c      	ite	eq
 800a134:	6032      	streq	r2, [r6, #0]
 800a136:	605a      	strne	r2, [r3, #4]
 800a138:	e7ec      	b.n	800a114 <_malloc_r+0xa0>
 800a13a:	4623      	mov	r3, r4
 800a13c:	6864      	ldr	r4, [r4, #4]
 800a13e:	e7b2      	b.n	800a0a6 <_malloc_r+0x32>
 800a140:	4634      	mov	r4, r6
 800a142:	6876      	ldr	r6, [r6, #4]
 800a144:	e7b9      	b.n	800a0ba <_malloc_r+0x46>
 800a146:	230c      	movs	r3, #12
 800a148:	603b      	str	r3, [r7, #0]
 800a14a:	4638      	mov	r0, r7
 800a14c:	f000 f9ee 	bl	800a52c <__malloc_unlock>
 800a150:	e7a1      	b.n	800a096 <_malloc_r+0x22>
 800a152:	6025      	str	r5, [r4, #0]
 800a154:	e7de      	b.n	800a114 <_malloc_r+0xa0>
 800a156:	bf00      	nop
 800a158:	200004b8 	.word	0x200004b8

0800a15c <__ssputs_r>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	688e      	ldr	r6, [r1, #8]
 800a162:	429e      	cmp	r6, r3
 800a164:	4682      	mov	sl, r0
 800a166:	460c      	mov	r4, r1
 800a168:	4690      	mov	r8, r2
 800a16a:	461f      	mov	r7, r3
 800a16c:	d838      	bhi.n	800a1e0 <__ssputs_r+0x84>
 800a16e:	898a      	ldrh	r2, [r1, #12]
 800a170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a174:	d032      	beq.n	800a1dc <__ssputs_r+0x80>
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	6909      	ldr	r1, [r1, #16]
 800a17a:	eba5 0901 	sub.w	r9, r5, r1
 800a17e:	6965      	ldr	r5, [r4, #20]
 800a180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a188:	3301      	adds	r3, #1
 800a18a:	444b      	add	r3, r9
 800a18c:	106d      	asrs	r5, r5, #1
 800a18e:	429d      	cmp	r5, r3
 800a190:	bf38      	it	cc
 800a192:	461d      	movcc	r5, r3
 800a194:	0553      	lsls	r3, r2, #21
 800a196:	d531      	bpl.n	800a1fc <__ssputs_r+0xa0>
 800a198:	4629      	mov	r1, r5
 800a19a:	f7ff ff6b 	bl	800a074 <_malloc_r>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	b950      	cbnz	r0, 800a1b8 <__ssputs_r+0x5c>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	f8ca 3000 	str.w	r3, [sl]
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	6921      	ldr	r1, [r4, #16]
 800a1ba:	464a      	mov	r2, r9
 800a1bc:	f7ff fa08 	bl	80095d0 <memcpy>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	6126      	str	r6, [r4, #16]
 800a1ce:	6165      	str	r5, [r4, #20]
 800a1d0:	444e      	add	r6, r9
 800a1d2:	eba5 0509 	sub.w	r5, r5, r9
 800a1d6:	6026      	str	r6, [r4, #0]
 800a1d8:	60a5      	str	r5, [r4, #8]
 800a1da:	463e      	mov	r6, r7
 800a1dc:	42be      	cmp	r6, r7
 800a1de:	d900      	bls.n	800a1e2 <__ssputs_r+0x86>
 800a1e0:	463e      	mov	r6, r7
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	f000 f980 	bl	800a4ec <memmove>
 800a1ec:	68a3      	ldr	r3, [r4, #8]
 800a1ee:	1b9b      	subs	r3, r3, r6
 800a1f0:	60a3      	str	r3, [r4, #8]
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	4433      	add	r3, r6
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7db      	b.n	800a1b4 <__ssputs_r+0x58>
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	f000 f99b 	bl	800a538 <_realloc_r>
 800a202:	4606      	mov	r6, r0
 800a204:	2800      	cmp	r0, #0
 800a206:	d1e1      	bne.n	800a1cc <__ssputs_r+0x70>
 800a208:	6921      	ldr	r1, [r4, #16]
 800a20a:	4650      	mov	r0, sl
 800a20c:	f7ff fec6 	bl	8009f9c <_free_r>
 800a210:	e7c7      	b.n	800a1a2 <__ssputs_r+0x46>
	...

0800a214 <_svfiprintf_r>:
 800a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a218:	4698      	mov	r8, r3
 800a21a:	898b      	ldrh	r3, [r1, #12]
 800a21c:	061b      	lsls	r3, r3, #24
 800a21e:	b09d      	sub	sp, #116	; 0x74
 800a220:	4607      	mov	r7, r0
 800a222:	460d      	mov	r5, r1
 800a224:	4614      	mov	r4, r2
 800a226:	d50e      	bpl.n	800a246 <_svfiprintf_r+0x32>
 800a228:	690b      	ldr	r3, [r1, #16]
 800a22a:	b963      	cbnz	r3, 800a246 <_svfiprintf_r+0x32>
 800a22c:	2140      	movs	r1, #64	; 0x40
 800a22e:	f7ff ff21 	bl	800a074 <_malloc_r>
 800a232:	6028      	str	r0, [r5, #0]
 800a234:	6128      	str	r0, [r5, #16]
 800a236:	b920      	cbnz	r0, 800a242 <_svfiprintf_r+0x2e>
 800a238:	230c      	movs	r3, #12
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	e0d1      	b.n	800a3e6 <_svfiprintf_r+0x1d2>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	616b      	str	r3, [r5, #20]
 800a246:	2300      	movs	r3, #0
 800a248:	9309      	str	r3, [sp, #36]	; 0x24
 800a24a:	2320      	movs	r3, #32
 800a24c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a250:	f8cd 800c 	str.w	r8, [sp, #12]
 800a254:	2330      	movs	r3, #48	; 0x30
 800a256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a400 <_svfiprintf_r+0x1ec>
 800a25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a25e:	f04f 0901 	mov.w	r9, #1
 800a262:	4623      	mov	r3, r4
 800a264:	469a      	mov	sl, r3
 800a266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26a:	b10a      	cbz	r2, 800a270 <_svfiprintf_r+0x5c>
 800a26c:	2a25      	cmp	r2, #37	; 0x25
 800a26e:	d1f9      	bne.n	800a264 <_svfiprintf_r+0x50>
 800a270:	ebba 0b04 	subs.w	fp, sl, r4
 800a274:	d00b      	beq.n	800a28e <_svfiprintf_r+0x7a>
 800a276:	465b      	mov	r3, fp
 800a278:	4622      	mov	r2, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	4638      	mov	r0, r7
 800a27e:	f7ff ff6d 	bl	800a15c <__ssputs_r>
 800a282:	3001      	adds	r0, #1
 800a284:	f000 80aa 	beq.w	800a3dc <_svfiprintf_r+0x1c8>
 800a288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a28a:	445a      	add	r2, fp
 800a28c:	9209      	str	r2, [sp, #36]	; 0x24
 800a28e:	f89a 3000 	ldrb.w	r3, [sl]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80a2 	beq.w	800a3dc <_svfiprintf_r+0x1c8>
 800a298:	2300      	movs	r3, #0
 800a29a:	f04f 32ff 	mov.w	r2, #4294967295
 800a29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a2:	f10a 0a01 	add.w	sl, sl, #1
 800a2a6:	9304      	str	r3, [sp, #16]
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ae:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b0:	4654      	mov	r4, sl
 800a2b2:	2205      	movs	r2, #5
 800a2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b8:	4851      	ldr	r0, [pc, #324]	; (800a400 <_svfiprintf_r+0x1ec>)
 800a2ba:	f7f5 ff99 	bl	80001f0 <memchr>
 800a2be:	9a04      	ldr	r2, [sp, #16]
 800a2c0:	b9d8      	cbnz	r0, 800a2fa <_svfiprintf_r+0xe6>
 800a2c2:	06d0      	lsls	r0, r2, #27
 800a2c4:	bf44      	itt	mi
 800a2c6:	2320      	movmi	r3, #32
 800a2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2cc:	0711      	lsls	r1, r2, #28
 800a2ce:	bf44      	itt	mi
 800a2d0:	232b      	movmi	r3, #43	; 0x2b
 800a2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2da:	2b2a      	cmp	r3, #42	; 0x2a
 800a2dc:	d015      	beq.n	800a30a <_svfiprintf_r+0xf6>
 800a2de:	9a07      	ldr	r2, [sp, #28]
 800a2e0:	4654      	mov	r4, sl
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f04f 0c0a 	mov.w	ip, #10
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ee:	3b30      	subs	r3, #48	; 0x30
 800a2f0:	2b09      	cmp	r3, #9
 800a2f2:	d94e      	bls.n	800a392 <_svfiprintf_r+0x17e>
 800a2f4:	b1b0      	cbz	r0, 800a324 <_svfiprintf_r+0x110>
 800a2f6:	9207      	str	r2, [sp, #28]
 800a2f8:	e014      	b.n	800a324 <_svfiprintf_r+0x110>
 800a2fa:	eba0 0308 	sub.w	r3, r0, r8
 800a2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	46a2      	mov	sl, r4
 800a308:	e7d2      	b.n	800a2b0 <_svfiprintf_r+0x9c>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	1d19      	adds	r1, r3, #4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	9103      	str	r1, [sp, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	bfbb      	ittet	lt
 800a316:	425b      	neglt	r3, r3
 800a318:	f042 0202 	orrlt.w	r2, r2, #2
 800a31c:	9307      	strge	r3, [sp, #28]
 800a31e:	9307      	strlt	r3, [sp, #28]
 800a320:	bfb8      	it	lt
 800a322:	9204      	strlt	r2, [sp, #16]
 800a324:	7823      	ldrb	r3, [r4, #0]
 800a326:	2b2e      	cmp	r3, #46	; 0x2e
 800a328:	d10c      	bne.n	800a344 <_svfiprintf_r+0x130>
 800a32a:	7863      	ldrb	r3, [r4, #1]
 800a32c:	2b2a      	cmp	r3, #42	; 0x2a
 800a32e:	d135      	bne.n	800a39c <_svfiprintf_r+0x188>
 800a330:	9b03      	ldr	r3, [sp, #12]
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	9203      	str	r2, [sp, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfb8      	it	lt
 800a33c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a340:	3402      	adds	r4, #2
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a410 <_svfiprintf_r+0x1fc>
 800a348:	7821      	ldrb	r1, [r4, #0]
 800a34a:	2203      	movs	r2, #3
 800a34c:	4650      	mov	r0, sl
 800a34e:	f7f5 ff4f 	bl	80001f0 <memchr>
 800a352:	b140      	cbz	r0, 800a366 <_svfiprintf_r+0x152>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	eba0 000a 	sub.w	r0, r0, sl
 800a35a:	fa03 f000 	lsl.w	r0, r3, r0
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	4303      	orrs	r3, r0
 800a362:	3401      	adds	r4, #1
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36a:	4826      	ldr	r0, [pc, #152]	; (800a404 <_svfiprintf_r+0x1f0>)
 800a36c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a370:	2206      	movs	r2, #6
 800a372:	f7f5 ff3d 	bl	80001f0 <memchr>
 800a376:	2800      	cmp	r0, #0
 800a378:	d038      	beq.n	800a3ec <_svfiprintf_r+0x1d8>
 800a37a:	4b23      	ldr	r3, [pc, #140]	; (800a408 <_svfiprintf_r+0x1f4>)
 800a37c:	bb1b      	cbnz	r3, 800a3c6 <_svfiprintf_r+0x1b2>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	f023 0307 	bic.w	r3, r3, #7
 800a386:	3308      	adds	r3, #8
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a38c:	4433      	add	r3, r6
 800a38e:	9309      	str	r3, [sp, #36]	; 0x24
 800a390:	e767      	b.n	800a262 <_svfiprintf_r+0x4e>
 800a392:	fb0c 3202 	mla	r2, ip, r2, r3
 800a396:	460c      	mov	r4, r1
 800a398:	2001      	movs	r0, #1
 800a39a:	e7a5      	b.n	800a2e8 <_svfiprintf_r+0xd4>
 800a39c:	2300      	movs	r3, #0
 800a39e:	3401      	adds	r4, #1
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f04f 0c0a 	mov.w	ip, #10
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ae:	3a30      	subs	r2, #48	; 0x30
 800a3b0:	2a09      	cmp	r2, #9
 800a3b2:	d903      	bls.n	800a3bc <_svfiprintf_r+0x1a8>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0c5      	beq.n	800a344 <_svfiprintf_r+0x130>
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	e7c3      	b.n	800a344 <_svfiprintf_r+0x130>
 800a3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7f0      	b.n	800a3a8 <_svfiprintf_r+0x194>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <_svfiprintf_r+0x1f8>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7fc fa47 	bl	8006864 <_printf_float>
 800a3d6:	1c42      	adds	r2, r0, #1
 800a3d8:	4606      	mov	r6, r0
 800a3da:	d1d6      	bne.n	800a38a <_svfiprintf_r+0x176>
 800a3dc:	89ab      	ldrh	r3, [r5, #12]
 800a3de:	065b      	lsls	r3, r3, #25
 800a3e0:	f53f af2c 	bmi.w	800a23c <_svfiprintf_r+0x28>
 800a3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3e6:	b01d      	add	sp, #116	; 0x74
 800a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ec:	ab03      	add	r3, sp, #12
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <_svfiprintf_r+0x1f8>)
 800a3f4:	a904      	add	r1, sp, #16
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f7fc fcd8 	bl	8006dac <_printf_i>
 800a3fc:	e7eb      	b.n	800a3d6 <_svfiprintf_r+0x1c2>
 800a3fe:	bf00      	nop
 800a400:	0800c2d4 	.word	0x0800c2d4
 800a404:	0800c2de 	.word	0x0800c2de
 800a408:	08006865 	.word	0x08006865
 800a40c:	0800a15d 	.word	0x0800a15d
 800a410:	0800c2da 	.word	0x0800c2da
 800a414:	00000000 	.word	0x00000000

0800a418 <nan>:
 800a418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a420 <nan+0x8>
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	00000000 	.word	0x00000000
 800a424:	7ff80000 	.word	0x7ff80000

0800a428 <_sbrk_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d06      	ldr	r5, [pc, #24]	; (800a444 <_sbrk_r+0x1c>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f8 ff8a 	bl	800334c <_sbrk>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_sbrk_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_sbrk_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	200004c0 	.word	0x200004c0

0800a448 <strncmp>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	b17a      	cbz	r2, 800a46c <strncmp+0x24>
 800a44c:	4603      	mov	r3, r0
 800a44e:	3901      	subs	r1, #1
 800a450:	1884      	adds	r4, r0, r2
 800a452:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a456:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a45a:	4290      	cmp	r0, r2
 800a45c:	d101      	bne.n	800a462 <strncmp+0x1a>
 800a45e:	42a3      	cmp	r3, r4
 800a460:	d101      	bne.n	800a466 <strncmp+0x1e>
 800a462:	1a80      	subs	r0, r0, r2
 800a464:	bd10      	pop	{r4, pc}
 800a466:	2800      	cmp	r0, #0
 800a468:	d1f3      	bne.n	800a452 <strncmp+0xa>
 800a46a:	e7fa      	b.n	800a462 <strncmp+0x1a>
 800a46c:	4610      	mov	r0, r2
 800a46e:	e7f9      	b.n	800a464 <strncmp+0x1c>

0800a470 <__ascii_wctomb>:
 800a470:	b149      	cbz	r1, 800a486 <__ascii_wctomb+0x16>
 800a472:	2aff      	cmp	r2, #255	; 0xff
 800a474:	bf85      	ittet	hi
 800a476:	238a      	movhi	r3, #138	; 0x8a
 800a478:	6003      	strhi	r3, [r0, #0]
 800a47a:	700a      	strbls	r2, [r1, #0]
 800a47c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a480:	bf98      	it	ls
 800a482:	2001      	movls	r0, #1
 800a484:	4770      	bx	lr
 800a486:	4608      	mov	r0, r1
 800a488:	4770      	bx	lr
	...

0800a48c <__assert_func>:
 800a48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a48e:	4614      	mov	r4, r2
 800a490:	461a      	mov	r2, r3
 800a492:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <__assert_func+0x2c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4605      	mov	r5, r0
 800a498:	68d8      	ldr	r0, [r3, #12]
 800a49a:	b14c      	cbz	r4, 800a4b0 <__assert_func+0x24>
 800a49c:	4b07      	ldr	r3, [pc, #28]	; (800a4bc <__assert_func+0x30>)
 800a49e:	9100      	str	r1, [sp, #0]
 800a4a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4a4:	4906      	ldr	r1, [pc, #24]	; (800a4c0 <__assert_func+0x34>)
 800a4a6:	462b      	mov	r3, r5
 800a4a8:	f000 f80e 	bl	800a4c8 <fiprintf>
 800a4ac:	f000 fa8c 	bl	800a9c8 <abort>
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <__assert_func+0x38>)
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	e7f3      	b.n	800a49e <__assert_func+0x12>
 800a4b6:	bf00      	nop
 800a4b8:	20000014 	.word	0x20000014
 800a4bc:	0800c2e5 	.word	0x0800c2e5
 800a4c0:	0800c2f2 	.word	0x0800c2f2
 800a4c4:	0800c320 	.word	0x0800c320

0800a4c8 <fiprintf>:
 800a4c8:	b40e      	push	{r1, r2, r3}
 800a4ca:	b503      	push	{r0, r1, lr}
 800a4cc:	4601      	mov	r1, r0
 800a4ce:	ab03      	add	r3, sp, #12
 800a4d0:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <fiprintf+0x20>)
 800a4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d6:	6800      	ldr	r0, [r0, #0]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	f000 f885 	bl	800a5e8 <_vfiprintf_r>
 800a4de:	b002      	add	sp, #8
 800a4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e4:	b003      	add	sp, #12
 800a4e6:	4770      	bx	lr
 800a4e8:	20000014 	.word	0x20000014

0800a4ec <memmove>:
 800a4ec:	4288      	cmp	r0, r1
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	eb01 0402 	add.w	r4, r1, r2
 800a4f4:	d902      	bls.n	800a4fc <memmove+0x10>
 800a4f6:	4284      	cmp	r4, r0
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	d807      	bhi.n	800a50c <memmove+0x20>
 800a4fc:	1e43      	subs	r3, r0, #1
 800a4fe:	42a1      	cmp	r1, r4
 800a500:	d008      	beq.n	800a514 <memmove+0x28>
 800a502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a50a:	e7f8      	b.n	800a4fe <memmove+0x12>
 800a50c:	4402      	add	r2, r0
 800a50e:	4601      	mov	r1, r0
 800a510:	428a      	cmp	r2, r1
 800a512:	d100      	bne.n	800a516 <memmove+0x2a>
 800a514:	bd10      	pop	{r4, pc}
 800a516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a51e:	e7f7      	b.n	800a510 <memmove+0x24>

0800a520 <__malloc_lock>:
 800a520:	4801      	ldr	r0, [pc, #4]	; (800a528 <__malloc_lock+0x8>)
 800a522:	f000 bc11 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800a526:	bf00      	nop
 800a528:	200004c4 	.word	0x200004c4

0800a52c <__malloc_unlock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__malloc_unlock+0x8>)
 800a52e:	f000 bc0c 	b.w	800ad4a <__retarget_lock_release_recursive>
 800a532:	bf00      	nop
 800a534:	200004c4 	.word	0x200004c4

0800a538 <_realloc_r>:
 800a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	4680      	mov	r8, r0
 800a53e:	4614      	mov	r4, r2
 800a540:	460e      	mov	r6, r1
 800a542:	b921      	cbnz	r1, 800a54e <_realloc_r+0x16>
 800a544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	4611      	mov	r1, r2
 800a54a:	f7ff bd93 	b.w	800a074 <_malloc_r>
 800a54e:	b92a      	cbnz	r2, 800a55c <_realloc_r+0x24>
 800a550:	f7ff fd24 	bl	8009f9c <_free_r>
 800a554:	4625      	mov	r5, r4
 800a556:	4628      	mov	r0, r5
 800a558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55c:	f000 fc5c 	bl	800ae18 <_malloc_usable_size_r>
 800a560:	4284      	cmp	r4, r0
 800a562:	4607      	mov	r7, r0
 800a564:	d802      	bhi.n	800a56c <_realloc_r+0x34>
 800a566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a56a:	d812      	bhi.n	800a592 <_realloc_r+0x5a>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4640      	mov	r0, r8
 800a570:	f7ff fd80 	bl	800a074 <_malloc_r>
 800a574:	4605      	mov	r5, r0
 800a576:	2800      	cmp	r0, #0
 800a578:	d0ed      	beq.n	800a556 <_realloc_r+0x1e>
 800a57a:	42bc      	cmp	r4, r7
 800a57c:	4622      	mov	r2, r4
 800a57e:	4631      	mov	r1, r6
 800a580:	bf28      	it	cs
 800a582:	463a      	movcs	r2, r7
 800a584:	f7ff f824 	bl	80095d0 <memcpy>
 800a588:	4631      	mov	r1, r6
 800a58a:	4640      	mov	r0, r8
 800a58c:	f7ff fd06 	bl	8009f9c <_free_r>
 800a590:	e7e1      	b.n	800a556 <_realloc_r+0x1e>
 800a592:	4635      	mov	r5, r6
 800a594:	e7df      	b.n	800a556 <_realloc_r+0x1e>

0800a596 <__sfputc_r>:
 800a596:	6893      	ldr	r3, [r2, #8]
 800a598:	3b01      	subs	r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	b410      	push	{r4}
 800a59e:	6093      	str	r3, [r2, #8]
 800a5a0:	da08      	bge.n	800a5b4 <__sfputc_r+0x1e>
 800a5a2:	6994      	ldr	r4, [r2, #24]
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	db01      	blt.n	800a5ac <__sfputc_r+0x16>
 800a5a8:	290a      	cmp	r1, #10
 800a5aa:	d103      	bne.n	800a5b4 <__sfputc_r+0x1e>
 800a5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b0:	f000 b94a 	b.w	800a848 <__swbuf_r>
 800a5b4:	6813      	ldr	r3, [r2, #0]
 800a5b6:	1c58      	adds	r0, r3, #1
 800a5b8:	6010      	str	r0, [r2, #0]
 800a5ba:	7019      	strb	r1, [r3, #0]
 800a5bc:	4608      	mov	r0, r1
 800a5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <__sfputs_r>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	4614      	mov	r4, r2
 800a5cc:	18d5      	adds	r5, r2, r3
 800a5ce:	42ac      	cmp	r4, r5
 800a5d0:	d101      	bne.n	800a5d6 <__sfputs_r+0x12>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	e007      	b.n	800a5e6 <__sfputs_r+0x22>
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	463a      	mov	r2, r7
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ffda 	bl	800a596 <__sfputc_r>
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	d1f3      	bne.n	800a5ce <__sfputs_r+0xa>
 800a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5e8 <_vfiprintf_r>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	b09d      	sub	sp, #116	; 0x74
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	4698      	mov	r8, r3
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	b118      	cbz	r0, 800a600 <_vfiprintf_r+0x18>
 800a5f8:	6983      	ldr	r3, [r0, #24]
 800a5fa:	b90b      	cbnz	r3, 800a600 <_vfiprintf_r+0x18>
 800a5fc:	f000 fb06 	bl	800ac0c <__sinit>
 800a600:	4b89      	ldr	r3, [pc, #548]	; (800a828 <_vfiprintf_r+0x240>)
 800a602:	429d      	cmp	r5, r3
 800a604:	d11b      	bne.n	800a63e <_vfiprintf_r+0x56>
 800a606:	6875      	ldr	r5, [r6, #4]
 800a608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a60a:	07d9      	lsls	r1, r3, #31
 800a60c:	d405      	bmi.n	800a61a <_vfiprintf_r+0x32>
 800a60e:	89ab      	ldrh	r3, [r5, #12]
 800a610:	059a      	lsls	r2, r3, #22
 800a612:	d402      	bmi.n	800a61a <_vfiprintf_r+0x32>
 800a614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a616:	f000 fb97 	bl	800ad48 <__retarget_lock_acquire_recursive>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	071b      	lsls	r3, r3, #28
 800a61e:	d501      	bpl.n	800a624 <_vfiprintf_r+0x3c>
 800a620:	692b      	ldr	r3, [r5, #16]
 800a622:	b9eb      	cbnz	r3, 800a660 <_vfiprintf_r+0x78>
 800a624:	4629      	mov	r1, r5
 800a626:	4630      	mov	r0, r6
 800a628:	f000 f960 	bl	800a8ec <__swsetup_r>
 800a62c:	b1c0      	cbz	r0, 800a660 <_vfiprintf_r+0x78>
 800a62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a630:	07dc      	lsls	r4, r3, #31
 800a632:	d50e      	bpl.n	800a652 <_vfiprintf_r+0x6a>
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	b01d      	add	sp, #116	; 0x74
 800a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63e:	4b7b      	ldr	r3, [pc, #492]	; (800a82c <_vfiprintf_r+0x244>)
 800a640:	429d      	cmp	r5, r3
 800a642:	d101      	bne.n	800a648 <_vfiprintf_r+0x60>
 800a644:	68b5      	ldr	r5, [r6, #8]
 800a646:	e7df      	b.n	800a608 <_vfiprintf_r+0x20>
 800a648:	4b79      	ldr	r3, [pc, #484]	; (800a830 <_vfiprintf_r+0x248>)
 800a64a:	429d      	cmp	r5, r3
 800a64c:	bf08      	it	eq
 800a64e:	68f5      	ldreq	r5, [r6, #12]
 800a650:	e7da      	b.n	800a608 <_vfiprintf_r+0x20>
 800a652:	89ab      	ldrh	r3, [r5, #12]
 800a654:	0598      	lsls	r0, r3, #22
 800a656:	d4ed      	bmi.n	800a634 <_vfiprintf_r+0x4c>
 800a658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a65a:	f000 fb76 	bl	800ad4a <__retarget_lock_release_recursive>
 800a65e:	e7e9      	b.n	800a634 <_vfiprintf_r+0x4c>
 800a660:	2300      	movs	r3, #0
 800a662:	9309      	str	r3, [sp, #36]	; 0x24
 800a664:	2320      	movs	r3, #32
 800a666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a66a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a66e:	2330      	movs	r3, #48	; 0x30
 800a670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a834 <_vfiprintf_r+0x24c>
 800a674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a678:	f04f 0901 	mov.w	r9, #1
 800a67c:	4623      	mov	r3, r4
 800a67e:	469a      	mov	sl, r3
 800a680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a684:	b10a      	cbz	r2, 800a68a <_vfiprintf_r+0xa2>
 800a686:	2a25      	cmp	r2, #37	; 0x25
 800a688:	d1f9      	bne.n	800a67e <_vfiprintf_r+0x96>
 800a68a:	ebba 0b04 	subs.w	fp, sl, r4
 800a68e:	d00b      	beq.n	800a6a8 <_vfiprintf_r+0xc0>
 800a690:	465b      	mov	r3, fp
 800a692:	4622      	mov	r2, r4
 800a694:	4629      	mov	r1, r5
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff ff94 	bl	800a5c4 <__sfputs_r>
 800a69c:	3001      	adds	r0, #1
 800a69e:	f000 80aa 	beq.w	800a7f6 <_vfiprintf_r+0x20e>
 800a6a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a4:	445a      	add	r2, fp
 800a6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80a2 	beq.w	800a7f6 <_vfiprintf_r+0x20e>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6bc:	f10a 0a01 	add.w	sl, sl, #1
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	9307      	str	r3, [sp, #28]
 800a6c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ca:	4654      	mov	r4, sl
 800a6cc:	2205      	movs	r2, #5
 800a6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d2:	4858      	ldr	r0, [pc, #352]	; (800a834 <_vfiprintf_r+0x24c>)
 800a6d4:	f7f5 fd8c 	bl	80001f0 <memchr>
 800a6d8:	9a04      	ldr	r2, [sp, #16]
 800a6da:	b9d8      	cbnz	r0, 800a714 <_vfiprintf_r+0x12c>
 800a6dc:	06d1      	lsls	r1, r2, #27
 800a6de:	bf44      	itt	mi
 800a6e0:	2320      	movmi	r3, #32
 800a6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e6:	0713      	lsls	r3, r2, #28
 800a6e8:	bf44      	itt	mi
 800a6ea:	232b      	movmi	r3, #43	; 0x2b
 800a6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f6:	d015      	beq.n	800a724 <_vfiprintf_r+0x13c>
 800a6f8:	9a07      	ldr	r2, [sp, #28]
 800a6fa:	4654      	mov	r4, sl
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f04f 0c0a 	mov.w	ip, #10
 800a702:	4621      	mov	r1, r4
 800a704:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a708:	3b30      	subs	r3, #48	; 0x30
 800a70a:	2b09      	cmp	r3, #9
 800a70c:	d94e      	bls.n	800a7ac <_vfiprintf_r+0x1c4>
 800a70e:	b1b0      	cbz	r0, 800a73e <_vfiprintf_r+0x156>
 800a710:	9207      	str	r2, [sp, #28]
 800a712:	e014      	b.n	800a73e <_vfiprintf_r+0x156>
 800a714:	eba0 0308 	sub.w	r3, r0, r8
 800a718:	fa09 f303 	lsl.w	r3, r9, r3
 800a71c:	4313      	orrs	r3, r2
 800a71e:	9304      	str	r3, [sp, #16]
 800a720:	46a2      	mov	sl, r4
 800a722:	e7d2      	b.n	800a6ca <_vfiprintf_r+0xe2>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	1d19      	adds	r1, r3, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	9103      	str	r1, [sp, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfbb      	ittet	lt
 800a730:	425b      	neglt	r3, r3
 800a732:	f042 0202 	orrlt.w	r2, r2, #2
 800a736:	9307      	strge	r3, [sp, #28]
 800a738:	9307      	strlt	r3, [sp, #28]
 800a73a:	bfb8      	it	lt
 800a73c:	9204      	strlt	r2, [sp, #16]
 800a73e:	7823      	ldrb	r3, [r4, #0]
 800a740:	2b2e      	cmp	r3, #46	; 0x2e
 800a742:	d10c      	bne.n	800a75e <_vfiprintf_r+0x176>
 800a744:	7863      	ldrb	r3, [r4, #1]
 800a746:	2b2a      	cmp	r3, #42	; 0x2a
 800a748:	d135      	bne.n	800a7b6 <_vfiprintf_r+0x1ce>
 800a74a:	9b03      	ldr	r3, [sp, #12]
 800a74c:	1d1a      	adds	r2, r3, #4
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	9203      	str	r2, [sp, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	bfb8      	it	lt
 800a756:	f04f 33ff 	movlt.w	r3, #4294967295
 800a75a:	3402      	adds	r4, #2
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a844 <_vfiprintf_r+0x25c>
 800a762:	7821      	ldrb	r1, [r4, #0]
 800a764:	2203      	movs	r2, #3
 800a766:	4650      	mov	r0, sl
 800a768:	f7f5 fd42 	bl	80001f0 <memchr>
 800a76c:	b140      	cbz	r0, 800a780 <_vfiprintf_r+0x198>
 800a76e:	2340      	movs	r3, #64	; 0x40
 800a770:	eba0 000a 	sub.w	r0, r0, sl
 800a774:	fa03 f000 	lsl.w	r0, r3, r0
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	4303      	orrs	r3, r0
 800a77c:	3401      	adds	r4, #1
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a784:	482c      	ldr	r0, [pc, #176]	; (800a838 <_vfiprintf_r+0x250>)
 800a786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a78a:	2206      	movs	r2, #6
 800a78c:	f7f5 fd30 	bl	80001f0 <memchr>
 800a790:	2800      	cmp	r0, #0
 800a792:	d03f      	beq.n	800a814 <_vfiprintf_r+0x22c>
 800a794:	4b29      	ldr	r3, [pc, #164]	; (800a83c <_vfiprintf_r+0x254>)
 800a796:	bb1b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x1f8>
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	3307      	adds	r3, #7
 800a79c:	f023 0307 	bic.w	r3, r3, #7
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	9303      	str	r3, [sp, #12]
 800a7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a6:	443b      	add	r3, r7
 800a7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7aa:	e767      	b.n	800a67c <_vfiprintf_r+0x94>
 800a7ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	e7a5      	b.n	800a702 <_vfiprintf_r+0x11a>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	3401      	adds	r4, #1
 800a7ba:	9305      	str	r3, [sp, #20]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	f04f 0c0a 	mov.w	ip, #10
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c8:	3a30      	subs	r2, #48	; 0x30
 800a7ca:	2a09      	cmp	r2, #9
 800a7cc:	d903      	bls.n	800a7d6 <_vfiprintf_r+0x1ee>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0c5      	beq.n	800a75e <_vfiprintf_r+0x176>
 800a7d2:	9105      	str	r1, [sp, #20]
 800a7d4:	e7c3      	b.n	800a75e <_vfiprintf_r+0x176>
 800a7d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7da:	4604      	mov	r4, r0
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e7f0      	b.n	800a7c2 <_vfiprintf_r+0x1da>
 800a7e0:	ab03      	add	r3, sp, #12
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	4b16      	ldr	r3, [pc, #88]	; (800a840 <_vfiprintf_r+0x258>)
 800a7e8:	a904      	add	r1, sp, #16
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f7fc f83a 	bl	8006864 <_printf_float>
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	1c78      	adds	r0, r7, #1
 800a7f4:	d1d6      	bne.n	800a7a4 <_vfiprintf_r+0x1bc>
 800a7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f8:	07d9      	lsls	r1, r3, #31
 800a7fa:	d405      	bmi.n	800a808 <_vfiprintf_r+0x220>
 800a7fc:	89ab      	ldrh	r3, [r5, #12]
 800a7fe:	059a      	lsls	r2, r3, #22
 800a800:	d402      	bmi.n	800a808 <_vfiprintf_r+0x220>
 800a802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a804:	f000 faa1 	bl	800ad4a <__retarget_lock_release_recursive>
 800a808:	89ab      	ldrh	r3, [r5, #12]
 800a80a:	065b      	lsls	r3, r3, #25
 800a80c:	f53f af12 	bmi.w	800a634 <_vfiprintf_r+0x4c>
 800a810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a812:	e711      	b.n	800a638 <_vfiprintf_r+0x50>
 800a814:	ab03      	add	r3, sp, #12
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	462a      	mov	r2, r5
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <_vfiprintf_r+0x258>)
 800a81c:	a904      	add	r1, sp, #16
 800a81e:	4630      	mov	r0, r6
 800a820:	f7fc fac4 	bl	8006dac <_printf_i>
 800a824:	e7e4      	b.n	800a7f0 <_vfiprintf_r+0x208>
 800a826:	bf00      	nop
 800a828:	0800c344 	.word	0x0800c344
 800a82c:	0800c364 	.word	0x0800c364
 800a830:	0800c324 	.word	0x0800c324
 800a834:	0800c2d4 	.word	0x0800c2d4
 800a838:	0800c2de 	.word	0x0800c2de
 800a83c:	08006865 	.word	0x08006865
 800a840:	0800a5c5 	.word	0x0800a5c5
 800a844:	0800c2da 	.word	0x0800c2da

0800a848 <__swbuf_r>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	460e      	mov	r6, r1
 800a84c:	4614      	mov	r4, r2
 800a84e:	4605      	mov	r5, r0
 800a850:	b118      	cbz	r0, 800a85a <__swbuf_r+0x12>
 800a852:	6983      	ldr	r3, [r0, #24]
 800a854:	b90b      	cbnz	r3, 800a85a <__swbuf_r+0x12>
 800a856:	f000 f9d9 	bl	800ac0c <__sinit>
 800a85a:	4b21      	ldr	r3, [pc, #132]	; (800a8e0 <__swbuf_r+0x98>)
 800a85c:	429c      	cmp	r4, r3
 800a85e:	d12b      	bne.n	800a8b8 <__swbuf_r+0x70>
 800a860:	686c      	ldr	r4, [r5, #4]
 800a862:	69a3      	ldr	r3, [r4, #24]
 800a864:	60a3      	str	r3, [r4, #8]
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	071a      	lsls	r2, r3, #28
 800a86a:	d52f      	bpl.n	800a8cc <__swbuf_r+0x84>
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	b36b      	cbz	r3, 800a8cc <__swbuf_r+0x84>
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1ac0      	subs	r0, r0, r3
 800a876:	6963      	ldr	r3, [r4, #20]
 800a878:	b2f6      	uxtb	r6, r6
 800a87a:	4283      	cmp	r3, r0
 800a87c:	4637      	mov	r7, r6
 800a87e:	dc04      	bgt.n	800a88a <__swbuf_r+0x42>
 800a880:	4621      	mov	r1, r4
 800a882:	4628      	mov	r0, r5
 800a884:	f000 f92e 	bl	800aae4 <_fflush_r>
 800a888:	bb30      	cbnz	r0, 800a8d8 <__swbuf_r+0x90>
 800a88a:	68a3      	ldr	r3, [r4, #8]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	60a3      	str	r3, [r4, #8]
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	1c5a      	adds	r2, r3, #1
 800a894:	6022      	str	r2, [r4, #0]
 800a896:	701e      	strb	r6, [r3, #0]
 800a898:	6963      	ldr	r3, [r4, #20]
 800a89a:	3001      	adds	r0, #1
 800a89c:	4283      	cmp	r3, r0
 800a89e:	d004      	beq.n	800a8aa <__swbuf_r+0x62>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	07db      	lsls	r3, r3, #31
 800a8a4:	d506      	bpl.n	800a8b4 <__swbuf_r+0x6c>
 800a8a6:	2e0a      	cmp	r6, #10
 800a8a8:	d104      	bne.n	800a8b4 <__swbuf_r+0x6c>
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f000 f919 	bl	800aae4 <_fflush_r>
 800a8b2:	b988      	cbnz	r0, 800a8d8 <__swbuf_r+0x90>
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <__swbuf_r+0x9c>)
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	d101      	bne.n	800a8c2 <__swbuf_r+0x7a>
 800a8be:	68ac      	ldr	r4, [r5, #8]
 800a8c0:	e7cf      	b.n	800a862 <__swbuf_r+0x1a>
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <__swbuf_r+0xa0>)
 800a8c4:	429c      	cmp	r4, r3
 800a8c6:	bf08      	it	eq
 800a8c8:	68ec      	ldreq	r4, [r5, #12]
 800a8ca:	e7ca      	b.n	800a862 <__swbuf_r+0x1a>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f000 f80c 	bl	800a8ec <__swsetup_r>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d0cb      	beq.n	800a870 <__swbuf_r+0x28>
 800a8d8:	f04f 37ff 	mov.w	r7, #4294967295
 800a8dc:	e7ea      	b.n	800a8b4 <__swbuf_r+0x6c>
 800a8de:	bf00      	nop
 800a8e0:	0800c344 	.word	0x0800c344
 800a8e4:	0800c364 	.word	0x0800c364
 800a8e8:	0800c324 	.word	0x0800c324

0800a8ec <__swsetup_r>:
 800a8ec:	4b32      	ldr	r3, [pc, #200]	; (800a9b8 <__swsetup_r+0xcc>)
 800a8ee:	b570      	push	{r4, r5, r6, lr}
 800a8f0:	681d      	ldr	r5, [r3, #0]
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	b125      	cbz	r5, 800a902 <__swsetup_r+0x16>
 800a8f8:	69ab      	ldr	r3, [r5, #24]
 800a8fa:	b913      	cbnz	r3, 800a902 <__swsetup_r+0x16>
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 f985 	bl	800ac0c <__sinit>
 800a902:	4b2e      	ldr	r3, [pc, #184]	; (800a9bc <__swsetup_r+0xd0>)
 800a904:	429c      	cmp	r4, r3
 800a906:	d10f      	bne.n	800a928 <__swsetup_r+0x3c>
 800a908:	686c      	ldr	r4, [r5, #4]
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a910:	0719      	lsls	r1, r3, #28
 800a912:	d42c      	bmi.n	800a96e <__swsetup_r+0x82>
 800a914:	06dd      	lsls	r5, r3, #27
 800a916:	d411      	bmi.n	800a93c <__swsetup_r+0x50>
 800a918:	2309      	movs	r3, #9
 800a91a:	6033      	str	r3, [r6, #0]
 800a91c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	f04f 30ff 	mov.w	r0, #4294967295
 800a926:	e03e      	b.n	800a9a6 <__swsetup_r+0xba>
 800a928:	4b25      	ldr	r3, [pc, #148]	; (800a9c0 <__swsetup_r+0xd4>)
 800a92a:	429c      	cmp	r4, r3
 800a92c:	d101      	bne.n	800a932 <__swsetup_r+0x46>
 800a92e:	68ac      	ldr	r4, [r5, #8]
 800a930:	e7eb      	b.n	800a90a <__swsetup_r+0x1e>
 800a932:	4b24      	ldr	r3, [pc, #144]	; (800a9c4 <__swsetup_r+0xd8>)
 800a934:	429c      	cmp	r4, r3
 800a936:	bf08      	it	eq
 800a938:	68ec      	ldreq	r4, [r5, #12]
 800a93a:	e7e6      	b.n	800a90a <__swsetup_r+0x1e>
 800a93c:	0758      	lsls	r0, r3, #29
 800a93e:	d512      	bpl.n	800a966 <__swsetup_r+0x7a>
 800a940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a942:	b141      	cbz	r1, 800a956 <__swsetup_r+0x6a>
 800a944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a948:	4299      	cmp	r1, r3
 800a94a:	d002      	beq.n	800a952 <__swsetup_r+0x66>
 800a94c:	4630      	mov	r0, r6
 800a94e:	f7ff fb25 	bl	8009f9c <_free_r>
 800a952:	2300      	movs	r3, #0
 800a954:	6363      	str	r3, [r4, #52]	; 0x34
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a95c:	81a3      	strh	r3, [r4, #12]
 800a95e:	2300      	movs	r3, #0
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f043 0308 	orr.w	r3, r3, #8
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	b94b      	cbnz	r3, 800a986 <__swsetup_r+0x9a>
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a97c:	d003      	beq.n	800a986 <__swsetup_r+0x9a>
 800a97e:	4621      	mov	r1, r4
 800a980:	4630      	mov	r0, r6
 800a982:	f000 fa09 	bl	800ad98 <__smakebuf_r>
 800a986:	89a0      	ldrh	r0, [r4, #12]
 800a988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a98c:	f010 0301 	ands.w	r3, r0, #1
 800a990:	d00a      	beq.n	800a9a8 <__swsetup_r+0xbc>
 800a992:	2300      	movs	r3, #0
 800a994:	60a3      	str	r3, [r4, #8]
 800a996:	6963      	ldr	r3, [r4, #20]
 800a998:	425b      	negs	r3, r3
 800a99a:	61a3      	str	r3, [r4, #24]
 800a99c:	6923      	ldr	r3, [r4, #16]
 800a99e:	b943      	cbnz	r3, 800a9b2 <__swsetup_r+0xc6>
 800a9a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9a4:	d1ba      	bne.n	800a91c <__swsetup_r+0x30>
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	0781      	lsls	r1, r0, #30
 800a9aa:	bf58      	it	pl
 800a9ac:	6963      	ldrpl	r3, [r4, #20]
 800a9ae:	60a3      	str	r3, [r4, #8]
 800a9b0:	e7f4      	b.n	800a99c <__swsetup_r+0xb0>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e7f7      	b.n	800a9a6 <__swsetup_r+0xba>
 800a9b6:	bf00      	nop
 800a9b8:	20000014 	.word	0x20000014
 800a9bc:	0800c344 	.word	0x0800c344
 800a9c0:	0800c364 	.word	0x0800c364
 800a9c4:	0800c324 	.word	0x0800c324

0800a9c8 <abort>:
 800a9c8:	b508      	push	{r3, lr}
 800a9ca:	2006      	movs	r0, #6
 800a9cc:	f000 fa54 	bl	800ae78 <raise>
 800a9d0:	2001      	movs	r0, #1
 800a9d2:	f7f8 fc43 	bl	800325c <_exit>
	...

0800a9d8 <__sflush_r>:
 800a9d8:	898a      	ldrh	r2, [r1, #12]
 800a9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9de:	4605      	mov	r5, r0
 800a9e0:	0710      	lsls	r0, r2, #28
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	d458      	bmi.n	800aa98 <__sflush_r+0xc0>
 800a9e6:	684b      	ldr	r3, [r1, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dc05      	bgt.n	800a9f8 <__sflush_r+0x20>
 800a9ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dc02      	bgt.n	800a9f8 <__sflush_r+0x20>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d0f9      	beq.n	800a9f2 <__sflush_r+0x1a>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa04:	682f      	ldr	r7, [r5, #0]
 800aa06:	602b      	str	r3, [r5, #0]
 800aa08:	d032      	beq.n	800aa70 <__sflush_r+0x98>
 800aa0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	075a      	lsls	r2, r3, #29
 800aa10:	d505      	bpl.n	800aa1e <__sflush_r+0x46>
 800aa12:	6863      	ldr	r3, [r4, #4]
 800aa14:	1ac0      	subs	r0, r0, r3
 800aa16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa18:	b10b      	cbz	r3, 800aa1e <__sflush_r+0x46>
 800aa1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa1c:	1ac0      	subs	r0, r0, r3
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4602      	mov	r2, r0
 800aa22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa24:	6a21      	ldr	r1, [r4, #32]
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b0      	blx	r6
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	d106      	bne.n	800aa3e <__sflush_r+0x66>
 800aa30:	6829      	ldr	r1, [r5, #0]
 800aa32:	291d      	cmp	r1, #29
 800aa34:	d82c      	bhi.n	800aa90 <__sflush_r+0xb8>
 800aa36:	4a2a      	ldr	r2, [pc, #168]	; (800aae0 <__sflush_r+0x108>)
 800aa38:	40ca      	lsrs	r2, r1
 800aa3a:	07d6      	lsls	r6, r2, #31
 800aa3c:	d528      	bpl.n	800aa90 <__sflush_r+0xb8>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	6062      	str	r2, [r4, #4]
 800aa42:	04d9      	lsls	r1, r3, #19
 800aa44:	6922      	ldr	r2, [r4, #16]
 800aa46:	6022      	str	r2, [r4, #0]
 800aa48:	d504      	bpl.n	800aa54 <__sflush_r+0x7c>
 800aa4a:	1c42      	adds	r2, r0, #1
 800aa4c:	d101      	bne.n	800aa52 <__sflush_r+0x7a>
 800aa4e:	682b      	ldr	r3, [r5, #0]
 800aa50:	b903      	cbnz	r3, 800aa54 <__sflush_r+0x7c>
 800aa52:	6560      	str	r0, [r4, #84]	; 0x54
 800aa54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa56:	602f      	str	r7, [r5, #0]
 800aa58:	2900      	cmp	r1, #0
 800aa5a:	d0ca      	beq.n	800a9f2 <__sflush_r+0x1a>
 800aa5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa60:	4299      	cmp	r1, r3
 800aa62:	d002      	beq.n	800aa6a <__sflush_r+0x92>
 800aa64:	4628      	mov	r0, r5
 800aa66:	f7ff fa99 	bl	8009f9c <_free_r>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa6e:	e7c1      	b.n	800a9f4 <__sflush_r+0x1c>
 800aa70:	6a21      	ldr	r1, [r4, #32]
 800aa72:	2301      	movs	r3, #1
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b0      	blx	r6
 800aa78:	1c41      	adds	r1, r0, #1
 800aa7a:	d1c7      	bne.n	800aa0c <__sflush_r+0x34>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0c4      	beq.n	800aa0c <__sflush_r+0x34>
 800aa82:	2b1d      	cmp	r3, #29
 800aa84:	d001      	beq.n	800aa8a <__sflush_r+0xb2>
 800aa86:	2b16      	cmp	r3, #22
 800aa88:	d101      	bne.n	800aa8e <__sflush_r+0xb6>
 800aa8a:	602f      	str	r7, [r5, #0]
 800aa8c:	e7b1      	b.n	800a9f2 <__sflush_r+0x1a>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	e7ad      	b.n	800a9f4 <__sflush_r+0x1c>
 800aa98:	690f      	ldr	r7, [r1, #16]
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	d0a9      	beq.n	800a9f2 <__sflush_r+0x1a>
 800aa9e:	0793      	lsls	r3, r2, #30
 800aaa0:	680e      	ldr	r6, [r1, #0]
 800aaa2:	bf08      	it	eq
 800aaa4:	694b      	ldreq	r3, [r1, #20]
 800aaa6:	600f      	str	r7, [r1, #0]
 800aaa8:	bf18      	it	ne
 800aaaa:	2300      	movne	r3, #0
 800aaac:	eba6 0807 	sub.w	r8, r6, r7
 800aab0:	608b      	str	r3, [r1, #8]
 800aab2:	f1b8 0f00 	cmp.w	r8, #0
 800aab6:	dd9c      	ble.n	800a9f2 <__sflush_r+0x1a>
 800aab8:	6a21      	ldr	r1, [r4, #32]
 800aaba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aabc:	4643      	mov	r3, r8
 800aabe:	463a      	mov	r2, r7
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b0      	blx	r6
 800aac4:	2800      	cmp	r0, #0
 800aac6:	dc06      	bgt.n	800aad6 <__sflush_r+0xfe>
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aace:	81a3      	strh	r3, [r4, #12]
 800aad0:	f04f 30ff 	mov.w	r0, #4294967295
 800aad4:	e78e      	b.n	800a9f4 <__sflush_r+0x1c>
 800aad6:	4407      	add	r7, r0
 800aad8:	eba8 0800 	sub.w	r8, r8, r0
 800aadc:	e7e9      	b.n	800aab2 <__sflush_r+0xda>
 800aade:	bf00      	nop
 800aae0:	20400001 	.word	0x20400001

0800aae4 <_fflush_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	690b      	ldr	r3, [r1, #16]
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	b913      	cbnz	r3, 800aaf4 <_fflush_r+0x10>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	b118      	cbz	r0, 800aafe <_fflush_r+0x1a>
 800aaf6:	6983      	ldr	r3, [r0, #24]
 800aaf8:	b90b      	cbnz	r3, 800aafe <_fflush_r+0x1a>
 800aafa:	f000 f887 	bl	800ac0c <__sinit>
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <_fflush_r+0x6c>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	d11b      	bne.n	800ab3c <_fflush_r+0x58>
 800ab04:	686c      	ldr	r4, [r5, #4]
 800ab06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0ef      	beq.n	800aaee <_fflush_r+0xa>
 800ab0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab10:	07d0      	lsls	r0, r2, #31
 800ab12:	d404      	bmi.n	800ab1e <_fflush_r+0x3a>
 800ab14:	0599      	lsls	r1, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_fflush_r+0x3a>
 800ab18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1a:	f000 f915 	bl	800ad48 <__retarget_lock_acquire_recursive>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4621      	mov	r1, r4
 800ab22:	f7ff ff59 	bl	800a9d8 <__sflush_r>
 800ab26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab28:	07da      	lsls	r2, r3, #31
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	d4e0      	bmi.n	800aaf0 <_fflush_r+0xc>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	059b      	lsls	r3, r3, #22
 800ab32:	d4dd      	bmi.n	800aaf0 <_fflush_r+0xc>
 800ab34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab36:	f000 f908 	bl	800ad4a <__retarget_lock_release_recursive>
 800ab3a:	e7d9      	b.n	800aaf0 <_fflush_r+0xc>
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <_fflush_r+0x70>)
 800ab3e:	429c      	cmp	r4, r3
 800ab40:	d101      	bne.n	800ab46 <_fflush_r+0x62>
 800ab42:	68ac      	ldr	r4, [r5, #8]
 800ab44:	e7df      	b.n	800ab06 <_fflush_r+0x22>
 800ab46:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <_fflush_r+0x74>)
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	bf08      	it	eq
 800ab4c:	68ec      	ldreq	r4, [r5, #12]
 800ab4e:	e7da      	b.n	800ab06 <_fflush_r+0x22>
 800ab50:	0800c344 	.word	0x0800c344
 800ab54:	0800c364 	.word	0x0800c364
 800ab58:	0800c324 	.word	0x0800c324

0800ab5c <std>:
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	4604      	mov	r4, r0
 800ab62:	e9c0 3300 	strd	r3, r3, [r0]
 800ab66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab6a:	6083      	str	r3, [r0, #8]
 800ab6c:	8181      	strh	r1, [r0, #12]
 800ab6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab70:	81c2      	strh	r2, [r0, #14]
 800ab72:	6183      	str	r3, [r0, #24]
 800ab74:	4619      	mov	r1, r3
 800ab76:	2208      	movs	r2, #8
 800ab78:	305c      	adds	r0, #92	; 0x5c
 800ab7a:	f7fb fdcb 	bl	8006714 <memset>
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <std+0x38>)
 800ab80:	6263      	str	r3, [r4, #36]	; 0x24
 800ab82:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <std+0x3c>)
 800ab84:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab86:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <std+0x40>)
 800ab88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <std+0x44>)
 800ab8c:	6224      	str	r4, [r4, #32]
 800ab8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop
 800ab94:	0800aeb1 	.word	0x0800aeb1
 800ab98:	0800aed3 	.word	0x0800aed3
 800ab9c:	0800af0b 	.word	0x0800af0b
 800aba0:	0800af2f 	.word	0x0800af2f

0800aba4 <_cleanup_r>:
 800aba4:	4901      	ldr	r1, [pc, #4]	; (800abac <_cleanup_r+0x8>)
 800aba6:	f000 b8af 	b.w	800ad08 <_fwalk_reent>
 800abaa:	bf00      	nop
 800abac:	0800aae5 	.word	0x0800aae5

0800abb0 <__sfmoreglue>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	2268      	movs	r2, #104	; 0x68
 800abb4:	1e4d      	subs	r5, r1, #1
 800abb6:	4355      	muls	r5, r2
 800abb8:	460e      	mov	r6, r1
 800abba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abbe:	f7ff fa59 	bl	800a074 <_malloc_r>
 800abc2:	4604      	mov	r4, r0
 800abc4:	b140      	cbz	r0, 800abd8 <__sfmoreglue+0x28>
 800abc6:	2100      	movs	r1, #0
 800abc8:	e9c0 1600 	strd	r1, r6, [r0]
 800abcc:	300c      	adds	r0, #12
 800abce:	60a0      	str	r0, [r4, #8]
 800abd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abd4:	f7fb fd9e 	bl	8006714 <memset>
 800abd8:	4620      	mov	r0, r4
 800abda:	bd70      	pop	{r4, r5, r6, pc}

0800abdc <__sfp_lock_acquire>:
 800abdc:	4801      	ldr	r0, [pc, #4]	; (800abe4 <__sfp_lock_acquire+0x8>)
 800abde:	f000 b8b3 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800abe2:	bf00      	nop
 800abe4:	200004c5 	.word	0x200004c5

0800abe8 <__sfp_lock_release>:
 800abe8:	4801      	ldr	r0, [pc, #4]	; (800abf0 <__sfp_lock_release+0x8>)
 800abea:	f000 b8ae 	b.w	800ad4a <__retarget_lock_release_recursive>
 800abee:	bf00      	nop
 800abf0:	200004c5 	.word	0x200004c5

0800abf4 <__sinit_lock_acquire>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__sinit_lock_acquire+0x8>)
 800abf6:	f000 b8a7 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800abfa:	bf00      	nop
 800abfc:	200004c6 	.word	0x200004c6

0800ac00 <__sinit_lock_release>:
 800ac00:	4801      	ldr	r0, [pc, #4]	; (800ac08 <__sinit_lock_release+0x8>)
 800ac02:	f000 b8a2 	b.w	800ad4a <__retarget_lock_release_recursive>
 800ac06:	bf00      	nop
 800ac08:	200004c6 	.word	0x200004c6

0800ac0c <__sinit>:
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	4604      	mov	r4, r0
 800ac10:	f7ff fff0 	bl	800abf4 <__sinit_lock_acquire>
 800ac14:	69a3      	ldr	r3, [r4, #24]
 800ac16:	b11b      	cbz	r3, 800ac20 <__sinit+0x14>
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f7ff bff0 	b.w	800ac00 <__sinit_lock_release>
 800ac20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac24:	6523      	str	r3, [r4, #80]	; 0x50
 800ac26:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <__sinit+0x68>)
 800ac28:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <__sinit+0x6c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	bf04      	itt	eq
 800ac32:	2301      	moveq	r3, #1
 800ac34:	61a3      	streq	r3, [r4, #24]
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 f820 	bl	800ac7c <__sfp>
 800ac3c:	6060      	str	r0, [r4, #4]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 f81c 	bl	800ac7c <__sfp>
 800ac44:	60a0      	str	r0, [r4, #8]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f818 	bl	800ac7c <__sfp>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	60e0      	str	r0, [r4, #12]
 800ac50:	2104      	movs	r1, #4
 800ac52:	6860      	ldr	r0, [r4, #4]
 800ac54:	f7ff ff82 	bl	800ab5c <std>
 800ac58:	68a0      	ldr	r0, [r4, #8]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2109      	movs	r1, #9
 800ac5e:	f7ff ff7d 	bl	800ab5c <std>
 800ac62:	68e0      	ldr	r0, [r4, #12]
 800ac64:	2202      	movs	r2, #2
 800ac66:	2112      	movs	r1, #18
 800ac68:	f7ff ff78 	bl	800ab5c <std>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	61a3      	str	r3, [r4, #24]
 800ac70:	e7d2      	b.n	800ac18 <__sinit+0xc>
 800ac72:	bf00      	nop
 800ac74:	0800bee0 	.word	0x0800bee0
 800ac78:	0800aba5 	.word	0x0800aba5

0800ac7c <__sfp>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	4607      	mov	r7, r0
 800ac80:	f7ff ffac 	bl	800abdc <__sfp_lock_acquire>
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <__sfp+0x84>)
 800ac86:	681e      	ldr	r6, [r3, #0]
 800ac88:	69b3      	ldr	r3, [r6, #24]
 800ac8a:	b913      	cbnz	r3, 800ac92 <__sfp+0x16>
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff ffbd 	bl	800ac0c <__sinit>
 800ac92:	3648      	adds	r6, #72	; 0x48
 800ac94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	d503      	bpl.n	800aca4 <__sfp+0x28>
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	b30b      	cbz	r3, 800ace4 <__sfp+0x68>
 800aca0:	6836      	ldr	r6, [r6, #0]
 800aca2:	e7f7      	b.n	800ac94 <__sfp+0x18>
 800aca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aca8:	b9d5      	cbnz	r5, 800ace0 <__sfp+0x64>
 800acaa:	4b16      	ldr	r3, [pc, #88]	; (800ad04 <__sfp+0x88>)
 800acac:	60e3      	str	r3, [r4, #12]
 800acae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acb2:	6665      	str	r5, [r4, #100]	; 0x64
 800acb4:	f000 f847 	bl	800ad46 <__retarget_lock_init_recursive>
 800acb8:	f7ff ff96 	bl	800abe8 <__sfp_lock_release>
 800acbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acc4:	6025      	str	r5, [r4, #0]
 800acc6:	61a5      	str	r5, [r4, #24]
 800acc8:	2208      	movs	r2, #8
 800acca:	4629      	mov	r1, r5
 800accc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acd0:	f7fb fd20 	bl	8006714 <memset>
 800acd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acdc:	4620      	mov	r0, r4
 800acde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace0:	3468      	adds	r4, #104	; 0x68
 800ace2:	e7d9      	b.n	800ac98 <__sfp+0x1c>
 800ace4:	2104      	movs	r1, #4
 800ace6:	4638      	mov	r0, r7
 800ace8:	f7ff ff62 	bl	800abb0 <__sfmoreglue>
 800acec:	4604      	mov	r4, r0
 800acee:	6030      	str	r0, [r6, #0]
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1d5      	bne.n	800aca0 <__sfp+0x24>
 800acf4:	f7ff ff78 	bl	800abe8 <__sfp_lock_release>
 800acf8:	230c      	movs	r3, #12
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	e7ee      	b.n	800acdc <__sfp+0x60>
 800acfe:	bf00      	nop
 800ad00:	0800bee0 	.word	0x0800bee0
 800ad04:	ffff0001 	.word	0xffff0001

0800ad08 <_fwalk_reent>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	4688      	mov	r8, r1
 800ad10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad14:	2700      	movs	r7, #0
 800ad16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad1e:	d505      	bpl.n	800ad2c <_fwalk_reent+0x24>
 800ad20:	6824      	ldr	r4, [r4, #0]
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	d1f7      	bne.n	800ad16 <_fwalk_reent+0xe>
 800ad26:	4638      	mov	r0, r7
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	89ab      	ldrh	r3, [r5, #12]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d907      	bls.n	800ad42 <_fwalk_reent+0x3a>
 800ad32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad36:	3301      	adds	r3, #1
 800ad38:	d003      	beq.n	800ad42 <_fwalk_reent+0x3a>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	47c0      	blx	r8
 800ad40:	4307      	orrs	r7, r0
 800ad42:	3568      	adds	r5, #104	; 0x68
 800ad44:	e7e9      	b.n	800ad1a <_fwalk_reent+0x12>

0800ad46 <__retarget_lock_init_recursive>:
 800ad46:	4770      	bx	lr

0800ad48 <__retarget_lock_acquire_recursive>:
 800ad48:	4770      	bx	lr

0800ad4a <__retarget_lock_release_recursive>:
 800ad4a:	4770      	bx	lr

0800ad4c <__swhatbuf_r>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	460e      	mov	r6, r1
 800ad50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad54:	2900      	cmp	r1, #0
 800ad56:	b096      	sub	sp, #88	; 0x58
 800ad58:	4614      	mov	r4, r2
 800ad5a:	461d      	mov	r5, r3
 800ad5c:	da08      	bge.n	800ad70 <__swhatbuf_r+0x24>
 800ad5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	061a      	lsls	r2, r3, #24
 800ad68:	d410      	bmi.n	800ad8c <__swhatbuf_r+0x40>
 800ad6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6e:	e00e      	b.n	800ad8e <__swhatbuf_r+0x42>
 800ad70:	466a      	mov	r2, sp
 800ad72:	f000 f903 	bl	800af7c <_fstat_r>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	dbf1      	blt.n	800ad5e <__swhatbuf_r+0x12>
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad84:	425a      	negs	r2, r3
 800ad86:	415a      	adcs	r2, r3
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	e7ee      	b.n	800ad6a <__swhatbuf_r+0x1e>
 800ad8c:	2340      	movs	r3, #64	; 0x40
 800ad8e:	2000      	movs	r0, #0
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	b016      	add	sp, #88	; 0x58
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad98 <__smakebuf_r>:
 800ad98:	898b      	ldrh	r3, [r1, #12]
 800ad9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad9c:	079d      	lsls	r5, r3, #30
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460c      	mov	r4, r1
 800ada2:	d507      	bpl.n	800adb4 <__smakebuf_r+0x1c>
 800ada4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	2301      	movs	r3, #1
 800adae:	6163      	str	r3, [r4, #20]
 800adb0:	b002      	add	sp, #8
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
 800adb4:	ab01      	add	r3, sp, #4
 800adb6:	466a      	mov	r2, sp
 800adb8:	f7ff ffc8 	bl	800ad4c <__swhatbuf_r>
 800adbc:	9900      	ldr	r1, [sp, #0]
 800adbe:	4605      	mov	r5, r0
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff f957 	bl	800a074 <_malloc_r>
 800adc6:	b948      	cbnz	r0, 800addc <__smakebuf_r+0x44>
 800adc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adcc:	059a      	lsls	r2, r3, #22
 800adce:	d4ef      	bmi.n	800adb0 <__smakebuf_r+0x18>
 800add0:	f023 0303 	bic.w	r3, r3, #3
 800add4:	f043 0302 	orr.w	r3, r3, #2
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	e7e3      	b.n	800ada4 <__smakebuf_r+0xc>
 800addc:	4b0d      	ldr	r3, [pc, #52]	; (800ae14 <__smakebuf_r+0x7c>)
 800adde:	62b3      	str	r3, [r6, #40]	; 0x28
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	6020      	str	r0, [r4, #0]
 800ade4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade8:	81a3      	strh	r3, [r4, #12]
 800adea:	9b00      	ldr	r3, [sp, #0]
 800adec:	6163      	str	r3, [r4, #20]
 800adee:	9b01      	ldr	r3, [sp, #4]
 800adf0:	6120      	str	r0, [r4, #16]
 800adf2:	b15b      	cbz	r3, 800ae0c <__smakebuf_r+0x74>
 800adf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adf8:	4630      	mov	r0, r6
 800adfa:	f000 f8d1 	bl	800afa0 <_isatty_r>
 800adfe:	b128      	cbz	r0, 800ae0c <__smakebuf_r+0x74>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	f023 0303 	bic.w	r3, r3, #3
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	89a0      	ldrh	r0, [r4, #12]
 800ae0e:	4305      	orrs	r5, r0
 800ae10:	81a5      	strh	r5, [r4, #12]
 800ae12:	e7cd      	b.n	800adb0 <__smakebuf_r+0x18>
 800ae14:	0800aba5 	.word	0x0800aba5

0800ae18 <_malloc_usable_size_r>:
 800ae18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1c:	1f18      	subs	r0, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bfbc      	itt	lt
 800ae22:	580b      	ldrlt	r3, [r1, r0]
 800ae24:	18c0      	addlt	r0, r0, r3
 800ae26:	4770      	bx	lr

0800ae28 <_raise_r>:
 800ae28:	291f      	cmp	r1, #31
 800ae2a:	b538      	push	{r3, r4, r5, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	d904      	bls.n	800ae3c <_raise_r+0x14>
 800ae32:	2316      	movs	r3, #22
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae3e:	b112      	cbz	r2, 800ae46 <_raise_r+0x1e>
 800ae40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae44:	b94b      	cbnz	r3, 800ae5a <_raise_r+0x32>
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f830 	bl	800aeac <_getpid_r>
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4601      	mov	r1, r0
 800ae50:	4620      	mov	r0, r4
 800ae52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae56:	f000 b817 	b.w	800ae88 <_kill_r>
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d00a      	beq.n	800ae74 <_raise_r+0x4c>
 800ae5e:	1c59      	adds	r1, r3, #1
 800ae60:	d103      	bne.n	800ae6a <_raise_r+0x42>
 800ae62:	2316      	movs	r3, #22
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7e7      	b.n	800ae3a <_raise_r+0x12>
 800ae6a:	2400      	movs	r4, #0
 800ae6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae70:	4628      	mov	r0, r5
 800ae72:	4798      	blx	r3
 800ae74:	2000      	movs	r0, #0
 800ae76:	e7e0      	b.n	800ae3a <_raise_r+0x12>

0800ae78 <raise>:
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <raise+0xc>)
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	f7ff bfd3 	b.w	800ae28 <_raise_r>
 800ae82:	bf00      	nop
 800ae84:	20000014 	.word	0x20000014

0800ae88 <_kill_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d07      	ldr	r5, [pc, #28]	; (800aea8 <_kill_r+0x20>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f7f8 f9d1 	bl	800323c <_kill>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d102      	bne.n	800aea4 <_kill_r+0x1c>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	b103      	cbz	r3, 800aea4 <_kill_r+0x1c>
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	bf00      	nop
 800aea8:	200004c0 	.word	0x200004c0

0800aeac <_getpid_r>:
 800aeac:	f7f8 b9be 	b.w	800322c <_getpid>

0800aeb0 <__sread>:
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb8:	f000 f894 	bl	800afe4 <_read_r>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	bfab      	itete	ge
 800aec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aec2:	89a3      	ldrhlt	r3, [r4, #12]
 800aec4:	181b      	addge	r3, r3, r0
 800aec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aeca:	bfac      	ite	ge
 800aecc:	6563      	strge	r3, [r4, #84]	; 0x54
 800aece:	81a3      	strhlt	r3, [r4, #12]
 800aed0:	bd10      	pop	{r4, pc}

0800aed2 <__swrite>:
 800aed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed6:	461f      	mov	r7, r3
 800aed8:	898b      	ldrh	r3, [r1, #12]
 800aeda:	05db      	lsls	r3, r3, #23
 800aedc:	4605      	mov	r5, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	4616      	mov	r6, r2
 800aee2:	d505      	bpl.n	800aef0 <__swrite+0x1e>
 800aee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee8:	2302      	movs	r3, #2
 800aeea:	2200      	movs	r2, #0
 800aeec:	f000 f868 	bl	800afc0 <_lseek_r>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aefa:	81a3      	strh	r3, [r4, #12]
 800aefc:	4632      	mov	r2, r6
 800aefe:	463b      	mov	r3, r7
 800af00:	4628      	mov	r0, r5
 800af02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af06:	f000 b817 	b.w	800af38 <_write_r>

0800af0a <__sseek>:
 800af0a:	b510      	push	{r4, lr}
 800af0c:	460c      	mov	r4, r1
 800af0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af12:	f000 f855 	bl	800afc0 <_lseek_r>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	bf15      	itete	ne
 800af1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800af1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af26:	81a3      	strheq	r3, [r4, #12]
 800af28:	bf18      	it	ne
 800af2a:	81a3      	strhne	r3, [r4, #12]
 800af2c:	bd10      	pop	{r4, pc}

0800af2e <__sclose>:
 800af2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af32:	f000 b813 	b.w	800af5c <_close_r>
	...

0800af38 <_write_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4d07      	ldr	r5, [pc, #28]	; (800af58 <_write_r+0x20>)
 800af3c:	4604      	mov	r4, r0
 800af3e:	4608      	mov	r0, r1
 800af40:	4611      	mov	r1, r2
 800af42:	2200      	movs	r2, #0
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	f7f8 f9af 	bl	80032aa <_write>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_write_r+0x1e>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_write_r+0x1e>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	200004c0 	.word	0x200004c0

0800af5c <_close_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d06      	ldr	r5, [pc, #24]	; (800af78 <_close_r+0x1c>)
 800af60:	2300      	movs	r3, #0
 800af62:	4604      	mov	r4, r0
 800af64:	4608      	mov	r0, r1
 800af66:	602b      	str	r3, [r5, #0]
 800af68:	f7f8 f9bb 	bl	80032e2 <_close>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_close_r+0x1a>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_close_r+0x1a>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	200004c0 	.word	0x200004c0

0800af7c <_fstat_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d07      	ldr	r5, [pc, #28]	; (800af9c <_fstat_r+0x20>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	4611      	mov	r1, r2
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	f7f8 f9b6 	bl	80032fa <_fstat>
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	d102      	bne.n	800af98 <_fstat_r+0x1c>
 800af92:	682b      	ldr	r3, [r5, #0]
 800af94:	b103      	cbz	r3, 800af98 <_fstat_r+0x1c>
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	bf00      	nop
 800af9c:	200004c0 	.word	0x200004c0

0800afa0 <_isatty_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d06      	ldr	r5, [pc, #24]	; (800afbc <_isatty_r+0x1c>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	602b      	str	r3, [r5, #0]
 800afac:	f7f8 f9b5 	bl	800331a <_isatty>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_isatty_r+0x1a>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_isatty_r+0x1a>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	200004c0 	.word	0x200004c0

0800afc0 <_lseek_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	; (800afe0 <_lseek_r+0x20>)
 800afc4:	4604      	mov	r4, r0
 800afc6:	4608      	mov	r0, r1
 800afc8:	4611      	mov	r1, r2
 800afca:	2200      	movs	r2, #0
 800afcc:	602a      	str	r2, [r5, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f7f8 f9ae 	bl	8003330 <_lseek>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_lseek_r+0x1e>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_lseek_r+0x1e>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	200004c0 	.word	0x200004c0

0800afe4 <_read_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	; (800b004 <_read_r+0x20>)
 800afe8:	4604      	mov	r4, r0
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	2200      	movs	r2, #0
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f8 f93c 	bl	8003270 <_read>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_read_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_read_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	200004c0 	.word	0x200004c0

0800b008 <pow>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	ed2d 8b02 	vpush	{d8}
 800b00e:	eeb0 8a40 	vmov.f32	s16, s0
 800b012:	eef0 8a60 	vmov.f32	s17, s1
 800b016:	ec55 4b11 	vmov	r4, r5, d1
 800b01a:	f000 f891 	bl	800b140 <__ieee754_pow>
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	4620      	mov	r0, r4
 800b024:	4629      	mov	r1, r5
 800b026:	ec57 6b10 	vmov	r6, r7, d0
 800b02a:	f7f5 fd87 	bl	8000b3c <__aeabi_dcmpun>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d13b      	bne.n	800b0aa <pow+0xa2>
 800b032:	ec51 0b18 	vmov	r0, r1, d8
 800b036:	2200      	movs	r2, #0
 800b038:	2300      	movs	r3, #0
 800b03a:	f7f5 fd4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b03e:	b1b8      	cbz	r0, 800b070 <pow+0x68>
 800b040:	2200      	movs	r2, #0
 800b042:	2300      	movs	r3, #0
 800b044:	4620      	mov	r0, r4
 800b046:	4629      	mov	r1, r5
 800b048:	f7f5 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d146      	bne.n	800b0de <pow+0xd6>
 800b050:	ec45 4b10 	vmov	d0, r4, r5
 800b054:	f000 fe8d 	bl	800bd72 <finite>
 800b058:	b338      	cbz	r0, 800b0aa <pow+0xa2>
 800b05a:	2200      	movs	r2, #0
 800b05c:	2300      	movs	r3, #0
 800b05e:	4620      	mov	r0, r4
 800b060:	4629      	mov	r1, r5
 800b062:	f7f5 fd43 	bl	8000aec <__aeabi_dcmplt>
 800b066:	b300      	cbz	r0, 800b0aa <pow+0xa2>
 800b068:	f7fb fb2a 	bl	80066c0 <__errno>
 800b06c:	2322      	movs	r3, #34	; 0x22
 800b06e:	e01b      	b.n	800b0a8 <pow+0xa0>
 800b070:	ec47 6b10 	vmov	d0, r6, r7
 800b074:	f000 fe7d 	bl	800bd72 <finite>
 800b078:	b9e0      	cbnz	r0, 800b0b4 <pow+0xac>
 800b07a:	eeb0 0a48 	vmov.f32	s0, s16
 800b07e:	eef0 0a68 	vmov.f32	s1, s17
 800b082:	f000 fe76 	bl	800bd72 <finite>
 800b086:	b1a8      	cbz	r0, 800b0b4 <pow+0xac>
 800b088:	ec45 4b10 	vmov	d0, r4, r5
 800b08c:	f000 fe71 	bl	800bd72 <finite>
 800b090:	b180      	cbz	r0, 800b0b4 <pow+0xac>
 800b092:	4632      	mov	r2, r6
 800b094:	463b      	mov	r3, r7
 800b096:	4630      	mov	r0, r6
 800b098:	4639      	mov	r1, r7
 800b09a:	f7f5 fd4f 	bl	8000b3c <__aeabi_dcmpun>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0e2      	beq.n	800b068 <pow+0x60>
 800b0a2:	f7fb fb0d 	bl	80066c0 <__errno>
 800b0a6:	2321      	movs	r3, #33	; 0x21
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	ecbd 8b02 	vpop	{d8}
 800b0ae:	ec47 6b10 	vmov	d0, r6, r7
 800b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d0f2      	beq.n	800b0aa <pow+0xa2>
 800b0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b0c8:	eef0 0a68 	vmov.f32	s1, s17
 800b0cc:	f000 fe51 	bl	800bd72 <finite>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d0ea      	beq.n	800b0aa <pow+0xa2>
 800b0d4:	ec45 4b10 	vmov	d0, r4, r5
 800b0d8:	f000 fe4b 	bl	800bd72 <finite>
 800b0dc:	e7c3      	b.n	800b066 <pow+0x5e>
 800b0de:	4f01      	ldr	r7, [pc, #4]	; (800b0e4 <pow+0xdc>)
 800b0e0:	2600      	movs	r6, #0
 800b0e2:	e7e2      	b.n	800b0aa <pow+0xa2>
 800b0e4:	3ff00000 	.word	0x3ff00000

0800b0e8 <sqrt>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	ed2d 8b02 	vpush	{d8}
 800b0ee:	ec55 4b10 	vmov	r4, r5, d0
 800b0f2:	f000 fd53 	bl	800bb9c <__ieee754_sqrt>
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	462b      	mov	r3, r5
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	eeb0 8a40 	vmov.f32	s16, s0
 800b102:	eef0 8a60 	vmov.f32	s17, s1
 800b106:	f7f5 fd19 	bl	8000b3c <__aeabi_dcmpun>
 800b10a:	b990      	cbnz	r0, 800b132 <sqrt+0x4a>
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	4620      	mov	r0, r4
 800b112:	4629      	mov	r1, r5
 800b114:	f7f5 fcea 	bl	8000aec <__aeabi_dcmplt>
 800b118:	b158      	cbz	r0, 800b132 <sqrt+0x4a>
 800b11a:	f7fb fad1 	bl	80066c0 <__errno>
 800b11e:	2321      	movs	r3, #33	; 0x21
 800b120:	6003      	str	r3, [r0, #0]
 800b122:	2200      	movs	r2, #0
 800b124:	2300      	movs	r3, #0
 800b126:	4610      	mov	r0, r2
 800b128:	4619      	mov	r1, r3
 800b12a:	f7f5 fb97 	bl	800085c <__aeabi_ddiv>
 800b12e:	ec41 0b18 	vmov	d8, r0, r1
 800b132:	eeb0 0a48 	vmov.f32	s0, s16
 800b136:	eef0 0a68 	vmov.f32	s1, s17
 800b13a:	ecbd 8b02 	vpop	{d8}
 800b13e:	bd38      	pop	{r3, r4, r5, pc}

0800b140 <__ieee754_pow>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	ed2d 8b06 	vpush	{d8-d10}
 800b148:	b089      	sub	sp, #36	; 0x24
 800b14a:	ed8d 1b00 	vstr	d1, [sp]
 800b14e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b152:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b156:	ea58 0102 	orrs.w	r1, r8, r2
 800b15a:	ec57 6b10 	vmov	r6, r7, d0
 800b15e:	d115      	bne.n	800b18c <__ieee754_pow+0x4c>
 800b160:	19b3      	adds	r3, r6, r6
 800b162:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b166:	4152      	adcs	r2, r2
 800b168:	4299      	cmp	r1, r3
 800b16a:	4b89      	ldr	r3, [pc, #548]	; (800b390 <__ieee754_pow+0x250>)
 800b16c:	4193      	sbcs	r3, r2
 800b16e:	f080 84d2 	bcs.w	800bb16 <__ieee754_pow+0x9d6>
 800b172:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b176:	4630      	mov	r0, r6
 800b178:	4639      	mov	r1, r7
 800b17a:	f7f5 f88f 	bl	800029c <__adddf3>
 800b17e:	ec41 0b10 	vmov	d0, r0, r1
 800b182:	b009      	add	sp, #36	; 0x24
 800b184:	ecbd 8b06 	vpop	{d8-d10}
 800b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18c:	4b81      	ldr	r3, [pc, #516]	; (800b394 <__ieee754_pow+0x254>)
 800b18e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b192:	429c      	cmp	r4, r3
 800b194:	ee10 aa10 	vmov	sl, s0
 800b198:	463d      	mov	r5, r7
 800b19a:	dc06      	bgt.n	800b1aa <__ieee754_pow+0x6a>
 800b19c:	d101      	bne.n	800b1a2 <__ieee754_pow+0x62>
 800b19e:	2e00      	cmp	r6, #0
 800b1a0:	d1e7      	bne.n	800b172 <__ieee754_pow+0x32>
 800b1a2:	4598      	cmp	r8, r3
 800b1a4:	dc01      	bgt.n	800b1aa <__ieee754_pow+0x6a>
 800b1a6:	d10f      	bne.n	800b1c8 <__ieee754_pow+0x88>
 800b1a8:	b172      	cbz	r2, 800b1c8 <__ieee754_pow+0x88>
 800b1aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b1ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b1b2:	ea55 050a 	orrs.w	r5, r5, sl
 800b1b6:	d1dc      	bne.n	800b172 <__ieee754_pow+0x32>
 800b1b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1bc:	18db      	adds	r3, r3, r3
 800b1be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b1c2:	4152      	adcs	r2, r2
 800b1c4:	429d      	cmp	r5, r3
 800b1c6:	e7d0      	b.n	800b16a <__ieee754_pow+0x2a>
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	da3b      	bge.n	800b244 <__ieee754_pow+0x104>
 800b1cc:	4b72      	ldr	r3, [pc, #456]	; (800b398 <__ieee754_pow+0x258>)
 800b1ce:	4598      	cmp	r8, r3
 800b1d0:	dc51      	bgt.n	800b276 <__ieee754_pow+0x136>
 800b1d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b1d6:	4598      	cmp	r8, r3
 800b1d8:	f340 84ac 	ble.w	800bb34 <__ieee754_pow+0x9f4>
 800b1dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b1e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b1e4:	2b14      	cmp	r3, #20
 800b1e6:	dd0f      	ble.n	800b208 <__ieee754_pow+0xc8>
 800b1e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b1ec:	fa22 f103 	lsr.w	r1, r2, r3
 800b1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	f040 849d 	bne.w	800bb34 <__ieee754_pow+0x9f4>
 800b1fa:	f001 0101 	and.w	r1, r1, #1
 800b1fe:	f1c1 0302 	rsb	r3, r1, #2
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	b182      	cbz	r2, 800b228 <__ieee754_pow+0xe8>
 800b206:	e05f      	b.n	800b2c8 <__ieee754_pow+0x188>
 800b208:	2a00      	cmp	r2, #0
 800b20a:	d15b      	bne.n	800b2c4 <__ieee754_pow+0x184>
 800b20c:	f1c3 0314 	rsb	r3, r3, #20
 800b210:	fa48 f103 	asr.w	r1, r8, r3
 800b214:	fa01 f303 	lsl.w	r3, r1, r3
 800b218:	4543      	cmp	r3, r8
 800b21a:	f040 8488 	bne.w	800bb2e <__ieee754_pow+0x9ee>
 800b21e:	f001 0101 	and.w	r1, r1, #1
 800b222:	f1c1 0302 	rsb	r3, r1, #2
 800b226:	9304      	str	r3, [sp, #16]
 800b228:	4b5c      	ldr	r3, [pc, #368]	; (800b39c <__ieee754_pow+0x25c>)
 800b22a:	4598      	cmp	r8, r3
 800b22c:	d132      	bne.n	800b294 <__ieee754_pow+0x154>
 800b22e:	f1b9 0f00 	cmp.w	r9, #0
 800b232:	f280 8478 	bge.w	800bb26 <__ieee754_pow+0x9e6>
 800b236:	4959      	ldr	r1, [pc, #356]	; (800b39c <__ieee754_pow+0x25c>)
 800b238:	4632      	mov	r2, r6
 800b23a:	463b      	mov	r3, r7
 800b23c:	2000      	movs	r0, #0
 800b23e:	f7f5 fb0d 	bl	800085c <__aeabi_ddiv>
 800b242:	e79c      	b.n	800b17e <__ieee754_pow+0x3e>
 800b244:	2300      	movs	r3, #0
 800b246:	9304      	str	r3, [sp, #16]
 800b248:	2a00      	cmp	r2, #0
 800b24a:	d13d      	bne.n	800b2c8 <__ieee754_pow+0x188>
 800b24c:	4b51      	ldr	r3, [pc, #324]	; (800b394 <__ieee754_pow+0x254>)
 800b24e:	4598      	cmp	r8, r3
 800b250:	d1ea      	bne.n	800b228 <__ieee754_pow+0xe8>
 800b252:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b256:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b25a:	ea53 030a 	orrs.w	r3, r3, sl
 800b25e:	f000 845a 	beq.w	800bb16 <__ieee754_pow+0x9d6>
 800b262:	4b4f      	ldr	r3, [pc, #316]	; (800b3a0 <__ieee754_pow+0x260>)
 800b264:	429c      	cmp	r4, r3
 800b266:	dd08      	ble.n	800b27a <__ieee754_pow+0x13a>
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	f2c0 8457 	blt.w	800bb1e <__ieee754_pow+0x9de>
 800b270:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b274:	e783      	b.n	800b17e <__ieee754_pow+0x3e>
 800b276:	2302      	movs	r3, #2
 800b278:	e7e5      	b.n	800b246 <__ieee754_pow+0x106>
 800b27a:	f1b9 0f00 	cmp.w	r9, #0
 800b27e:	f04f 0000 	mov.w	r0, #0
 800b282:	f04f 0100 	mov.w	r1, #0
 800b286:	f6bf af7a 	bge.w	800b17e <__ieee754_pow+0x3e>
 800b28a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b28e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b292:	e774      	b.n	800b17e <__ieee754_pow+0x3e>
 800b294:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b298:	d106      	bne.n	800b2a8 <__ieee754_pow+0x168>
 800b29a:	4632      	mov	r2, r6
 800b29c:	463b      	mov	r3, r7
 800b29e:	4630      	mov	r0, r6
 800b2a0:	4639      	mov	r1, r7
 800b2a2:	f7f5 f9b1 	bl	8000608 <__aeabi_dmul>
 800b2a6:	e76a      	b.n	800b17e <__ieee754_pow+0x3e>
 800b2a8:	4b3e      	ldr	r3, [pc, #248]	; (800b3a4 <__ieee754_pow+0x264>)
 800b2aa:	4599      	cmp	r9, r3
 800b2ac:	d10c      	bne.n	800b2c8 <__ieee754_pow+0x188>
 800b2ae:	2d00      	cmp	r5, #0
 800b2b0:	db0a      	blt.n	800b2c8 <__ieee754_pow+0x188>
 800b2b2:	ec47 6b10 	vmov	d0, r6, r7
 800b2b6:	b009      	add	sp, #36	; 0x24
 800b2b8:	ecbd 8b06 	vpop	{d8-d10}
 800b2bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c0:	f000 bc6c 	b.w	800bb9c <__ieee754_sqrt>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	ec47 6b10 	vmov	d0, r6, r7
 800b2cc:	f000 fd48 	bl	800bd60 <fabs>
 800b2d0:	ec51 0b10 	vmov	r0, r1, d0
 800b2d4:	f1ba 0f00 	cmp.w	sl, #0
 800b2d8:	d129      	bne.n	800b32e <__ieee754_pow+0x1ee>
 800b2da:	b124      	cbz	r4, 800b2e6 <__ieee754_pow+0x1a6>
 800b2dc:	4b2f      	ldr	r3, [pc, #188]	; (800b39c <__ieee754_pow+0x25c>)
 800b2de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d123      	bne.n	800b32e <__ieee754_pow+0x1ee>
 800b2e6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ea:	da05      	bge.n	800b2f8 <__ieee754_pow+0x1b8>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	492a      	ldr	r1, [pc, #168]	; (800b39c <__ieee754_pow+0x25c>)
 800b2f4:	f7f5 fab2 	bl	800085c <__aeabi_ddiv>
 800b2f8:	2d00      	cmp	r5, #0
 800b2fa:	f6bf af40 	bge.w	800b17e <__ieee754_pow+0x3e>
 800b2fe:	9b04      	ldr	r3, [sp, #16]
 800b300:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b304:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b308:	4323      	orrs	r3, r4
 800b30a:	d108      	bne.n	800b31e <__ieee754_pow+0x1de>
 800b30c:	4602      	mov	r2, r0
 800b30e:	460b      	mov	r3, r1
 800b310:	4610      	mov	r0, r2
 800b312:	4619      	mov	r1, r3
 800b314:	f7f4 ffc0 	bl	8000298 <__aeabi_dsub>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	e78f      	b.n	800b23e <__ieee754_pow+0xfe>
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	2b01      	cmp	r3, #1
 800b322:	f47f af2c 	bne.w	800b17e <__ieee754_pow+0x3e>
 800b326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b32a:	4619      	mov	r1, r3
 800b32c:	e727      	b.n	800b17e <__ieee754_pow+0x3e>
 800b32e:	0feb      	lsrs	r3, r5, #31
 800b330:	3b01      	subs	r3, #1
 800b332:	9306      	str	r3, [sp, #24]
 800b334:	9a06      	ldr	r2, [sp, #24]
 800b336:	9b04      	ldr	r3, [sp, #16]
 800b338:	4313      	orrs	r3, r2
 800b33a:	d102      	bne.n	800b342 <__ieee754_pow+0x202>
 800b33c:	4632      	mov	r2, r6
 800b33e:	463b      	mov	r3, r7
 800b340:	e7e6      	b.n	800b310 <__ieee754_pow+0x1d0>
 800b342:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <__ieee754_pow+0x268>)
 800b344:	4598      	cmp	r8, r3
 800b346:	f340 80fb 	ble.w	800b540 <__ieee754_pow+0x400>
 800b34a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b34e:	4598      	cmp	r8, r3
 800b350:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <__ieee754_pow+0x260>)
 800b352:	dd0c      	ble.n	800b36e <__ieee754_pow+0x22e>
 800b354:	429c      	cmp	r4, r3
 800b356:	dc0f      	bgt.n	800b378 <__ieee754_pow+0x238>
 800b358:	f1b9 0f00 	cmp.w	r9, #0
 800b35c:	da0f      	bge.n	800b37e <__ieee754_pow+0x23e>
 800b35e:	2000      	movs	r0, #0
 800b360:	b009      	add	sp, #36	; 0x24
 800b362:	ecbd 8b06 	vpop	{d8-d10}
 800b366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	f000 bcf0 	b.w	800bd4e <__math_oflow>
 800b36e:	429c      	cmp	r4, r3
 800b370:	dbf2      	blt.n	800b358 <__ieee754_pow+0x218>
 800b372:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <__ieee754_pow+0x25c>)
 800b374:	429c      	cmp	r4, r3
 800b376:	dd19      	ble.n	800b3ac <__ieee754_pow+0x26c>
 800b378:	f1b9 0f00 	cmp.w	r9, #0
 800b37c:	dcef      	bgt.n	800b35e <__ieee754_pow+0x21e>
 800b37e:	2000      	movs	r0, #0
 800b380:	b009      	add	sp, #36	; 0x24
 800b382:	ecbd 8b06 	vpop	{d8-d10}
 800b386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38a:	f000 bcd7 	b.w	800bd3c <__math_uflow>
 800b38e:	bf00      	nop
 800b390:	fff00000 	.word	0xfff00000
 800b394:	7ff00000 	.word	0x7ff00000
 800b398:	433fffff 	.word	0x433fffff
 800b39c:	3ff00000 	.word	0x3ff00000
 800b3a0:	3fefffff 	.word	0x3fefffff
 800b3a4:	3fe00000 	.word	0x3fe00000
 800b3a8:	41e00000 	.word	0x41e00000
 800b3ac:	4b60      	ldr	r3, [pc, #384]	; (800b530 <__ieee754_pow+0x3f0>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f7f4 ff72 	bl	8000298 <__aeabi_dsub>
 800b3b4:	a354      	add	r3, pc, #336	; (adr r3, 800b508 <__ieee754_pow+0x3c8>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	460d      	mov	r5, r1
 800b3be:	f7f5 f923 	bl	8000608 <__aeabi_dmul>
 800b3c2:	a353      	add	r3, pc, #332	; (adr r3, 800b510 <__ieee754_pow+0x3d0>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7f5 f91a 	bl	8000608 <__aeabi_dmul>
 800b3d4:	4b57      	ldr	r3, [pc, #348]	; (800b534 <__ieee754_pow+0x3f4>)
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	468b      	mov	fp, r1
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4620      	mov	r0, r4
 800b3de:	4629      	mov	r1, r5
 800b3e0:	f7f5 f912 	bl	8000608 <__aeabi_dmul>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	a14b      	add	r1, pc, #300	; (adr r1, 800b518 <__ieee754_pow+0x3d8>)
 800b3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ee:	f7f4 ff53 	bl	8000298 <__aeabi_dsub>
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	f7f5 f907 	bl	8000608 <__aeabi_dmul>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	2000      	movs	r0, #0
 800b400:	494d      	ldr	r1, [pc, #308]	; (800b538 <__ieee754_pow+0x3f8>)
 800b402:	f7f4 ff49 	bl	8000298 <__aeabi_dsub>
 800b406:	4622      	mov	r2, r4
 800b408:	4680      	mov	r8, r0
 800b40a:	4689      	mov	r9, r1
 800b40c:	462b      	mov	r3, r5
 800b40e:	4620      	mov	r0, r4
 800b410:	4629      	mov	r1, r5
 800b412:	f7f5 f8f9 	bl	8000608 <__aeabi_dmul>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	4640      	mov	r0, r8
 800b41c:	4649      	mov	r1, r9
 800b41e:	f7f5 f8f3 	bl	8000608 <__aeabi_dmul>
 800b422:	a33f      	add	r3, pc, #252	; (adr r3, 800b520 <__ieee754_pow+0x3e0>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f5 f8ee 	bl	8000608 <__aeabi_dmul>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4650      	mov	r0, sl
 800b432:	4659      	mov	r1, fp
 800b434:	f7f4 ff30 	bl	8000298 <__aeabi_dsub>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4680      	mov	r8, r0
 800b43e:	4689      	mov	r9, r1
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f4 ff2a 	bl	800029c <__adddf3>
 800b448:	2000      	movs	r0, #0
 800b44a:	4632      	mov	r2, r6
 800b44c:	463b      	mov	r3, r7
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	f7f4 ff21 	bl	8000298 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	f7f4 ff1b 	bl	8000298 <__aeabi_dsub>
 800b462:	9b04      	ldr	r3, [sp, #16]
 800b464:	9a06      	ldr	r2, [sp, #24]
 800b466:	3b01      	subs	r3, #1
 800b468:	4313      	orrs	r3, r2
 800b46a:	4682      	mov	sl, r0
 800b46c:	468b      	mov	fp, r1
 800b46e:	f040 81e7 	bne.w	800b840 <__ieee754_pow+0x700>
 800b472:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b528 <__ieee754_pow+0x3e8>
 800b476:	eeb0 8a47 	vmov.f32	s16, s14
 800b47a:	eef0 8a67 	vmov.f32	s17, s15
 800b47e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b482:	2600      	movs	r6, #0
 800b484:	4632      	mov	r2, r6
 800b486:	463b      	mov	r3, r7
 800b488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b48c:	f7f4 ff04 	bl	8000298 <__aeabi_dsub>
 800b490:	4622      	mov	r2, r4
 800b492:	462b      	mov	r3, r5
 800b494:	f7f5 f8b8 	bl	8000608 <__aeabi_dmul>
 800b498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49c:	4680      	mov	r8, r0
 800b49e:	4689      	mov	r9, r1
 800b4a0:	4650      	mov	r0, sl
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	f7f5 f8b0 	bl	8000608 <__aeabi_dmul>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	f7f4 fef4 	bl	800029c <__adddf3>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	4689      	mov	r9, r1
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 f8a2 	bl	8000608 <__aeabi_dmul>
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f7f4 fee4 	bl	800029c <__adddf3>
 800b4d4:	4b19      	ldr	r3, [pc, #100]	; (800b53c <__ieee754_pow+0x3fc>)
 800b4d6:	4299      	cmp	r1, r3
 800b4d8:	ec45 4b19 	vmov	d9, r4, r5
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	468b      	mov	fp, r1
 800b4e2:	f340 82f1 	ble.w	800bac8 <__ieee754_pow+0x988>
 800b4e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b4ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b4ee:	4303      	orrs	r3, r0
 800b4f0:	f000 81e4 	beq.w	800b8bc <__ieee754_pow+0x77c>
 800b4f4:	ec51 0b18 	vmov	r0, r1, d8
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f7f5 faf6 	bl	8000aec <__aeabi_dcmplt>
 800b500:	3800      	subs	r0, #0
 800b502:	bf18      	it	ne
 800b504:	2001      	movne	r0, #1
 800b506:	e72b      	b.n	800b360 <__ieee754_pow+0x220>
 800b508:	60000000 	.word	0x60000000
 800b50c:	3ff71547 	.word	0x3ff71547
 800b510:	f85ddf44 	.word	0xf85ddf44
 800b514:	3e54ae0b 	.word	0x3e54ae0b
 800b518:	55555555 	.word	0x55555555
 800b51c:	3fd55555 	.word	0x3fd55555
 800b520:	652b82fe 	.word	0x652b82fe
 800b524:	3ff71547 	.word	0x3ff71547
 800b528:	00000000 	.word	0x00000000
 800b52c:	bff00000 	.word	0xbff00000
 800b530:	3ff00000 	.word	0x3ff00000
 800b534:	3fd00000 	.word	0x3fd00000
 800b538:	3fe00000 	.word	0x3fe00000
 800b53c:	408fffff 	.word	0x408fffff
 800b540:	4bd5      	ldr	r3, [pc, #852]	; (800b898 <__ieee754_pow+0x758>)
 800b542:	402b      	ands	r3, r5
 800b544:	2200      	movs	r2, #0
 800b546:	b92b      	cbnz	r3, 800b554 <__ieee754_pow+0x414>
 800b548:	4bd4      	ldr	r3, [pc, #848]	; (800b89c <__ieee754_pow+0x75c>)
 800b54a:	f7f5 f85d 	bl	8000608 <__aeabi_dmul>
 800b54e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b552:	460c      	mov	r4, r1
 800b554:	1523      	asrs	r3, r4, #20
 800b556:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b55a:	4413      	add	r3, r2
 800b55c:	9305      	str	r3, [sp, #20]
 800b55e:	4bd0      	ldr	r3, [pc, #832]	; (800b8a0 <__ieee754_pow+0x760>)
 800b560:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b564:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b568:	429c      	cmp	r4, r3
 800b56a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b56e:	dd08      	ble.n	800b582 <__ieee754_pow+0x442>
 800b570:	4bcc      	ldr	r3, [pc, #816]	; (800b8a4 <__ieee754_pow+0x764>)
 800b572:	429c      	cmp	r4, r3
 800b574:	f340 8162 	ble.w	800b83c <__ieee754_pow+0x6fc>
 800b578:	9b05      	ldr	r3, [sp, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b582:	2400      	movs	r4, #0
 800b584:	00e3      	lsls	r3, r4, #3
 800b586:	9307      	str	r3, [sp, #28]
 800b588:	4bc7      	ldr	r3, [pc, #796]	; (800b8a8 <__ieee754_pow+0x768>)
 800b58a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b58e:	ed93 7b00 	vldr	d7, [r3]
 800b592:	4629      	mov	r1, r5
 800b594:	ec53 2b17 	vmov	r2, r3, d7
 800b598:	eeb0 9a47 	vmov.f32	s18, s14
 800b59c:	eef0 9a67 	vmov.f32	s19, s15
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	f7f4 fe79 	bl	8000298 <__aeabi_dsub>
 800b5a6:	4652      	mov	r2, sl
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	460f      	mov	r7, r1
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	ec51 0b19 	vmov	r0, r1, d9
 800b5b2:	f7f4 fe73 	bl	800029c <__adddf3>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	49bb      	ldr	r1, [pc, #748]	; (800b8ac <__ieee754_pow+0x76c>)
 800b5be:	f7f5 f94d 	bl	800085c <__aeabi_ddiv>
 800b5c2:	ec41 0b1a 	vmov	d10, r0, r1
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f5 f81b 	bl	8000608 <__aeabi_dmul>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5d8:	9302      	str	r3, [sp, #8]
 800b5da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b5de:	46ab      	mov	fp, r5
 800b5e0:	106d      	asrs	r5, r5, #1
 800b5e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b5e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b5ea:	ec41 0b18 	vmov	d8, r0, r1
 800b5ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	4614      	mov	r4, r2
 800b5fa:	461d      	mov	r5, r3
 800b5fc:	f7f5 f804 	bl	8000608 <__aeabi_dmul>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4630      	mov	r0, r6
 800b606:	4639      	mov	r1, r7
 800b608:	f7f4 fe46 	bl	8000298 <__aeabi_dsub>
 800b60c:	ec53 2b19 	vmov	r2, r3, d9
 800b610:	4606      	mov	r6, r0
 800b612:	460f      	mov	r7, r1
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 fe3e 	bl	8000298 <__aeabi_dsub>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	4650      	mov	r0, sl
 800b622:	4659      	mov	r1, fp
 800b624:	f7f4 fe38 	bl	8000298 <__aeabi_dsub>
 800b628:	4642      	mov	r2, r8
 800b62a:	464b      	mov	r3, r9
 800b62c:	f7f4 ffec 	bl	8000608 <__aeabi_dmul>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f4 fe2e 	bl	8000298 <__aeabi_dsub>
 800b63c:	ec53 2b1a 	vmov	r2, r3, d10
 800b640:	f7f4 ffe2 	bl	8000608 <__aeabi_dmul>
 800b644:	ec53 2b18 	vmov	r2, r3, d8
 800b648:	ec41 0b19 	vmov	d9, r0, r1
 800b64c:	ec51 0b18 	vmov	r0, r1, d8
 800b650:	f7f4 ffda 	bl	8000608 <__aeabi_dmul>
 800b654:	a37c      	add	r3, pc, #496	; (adr r3, 800b848 <__ieee754_pow+0x708>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	4604      	mov	r4, r0
 800b65c:	460d      	mov	r5, r1
 800b65e:	f7f4 ffd3 	bl	8000608 <__aeabi_dmul>
 800b662:	a37b      	add	r3, pc, #492	; (adr r3, 800b850 <__ieee754_pow+0x710>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	f7f4 fe18 	bl	800029c <__adddf3>
 800b66c:	4622      	mov	r2, r4
 800b66e:	462b      	mov	r3, r5
 800b670:	f7f4 ffca 	bl	8000608 <__aeabi_dmul>
 800b674:	a378      	add	r3, pc, #480	; (adr r3, 800b858 <__ieee754_pow+0x718>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f7f4 fe0f 	bl	800029c <__adddf3>
 800b67e:	4622      	mov	r2, r4
 800b680:	462b      	mov	r3, r5
 800b682:	f7f4 ffc1 	bl	8000608 <__aeabi_dmul>
 800b686:	a376      	add	r3, pc, #472	; (adr r3, 800b860 <__ieee754_pow+0x720>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f7f4 fe06 	bl	800029c <__adddf3>
 800b690:	4622      	mov	r2, r4
 800b692:	462b      	mov	r3, r5
 800b694:	f7f4 ffb8 	bl	8000608 <__aeabi_dmul>
 800b698:	a373      	add	r3, pc, #460	; (adr r3, 800b868 <__ieee754_pow+0x728>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7f4 fdfd 	bl	800029c <__adddf3>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	f7f4 ffaf 	bl	8000608 <__aeabi_dmul>
 800b6aa:	a371      	add	r3, pc, #452	; (adr r3, 800b870 <__ieee754_pow+0x730>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f7f4 fdf4 	bl	800029c <__adddf3>
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 ffa2 	bl	8000608 <__aeabi_dmul>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	f7f4 ff9c 	bl	8000608 <__aeabi_dmul>
 800b6d0:	4642      	mov	r2, r8
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	464b      	mov	r3, r9
 800b6d8:	ec51 0b18 	vmov	r0, r1, d8
 800b6dc:	f7f4 fdde 	bl	800029c <__adddf3>
 800b6e0:	ec53 2b19 	vmov	r2, r3, d9
 800b6e4:	f7f4 ff90 	bl	8000608 <__aeabi_dmul>
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	462b      	mov	r3, r5
 800b6ec:	f7f4 fdd6 	bl	800029c <__adddf3>
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	4682      	mov	sl, r0
 800b6f4:	468b      	mov	fp, r1
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	f7f4 ff84 	bl	8000608 <__aeabi_dmul>
 800b700:	4b6b      	ldr	r3, [pc, #428]	; (800b8b0 <__ieee754_pow+0x770>)
 800b702:	2200      	movs	r2, #0
 800b704:	4606      	mov	r6, r0
 800b706:	460f      	mov	r7, r1
 800b708:	f7f4 fdc8 	bl	800029c <__adddf3>
 800b70c:	4652      	mov	r2, sl
 800b70e:	465b      	mov	r3, fp
 800b710:	f7f4 fdc4 	bl	800029c <__adddf3>
 800b714:	2000      	movs	r0, #0
 800b716:	4604      	mov	r4, r0
 800b718:	460d      	mov	r5, r1
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4640      	mov	r0, r8
 800b720:	4649      	mov	r1, r9
 800b722:	f7f4 ff71 	bl	8000608 <__aeabi_dmul>
 800b726:	4b62      	ldr	r3, [pc, #392]	; (800b8b0 <__ieee754_pow+0x770>)
 800b728:	4680      	mov	r8, r0
 800b72a:	4689      	mov	r9, r1
 800b72c:	2200      	movs	r2, #0
 800b72e:	4620      	mov	r0, r4
 800b730:	4629      	mov	r1, r5
 800b732:	f7f4 fdb1 	bl	8000298 <__aeabi_dsub>
 800b736:	4632      	mov	r2, r6
 800b738:	463b      	mov	r3, r7
 800b73a:	f7f4 fdad 	bl	8000298 <__aeabi_dsub>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4650      	mov	r0, sl
 800b744:	4659      	mov	r1, fp
 800b746:	f7f4 fda7 	bl	8000298 <__aeabi_dsub>
 800b74a:	ec53 2b18 	vmov	r2, r3, d8
 800b74e:	f7f4 ff5b 	bl	8000608 <__aeabi_dmul>
 800b752:	4622      	mov	r2, r4
 800b754:	4606      	mov	r6, r0
 800b756:	460f      	mov	r7, r1
 800b758:	462b      	mov	r3, r5
 800b75a:	ec51 0b19 	vmov	r0, r1, d9
 800b75e:	f7f4 ff53 	bl	8000608 <__aeabi_dmul>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4630      	mov	r0, r6
 800b768:	4639      	mov	r1, r7
 800b76a:	f7f4 fd97 	bl	800029c <__adddf3>
 800b76e:	4606      	mov	r6, r0
 800b770:	460f      	mov	r7, r1
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 fd8f 	bl	800029c <__adddf3>
 800b77e:	a33e      	add	r3, pc, #248	; (adr r3, 800b878 <__ieee754_pow+0x738>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	2000      	movs	r0, #0
 800b786:	4604      	mov	r4, r0
 800b788:	460d      	mov	r5, r1
 800b78a:	f7f4 ff3d 	bl	8000608 <__aeabi_dmul>
 800b78e:	4642      	mov	r2, r8
 800b790:	ec41 0b18 	vmov	d8, r0, r1
 800b794:	464b      	mov	r3, r9
 800b796:	4620      	mov	r0, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 fd7d 	bl	8000298 <__aeabi_dsub>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f4 fd77 	bl	8000298 <__aeabi_dsub>
 800b7aa:	a335      	add	r3, pc, #212	; (adr r3, 800b880 <__ieee754_pow+0x740>)
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	f7f4 ff2a 	bl	8000608 <__aeabi_dmul>
 800b7b4:	a334      	add	r3, pc, #208	; (adr r3, 800b888 <__ieee754_pow+0x748>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460f      	mov	r7, r1
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f4 ff21 	bl	8000608 <__aeabi_dmul>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	f7f4 fd65 	bl	800029c <__adddf3>
 800b7d2:	9a07      	ldr	r2, [sp, #28]
 800b7d4:	4b37      	ldr	r3, [pc, #220]	; (800b8b4 <__ieee754_pow+0x774>)
 800b7d6:	4413      	add	r3, r2
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 fd5e 	bl	800029c <__adddf3>
 800b7e0:	4682      	mov	sl, r0
 800b7e2:	9805      	ldr	r0, [sp, #20]
 800b7e4:	468b      	mov	fp, r1
 800b7e6:	f7f4 fea5 	bl	8000534 <__aeabi_i2d>
 800b7ea:	9a07      	ldr	r2, [sp, #28]
 800b7ec:	4b32      	ldr	r3, [pc, #200]	; (800b8b8 <__ieee754_pow+0x778>)
 800b7ee:	4413      	add	r3, r2
 800b7f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	465b      	mov	r3, fp
 800b7fc:	ec51 0b18 	vmov	r0, r1, d8
 800b800:	f7f4 fd4c 	bl	800029c <__adddf3>
 800b804:	4642      	mov	r2, r8
 800b806:	464b      	mov	r3, r9
 800b808:	f7f4 fd48 	bl	800029c <__adddf3>
 800b80c:	4632      	mov	r2, r6
 800b80e:	463b      	mov	r3, r7
 800b810:	f7f4 fd44 	bl	800029c <__adddf3>
 800b814:	2000      	movs	r0, #0
 800b816:	4632      	mov	r2, r6
 800b818:	463b      	mov	r3, r7
 800b81a:	4604      	mov	r4, r0
 800b81c:	460d      	mov	r5, r1
 800b81e:	f7f4 fd3b 	bl	8000298 <__aeabi_dsub>
 800b822:	4642      	mov	r2, r8
 800b824:	464b      	mov	r3, r9
 800b826:	f7f4 fd37 	bl	8000298 <__aeabi_dsub>
 800b82a:	ec53 2b18 	vmov	r2, r3, d8
 800b82e:	f7f4 fd33 	bl	8000298 <__aeabi_dsub>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4650      	mov	r0, sl
 800b838:	4659      	mov	r1, fp
 800b83a:	e610      	b.n	800b45e <__ieee754_pow+0x31e>
 800b83c:	2401      	movs	r4, #1
 800b83e:	e6a1      	b.n	800b584 <__ieee754_pow+0x444>
 800b840:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b890 <__ieee754_pow+0x750>
 800b844:	e617      	b.n	800b476 <__ieee754_pow+0x336>
 800b846:	bf00      	nop
 800b848:	4a454eef 	.word	0x4a454eef
 800b84c:	3fca7e28 	.word	0x3fca7e28
 800b850:	93c9db65 	.word	0x93c9db65
 800b854:	3fcd864a 	.word	0x3fcd864a
 800b858:	a91d4101 	.word	0xa91d4101
 800b85c:	3fd17460 	.word	0x3fd17460
 800b860:	518f264d 	.word	0x518f264d
 800b864:	3fd55555 	.word	0x3fd55555
 800b868:	db6fabff 	.word	0xdb6fabff
 800b86c:	3fdb6db6 	.word	0x3fdb6db6
 800b870:	33333303 	.word	0x33333303
 800b874:	3fe33333 	.word	0x3fe33333
 800b878:	e0000000 	.word	0xe0000000
 800b87c:	3feec709 	.word	0x3feec709
 800b880:	dc3a03fd 	.word	0xdc3a03fd
 800b884:	3feec709 	.word	0x3feec709
 800b888:	145b01f5 	.word	0x145b01f5
 800b88c:	be3e2fe0 	.word	0xbe3e2fe0
 800b890:	00000000 	.word	0x00000000
 800b894:	3ff00000 	.word	0x3ff00000
 800b898:	7ff00000 	.word	0x7ff00000
 800b89c:	43400000 	.word	0x43400000
 800b8a0:	0003988e 	.word	0x0003988e
 800b8a4:	000bb679 	.word	0x000bb679
 800b8a8:	0800c388 	.word	0x0800c388
 800b8ac:	3ff00000 	.word	0x3ff00000
 800b8b0:	40080000 	.word	0x40080000
 800b8b4:	0800c3a8 	.word	0x0800c3a8
 800b8b8:	0800c398 	.word	0x0800c398
 800b8bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800bb94 <__ieee754_pow+0xa54>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	f7f4 fce9 	bl	800029c <__adddf3>
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	ec41 0b1a 	vmov	d10, r0, r1
 800b8d0:	462b      	mov	r3, r5
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fcdf 	bl	8000298 <__aeabi_dsub>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	ec51 0b1a 	vmov	r0, r1, d10
 800b8e2:	f7f5 f921 	bl	8000b28 <__aeabi_dcmpgt>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f47f ae04 	bne.w	800b4f4 <__ieee754_pow+0x3b4>
 800b8ec:	4aa4      	ldr	r2, [pc, #656]	; (800bb80 <__ieee754_pow+0xa40>)
 800b8ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	f340 8108 	ble.w	800bb08 <__ieee754_pow+0x9c8>
 800b8f8:	151b      	asrs	r3, r3, #20
 800b8fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b8fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b902:	fa4a f303 	asr.w	r3, sl, r3
 800b906:	445b      	add	r3, fp
 800b908:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b90c:	4e9d      	ldr	r6, [pc, #628]	; (800bb84 <__ieee754_pow+0xa44>)
 800b90e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b912:	4116      	asrs	r6, r2
 800b914:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b918:	2000      	movs	r0, #0
 800b91a:	ea23 0106 	bic.w	r1, r3, r6
 800b91e:	f1c2 0214 	rsb	r2, r2, #20
 800b922:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b926:	fa4a fa02 	asr.w	sl, sl, r2
 800b92a:	f1bb 0f00 	cmp.w	fp, #0
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	4620      	mov	r0, r4
 800b934:	4629      	mov	r1, r5
 800b936:	bfb8      	it	lt
 800b938:	f1ca 0a00 	rsblt	sl, sl, #0
 800b93c:	f7f4 fcac 	bl	8000298 <__aeabi_dsub>
 800b940:	ec41 0b19 	vmov	d9, r0, r1
 800b944:	4642      	mov	r2, r8
 800b946:	464b      	mov	r3, r9
 800b948:	ec51 0b19 	vmov	r0, r1, d9
 800b94c:	f7f4 fca6 	bl	800029c <__adddf3>
 800b950:	a37b      	add	r3, pc, #492	; (adr r3, 800bb40 <__ieee754_pow+0xa00>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	2000      	movs	r0, #0
 800b958:	4604      	mov	r4, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	f7f4 fe54 	bl	8000608 <__aeabi_dmul>
 800b960:	ec53 2b19 	vmov	r2, r3, d9
 800b964:	4606      	mov	r6, r0
 800b966:	460f      	mov	r7, r1
 800b968:	4620      	mov	r0, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	f7f4 fc94 	bl	8000298 <__aeabi_dsub>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4640      	mov	r0, r8
 800b976:	4649      	mov	r1, r9
 800b978:	f7f4 fc8e 	bl	8000298 <__aeabi_dsub>
 800b97c:	a372      	add	r3, pc, #456	; (adr r3, 800bb48 <__ieee754_pow+0xa08>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fe41 	bl	8000608 <__aeabi_dmul>
 800b986:	a372      	add	r3, pc, #456	; (adr r3, 800bb50 <__ieee754_pow+0xa10>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	4680      	mov	r8, r0
 800b98e:	4689      	mov	r9, r1
 800b990:	4620      	mov	r0, r4
 800b992:	4629      	mov	r1, r5
 800b994:	f7f4 fe38 	bl	8000608 <__aeabi_dmul>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4640      	mov	r0, r8
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f7f4 fc7c 	bl	800029c <__adddf3>
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	f7f4 fc74 	bl	800029c <__adddf3>
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	f7f4 fc6c 	bl	8000298 <__aeabi_dsub>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f7f4 fc66 	bl	8000298 <__aeabi_dsub>
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	460f      	mov	r7, r1
 800b9d2:	464b      	mov	r3, r9
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	f7f4 fe16 	bl	8000608 <__aeabi_dmul>
 800b9dc:	a35e      	add	r3, pc, #376	; (adr r3, 800bb58 <__ieee754_pow+0xa18>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	460d      	mov	r5, r1
 800b9e6:	f7f4 fe0f 	bl	8000608 <__aeabi_dmul>
 800b9ea:	a35d      	add	r3, pc, #372	; (adr r3, 800bb60 <__ieee754_pow+0xa20>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 fc52 	bl	8000298 <__aeabi_dsub>
 800b9f4:	4622      	mov	r2, r4
 800b9f6:	462b      	mov	r3, r5
 800b9f8:	f7f4 fe06 	bl	8000608 <__aeabi_dmul>
 800b9fc:	a35a      	add	r3, pc, #360	; (adr r3, 800bb68 <__ieee754_pow+0xa28>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f7f4 fc4b 	bl	800029c <__adddf3>
 800ba06:	4622      	mov	r2, r4
 800ba08:	462b      	mov	r3, r5
 800ba0a:	f7f4 fdfd 	bl	8000608 <__aeabi_dmul>
 800ba0e:	a358      	add	r3, pc, #352	; (adr r3, 800bb70 <__ieee754_pow+0xa30>)
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	f7f4 fc40 	bl	8000298 <__aeabi_dsub>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	f7f4 fdf4 	bl	8000608 <__aeabi_dmul>
 800ba20:	a355      	add	r3, pc, #340	; (adr r3, 800bb78 <__ieee754_pow+0xa38>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fc39 	bl	800029c <__adddf3>
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	f7f4 fdeb 	bl	8000608 <__aeabi_dmul>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4640      	mov	r0, r8
 800ba38:	4649      	mov	r1, r9
 800ba3a:	f7f4 fc2d 	bl	8000298 <__aeabi_dsub>
 800ba3e:	4604      	mov	r4, r0
 800ba40:	460d      	mov	r5, r1
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4640      	mov	r0, r8
 800ba48:	4649      	mov	r1, r9
 800ba4a:	f7f4 fddd 	bl	8000608 <__aeabi_dmul>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	ec41 0b19 	vmov	d9, r0, r1
 800ba54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba58:	4620      	mov	r0, r4
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f7f4 fc1c 	bl	8000298 <__aeabi_dsub>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	ec51 0b19 	vmov	r0, r1, d9
 800ba68:	f7f4 fef8 	bl	800085c <__aeabi_ddiv>
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4604      	mov	r4, r0
 800ba70:	460d      	mov	r5, r1
 800ba72:	463b      	mov	r3, r7
 800ba74:	4640      	mov	r0, r8
 800ba76:	4649      	mov	r1, r9
 800ba78:	f7f4 fdc6 	bl	8000608 <__aeabi_dmul>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	f7f4 fc0c 	bl	800029c <__adddf3>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4620      	mov	r0, r4
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	f7f4 fc04 	bl	8000298 <__aeabi_dsub>
 800ba90:	4642      	mov	r2, r8
 800ba92:	464b      	mov	r3, r9
 800ba94:	f7f4 fc00 	bl	8000298 <__aeabi_dsub>
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	493a      	ldr	r1, [pc, #232]	; (800bb88 <__ieee754_pow+0xa48>)
 800ba9e:	2000      	movs	r0, #0
 800baa0:	f7f4 fbfa 	bl	8000298 <__aeabi_dsub>
 800baa4:	ec41 0b10 	vmov	d0, r0, r1
 800baa8:	ee10 3a90 	vmov	r3, s1
 800baac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab4:	da2b      	bge.n	800bb0e <__ieee754_pow+0x9ce>
 800bab6:	4650      	mov	r0, sl
 800bab8:	f000 f966 	bl	800bd88 <scalbn>
 800babc:	ec51 0b10 	vmov	r0, r1, d0
 800bac0:	ec53 2b18 	vmov	r2, r3, d8
 800bac4:	f7ff bbed 	b.w	800b2a2 <__ieee754_pow+0x162>
 800bac8:	4b30      	ldr	r3, [pc, #192]	; (800bb8c <__ieee754_pow+0xa4c>)
 800baca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bace:	429e      	cmp	r6, r3
 800bad0:	f77f af0c 	ble.w	800b8ec <__ieee754_pow+0x7ac>
 800bad4:	4b2e      	ldr	r3, [pc, #184]	; (800bb90 <__ieee754_pow+0xa50>)
 800bad6:	440b      	add	r3, r1
 800bad8:	4303      	orrs	r3, r0
 800bada:	d009      	beq.n	800baf0 <__ieee754_pow+0x9b0>
 800badc:	ec51 0b18 	vmov	r0, r1, d8
 800bae0:	2200      	movs	r2, #0
 800bae2:	2300      	movs	r3, #0
 800bae4:	f7f5 f802 	bl	8000aec <__aeabi_dcmplt>
 800bae8:	3800      	subs	r0, #0
 800baea:	bf18      	it	ne
 800baec:	2001      	movne	r0, #1
 800baee:	e447      	b.n	800b380 <__ieee754_pow+0x240>
 800baf0:	4622      	mov	r2, r4
 800baf2:	462b      	mov	r3, r5
 800baf4:	f7f4 fbd0 	bl	8000298 <__aeabi_dsub>
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	f7f5 f80a 	bl	8000b14 <__aeabi_dcmpge>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f43f aef3 	beq.w	800b8ec <__ieee754_pow+0x7ac>
 800bb06:	e7e9      	b.n	800badc <__ieee754_pow+0x99c>
 800bb08:	f04f 0a00 	mov.w	sl, #0
 800bb0c:	e71a      	b.n	800b944 <__ieee754_pow+0x804>
 800bb0e:	ec51 0b10 	vmov	r0, r1, d0
 800bb12:	4619      	mov	r1, r3
 800bb14:	e7d4      	b.n	800bac0 <__ieee754_pow+0x980>
 800bb16:	491c      	ldr	r1, [pc, #112]	; (800bb88 <__ieee754_pow+0xa48>)
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f7ff bb30 	b.w	800b17e <__ieee754_pow+0x3e>
 800bb1e:	2000      	movs	r0, #0
 800bb20:	2100      	movs	r1, #0
 800bb22:	f7ff bb2c 	b.w	800b17e <__ieee754_pow+0x3e>
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7ff bb28 	b.w	800b17e <__ieee754_pow+0x3e>
 800bb2e:	9204      	str	r2, [sp, #16]
 800bb30:	f7ff bb7a 	b.w	800b228 <__ieee754_pow+0xe8>
 800bb34:	2300      	movs	r3, #0
 800bb36:	f7ff bb64 	b.w	800b202 <__ieee754_pow+0xc2>
 800bb3a:	bf00      	nop
 800bb3c:	f3af 8000 	nop.w
 800bb40:	00000000 	.word	0x00000000
 800bb44:	3fe62e43 	.word	0x3fe62e43
 800bb48:	fefa39ef 	.word	0xfefa39ef
 800bb4c:	3fe62e42 	.word	0x3fe62e42
 800bb50:	0ca86c39 	.word	0x0ca86c39
 800bb54:	be205c61 	.word	0xbe205c61
 800bb58:	72bea4d0 	.word	0x72bea4d0
 800bb5c:	3e663769 	.word	0x3e663769
 800bb60:	c5d26bf1 	.word	0xc5d26bf1
 800bb64:	3ebbbd41 	.word	0x3ebbbd41
 800bb68:	af25de2c 	.word	0xaf25de2c
 800bb6c:	3f11566a 	.word	0x3f11566a
 800bb70:	16bebd93 	.word	0x16bebd93
 800bb74:	3f66c16c 	.word	0x3f66c16c
 800bb78:	5555553e 	.word	0x5555553e
 800bb7c:	3fc55555 	.word	0x3fc55555
 800bb80:	3fe00000 	.word	0x3fe00000
 800bb84:	000fffff 	.word	0x000fffff
 800bb88:	3ff00000 	.word	0x3ff00000
 800bb8c:	4090cbff 	.word	0x4090cbff
 800bb90:	3f6f3400 	.word	0x3f6f3400
 800bb94:	652b82fe 	.word	0x652b82fe
 800bb98:	3c971547 	.word	0x3c971547

0800bb9c <__ieee754_sqrt>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	ec55 4b10 	vmov	r4, r5, d0
 800bba4:	4e55      	ldr	r6, [pc, #340]	; (800bcfc <__ieee754_sqrt+0x160>)
 800bba6:	43ae      	bics	r6, r5
 800bba8:	ee10 0a10 	vmov	r0, s0
 800bbac:	ee10 3a10 	vmov	r3, s0
 800bbb0:	462a      	mov	r2, r5
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	d110      	bne.n	800bbd8 <__ieee754_sqrt+0x3c>
 800bbb6:	ee10 2a10 	vmov	r2, s0
 800bbba:	462b      	mov	r3, r5
 800bbbc:	f7f4 fd24 	bl	8000608 <__aeabi_dmul>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fb68 	bl	800029c <__adddf3>
 800bbcc:	4604      	mov	r4, r0
 800bbce:	460d      	mov	r5, r1
 800bbd0:	ec45 4b10 	vmov	d0, r4, r5
 800bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	dc10      	bgt.n	800bbfe <__ieee754_sqrt+0x62>
 800bbdc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbe0:	4330      	orrs	r0, r6
 800bbe2:	d0f5      	beq.n	800bbd0 <__ieee754_sqrt+0x34>
 800bbe4:	b15d      	cbz	r5, 800bbfe <__ieee754_sqrt+0x62>
 800bbe6:	ee10 2a10 	vmov	r2, s0
 800bbea:	462b      	mov	r3, r5
 800bbec:	ee10 0a10 	vmov	r0, s0
 800bbf0:	f7f4 fb52 	bl	8000298 <__aeabi_dsub>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	f7f4 fe30 	bl	800085c <__aeabi_ddiv>
 800bbfc:	e7e6      	b.n	800bbcc <__ieee754_sqrt+0x30>
 800bbfe:	1512      	asrs	r2, r2, #20
 800bc00:	d074      	beq.n	800bcec <__ieee754_sqrt+0x150>
 800bc02:	07d4      	lsls	r4, r2, #31
 800bc04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bc08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bc0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bc10:	bf5e      	ittt	pl
 800bc12:	0fda      	lsrpl	r2, r3, #31
 800bc14:	005b      	lslpl	r3, r3, #1
 800bc16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	0fda      	lsrs	r2, r3, #31
 800bc1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bc22:	107f      	asrs	r7, r7, #1
 800bc24:	005b      	lsls	r3, r3, #1
 800bc26:	2516      	movs	r5, #22
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bc2e:	1886      	adds	r6, r0, r2
 800bc30:	428e      	cmp	r6, r1
 800bc32:	bfde      	ittt	le
 800bc34:	1b89      	suble	r1, r1, r6
 800bc36:	18b0      	addle	r0, r6, r2
 800bc38:	18a4      	addle	r4, r4, r2
 800bc3a:	0049      	lsls	r1, r1, #1
 800bc3c:	3d01      	subs	r5, #1
 800bc3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bc42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bc46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc4a:	d1f0      	bne.n	800bc2e <__ieee754_sqrt+0x92>
 800bc4c:	462a      	mov	r2, r5
 800bc4e:	f04f 0e20 	mov.w	lr, #32
 800bc52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bc56:	4281      	cmp	r1, r0
 800bc58:	eb06 0c05 	add.w	ip, r6, r5
 800bc5c:	dc02      	bgt.n	800bc64 <__ieee754_sqrt+0xc8>
 800bc5e:	d113      	bne.n	800bc88 <__ieee754_sqrt+0xec>
 800bc60:	459c      	cmp	ip, r3
 800bc62:	d811      	bhi.n	800bc88 <__ieee754_sqrt+0xec>
 800bc64:	f1bc 0f00 	cmp.w	ip, #0
 800bc68:	eb0c 0506 	add.w	r5, ip, r6
 800bc6c:	da43      	bge.n	800bcf6 <__ieee754_sqrt+0x15a>
 800bc6e:	2d00      	cmp	r5, #0
 800bc70:	db41      	blt.n	800bcf6 <__ieee754_sqrt+0x15a>
 800bc72:	f100 0801 	add.w	r8, r0, #1
 800bc76:	1a09      	subs	r1, r1, r0
 800bc78:	459c      	cmp	ip, r3
 800bc7a:	bf88      	it	hi
 800bc7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bc80:	eba3 030c 	sub.w	r3, r3, ip
 800bc84:	4432      	add	r2, r6
 800bc86:	4640      	mov	r0, r8
 800bc88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bc8c:	f1be 0e01 	subs.w	lr, lr, #1
 800bc90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bc94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc9c:	d1db      	bne.n	800bc56 <__ieee754_sqrt+0xba>
 800bc9e:	430b      	orrs	r3, r1
 800bca0:	d006      	beq.n	800bcb0 <__ieee754_sqrt+0x114>
 800bca2:	1c50      	adds	r0, r2, #1
 800bca4:	bf13      	iteet	ne
 800bca6:	3201      	addne	r2, #1
 800bca8:	3401      	addeq	r4, #1
 800bcaa:	4672      	moveq	r2, lr
 800bcac:	f022 0201 	bicne.w	r2, r2, #1
 800bcb0:	1063      	asrs	r3, r4, #1
 800bcb2:	0852      	lsrs	r2, r2, #1
 800bcb4:	07e1      	lsls	r1, r4, #31
 800bcb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bcba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bcbe:	bf48      	it	mi
 800bcc0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bcc4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bcc8:	4614      	mov	r4, r2
 800bcca:	e781      	b.n	800bbd0 <__ieee754_sqrt+0x34>
 800bccc:	0ad9      	lsrs	r1, r3, #11
 800bcce:	3815      	subs	r0, #21
 800bcd0:	055b      	lsls	r3, r3, #21
 800bcd2:	2900      	cmp	r1, #0
 800bcd4:	d0fa      	beq.n	800bccc <__ieee754_sqrt+0x130>
 800bcd6:	02cd      	lsls	r5, r1, #11
 800bcd8:	d50a      	bpl.n	800bcf0 <__ieee754_sqrt+0x154>
 800bcda:	f1c2 0420 	rsb	r4, r2, #32
 800bcde:	fa23 f404 	lsr.w	r4, r3, r4
 800bce2:	1e55      	subs	r5, r2, #1
 800bce4:	4093      	lsls	r3, r2
 800bce6:	4321      	orrs	r1, r4
 800bce8:	1b42      	subs	r2, r0, r5
 800bcea:	e78a      	b.n	800bc02 <__ieee754_sqrt+0x66>
 800bcec:	4610      	mov	r0, r2
 800bcee:	e7f0      	b.n	800bcd2 <__ieee754_sqrt+0x136>
 800bcf0:	0049      	lsls	r1, r1, #1
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	e7ef      	b.n	800bcd6 <__ieee754_sqrt+0x13a>
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	e7bd      	b.n	800bc76 <__ieee754_sqrt+0xda>
 800bcfa:	bf00      	nop
 800bcfc:	7ff00000 	.word	0x7ff00000

0800bd00 <with_errno>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	4604      	mov	r4, r0
 800bd04:	460d      	mov	r5, r1
 800bd06:	4616      	mov	r6, r2
 800bd08:	f7fa fcda 	bl	80066c0 <__errno>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	6006      	str	r6, [r0, #0]
 800bd10:	4620      	mov	r0, r4
 800bd12:	bd70      	pop	{r4, r5, r6, pc}

0800bd14 <xflow>:
 800bd14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd16:	4614      	mov	r4, r2
 800bd18:	461d      	mov	r5, r3
 800bd1a:	b108      	cbz	r0, 800bd20 <xflow+0xc>
 800bd1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd20:	e9cd 2300 	strd	r2, r3, [sp]
 800bd24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fc6c 	bl	8000608 <__aeabi_dmul>
 800bd30:	2222      	movs	r2, #34	; 0x22
 800bd32:	b003      	add	sp, #12
 800bd34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd38:	f7ff bfe2 	b.w	800bd00 <with_errno>

0800bd3c <__math_uflow>:
 800bd3c:	b508      	push	{r3, lr}
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd44:	f7ff ffe6 	bl	800bd14 <xflow>
 800bd48:	ec41 0b10 	vmov	d0, r0, r1
 800bd4c:	bd08      	pop	{r3, pc}

0800bd4e <__math_oflow>:
 800bd4e:	b508      	push	{r3, lr}
 800bd50:	2200      	movs	r2, #0
 800bd52:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bd56:	f7ff ffdd 	bl	800bd14 <xflow>
 800bd5a:	ec41 0b10 	vmov	d0, r0, r1
 800bd5e:	bd08      	pop	{r3, pc}

0800bd60 <fabs>:
 800bd60:	ec51 0b10 	vmov	r0, r1, d0
 800bd64:	ee10 2a10 	vmov	r2, s0
 800bd68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd6c:	ec43 2b10 	vmov	d0, r2, r3
 800bd70:	4770      	bx	lr

0800bd72 <finite>:
 800bd72:	b082      	sub	sp, #8
 800bd74:	ed8d 0b00 	vstr	d0, [sp]
 800bd78:	9801      	ldr	r0, [sp, #4]
 800bd7a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bd7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bd82:	0fc0      	lsrs	r0, r0, #31
 800bd84:	b002      	add	sp, #8
 800bd86:	4770      	bx	lr

0800bd88 <scalbn>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	ec55 4b10 	vmov	r4, r5, d0
 800bd8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bd92:	4606      	mov	r6, r0
 800bd94:	462b      	mov	r3, r5
 800bd96:	b99a      	cbnz	r2, 800bdc0 <scalbn+0x38>
 800bd98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd9c:	4323      	orrs	r3, r4
 800bd9e:	d036      	beq.n	800be0e <scalbn+0x86>
 800bda0:	4b39      	ldr	r3, [pc, #228]	; (800be88 <scalbn+0x100>)
 800bda2:	4629      	mov	r1, r5
 800bda4:	ee10 0a10 	vmov	r0, s0
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f7f4 fc2d 	bl	8000608 <__aeabi_dmul>
 800bdae:	4b37      	ldr	r3, [pc, #220]	; (800be8c <scalbn+0x104>)
 800bdb0:	429e      	cmp	r6, r3
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	460d      	mov	r5, r1
 800bdb6:	da10      	bge.n	800bdda <scalbn+0x52>
 800bdb8:	a32b      	add	r3, pc, #172	; (adr r3, 800be68 <scalbn+0xe0>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	e03a      	b.n	800be36 <scalbn+0xae>
 800bdc0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bdc4:	428a      	cmp	r2, r1
 800bdc6:	d10c      	bne.n	800bde2 <scalbn+0x5a>
 800bdc8:	ee10 2a10 	vmov	r2, s0
 800bdcc:	4620      	mov	r0, r4
 800bdce:	4629      	mov	r1, r5
 800bdd0:	f7f4 fa64 	bl	800029c <__adddf3>
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	e019      	b.n	800be0e <scalbn+0x86>
 800bdda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bdde:	460b      	mov	r3, r1
 800bde0:	3a36      	subs	r2, #54	; 0x36
 800bde2:	4432      	add	r2, r6
 800bde4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bde8:	428a      	cmp	r2, r1
 800bdea:	dd08      	ble.n	800bdfe <scalbn+0x76>
 800bdec:	2d00      	cmp	r5, #0
 800bdee:	a120      	add	r1, pc, #128	; (adr r1, 800be70 <scalbn+0xe8>)
 800bdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdf4:	da1c      	bge.n	800be30 <scalbn+0xa8>
 800bdf6:	a120      	add	r1, pc, #128	; (adr r1, 800be78 <scalbn+0xf0>)
 800bdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdfc:	e018      	b.n	800be30 <scalbn+0xa8>
 800bdfe:	2a00      	cmp	r2, #0
 800be00:	dd08      	ble.n	800be14 <scalbn+0x8c>
 800be02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be0e:	ec45 4b10 	vmov	d0, r4, r5
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800be18:	da19      	bge.n	800be4e <scalbn+0xc6>
 800be1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be1e:	429e      	cmp	r6, r3
 800be20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800be24:	dd0a      	ble.n	800be3c <scalbn+0xb4>
 800be26:	a112      	add	r1, pc, #72	; (adr r1, 800be70 <scalbn+0xe8>)
 800be28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e2      	bne.n	800bdf6 <scalbn+0x6e>
 800be30:	a30f      	add	r3, pc, #60	; (adr r3, 800be70 <scalbn+0xe8>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	f7f4 fbe7 	bl	8000608 <__aeabi_dmul>
 800be3a:	e7cb      	b.n	800bdd4 <scalbn+0x4c>
 800be3c:	a10a      	add	r1, pc, #40	; (adr r1, 800be68 <scalbn+0xe0>)
 800be3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0b8      	beq.n	800bdb8 <scalbn+0x30>
 800be46:	a10e      	add	r1, pc, #56	; (adr r1, 800be80 <scalbn+0xf8>)
 800be48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be4c:	e7b4      	b.n	800bdb8 <scalbn+0x30>
 800be4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be52:	3236      	adds	r2, #54	; 0x36
 800be54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800be5c:	4620      	mov	r0, r4
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <scalbn+0x108>)
 800be60:	2200      	movs	r2, #0
 800be62:	e7e8      	b.n	800be36 <scalbn+0xae>
 800be64:	f3af 8000 	nop.w
 800be68:	c2f8f359 	.word	0xc2f8f359
 800be6c:	01a56e1f 	.word	0x01a56e1f
 800be70:	8800759c 	.word	0x8800759c
 800be74:	7e37e43c 	.word	0x7e37e43c
 800be78:	8800759c 	.word	0x8800759c
 800be7c:	fe37e43c 	.word	0xfe37e43c
 800be80:	c2f8f359 	.word	0xc2f8f359
 800be84:	81a56e1f 	.word	0x81a56e1f
 800be88:	43500000 	.word	0x43500000
 800be8c:	ffff3cb0 	.word	0xffff3cb0
 800be90:	3c900000 	.word	0x3c900000

0800be94 <_init>:
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	bf00      	nop
 800be98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be9a:	bc08      	pop	{r3}
 800be9c:	469e      	mov	lr, r3
 800be9e:	4770      	bx	lr

0800bea0 <_fini>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	bf00      	nop
 800bea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea6:	bc08      	pop	{r3}
 800bea8:	469e      	mov	lr, r3
 800beaa:	4770      	bx	lr


KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800b250  0800b250  0001b250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f8  0800b8f8  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f8  0800b8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b900  0800b900  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b904  0800b904  0001b904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800b908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200002f8  0800bc00  000202f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800bc00  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131ed  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c30  00000000  00000000  00033515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00036148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00036f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017901  00000000  00000000  00037be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102ad  00000000  00000000  0004f4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913de  00000000  00000000  0005f78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f0b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  000f0c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001689  00000000  00000000  000f5c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b234 	.word	0x0800b234

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	0800b234 	.word	0x0800b234

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <SteadyStateKalmanFilter>:

volatile arm_status Calst;

float checkVal;

float SteadyStateKalmanFilter(float32_t Vin,float32_t Velocity){
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001012:	edc7 0a00 	vstr	s1, [r7]
	  arm_mat_init_f32(&Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8001016:	463b      	mov	r3, r7
 8001018:	2201      	movs	r2, #1
 800101a:	2101      	movs	r1, #1
 800101c:	4848      	ldr	r0, [pc, #288]	; (8001140 <SteadyStateKalmanFilter+0x138>)
 800101e:	f004 fbaf 	bl	8005780 <arm_mat_init_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&B_matrix, Vin, &Bu_matrix); 		   				// Bu
 8001022:	4948      	ldr	r1, [pc, #288]	; (8001144 <SteadyStateKalmanFilter+0x13c>)
 8001024:	ed97 0a01 	vldr	s0, [r7, #4]
 8001028:	4847      	ldr	r0, [pc, #284]	; (8001148 <SteadyStateKalmanFilter+0x140>)
 800102a:	f004 f9b1 	bl	8005390 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&A_matrix, &X_k_matrix, &Ax_matrix);  		   		// Ax
 800102e:	4a47      	ldr	r2, [pc, #284]	; (800114c <SteadyStateKalmanFilter+0x144>)
 8001030:	4947      	ldr	r1, [pc, #284]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 8001032:	4848      	ldr	r0, [pc, #288]	; (8001154 <SteadyStateKalmanFilter+0x14c>)
 8001034:	f004 f9fe 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_add_f32(&Ax_matrix, &Bu_matrix, &X_k_matrix); 		   		// Xk = Ax + Bu
 8001038:	4a45      	ldr	r2, [pc, #276]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 800103a:	4942      	ldr	r1, [pc, #264]	; (8001144 <SteadyStateKalmanFilter+0x13c>)
 800103c:	4843      	ldr	r0, [pc, #268]	; (800114c <SteadyStateKalmanFilter+0x144>)
 800103e:	f004 fba3 	bl	8005788 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&A_matrix, &P_k_matrix, &P_k_matrix);  		   		// Pk = A * P_pk
 8001042:	4a45      	ldr	r2, [pc, #276]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001044:	4944      	ldr	r1, [pc, #272]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001046:	4843      	ldr	r0, [pc, #268]	; (8001154 <SteadyStateKalmanFilter+0x14c>)
 8001048:	f004 f9f4 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&P_k_matrix, &A_transpose_matrix, &P_k_matrix); 		// Pk = A * P_pk * A^T
 800104c:	4a42      	ldr	r2, [pc, #264]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 800104e:	4943      	ldr	r1, [pc, #268]	; (800115c <SteadyStateKalmanFilter+0x154>)
 8001050:	4841      	ldr	r0, [pc, #260]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001052:	f004 f9ef 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&G_matrix, &G_transpose_matrix, &GGT_matrix);        // G * G^T
 8001056:	4a42      	ldr	r2, [pc, #264]	; (8001160 <SteadyStateKalmanFilter+0x158>)
 8001058:	4942      	ldr	r1, [pc, #264]	; (8001164 <SteadyStateKalmanFilter+0x15c>)
 800105a:	4843      	ldr	r0, [pc, #268]	; (8001168 <SteadyStateKalmanFilter+0x160>)
 800105c:	f004 f9ea 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&GGT_matrix, Q, &GQGT_matrix); 				   	   	// G * Q
 8001060:	4b42      	ldr	r3, [pc, #264]	; (800116c <SteadyStateKalmanFilter+0x164>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	4942      	ldr	r1, [pc, #264]	; (8001170 <SteadyStateKalmanFilter+0x168>)
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	483c      	ldr	r0, [pc, #240]	; (8001160 <SteadyStateKalmanFilter+0x158>)
 800106e:	f004 f98f 	bl	8005390 <arm_mat_scale_f32>
	  arm_mat_add_f32(&P_k_matrix, &GQGT_matrix, &P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001074:	493e      	ldr	r1, [pc, #248]	; (8001170 <SteadyStateKalmanFilter+0x168>)
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001078:	f004 fb86 	bl	8005788 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&C_matrix, &P_k_matrix, &CP_matrix);			     // C * Pk
 800107c:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <SteadyStateKalmanFilter+0x16c>)
 800107e:	4936      	ldr	r1, [pc, #216]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001080:	483d      	ldr	r0, [pc, #244]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 8001082:	f004 f9d7 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&CP_matrix, &C_transpose_matrix, &CPCT_matrix);   // C * Pk * C^T
 8001086:	4a3d      	ldr	r2, [pc, #244]	; (800117c <SteadyStateKalmanFilter+0x174>)
 8001088:	493d      	ldr	r1, [pc, #244]	; (8001180 <SteadyStateKalmanFilter+0x178>)
 800108a:	483a      	ldr	r0, [pc, #232]	; (8001174 <SteadyStateKalmanFilter+0x16c>)
 800108c:	f004 f9d2 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_add_f32(&CPCT_matrix, &R_matrix, &CPCTR_matrix);			 // C * P_k * C^T + R
 8001090:	4a3c      	ldr	r2, [pc, #240]	; (8001184 <SteadyStateKalmanFilter+0x17c>)
 8001092:	493d      	ldr	r1, [pc, #244]	; (8001188 <SteadyStateKalmanFilter+0x180>)
 8001094:	4839      	ldr	r0, [pc, #228]	; (800117c <SteadyStateKalmanFilter+0x174>)
 8001096:	f004 fb77 	bl	8005788 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&CPCTR_matrix, &CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800109a:	493c      	ldr	r1, [pc, #240]	; (800118c <SteadyStateKalmanFilter+0x184>)
 800109c:	4839      	ldr	r0, [pc, #228]	; (8001184 <SteadyStateKalmanFilter+0x17c>)
 800109e:	f004 fa69 	bl	8005574 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&P_k_matrix, &C_transpose_matrix, &PCT_matrix); 		 // P_k * C^T
 80010a2:	4a3b      	ldr	r2, [pc, #236]	; (8001190 <SteadyStateKalmanFilter+0x188>)
 80010a4:	4936      	ldr	r1, [pc, #216]	; (8001180 <SteadyStateKalmanFilter+0x178>)
 80010a6:	482c      	ldr	r0, [pc, #176]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 80010a8:	f004 f9c4 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&PCT_matrix, &CPCTRinv_matrix, &K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 80010ac:	4a39      	ldr	r2, [pc, #228]	; (8001194 <SteadyStateKalmanFilter+0x18c>)
 80010ae:	4937      	ldr	r1, [pc, #220]	; (800118c <SteadyStateKalmanFilter+0x184>)
 80010b0:	4837      	ldr	r0, [pc, #220]	; (8001190 <SteadyStateKalmanFilter+0x188>)
 80010b2:	f004 f9bf 	bl	8005434 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Cx_matrix);				 // C * X_k
 80010b6:	4a38      	ldr	r2, [pc, #224]	; (8001198 <SteadyStateKalmanFilter+0x190>)
 80010b8:	4925      	ldr	r1, [pc, #148]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010ba:	482f      	ldr	r0, [pc, #188]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 80010bc:	f004 f9ba 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&Velocity_matrix,  &Cx_matrix, &yCx_matrix);			  // y - ( C * X_k )
 80010c0:	4a36      	ldr	r2, [pc, #216]	; (800119c <SteadyStateKalmanFilter+0x194>)
 80010c2:	4935      	ldr	r1, [pc, #212]	; (8001198 <SteadyStateKalmanFilter+0x190>)
 80010c4:	481e      	ldr	r0, [pc, #120]	; (8001140 <SteadyStateKalmanFilter+0x138>)
 80010c6:	f004 f8f9 	bl	80052bc <arm_mat_sub_f32>
	  arm_mat_mult_f32(&K_matrix, &yCx_matrix, &KyCx_matrix);		     // K( y - ( C * X_k ) )
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <SteadyStateKalmanFilter+0x198>)
 80010cc:	4933      	ldr	r1, [pc, #204]	; (800119c <SteadyStateKalmanFilter+0x194>)
 80010ce:	4831      	ldr	r0, [pc, #196]	; (8001194 <SteadyStateKalmanFilter+0x18c>)
 80010d0:	f004 f9b0 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_add_f32(&X_k_matrix, &KyCx_matrix, &X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010d6:	4932      	ldr	r1, [pc, #200]	; (80011a0 <SteadyStateKalmanFilter+0x198>)
 80010d8:	481d      	ldr	r0, [pc, #116]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010da:	f004 fb55 	bl	8005788 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Output_matrix);
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <SteadyStateKalmanFilter+0x19c>)
 80010e0:	491b      	ldr	r1, [pc, #108]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 80010e4:	f004 f9a6 	bl	8005434 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010f0:	2204      	movs	r2, #4
 80010f2:	2104      	movs	r1, #4
 80010f4:	f004 fb44 	bl	8005780 <arm_mat_init_f32>

	  arm_mat_mult_f32(&K_matrix, &C_matrix, &temp_matrix4);				// K * C
 80010f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fc:	461a      	mov	r2, r3
 80010fe:	491e      	ldr	r1, [pc, #120]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <SteadyStateKalmanFilter+0x18c>)
 8001102:	f004 f997 	bl	8005434 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8001106:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800110a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110e:	4619      	mov	r1, r3
 8001110:	4825      	ldr	r0, [pc, #148]	; (80011a8 <SteadyStateKalmanFilter+0x1a0>)
 8001112:	f004 f8d3 	bl	80052bc <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &P_k_matrix, &P_k_matrix);			// (I - (K * C)) * P_k
 8001116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 800111c:	490e      	ldr	r1, [pc, #56]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f988 	bl	8005434 <arm_mat_mult_f32>
	  Kalman_Speed = X_k[1];
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <SteadyStateKalmanFilter+0x1a4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <SteadyStateKalmanFilter+0x1a8>)
 800112a:	6013      	str	r3, [r2, #0]
	  return  Kalman_Speed;
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <SteadyStateKalmanFilter+0x1a8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3750      	adds	r7, #80	; 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000534 	.word	0x20000534
 8001144:	20000454 	.word	0x20000454
 8001148:	20000390 	.word	0x20000390
 800114c:	2000046c 	.word	0x2000046c
 8001150:	20000328 	.word	0x20000328
 8001154:	20000378 	.word	0x20000378
 8001158:	20000370 	.word	0x20000370
 800115c:	20000380 	.word	0x20000380
 8001160:	200003c4 	.word	0x200003c4
 8001164:	200003b0 	.word	0x200003b0
 8001168:	200003a8 	.word	0x200003a8
 800116c:	20000110 	.word	0x20000110
 8001170:	2000040c 	.word	0x2000040c
 8001174:	20000484 	.word	0x20000484
 8001178:	20000398 	.word	0x20000398
 800117c:	2000049c 	.word	0x2000049c
 8001180:	200003a0 	.word	0x200003a0
 8001184:	200004a8 	.word	0x200004a8
 8001188:	20000520 	.word	0x20000520
 800118c:	200004e4 	.word	0x200004e4
 8001190:	200004cc 	.word	0x200004cc
 8001194:	200004b4 	.word	0x200004b4
 8001198:	200004f0 	.word	0x200004f0
 800119c:	200004fc 	.word	0x200004fc
 80011a0:	20000508 	.word	0x20000508
 80011a4:	200003bc 	.word	0x200003bc
 80011a8:	20000388 	.word	0x20000388
 80011ac:	20000318 	.word	0x20000318
 80011b0:	20000314 	.word	0x20000314

080011b4 <Kalman_Start>:

void Kalman_Start(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	arm_mat_init_f32(&X_k_matrix, 4, 1,(float32_t*) &X_k);
 80011b8:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <Kalman_Start+0x140>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	2104      	movs	r1, #4
 80011be:	484e      	ldr	r0, [pc, #312]	; (80012f8 <Kalman_Start+0x144>)
 80011c0:	f004 fade 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&P_k_matrix, 4, 4,(float32_t*) &P_k);
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <Kalman_Start+0x148>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	2104      	movs	r1, #4
 80011ca:	484d      	ldr	r0, [pc, #308]	; (8001300 <Kalman_Start+0x14c>)
 80011cc:	f004 fad8 	bl	8005780 <arm_mat_init_f32>

	arm_mat_init_f32(&A_matrix, 4, 4,(float32_t*) &A);
 80011d0:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <Kalman_Start+0x150>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	2104      	movs	r1, #4
 80011d6:	484c      	ldr	r0, [pc, #304]	; (8001308 <Kalman_Start+0x154>)
 80011d8:	f004 fad2 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, 4, 1,(float32_t*) &B);
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <Kalman_Start+0x158>)
 80011de:	2201      	movs	r2, #1
 80011e0:	2104      	movs	r1, #4
 80011e2:	484b      	ldr	r0, [pc, #300]	; (8001310 <Kalman_Start+0x15c>)
 80011e4:	f004 facc 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&C_matrix, 1, 4,(float32_t*) &C);
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <Kalman_Start+0x160>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	2101      	movs	r1, #1
 80011ee:	484a      	ldr	r0, [pc, #296]	; (8001318 <Kalman_Start+0x164>)
 80011f0:	f004 fac6 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&G_matrix, 4, 1,(float32_t*) &G);
 80011f4:	4b49      	ldr	r3, [pc, #292]	; (800131c <Kalman_Start+0x168>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	2104      	movs	r1, #4
 80011fa:	4849      	ldr	r0, [pc, #292]	; (8001320 <Kalman_Start+0x16c>)
 80011fc:	f004 fac0 	bl	8005780 <arm_mat_init_f32>

	arm_mat_init_f32(&A_transpose_matrix, 4, 4,(float32_t*) &A_transpose);
 8001200:	4b48      	ldr	r3, [pc, #288]	; (8001324 <Kalman_Start+0x170>)
 8001202:	2204      	movs	r2, #4
 8001204:	2104      	movs	r1, #4
 8001206:	4848      	ldr	r0, [pc, #288]	; (8001328 <Kalman_Start+0x174>)
 8001208:	f004 faba 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&C_transpose_matrix, 4, 1,(float32_t*) &C_transpose);
 800120c:	4b47      	ldr	r3, [pc, #284]	; (800132c <Kalman_Start+0x178>)
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	4847      	ldr	r0, [pc, #284]	; (8001330 <Kalman_Start+0x17c>)
 8001214:	f004 fab4 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&G_transpose_matrix, 1, 4,(float32_t*) &G_transpose);
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <Kalman_Start+0x180>)
 800121a:	2204      	movs	r2, #4
 800121c:	2101      	movs	r1, #1
 800121e:	4846      	ldr	r0, [pc, #280]	; (8001338 <Kalman_Start+0x184>)
 8001220:	f004 faae 	bl	8005780 <arm_mat_init_f32>

	arm_mat_init_f32(&GGT_matrix, 4, 4,(float32_t*) &GGT);
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <Kalman_Start+0x188>)
 8001226:	2204      	movs	r2, #4
 8001228:	2104      	movs	r1, #4
 800122a:	4845      	ldr	r0, [pc, #276]	; (8001340 <Kalman_Start+0x18c>)
 800122c:	f004 faa8 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&GQGT_matrix, 4, 4,(float32_t*) &GQGT);
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <Kalman_Start+0x190>)
 8001232:	2204      	movs	r2, #4
 8001234:	2104      	movs	r1, #4
 8001236:	4844      	ldr	r0, [pc, #272]	; (8001348 <Kalman_Start+0x194>)
 8001238:	f004 faa2 	bl	8005780 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&Bu_matrix, 4, 1,(float32_t*) &Bu_data);
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <Kalman_Start+0x198>)
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	4843      	ldr	r0, [pc, #268]	; (8001350 <Kalman_Start+0x19c>)
 8001244:	f004 fa9c 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&Ax_matrix, 4, 1,(float32_t*) &Ax_data);
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <Kalman_Start+0x1a0>)
 800124a:	2201      	movs	r2, #1
 800124c:	2104      	movs	r1, #4
 800124e:	4842      	ldr	r0, [pc, #264]	; (8001358 <Kalman_Start+0x1a4>)
 8001250:	f004 fa96 	bl	8005780 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&CP_matrix, 1, 4,(float32_t*) &CP);
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <Kalman_Start+0x1a8>)
 8001256:	2204      	movs	r2, #4
 8001258:	2101      	movs	r1, #1
 800125a:	4841      	ldr	r0, [pc, #260]	; (8001360 <Kalman_Start+0x1ac>)
 800125c:	f004 fa90 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&CPCT_matrix, 1, 1,(float32_t*) &CPCT);
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <Kalman_Start+0x1b0>)
 8001262:	2201      	movs	r2, #1
 8001264:	2101      	movs	r1, #1
 8001266:	4840      	ldr	r0, [pc, #256]	; (8001368 <Kalman_Start+0x1b4>)
 8001268:	f004 fa8a 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&CPCTR_matrix, 1, 1,(float32_t*) &CPCTR);
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <Kalman_Start+0x1b8>)
 800126e:	2201      	movs	r2, #1
 8001270:	2101      	movs	r1, #1
 8001272:	483f      	ldr	r0, [pc, #252]	; (8001370 <Kalman_Start+0x1bc>)
 8001274:	f004 fa84 	bl	8005780 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&K_matrix, 4, 1,(float32_t*) &K);
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <Kalman_Start+0x1c0>)
 800127a:	2201      	movs	r2, #1
 800127c:	2104      	movs	r1, #4
 800127e:	483e      	ldr	r0, [pc, #248]	; (8001378 <Kalman_Start+0x1c4>)
 8001280:	f004 fa7e 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&PCT_matrix, 4, 1,(float32_t*) &PCT);
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <Kalman_Start+0x1c8>)
 8001286:	2201      	movs	r2, #1
 8001288:	2104      	movs	r1, #4
 800128a:	483d      	ldr	r0, [pc, #244]	; (8001380 <Kalman_Start+0x1cc>)
 800128c:	f004 fa78 	bl	8005780 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&CPCTRinv_matrix, 1, 1,(float32_t*) &CPCTRinv);
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <Kalman_Start+0x1d0>)
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	483c      	ldr	r0, [pc, #240]	; (8001388 <Kalman_Start+0x1d4>)
 8001298:	f004 fa72 	bl	8005780 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&Cx_matrix, 1, 1,(float32_t*) &Cx);
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <Kalman_Start+0x1d8>)
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	483b      	ldr	r0, [pc, #236]	; (8001390 <Kalman_Start+0x1dc>)
 80012a4:	f004 fa6c 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&yCx_matrix, 1, 1,(float32_t*) &yCx);
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <Kalman_Start+0x1e0>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	2101      	movs	r1, #1
 80012ae:	483a      	ldr	r0, [pc, #232]	; (8001398 <Kalman_Start+0x1e4>)
 80012b0:	f004 fa66 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&KyCx_matrix, 4, 1,(float32_t*) &KyCx);
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <Kalman_Start+0x1e8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	2104      	movs	r1, #4
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <Kalman_Start+0x1ec>)
 80012bc:	f004 fa60 	bl	8005780 <arm_mat_init_f32>

	arm_mat_init_f32(&Output_matrix, 1, 1,(float32_t*) &Es_velocity);
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <Kalman_Start+0x1f0>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	2101      	movs	r1, #1
 80012c6:	4838      	ldr	r0, [pc, #224]	; (80013a8 <Kalman_Start+0x1f4>)
 80012c8:	f004 fa5a 	bl	8005780 <arm_mat_init_f32>

	arm_mat_init_f32(&eye_matrix, 4, 4,(float32_t*) &eye);
 80012cc:	4b37      	ldr	r3, [pc, #220]	; (80013ac <Kalman_Start+0x1f8>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	2104      	movs	r1, #4
 80012d2:	4837      	ldr	r0, [pc, #220]	; (80013b0 <Kalman_Start+0x1fc>)
 80012d4:	f004 fa54 	bl	8005780 <arm_mat_init_f32>

	arm_mat_init_f32(&R_matrix, 1, 1,(float32_t*) &R);
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <Kalman_Start+0x200>)
 80012da:	2201      	movs	r2, #1
 80012dc:	2101      	movs	r1, #1
 80012de:	4836      	ldr	r0, [pc, #216]	; (80013b8 <Kalman_Start+0x204>)
 80012e0:	f004 fa4e 	bl	8005780 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_matrix, 1, 1,(float32_t*) &Z);
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <Kalman_Start+0x208>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	2101      	movs	r1, #1
 80012ea:	4835      	ldr	r0, [pc, #212]	; (80013c0 <Kalman_Start+0x20c>)
 80012ec:	f004 fa48 	bl	8005780 <arm_mat_init_f32>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000318 	.word	0x20000318
 80012f8:	20000328 	.word	0x20000328
 80012fc:	20000330 	.word	0x20000330
 8001300:	20000370 	.word	0x20000370
 8001304:	20000000 	.word	0x20000000
 8001308:	20000378 	.word	0x20000378
 800130c:	200000c0 	.word	0x200000c0
 8001310:	20000390 	.word	0x20000390
 8001314:	200000d0 	.word	0x200000d0
 8001318:	20000398 	.word	0x20000398
 800131c:	200000f0 	.word	0x200000f0
 8001320:	200003a8 	.word	0x200003a8
 8001324:	20000040 	.word	0x20000040
 8001328:	20000380 	.word	0x20000380
 800132c:	200000e0 	.word	0x200000e0
 8001330:	200003a0 	.word	0x200003a0
 8001334:	20000100 	.word	0x20000100
 8001338:	200003b0 	.word	0x200003b0
 800133c:	200003cc 	.word	0x200003cc
 8001340:	200003c4 	.word	0x200003c4
 8001344:	20000414 	.word	0x20000414
 8001348:	2000040c 	.word	0x2000040c
 800134c:	2000045c 	.word	0x2000045c
 8001350:	20000454 	.word	0x20000454
 8001354:	20000474 	.word	0x20000474
 8001358:	2000046c 	.word	0x2000046c
 800135c:	2000048c 	.word	0x2000048c
 8001360:	20000484 	.word	0x20000484
 8001364:	200004a4 	.word	0x200004a4
 8001368:	2000049c 	.word	0x2000049c
 800136c:	200004b0 	.word	0x200004b0
 8001370:	200004a8 	.word	0x200004a8
 8001374:	200004bc 	.word	0x200004bc
 8001378:	200004b4 	.word	0x200004b4
 800137c:	200004d4 	.word	0x200004d4
 8001380:	200004cc 	.word	0x200004cc
 8001384:	200004ec 	.word	0x200004ec
 8001388:	200004e4 	.word	0x200004e4
 800138c:	200004f8 	.word	0x200004f8
 8001390:	200004f0 	.word	0x200004f0
 8001394:	20000504 	.word	0x20000504
 8001398:	200004fc 	.word	0x200004fc
 800139c:	20000510 	.word	0x20000510
 80013a0:	20000508 	.word	0x20000508
 80013a4:	200003b8 	.word	0x200003b8
 80013a8:	200003bc 	.word	0x200003bc
 80013ac:	20000080 	.word	0x20000080
 80013b0:	20000388 	.word	0x20000388
 80013b4:	20000114 	.word	0x20000114
 80013b8:	20000520 	.word	0x20000520
 80013bc:	20000530 	.word	0x20000530
 80013c0:	20000528 	.word	0x20000528

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f000 fe16 	bl	8001ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f838 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f000 fa0a 	bl	80017e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d4:	f000 f9de 	bl	8001794 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013d8:	f000 f93a 	bl	8001650 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013dc:	f000 f898 	bl	8001510 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013e0:	f000 f98a 	bl	80016f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Kalman_Start();
 80013e4:	f7ff fee6 	bl	80011b4 <Kalman_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80013e8:	2104      	movs	r1, #4
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <main+0x68>)
 80013ec:	f002 f926 	bl	800363c <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Motor
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <main+0x6c>)
 80013f2:	f001 feb7 	bl	8003164 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <main+0x6c>)
 80013fa:	f001 ffc9 	bl	8003390 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3); //Timer Interrupt
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0x70>)
 8001400:	f001 ff0a 	bl	8003218 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t timestamp = 0;
	  	  if(HAL_GetTick() >= timestamp)
 8001404:	f000 fe5e 	bl	80020c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <main+0x74>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3f8      	bcc.n	8001404 <main+0x40>
	  	  {
	  		timestamp = HAL_GetTick() + 500;
 8001412:	f000 fe57 	bl	80020c4 <HAL_GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <main+0x74>)
 800141e:	6013      	str	r3, [r2, #0]
	  		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001420:	2120      	movs	r1, #32
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <main+0x78>)
 8001424:	f001 f99b 	bl	800275e <HAL_GPIO_TogglePin>
  {
 8001428:	e7ec      	b.n	8001404 <main+0x40>
 800142a:	bf00      	nop
 800142c:	20000584 	.word	0x20000584
 8001430:	2000053c 	.word	0x2000053c
 8001434:	200005cc 	.word	0x200005cc
 8001438:	200006ac 	.word	0x200006ac
 800143c:	40020000 	.word	0x40020000

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fa2e 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <SystemClock_Config+0xc8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <SystemClock_Config+0xc8>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <SystemClock_Config+0xc8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <SystemClock_Config+0xcc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a20      	ldr	r2, [pc, #128]	; (800150c <SystemClock_Config+0xcc>)
 800148a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <SystemClock_Config+0xcc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 f965 	bl	8002794 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 fb16 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2103      	movs	r1, #3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fbc7 	bl	8002c84 <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014fc:	f000 fb00 	bl	8001b00 <Error_Handler>
  }
}
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	; 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b096      	sub	sp, #88	; 0x58
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2220      	movs	r2, #32
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f004 f9b1 	bl	80058b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <MX_TIM1_Init+0x138>)
 8001550:	4a3e      	ldr	r2, [pc, #248]	; (800164c <MX_TIM1_Init+0x13c>)
 8001552:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <MX_TIM1_Init+0x138>)
 8001556:	2263      	movs	r2, #99	; 0x63
 8001558:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <MX_TIM1_Init+0x138>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <MX_TIM1_Init+0x138>)
 8001562:	2263      	movs	r2, #99	; 0x63
 8001564:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <MX_TIM1_Init+0x138>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <MX_TIM1_Init+0x138>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b35      	ldr	r3, [pc, #212]	; (8001648 <MX_TIM1_Init+0x138>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001578:	4833      	ldr	r0, [pc, #204]	; (8001648 <MX_TIM1_Init+0x138>)
 800157a:	f001 fda3 	bl	80030c4 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001584:	f000 fabc 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001592:	4619      	mov	r1, r3
 8001594:	482c      	ldr	r0, [pc, #176]	; (8001648 <MX_TIM1_Init+0x138>)
 8001596:	f002 faa9 	bl	8003aec <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015a0:	f000 faae 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015a4:	4828      	ldr	r0, [pc, #160]	; (8001648 <MX_TIM1_Init+0x138>)
 80015a6:	f001 fe99 	bl	80032dc <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015b0:	f000 faa6 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c0:	4619      	mov	r1, r3
 80015c2:	4821      	ldr	r0, [pc, #132]	; (8001648 <MX_TIM1_Init+0x138>)
 80015c4:	f002 fe4e 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80015ce:	f000 fa97 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_TIM1_Init+0x138>)
 80015f8:	f002 f9b6 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001602:	f000 fa7d 	bl	8001b00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM1_Init+0x138>)
 800162a:	f002 fe89 	bl	8004340 <HAL_TIMEx_ConfigBreakDeadTime>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001634:	f000 fa64 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM1_Init+0x138>)
 800163a:	f000 fb13 	bl	8001c64 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3758      	adds	r7, #88	; 0x58
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000053c 	.word	0x2000053c
 800164c:	40010000 	.word	0x40010000

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2224      	movs	r2, #36	; 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 f926 	bl	80058b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001682:	f04f 32ff 	mov.w	r2, #4294967295
 8001686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001694:	2303      	movs	r3, #3
 8001696:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_TIM2_Init+0xa4>)
 80016c0:	f001 ff16 	bl	80034f0 <HAL_TIM_Encoder_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ca:	f000 fa19 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM2_Init+0xa4>)
 80016dc:	f002 fdc2 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016e6:	f000 fa0b 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3730      	adds	r7, #48	; 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000584 	.word	0x20000584

080016f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM3_Init+0x94>)
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <MX_TIM3_Init+0x98>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_TIM3_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM3_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_TIM3_Init+0x94>)
 8001728:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800172c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM3_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173a:	4814      	ldr	r0, [pc, #80]	; (800178c <MX_TIM3_Init+0x94>)
 800173c:	f001 fcc2 	bl	80030c4 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 f9db 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM3_Init+0x94>)
 8001758:	f002 f9c8 	bl	8003aec <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 f9cd 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM3_Init+0x94>)
 8001774:	f002 fd76 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800177e:	f000 f9bf 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200005cc 	.word	0x200005cc
 8001790:	40000400 	.word	0x40000400

08001794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART2_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017cc:	f002 fe1e 	bl	800440c <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f993 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000614 	.word	0x20000614
 80017e4:	40004400 	.word	0x40004400

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2130      	movs	r1, #48	; 0x30
 8001872:	4812      	ldr	r0, [pc, #72]	; (80018bc <MX_GPIO_Init+0xd4>)
 8001874:	f000 ff5a 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_GPIO_Init+0xd8>)
 8001890:	f000 fdc8 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001894:	2330      	movs	r3, #48	; 0x30
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_GPIO_Init+0xd4>)
 80018ac:	f000 fdba 	bl	8002424 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020800 	.word	0x40020800

080018c4 <setMotor>:

/* USER CODE BEGIN 4 */
void setMotor(int PWM){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if(PWM >= 0){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db09      	blt.n	80018e6 <setMotor+0x22>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PWM);
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <setMotor+0x4c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2110      	movs	r1, #16
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <setMotor+0x50>)
 80018e0:	f000 ff24 	bl	800272c <HAL_GPIO_WritePin>
	}
	else if (PWM < 0){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}
 80018e4:	e00f      	b.n	8001906 <setMotor+0x42>
	else if (PWM < 0){
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0c      	bge.n	8001906 <setMotor+0x42>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <setMotor+0x4c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <setMotor+0x50>)
 8001902:	f000 ff13 	bl	800272c <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000053c 	.word	0x2000053c
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	f040 80be 	bne.w	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x18e>
		 QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	461a      	mov	r2, r3
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001934:	601a      	str	r2, [r3, #0]
//		 RawSpeed = (QEIReadRaw - L_QEIReadRaw)*1000.0*2.0*M_PI/280.0;
		 L_QEIReadRaw = QEIReadRaw;
 8001936:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a62      	ldr	r2, [pc, #392]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800193c:	6013      	str	r3, [r2, #0]
		 QEIAd = (QEIReadRaw*2.0*M_PI/280.0);
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdf6 	bl	8000534 <__aeabi_i2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f7fe fca6 	bl	800029c <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a355      	add	r3, pc, #340	; (adr r3, 8001ab0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe53 	bl	8000608 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001970:	f7fe ff74 	bl	800085c <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f93c 	bl	8000bf8 <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001984:	6013      	str	r3, [r2, #0]
		 RawSpeed = (QEIAd - L_QEIAd)*5000.0;
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001ad4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
		 PWM = 100 * sin(HAL_GetTick()/1000.0);
 80019a4:	f000 fb8e 	bl	80020c4 <HAL_GetTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdb2 	bl	8000514 <__aeabi_ui2d>
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019b6:	f7fe ff51 	bl	800085c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ec43 2b17 	vmov	d7, r2, r3
 80019c2:	eeb0 0a47 	vmov.f32	s0, s14
 80019c6:	eef0 0a67 	vmov.f32	s1, s15
 80019ca:	f008 fbe9 	bl	800a1a0 <sin>
 80019ce:	ec51 0b10 	vmov	r0, r1, d0
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019d8:	f7fe fe16 	bl	8000608 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f8c0 	bl	8000b68 <__aeabi_d2iz>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019ec:	6013      	str	r3, [r2, #0]
		 setMotor(PWM);
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff66 	bl	80018c4 <setMotor>
		 Voltage = 12.0*PWM/100.0;
 80019f8:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd99 	bl	8000534 <__aeabi_i2d>
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a08:	f7fe fdfe 	bl	8000608 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001a1a:	f7fe ff1f 	bl	800085c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f8e7 	bl	8000bf8 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a2f      	ldr	r2, [pc, #188]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a2e:	6013      	str	r3, [r2, #0]
		 kalman = SteadyStateKalmanFilter(Voltage ,QEIAd);
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	eef0 0a47 	vmov.f32	s1, s14
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f7ff fae0 	bl	8001008 <SteadyStateKalmanFilter>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
		if (huart2.gState == HAL_UART_STATE_READY)
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d11f      	bne.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			sprintf(TxBuffer,"%.2f %.2f\r\n",kalman,RawSpeed);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd78 	bl	8000558 <__aeabi_f2d>
 8001a68:	4604      	mov	r4, r0
 8001a6a:	460d      	mov	r5, r1
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd71 	bl	8000558 <__aeabi_f2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a7e:	4622      	mov	r2, r4
 8001a80:	462b      	mov	r3, r5
 8001a82:	491d      	ldr	r1, [pc, #116]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a84:	481d      	ldr	r0, [pc, #116]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a86:	f004 fd9b 	bl	80065c0 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)TxBuffer, strlen(TxBuffer));
 8001a8a:	481c      	ldr	r0, [pc, #112]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a8c:	f7fe fba8 	bl	80001e0 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4919      	ldr	r1, [pc, #100]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a9a:	f002 fd04 	bl	80044a6 <HAL_UART_Transmit_IT>
		}


	  	 L_QEIAd = QEIAd;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001aa4:	6013      	str	r3, [r2, #0]
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bdb0      	pop	{r4, r5, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	54442d18 	.word	0x54442d18
 8001ab4:	400921fb 	.word	0x400921fb
 8001ab8:	200005cc 	.word	0x200005cc
 8001abc:	20000584 	.word	0x20000584
 8001ac0:	2000068c 	.word	0x2000068c
 8001ac4:	20000690 	.word	0x20000690
 8001ac8:	40718000 	.word	0x40718000
 8001acc:	200006a0 	.word	0x200006a0
 8001ad0:	200006a4 	.word	0x200006a4
 8001ad4:	459c4000 	.word	0x459c4000
 8001ad8:	20000694 	.word	0x20000694
 8001adc:	408f4000 	.word	0x408f4000
 8001ae0:	40590000 	.word	0x40590000
 8001ae4:	2000069c 	.word	0x2000069c
 8001ae8:	40280000 	.word	0x40280000
 8001aec:	20000698 	.word	0x20000698
 8001af0:	200006a8 	.word	0x200006a8
 8001af4:	20000614 	.word	0x20000614
 8001af8:	0800b250 	.word	0x0800b250
 8001afc:	20000658 	.word	0x20000658

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b4a:	2007      	movs	r0, #7
 8001b4c:	f000 fb96 	bl	800227c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <HAL_TIM_Base_MspInit+0x70>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10e      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b8a:	e01a      	b.n	8001bc2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a10      	ldr	r2, [pc, #64]	; (8001bd4 <HAL_TIM_Base_MspInit+0x78>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d115      	bne.n	8001bc2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_TIM_Base_MspInit+0x74>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	201d      	movs	r0, #29
 8001bb8:	f000 fb6b 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bbc:	201d      	movs	r0, #29
 8001bbe:	f000 fb84 	bl	80022ca <HAL_NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40000400 	.word	0x40000400

08001bd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d12b      	bne.n	8001c52 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c32:	2303      	movs	r3, #3
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c4e:	f000 fbe9 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_TIM_MspPostInit+0x68>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d11e      	bne.n	8001cc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_TIM_MspPostInit+0x6c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <HAL_TIM_MspPostInit+0x70>)
 8001cc0:	f000 fbb0 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_UART_MspInit+0x94>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d133      	bne.n	8001d62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_UART_MspInit+0x98>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_UART_MspInit+0x98>)
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_UART_MspInit+0x98>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_UART_MspInit+0x98>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_UART_MspInit+0x98>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_UART_MspInit+0x98>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d32:	230c      	movs	r3, #12
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d42:	2307      	movs	r3, #7
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4809      	ldr	r0, [pc, #36]	; (8001d74 <HAL_UART_MspInit+0x9c>)
 8001d4e:	f000 fb69 	bl	8002424 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2026      	movs	r0, #38	; 0x26
 8001d58:	f000 fa9b 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d5c:	2026      	movs	r0, #38	; 0x26
 8001d5e:	f000 fab4 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f96a 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <TIM3_IRQHandler+0x10>)
 8001dd2:	f001 fcc1 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200005cc 	.word	0x200005cc

08001de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <USART2_IRQHandler+0x10>)
 8001de6:	f002 fba3 	bl	8004530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000614 	.word	0x20000614

08001df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_kill>:

int _kill(int pid, int sig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e0e:	f003 fd25 	bl	800585c <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
  return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_exit>:

void _exit (int status)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffe7 	bl	8001e04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e36:	e7fe      	b.n	8001e36 <_exit+0x12>

08001e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e00a      	b.n	8001e60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4a:	f3af 8000 	nop.w
 8001e4e:	4601      	mov	r1, r0
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	60ba      	str	r2, [r7, #8]
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf0      	blt.n	8001e4a <_read+0x12>
  }

  return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e009      	b.n	8001e98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	60ba      	str	r2, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf1      	blt.n	8001e84 <_write+0x12>
  }
  return len;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_close>:

int _close(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_isatty>:

int _isatty(int file)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f003 fc8a 	bl	800585c <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20020000 	.word	0x20020000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	200006b0 	.word	0x200006b0
 8001f7c:	200006c8 	.word	0x200006c8

08001f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <SystemInit+0x20>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <SystemInit+0x20>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack    		 /* set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001faa:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc0:	4c0b      	ldr	r4, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fce:	f7ff ffd7 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f003 fc49 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff f9f5 	bl	80013c4 <main>
  bx  lr    
 8001fda:	4770      	bx	lr
ldr   sp, =_estack    		 /* set stack pointer */
 8001fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8001fe8:	0800b908 	.word	0x0800b908
  ldr r2, =_sbss
 8001fec:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001ff0:	200006c8 	.word	0x200006c8

08001ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_Init+0x40>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_Init+0x40>)
 800200e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_Init+0x40>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f92b 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fd6e 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f943 	bl	80022e6 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f90b 	bl	8002292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000118 	.word	0x20000118
 8002094:	20000120 	.word	0x20000120
 8002098:	2000011c 	.word	0x2000011c

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000120 	.word	0x20000120
 80020c0:	200006b4 	.word	0x200006b4

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200006b4 	.word	0x200006b4

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff29 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff3e 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff8e 	bl	80021d0 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5d 	bl	800217c <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff31 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa2 	bl	8002238 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff feda 	bl	80020c4 <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d008      	beq.n	8002330 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e052      	b.n	80023d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0216 	bic.w	r2, r2, #22
 800233e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800234e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <HAL_DMA_Abort+0x62>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0208 	bic.w	r2, r2, #8
 800236e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002380:	e013      	b.n	80023aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002382:	f7ff fe9f 	bl	80020c4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b05      	cmp	r3, #5
 800238e:	d90c      	bls.n	80023aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e015      	b.n	80023d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e4      	bne.n	8002382 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	223f      	movs	r2, #63	; 0x3f
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d004      	beq.n	80023fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00c      	b.n	8002416 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2205      	movs	r2, #5
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e159      	b.n	80026f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8148 	bne.w	80026ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	2b02      	cmp	r3, #2
 8002474:	d130      	bne.n	80024d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d017      	beq.n	8002514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a2 	beq.w	80026ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_GPIO_Init+0x2e8>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a56      	ldr	r2, [pc, #344]	; (800270c <HAL_GPIO_Init+0x2e8>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <HAL_GPIO_Init+0x2e8>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_GPIO_Init+0x2ec>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a49      	ldr	r2, [pc, #292]	; (8002714 <HAL_GPIO_Init+0x2f0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x202>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_GPIO_Init+0x2f4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x1fe>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a47      	ldr	r2, [pc, #284]	; (800271c <HAL_GPIO_Init+0x2f8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x1fa>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a46      	ldr	r2, [pc, #280]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x1f6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a45      	ldr	r2, [pc, #276]	; (8002724 <HAL_GPIO_Init+0x300>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x1f2>
 8002612:	2304      	movs	r3, #4
 8002614:	e008      	b.n	8002628 <HAL_GPIO_Init+0x204>
 8002616:	2307      	movs	r3, #7
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x204>
 800261a:	2303      	movs	r3, #3
 800261c:	e004      	b.n	8002628 <HAL_GPIO_Init+0x204>
 800261e:	2302      	movs	r3, #2
 8002620:	e002      	b.n	8002628 <HAL_GPIO_Init+0x204>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x204>
 8002626:	2300      	movs	r3, #0
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f002 0203 	and.w	r2, r2, #3
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	4093      	lsls	r3, r2
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002638:	4935      	ldr	r1, [pc, #212]	; (8002710 <HAL_GPIO_Init+0x2ec>)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_GPIO_Init+0x304>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266a:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <HAL_GPIO_Init+0x304>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_GPIO_Init+0x304>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_GPIO_Init+0x304>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_GPIO_Init+0x304>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026be:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <HAL_GPIO_Init+0x304>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_GPIO_Init+0x304>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e8:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <HAL_GPIO_Init+0x304>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3301      	adds	r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	f67f aea2 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	40013800 	.word	0x40013800
 8002714:	40020000 	.word	0x40020000
 8002718:	40020400 	.word	0x40020400
 800271c:	40020800 	.word	0x40020800
 8002720:	40020c00 	.word	0x40020c00
 8002724:	40021000 	.word	0x40021000
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002770:	887a      	ldrh	r2, [r7, #2]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	041a      	lsls	r2, r3, #16
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43d9      	mvns	r1, r3
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	400b      	ands	r3, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e267      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d00c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d112      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b7e      	ldr	r3, [pc, #504]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e242      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a75      	ldr	r2, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6f      	ldr	r2, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6c      	ldr	r2, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b69      	ldr	r3, [pc, #420]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fc3a 	bl	80020c4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fc36 	bl	80020c4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e207      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fc26 	bl	80020c4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fc22 	bl	80020c4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1f3      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1c7      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4937      	ldr	r1, [pc, #220]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x244>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7ff fbdb 	bl	80020c4 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002912:	f7ff fbd7 	bl	80020c4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e1a8      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4925      	ldr	r1, [pc, #148]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RCC_OscConfig+0x244>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff fbba 	bl	80020c4 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7ff fbb6 	bl	80020c4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e187      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d036      	beq.n	80029ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_RCC_OscConfig+0x248>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7ff fb9a 	bl	80020c4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff fb96 	bl	80020c4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e167      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x240>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
 80029b2:	e01b      	b.n	80029ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_OscConfig+0x248>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7ff fb83 	bl	80020c4 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	e00e      	b.n	80029e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c2:	f7ff fb7f 	bl	80020c4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d907      	bls.n	80029e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e150      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	42470000 	.word	0x42470000
 80029dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ea      	bne.n	80029c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8097 	beq.w	8002b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a7c      	ldr	r2, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b77      	ldr	r3, [pc, #476]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a36:	4b74      	ldr	r3, [pc, #464]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a73      	ldr	r2, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7ff fb3f 	bl	80020c4 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7ff fb3b 	bl	80020c4 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e10c      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_OscConfig+0x474>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2ea>
 8002a70:	4b64      	ldr	r3, [pc, #400]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a63      	ldr	r2, [pc, #396]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x324>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x30c>
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x324>
 8002aa0:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	4a57      	ldr	r2, [pc, #348]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a54      	ldr	r2, [pc, #336]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff fb00 	bl	80020c4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7ff fafc 	bl	80020c4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0cb      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ee      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x334>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7ff faea 	bl	80020c4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7ff fae6 	bl	80020c4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0b5      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ee      	bne.n	8002af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a38      	ldr	r2, [pc, #224]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a1 	beq.w	8002c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d05c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d141      	bne.n	8002bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff faba 	bl	80020c4 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b54:	f7ff fab6 	bl	80020c4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e087      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	491b      	ldr	r1, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fa8f 	bl	80020c4 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002baa:	f7ff fa8b 	bl	80020c4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e05c      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x416>
 8002bc8:	e054      	b.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_RCC_OscConfig+0x478>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff fa78 	bl	80020c4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff fa74 	bl	80020c4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e045      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_OscConfig+0x470>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x444>
 8002bf6:	e03d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e038      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x4ec>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d028      	beq.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d121      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0cc      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d90c      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e067      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4934      	ldr	r1, [pc, #208]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7ff f9a6 	bl	80020c4 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7ff f9a2 	bl	80020c4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d20c      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f906 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	0800b25c 	.word	0x0800b25c
 8002e48:	20000118 	.word	0x20000118
 8002e4c:	2000011c 	.word	0x2000011c

08002e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b094      	sub	sp, #80	; 0x50
 8002e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e60:	2300      	movs	r3, #0
 8002e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e68:	4b79      	ldr	r3, [pc, #484]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d00d      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x40>
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	f200 80e1 	bhi.w	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e82:	e0db      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b73      	ldr	r3, [pc, #460]	; (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e88:	e0db      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e90:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d063      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eba:	2300      	movs	r3, #0
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4621      	mov	r1, r4
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	6139      	str	r1, [r7, #16]
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4651      	mov	r1, sl
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4651      	mov	r1, sl
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4651      	mov	r1, sl
 8002f04:	ebb2 0801 	subs.w	r8, r2, r1
 8002f08:	4659      	mov	r1, fp
 8002f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f22:	4690      	mov	r8, r2
 8002f24:	4699      	mov	r9, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	eb18 0303 	adds.w	r3, r8, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	462b      	mov	r3, r5
 8002f30:	eb49 0303 	adc.w	r3, r9, r3
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f42:	4629      	mov	r1, r5
 8002f44:	024b      	lsls	r3, r1, #9
 8002f46:	4621      	mov	r1, r4
 8002f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	024a      	lsls	r2, r1, #9
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f56:	2200      	movs	r2, #0
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f60:	f7fd fe9a 	bl	8000c98 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	e058      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	4611      	mov	r1, r2
 8002f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f88:	4642      	mov	r2, r8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	00eb      	lsls	r3, r5, #3
 8002fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	18e3      	adds	r3, r4, r3
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300a:	2200      	movs	r2, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	61fa      	str	r2, [r7, #28]
 8003010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003014:	f7fd fe40 	bl	8000c98 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4613      	mov	r3, r2
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_RCC_GetSysClockFreq+0x200>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetSysClockFreq+0x204>)
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003044:	4618      	mov	r0, r3
 8003046:	3750      	adds	r7, #80	; 0x50
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000118 	.word	0x20000118

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	0800b26c 	.word	0x0800b26c

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffdc 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0b5b      	lsrs	r3, r3, #13
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	0800b26c 	.word	0x0800b26c

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e041      	b.n	800315a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fd36 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 fde2 	bl	8003ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e03c      	b.n	80031f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_TIM_Base_Start+0xa0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_TIM_Base_Start+0x5c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d013      	beq.n	80031c0 <HAL_TIM_Base_Start+0x5c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_TIM_Base_Start+0xa4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_TIM_Base_Start+0x5c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_TIM_Base_Start+0xa8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIM_Base_Start+0x5c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_TIM_Base_Start+0xac>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_Base_Start+0x5c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_TIM_Base_Start+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d010      	beq.n	80031f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	e007      	b.n	80031f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40010000 	.word	0x40010000
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40014000 	.word	0x40014000

08003218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e044      	b.n	80032ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x6c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d013      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x6c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x6c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x6c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0x6c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d111      	bne.n	80032a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d010      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	e007      	b.n	80032b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40010000 	.word	0x40010000
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40014000 	.word	0x40014000

080032dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e041      	b.n	8003372 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f839 	bl	800337a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f000 fcd6 	bl	8003ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_TIM_PWM_Start+0x24>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e022      	b.n	80033fa <HAL_TIM_PWM_Start+0x6a>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d109      	bne.n	80033ce <HAL_TIM_PWM_Start+0x3e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e015      	b.n	80033fa <HAL_TIM_PWM_Start+0x6a>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d109      	bne.n	80033e8 <HAL_TIM_PWM_Start+0x58>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e008      	b.n	80033fa <HAL_TIM_PWM_Start+0x6a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e068      	b.n	80034d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0x82>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003410:	e013      	b.n	800343a <HAL_TIM_PWM_Start+0xaa>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0x92>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003420:	e00b      	b.n	800343a <HAL_TIM_PWM_Start+0xaa>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0xa2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	e003      	b.n	800343a <HAL_TIM_PWM_Start+0xaa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fee8 	bl	8004218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_TIM_PWM_Start+0x14c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d107      	bne.n	8003462 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_TIM_PWM_Start+0x14c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_TIM_PWM_Start+0x10e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003474:	d013      	beq.n	800349e <HAL_TIM_PWM_Start+0x10e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_TIM_PWM_Start+0x150>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_TIM_PWM_Start+0x10e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_TIM_PWM_Start+0x154>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_TIM_PWM_Start+0x10e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <HAL_TIM_PWM_Start+0x158>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIM_PWM_Start+0x10e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_TIM_PWM_Start+0x15c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d111      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b06      	cmp	r3, #6
 80034ae:	d010      	beq.n	80034d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	e007      	b.n	80034d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40014000 	.word	0x40014000

080034f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e097      	b.n	8003634 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fe fb5d 	bl	8001bd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f000 fbc1 	bl	8003ccc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	4313      	orrs	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003590:	f023 030c 	bic.w	r3, r3, #12
 8003594:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800359c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	4313      	orrs	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	031b      	lsls	r3, r3, #12
 80035c0:	4313      	orrs	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4313      	orrs	r3, r2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003654:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800365c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003664:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d110      	bne.n	800368e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003672:	7b7b      	ldrb	r3, [r7, #13]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d001      	beq.n	800367c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e069      	b.n	8003750 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368c:	e031      	b.n	80036f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d110      	bne.n	80036b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800369a:	7b3b      	ldrb	r3, [r7, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d001      	beq.n	80036a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e055      	b.n	8003750 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	e01d      	b.n	80036f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d108      	bne.n	80036ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c2:	7b7b      	ldrb	r3, [r7, #13]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c8:	7b3b      	ldrb	r3, [r7, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e03e      	b.n	8003750 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_TIM_Encoder_Start+0xc4>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d008      	beq.n	8003710 <HAL_TIM_Encoder_Start+0xd4>
 80036fe:	e00f      	b.n	8003720 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fd85 	bl	8004218 <TIM_CCxChannelCmd>
      break;
 800370e:	e016      	b.n	800373e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2201      	movs	r2, #1
 8003716:	2104      	movs	r1, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fd7d 	bl	8004218 <TIM_CCxChannelCmd>
      break;
 800371e:	e00e      	b.n	800373e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd75 	bl	8004218 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2201      	movs	r2, #1
 8003734:	2104      	movs	r1, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fd6e 	bl	8004218 <TIM_CCxChannelCmd>
      break;
 800373c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0202 	mvn.w	r2, #2
 8003784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa77 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa69 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa7a 	bl	8003ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0204 	mvn.w	r2, #4
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa4d 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa3f 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa50 	bl	8003ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0208 	mvn.w	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa23 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa15 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa26 	bl	8003ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9f9 	bl	8003c8e <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9eb 	bl	8003c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9fc 	bl	8003ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0201 	mvn.w	r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe f81e 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fd78 	bl	80043f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9c1 	bl	8003cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b20      	cmp	r3, #32
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0220 	mvn.w	r2, #32
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fd42 	bl	80043e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0ae      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	f200 809f 	bhi.w	8003ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003ad5 	.word	0x08003ad5
 80039a4:	08003ad5 	.word	0x08003ad5
 80039a8:	08003ad5 	.word	0x08003ad5
 80039ac:	08003a11 	.word	0x08003a11
 80039b0:	08003ad5 	.word	0x08003ad5
 80039b4:	08003ad5 	.word	0x08003ad5
 80039b8:	08003ad5 	.word	0x08003ad5
 80039bc:	08003a53 	.word	0x08003a53
 80039c0:	08003ad5 	.word	0x08003ad5
 80039c4:	08003ad5 	.word	0x08003ad5
 80039c8:	08003ad5 	.word	0x08003ad5
 80039cc:	08003a93 	.word	0x08003a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f9f8 	bl	8003dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0208 	orr.w	r2, r2, #8
 80039ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
      break;
 8003a0e:	e064      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fa3e 	bl	8003e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]
      break;
 8003a50:	e043      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fa89 	bl	8003f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0208 	orr.w	r2, r2, #8
 8003a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0204 	bic.w	r2, r2, #4
 8003a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69d9      	ldr	r1, [r3, #28]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]
      break;
 8003a90:	e023      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fad3 	bl	8004044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	021a      	lsls	r2, r3, #8
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0b4      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x186>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d03e      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	f200 8087 	bhi.w	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_TIM_ConfigClockSource+0x172>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d87f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d01a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xa6>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d87b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d050      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x11a>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d877      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b50      	cmp	r3, #80	; 0x50
 8003b6a:	d03c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d873      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	d058      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x13a>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d86f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b30      	cmp	r3, #48	; 0x30
 8003b7a:	d064      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b30      	cmp	r3, #48	; 0x30
 8003b7e:	d86b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d060      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d867      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d05a      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	e062      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f000 fb19 	bl	80041d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	609a      	str	r2, [r3, #8]
      break;
 8003bbe:	e04f      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f000 fb02 	bl	80041d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e03c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fa76 	bl	80040e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2150      	movs	r1, #80	; 0x50
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 facf 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e02c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fa95 	bl	8004142 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2160      	movs	r1, #96	; 0x60
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fabf 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003c24:	e01c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 fa56 	bl	80040e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 faaf 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 faa6 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a34      	ldr	r2, [pc, #208]	; (8003db0 <TIM_Base_SetConfig+0xe4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <TIM_Base_SetConfig+0x38>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d00b      	beq.n	8003d04 <TIM_Base_SetConfig+0x38>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a31      	ldr	r2, [pc, #196]	; (8003db4 <TIM_Base_SetConfig+0xe8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <TIM_Base_SetConfig+0x38>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a30      	ldr	r2, [pc, #192]	; (8003db8 <TIM_Base_SetConfig+0xec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_Base_SetConfig+0x38>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <TIM_Base_SetConfig+0xf0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d108      	bne.n	8003d16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <TIM_Base_SetConfig+0xe4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01b      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d017      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <TIM_Base_SetConfig+0xe8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <TIM_Base_SetConfig+0xec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00f      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <TIM_Base_SetConfig+0xf0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <TIM_Base_SetConfig+0xf4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <TIM_Base_SetConfig+0xf8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_Base_SetConfig+0x8a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <TIM_Base_SetConfig+0xfc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <TIM_Base_SetConfig+0xe4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d103      	bne.n	8003d9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	615a      	str	r2, [r3, #20]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400
 8003dc8:	40014800 	.word	0x40014800

08003dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f023 0201 	bic.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f023 0302 	bic.w	r3, r3, #2
 8003e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <TIM_OC1_SetConfig+0xc8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10c      	bne.n	8003e42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0308 	bic.w	r3, r3, #8
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <TIM_OC1_SetConfig+0xc8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d111      	bne.n	8003e6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40010000 	.word	0x40010000

08003e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0210 	bic.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0320 	bic.w	r3, r3, #32
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <TIM_OC2_SetConfig+0xd4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10d      	bne.n	8003f14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <TIM_OC2_SetConfig+0xd4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d113      	bne.n	8003f44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40010000 	.word	0x40010000

08003f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <TIM_OC3_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <TIM_OC3_SetConfig+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d113      	bne.n	800401a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40010000 	.word	0x40010000

08004044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800408e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	031b      	lsls	r3, r3, #12
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <TIM_OC4_SetConfig+0x9c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000

080040e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 030a 	bic.w	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f043 0307 	orr.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2201      	movs	r2, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	43db      	mvns	r3, r3
 800423a:	401a      	ands	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	431a      	orrs	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e050      	b.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d013      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a16      	ldr	r2, [pc, #88]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10c      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40014000 	.word	0x40014000

08004340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e03d      	b.n	80043d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e03f      	b.n	800449e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd fc50 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fcbf 	bl	8004dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	4613      	mov	r3, r2
 80044b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d130      	bne.n	8004522 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Transmit_IT+0x26>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e029      	b.n	8004524 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit_IT+0x38>
 80044da:	2302      	movs	r3, #2
 80044dc:	e022      	b.n	8004524 <HAL_UART_Transmit_IT+0x7e>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2221      	movs	r2, #33	; 0x21
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800451c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b0ba      	sub	sp, #232	; 0xe8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800456e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_UART_IRQHandler+0x66>
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fb65 	bl	8004c5e <UART_Receive_IT>
      return;
 8004594:	e256      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80de 	beq.w	800475c <HAL_UART_IRQHandler+0x22c>
 80045a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80d1 	beq.w	800475c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_UART_IRQHandler+0xae>
 80045c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_UART_IRQHandler+0xd2>
 80045ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_UART_IRQHandler+0xf6>
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d011      	beq.n	8004656 <HAL_UART_IRQHandler+0x126>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800463e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0208 	orr.w	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 81ed 	beq.w	8004a3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_UART_IRQHandler+0x14e>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 faf0 	bl	8004c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_UART_IRQHandler+0x17a>
 80046a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d04f      	beq.n	800474a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9f8 	bl	8004aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d141      	bne.n	8004742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1d9      	bne.n	80046be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	2b00      	cmp	r3, #0
 8004710:	d013      	beq.n	800473a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	4a7d      	ldr	r2, [pc, #500]	; (800490c <HAL_UART_IRQHandler+0x3dc>)
 8004718:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fe5d 	bl	80023de <HAL_DMA_Abort_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004734:	4610      	mov	r0, r2
 8004736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00e      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f99a 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e00a      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f996 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e006      	b.n	8004758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f992 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004756:	e170      	b.n	8004a3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	bf00      	nop
    return;
 800475a:	e16e      	b.n	8004a3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 814a 	bne.w	80049fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8143 	beq.w	80049fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 813c 	beq.w	80049fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004782:	2300      	movs	r3, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	f040 80b4 	bne.w	8004910 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8140 	beq.w	8004a3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f080 8139 	bcs.w	8004a3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047de:	f000 8088 	beq.w	80048f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800480e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800481a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1d9      	bne.n	80047e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800483e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800485a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e1      	bne.n	800482e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800487a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800488e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800489c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e3      	bne.n	800486a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80048d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd fd06 	bl	80022fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8c0 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004908:	e099      	b.n	8004a3e <HAL_UART_IRQHandler+0x50e>
 800490a:	bf00      	nop
 800490c:	08004b67 	.word	0x08004b67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 808b 	beq.w	8004a42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800492c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8086 	beq.w	8004a42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800495a:	647a      	str	r2, [r7, #68]	; 0x44
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e3      	bne.n	8004936 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	623b      	str	r3, [r7, #32]
   return(result);
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3314      	adds	r3, #20
 800498e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004992:	633a      	str	r2, [r7, #48]	; 0x30
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e3      	bne.n	800496e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049d8:	61fa      	str	r2, [r7, #28]
 80049da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	617b      	str	r3, [r7, #20]
   return(result);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e3      	bne.n	80049b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f848 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f8:	e023      	b.n	8004a42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_UART_IRQHandler+0x4ea>
 8004a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8bb 	bl	8004b8e <UART_Transmit_IT>
    return;
 8004a18:	e014      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <HAL_UART_IRQHandler+0x514>
 8004a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8fb 	bl	8004c2e <UART_EndTransmit_IT>
    return;
 8004a38:	e004      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
    return;
 8004a3a:	bf00      	nop
 8004a3c:	e002      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
      return;
 8004a3e:	bf00      	nop
 8004a40:	e000      	b.n	8004a44 <HAL_UART_IRQHandler+0x514>
      return;
 8004a42:	bf00      	nop
  }
}
 8004a44:	37e8      	adds	r7, #232	; 0xe8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop

08004a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b095      	sub	sp, #84	; 0x54
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d119      	bne.n	8004b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b38:	61ba      	str	r2, [r7, #24]
 8004b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	613b      	str	r3, [r7, #16]
   return(result);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b5a:	bf00      	nop
 8004b5c:	3754      	adds	r7, #84	; 0x54
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff77 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b21      	cmp	r3, #33	; 0x21
 8004ba0:	d13e      	bne.n	8004c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d114      	bne.n	8004bd6 <UART_Transmit_IT+0x48>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d110      	bne.n	8004bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	1c9a      	adds	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	621a      	str	r2, [r3, #32]
 8004bd4:	e008      	b.n	8004be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6211      	str	r1, [r2, #32]
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fefc 	bl	8004a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08c      	sub	sp, #48	; 0x30
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b22      	cmp	r3, #34	; 0x22
 8004c70:	f040 80ab 	bne.w	8004dca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7c:	d117      	bne.n	8004cae <UART_Receive_IT+0x50>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d113      	bne.n	8004cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28
 8004cac:	e026      	b.n	8004cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc0:	d007      	beq.n	8004cd2 <UART_Receive_IT+0x74>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <UART_Receive_IT+0x82>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e008      	b.n	8004cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d15a      	bne.n	8004dc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0220 	bic.w	r2, r2, #32
 8004d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d135      	bne.n	8004dbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 0310 	bic.w	r3, r3, #16
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	623a      	str	r2, [r7, #32]
 8004d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69f9      	ldr	r1, [r7, #28]
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d10a      	bne.n	8004dae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fe67 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
 8004dba:	e002      	b.n	8004dc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fe4f 	bl	8004a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e002      	b.n	8004dcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b0c0      	sub	sp, #256	; 0x100
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	68d9      	ldr	r1, [r3, #12]
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	ea40 0301 	orr.w	r3, r0, r1
 8004dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e2c:	f021 010c 	bic.w	r1, r1, #12
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	6999      	ldr	r1, [r3, #24]
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	ea40 0301 	orr.w	r3, r0, r1
 8004e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <UART_SetConfig+0x2cc>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d005      	beq.n	8004e74 <UART_SetConfig+0xa0>
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <UART_SetConfig+0x2d0>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d104      	bne.n	8004e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7fe f912 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8004e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e7c:	e003      	b.n	8004e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7e:	f7fe f8f9 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8004e82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	f040 810c 	bne.w	80050ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	1891      	adds	r1, r2, r2
 8004eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eae:	415b      	adcs	r3, r3
 8004eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	eb12 0801 	adds.w	r8, r2, r1
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	eb43 0901 	adc.w	r9, r3, r1
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed6:	4690      	mov	r8, r2
 8004ed8:	4699      	mov	r9, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	eb18 0303 	adds.w	r3, r8, r3
 8004ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	eb49 0303 	adc.w	r3, r9, r3
 8004eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004efa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f02:	460b      	mov	r3, r1
 8004f04:	18db      	adds	r3, r3, r3
 8004f06:	653b      	str	r3, [r7, #80]	; 0x50
 8004f08:	4613      	mov	r3, r2
 8004f0a:	eb42 0303 	adc.w	r3, r2, r3
 8004f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f18:	f7fb febe 	bl	8000c98 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4b61      	ldr	r3, [pc, #388]	; (80050a8 <UART_SetConfig+0x2d4>)
 8004f22:	fba3 2302 	umull	r2, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	011c      	lsls	r4, r3, #4
 8004f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f44:	415b      	adcs	r3, r3
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f52:	4649      	mov	r1, r9
 8004f54:	eb43 0b01 	adc.w	fp, r3, r1
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f6c:	4692      	mov	sl, r2
 8004f6e:	469b      	mov	fp, r3
 8004f70:	4643      	mov	r3, r8
 8004f72:	eb1a 0303 	adds.w	r3, sl, r3
 8004f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	18db      	adds	r3, r3, r3
 8004f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fae:	f7fb fe73 	bl	8000c98 <__aeabi_uldivmod>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <UART_SetConfig+0x2d4>)
 8004fba:	fba3 2301 	umull	r2, r3, r3, r1
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2264      	movs	r2, #100	; 0x64
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
 8004fc6:	1acb      	subs	r3, r1, r3
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fce:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <UART_SetConfig+0x2d4>)
 8004fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fdc:	441c      	add	r4, r3
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005000:	4641      	mov	r1, r8
 8005002:	1851      	adds	r1, r2, r1
 8005004:	6339      	str	r1, [r7, #48]	; 0x30
 8005006:	4649      	mov	r1, r9
 8005008:	414b      	adcs	r3, r1
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005018:	4659      	mov	r1, fp
 800501a:	00cb      	lsls	r3, r1, #3
 800501c:	4651      	mov	r1, sl
 800501e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005022:	4651      	mov	r1, sl
 8005024:	00ca      	lsls	r2, r1, #3
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	4603      	mov	r3, r0
 800502c:	4642      	mov	r2, r8
 800502e:	189b      	adds	r3, r3, r2
 8005030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800504c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005054:	460b      	mov	r3, r1
 8005056:	18db      	adds	r3, r3, r3
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
 800505a:	4613      	mov	r3, r2
 800505c:	eb42 0303 	adc.w	r3, r2, r3
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800506a:	f7fb fe15 	bl	8000c98 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x2d4>)
 8005074:	fba3 1302 	umull	r1, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	2164      	movs	r1, #100	; 0x64
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	3332      	adds	r3, #50	; 0x32
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x2d4>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 0207 	and.w	r2, r3, #7
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4422      	add	r2, r4
 800509a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800509c:	e105      	b.n	80052aa <UART_SetConfig+0x4d6>
 800509e:	bf00      	nop
 80050a0:	40011000 	.word	0x40011000
 80050a4:	40011400 	.word	0x40011400
 80050a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050be:	4642      	mov	r2, r8
 80050c0:	464b      	mov	r3, r9
 80050c2:	1891      	adds	r1, r2, r2
 80050c4:	6239      	str	r1, [r7, #32]
 80050c6:	415b      	adcs	r3, r3
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ce:	4641      	mov	r1, r8
 80050d0:	1854      	adds	r4, r2, r1
 80050d2:	4649      	mov	r1, r9
 80050d4:	eb43 0501 	adc.w	r5, r3, r1
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	00eb      	lsls	r3, r5, #3
 80050e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e6:	00e2      	lsls	r2, r4, #3
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	4643      	mov	r3, r8
 80050ee:	18e3      	adds	r3, r4, r3
 80050f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f4:	464b      	mov	r3, r9
 80050f6:	eb45 0303 	adc.w	r3, r5, r3
 80050fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800510a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800511a:	4629      	mov	r1, r5
 800511c:	008b      	lsls	r3, r1, #2
 800511e:	4621      	mov	r1, r4
 8005120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005124:	4621      	mov	r1, r4
 8005126:	008a      	lsls	r2, r1, #2
 8005128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800512c:	f7fb fdb4 	bl	8000c98 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4b60      	ldr	r3, [pc, #384]	; (80052b8 <UART_SetConfig+0x4e4>)
 8005136:	fba3 2302 	umull	r2, r3, r3, r2
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	011c      	lsls	r4, r3, #4
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800514c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	1891      	adds	r1, r2, r2
 8005156:	61b9      	str	r1, [r7, #24]
 8005158:	415b      	adcs	r3, r3
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005160:	4641      	mov	r1, r8
 8005162:	1851      	adds	r1, r2, r1
 8005164:	6139      	str	r1, [r7, #16]
 8005166:	4649      	mov	r1, r9
 8005168:	414b      	adcs	r3, r1
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005178:	4659      	mov	r1, fp
 800517a:	00cb      	lsls	r3, r1, #3
 800517c:	4651      	mov	r1, sl
 800517e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005182:	4651      	mov	r1, sl
 8005184:	00ca      	lsls	r2, r1, #3
 8005186:	4610      	mov	r0, r2
 8005188:	4619      	mov	r1, r3
 800518a:	4603      	mov	r3, r0
 800518c:	4642      	mov	r2, r8
 800518e:	189b      	adds	r3, r3, r2
 8005190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005194:	464b      	mov	r3, r9
 8005196:	460a      	mov	r2, r1
 8005198:	eb42 0303 	adc.w	r3, r2, r3
 800519c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051b8:	4649      	mov	r1, r9
 80051ba:	008b      	lsls	r3, r1, #2
 80051bc:	4641      	mov	r1, r8
 80051be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c2:	4641      	mov	r1, r8
 80051c4:	008a      	lsls	r2, r1, #2
 80051c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051ca:	f7fb fd65 	bl	8000c98 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <UART_SetConfig+0x4e4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	; 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	3332      	adds	r3, #50	; 0x32
 80051e6:	4a34      	ldr	r2, [pc, #208]	; (80052b8 <UART_SetConfig+0x4e4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f2:	441c      	add	r4, r3
 80051f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f8:	2200      	movs	r2, #0
 80051fa:	673b      	str	r3, [r7, #112]	; 0x70
 80051fc:	677a      	str	r2, [r7, #116]	; 0x74
 80051fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005202:	4642      	mov	r2, r8
 8005204:	464b      	mov	r3, r9
 8005206:	1891      	adds	r1, r2, r2
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	415b      	adcs	r3, r3
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005212:	4641      	mov	r1, r8
 8005214:	1851      	adds	r1, r2, r1
 8005216:	6039      	str	r1, [r7, #0]
 8005218:	4649      	mov	r1, r9
 800521a:	414b      	adcs	r3, r1
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800522a:	4659      	mov	r1, fp
 800522c:	00cb      	lsls	r3, r1, #3
 800522e:	4651      	mov	r1, sl
 8005230:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005234:	4651      	mov	r1, sl
 8005236:	00ca      	lsls	r2, r1, #3
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	4603      	mov	r3, r0
 800523e:	4642      	mov	r2, r8
 8005240:	189b      	adds	r3, r3, r2
 8005242:	66bb      	str	r3, [r7, #104]	; 0x68
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	663b      	str	r3, [r7, #96]	; 0x60
 8005258:	667a      	str	r2, [r7, #100]	; 0x64
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005266:	4649      	mov	r1, r9
 8005268:	008b      	lsls	r3, r1, #2
 800526a:	4641      	mov	r1, r8
 800526c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005270:	4641      	mov	r1, r8
 8005272:	008a      	lsls	r2, r1, #2
 8005274:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005278:	f7fb fd0e 	bl	8000c98 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <UART_SetConfig+0x4e4>)
 8005282:	fba3 1302 	umull	r1, r3, r3, r2
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2164      	movs	r1, #100	; 0x64
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	3332      	adds	r3, #50	; 0x32
 8005294:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <UART_SetConfig+0x4e4>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4422      	add	r2, r4
 80052a8:	609a      	str	r2, [r3, #8]
}
 80052aa:	bf00      	nop
 80052ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b6:	bf00      	nop
 80052b8:	51eb851f 	.word	0x51eb851f

080052bc <arm_mat_sub_f32>:
 80052bc:	b4f0      	push	{r4, r5, r6, r7}
 80052be:	e9d1 4700 	ldrd	r4, r7, [r1]
 80052c2:	6803      	ldr	r3, [r0, #0]
 80052c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80052c8:	6856      	ldr	r6, [r2, #4]
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	d15d      	bne.n	800538a <arm_mat_sub_f32+0xce>
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d15a      	bne.n	800538a <arm_mat_sub_f32+0xce>
 80052d4:	8803      	ldrh	r3, [r0, #0]
 80052d6:	8844      	ldrh	r4, [r0, #2]
 80052d8:	fb04 f403 	mul.w	r4, r4, r3
 80052dc:	08a5      	lsrs	r5, r4, #2
 80052de:	d032      	beq.n	8005346 <arm_mat_sub_f32+0x8a>
 80052e0:	f10c 0110 	add.w	r1, ip, #16
 80052e4:	f107 0210 	add.w	r2, r7, #16
 80052e8:	f106 0310 	add.w	r3, r6, #16
 80052ec:	4628      	mov	r0, r5
 80052ee:	ed12 7a04 	vldr	s14, [r2, #-16]
 80052f2:	ed51 7a04 	vldr	s15, [r1, #-16]
 80052f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052fa:	3801      	subs	r0, #1
 80052fc:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005300:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005304:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800530c:	f101 0110 	add.w	r1, r1, #16
 8005310:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005314:	ed12 7a02 	vldr	s14, [r2, #-8]
 8005318:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800531c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005320:	f102 0210 	add.w	r2, r2, #16
 8005324:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005328:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800532c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005334:	f103 0310 	add.w	r3, r3, #16
 8005338:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800533c:	d1d7      	bne.n	80052ee <arm_mat_sub_f32+0x32>
 800533e:	012b      	lsls	r3, r5, #4
 8005340:	449c      	add	ip, r3
 8005342:	441f      	add	r7, r3
 8005344:	441e      	add	r6, r3
 8005346:	f014 0403 	ands.w	r4, r4, #3
 800534a:	d01b      	beq.n	8005384 <arm_mat_sub_f32+0xc8>
 800534c:	eddc 7a00 	vldr	s15, [ip]
 8005350:	ed97 7a00 	vldr	s14, [r7]
 8005354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005358:	3c01      	subs	r4, #1
 800535a:	edc6 7a00 	vstr	s15, [r6]
 800535e:	d011      	beq.n	8005384 <arm_mat_sub_f32+0xc8>
 8005360:	eddc 7a01 	vldr	s15, [ip, #4]
 8005364:	ed97 7a01 	vldr	s14, [r7, #4]
 8005368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800536c:	2c01      	cmp	r4, #1
 800536e:	edc6 7a01 	vstr	s15, [r6, #4]
 8005372:	d007      	beq.n	8005384 <arm_mat_sub_f32+0xc8>
 8005374:	eddc 7a02 	vldr	s15, [ip, #8]
 8005378:	ed97 7a02 	vldr	s14, [r7, #8]
 800537c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005380:	edc6 7a02 	vstr	s15, [r6, #8]
 8005384:	2000      	movs	r0, #0
 8005386:	bcf0      	pop	{r4, r5, r6, r7}
 8005388:	4770      	bx	lr
 800538a:	f06f 0002 	mvn.w	r0, #2
 800538e:	e7fa      	b.n	8005386 <arm_mat_sub_f32+0xca>

08005390 <arm_mat_scale_f32>:
 8005390:	b470      	push	{r4, r5, r6}
 8005392:	e9d1 3500 	ldrd	r3, r5, [r1]
 8005396:	6802      	ldr	r2, [r0, #0]
 8005398:	6846      	ldr	r6, [r0, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d147      	bne.n	800542e <arm_mat_scale_f32+0x9e>
 800539e:	8803      	ldrh	r3, [r0, #0]
 80053a0:	8840      	ldrh	r0, [r0, #2]
 80053a2:	fb00 f003 	mul.w	r0, r0, r3
 80053a6:	0884      	lsrs	r4, r0, #2
 80053a8:	d025      	beq.n	80053f6 <arm_mat_scale_f32+0x66>
 80053aa:	f106 0210 	add.w	r2, r6, #16
 80053ae:	f105 0310 	add.w	r3, r5, #16
 80053b2:	4621      	mov	r1, r4
 80053b4:	ed52 7a04 	vldr	s15, [r2, #-16]
 80053b8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053bc:	3901      	subs	r1, #1
 80053be:	ed43 7a04 	vstr	s15, [r3, #-16]
 80053c2:	ed52 7a03 	vldr	s15, [r2, #-12]
 80053c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053ca:	f102 0210 	add.w	r2, r2, #16
 80053ce:	ed43 7a03 	vstr	s15, [r3, #-12]
 80053d2:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
 80053d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053da:	f103 0310 	add.w	r3, r3, #16
 80053de:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80053e2:	ed52 7a05 	vldr	s15, [r2, #-20]	; 0xffffffec
 80053e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053ea:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80053ee:	d1e1      	bne.n	80053b4 <arm_mat_scale_f32+0x24>
 80053f0:	0124      	lsls	r4, r4, #4
 80053f2:	4426      	add	r6, r4
 80053f4:	4425      	add	r5, r4
 80053f6:	f010 0003 	ands.w	r0, r0, #3
 80053fa:	d015      	beq.n	8005428 <arm_mat_scale_f32+0x98>
 80053fc:	edd6 7a00 	vldr	s15, [r6]
 8005400:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005404:	3801      	subs	r0, #1
 8005406:	edc5 7a00 	vstr	s15, [r5]
 800540a:	d00d      	beq.n	8005428 <arm_mat_scale_f32+0x98>
 800540c:	edd6 7a01 	vldr	s15, [r6, #4]
 8005410:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005414:	2801      	cmp	r0, #1
 8005416:	edc5 7a01 	vstr	s15, [r5, #4]
 800541a:	d005      	beq.n	8005428 <arm_mat_scale_f32+0x98>
 800541c:	edd6 7a02 	vldr	s15, [r6, #8]
 8005420:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005424:	ed85 0a02 	vstr	s0, [r5, #8]
 8005428:	2000      	movs	r0, #0
 800542a:	bc70      	pop	{r4, r5, r6}
 800542c:	4770      	bx	lr
 800542e:	f06f 0002 	mvn.w	r0, #2
 8005432:	e7fa      	b.n	800542a <arm_mat_scale_f32+0x9a>

08005434 <arm_mat_mult_f32>:
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	8845      	ldrh	r5, [r0, #2]
 800543a:	880b      	ldrh	r3, [r1, #0]
 800543c:	8806      	ldrh	r6, [r0, #0]
 800543e:	6847      	ldr	r7, [r0, #4]
 8005440:	6854      	ldr	r4, [r2, #4]
 8005442:	6848      	ldr	r0, [r1, #4]
 8005444:	b08b      	sub	sp, #44	; 0x2c
 8005446:	42ab      	cmp	r3, r5
 8005448:	9109      	str	r1, [sp, #36]	; 0x24
 800544a:	9604      	str	r6, [sp, #16]
 800544c:	8849      	ldrh	r1, [r1, #2]
 800544e:	f040 808a 	bne.w	8005566 <arm_mat_mult_f32+0x132>
 8005452:	8815      	ldrh	r5, [r2, #0]
 8005454:	42b5      	cmp	r5, r6
 8005456:	f040 8086 	bne.w	8005566 <arm_mat_mult_f32+0x132>
 800545a:	8852      	ldrh	r2, [r2, #2]
 800545c:	428a      	cmp	r2, r1
 800545e:	f040 8082 	bne.w	8005566 <arm_mat_mult_f32+0x132>
 8005462:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8005466:	1d01      	adds	r1, r0, #4
 8005468:	0116      	lsls	r6, r2, #4
 800546a:	9108      	str	r1, [sp, #32]
 800546c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8005470:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8005474:	9101      	str	r1, [sp, #4]
 8005476:	fb06 f108 	mul.w	r1, r6, r8
 800547a:	0095      	lsls	r5, r2, #2
 800547c:	9103      	str	r1, [sp, #12]
 800547e:	00d2      	lsls	r2, r2, #3
 8005480:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8005484:	f003 0903 	and.w	r9, r3, #3
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	f107 0b10 	add.w	fp, r7, #16
 800548e:	eb04 0a05 	add.w	sl, r4, r5
 8005492:	9107      	str	r1, [sp, #28]
 8005494:	9202      	str	r2, [sp, #8]
 8005496:	9306      	str	r3, [sp, #24]
 8005498:	f1ab 0310 	sub.w	r3, fp, #16
 800549c:	9305      	str	r3, [sp, #20]
 800549e:	9b07      	ldr	r3, [sp, #28]
 80054a0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80054a4:	eb03 0c0a 	add.w	ip, r3, sl
 80054a8:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005570 <arm_mat_mult_f32+0x13c>
 80054ac:	f1b8 0f00 	cmp.w	r8, #0
 80054b0:	d053      	beq.n	800555a <arm_mat_mult_f32+0x126>
 80054b2:	9b02      	ldr	r3, [sp, #8]
 80054b4:	4644      	mov	r4, r8
 80054b6:	18c1      	adds	r1, r0, r3
 80054b8:	4602      	mov	r2, r0
 80054ba:	465b      	mov	r3, fp
 80054bc:	ed92 6a00 	vldr	s12, [r2]
 80054c0:	ed13 7a04 	vldr	s14, [r3, #-16]
 80054c4:	ed53 4a03 	vldr	s9, [r3, #-12]
 80054c8:	ed53 6a02 	vldr	s13, [r3, #-8]
 80054cc:	ed91 5a00 	vldr	s10, [r1]
 80054d0:	ed53 5a01 	vldr	s11, [r3, #-4]
 80054d4:	1957      	adds	r7, r2, r5
 80054d6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80054da:	ed97 6a00 	vldr	s12, [r7]
 80054de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80054e6:	194f      	adds	r7, r1, r5
 80054e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054ec:	ee26 7a85 	vmul.f32	s14, s13, s10
 80054f0:	edd7 7a00 	vldr	s15, [r7]
 80054f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80054fc:	3c01      	subs	r4, #1
 80054fe:	4432      	add	r2, r6
 8005500:	4431      	add	r1, r6
 8005502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005506:	f103 0310 	add.w	r3, r3, #16
 800550a:	d1d7      	bne.n	80054bc <arm_mat_mult_f32+0x88>
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	9a01      	ldr	r2, [sp, #4]
 8005510:	4418      	add	r0, r3
 8005512:	f1b9 0f00 	cmp.w	r9, #0
 8005516:	d00b      	beq.n	8005530 <arm_mat_mult_f32+0xfc>
 8005518:	464b      	mov	r3, r9
 800551a:	edd0 6a00 	vldr	s13, [r0]
 800551e:	ecb2 7a01 	vldmia	r2!, {s14}
 8005522:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005526:	3b01      	subs	r3, #1
 8005528:	4428      	add	r0, r5
 800552a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800552e:	d1f4      	bne.n	800551a <arm_mat_mult_f32+0xe6>
 8005530:	ecec 7a01 	vstmia	ip!, {s15}
 8005534:	45d4      	cmp	ip, sl
 8005536:	4670      	mov	r0, lr
 8005538:	f10e 0e04 	add.w	lr, lr, #4
 800553c:	d1b4      	bne.n	80054a8 <arm_mat_mult_f32+0x74>
 800553e:	9a01      	ldr	r2, [sp, #4]
 8005540:	9b06      	ldr	r3, [sp, #24]
 8005542:	4611      	mov	r1, r2
 8005544:	4419      	add	r1, r3
 8005546:	449b      	add	fp, r3
 8005548:	9b04      	ldr	r3, [sp, #16]
 800554a:	9101      	str	r1, [sp, #4]
 800554c:	3b01      	subs	r3, #1
 800554e:	44aa      	add	sl, r5
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	d004      	beq.n	800555e <arm_mat_mult_f32+0x12a>
 8005554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005556:	6858      	ldr	r0, [r3, #4]
 8005558:	e79e      	b.n	8005498 <arm_mat_mult_f32+0x64>
 800555a:	9a05      	ldr	r2, [sp, #20]
 800555c:	e7d9      	b.n	8005512 <arm_mat_mult_f32+0xde>
 800555e:	4618      	mov	r0, r3
 8005560:	b00b      	add	sp, #44	; 0x2c
 8005562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005566:	f06f 0002 	mvn.w	r0, #2
 800556a:	b00b      	add	sp, #44	; 0x2c
 800556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005570:	00000000 	.word	0x00000000

08005574 <arm_mat_inverse_f32>:
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	8843      	ldrh	r3, [r0, #2]
 800557a:	8804      	ldrh	r4, [r0, #0]
 800557c:	684e      	ldr	r6, [r1, #4]
 800557e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8005582:	b087      	sub	sp, #28
 8005584:	429c      	cmp	r4, r3
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	9603      	str	r6, [sp, #12]
 800558a:	f040 80ea 	bne.w	8005762 <arm_mat_inverse_f32+0x1ee>
 800558e:	880a      	ldrh	r2, [r1, #0]
 8005590:	884b      	ldrh	r3, [r1, #2]
 8005592:	4293      	cmp	r3, r2
 8005594:	f040 80e5 	bne.w	8005762 <arm_mat_inverse_f32+0x1ee>
 8005598:	429c      	cmp	r4, r3
 800559a:	f040 80e2 	bne.w	8005762 <arm_mat_inverse_f32+0x1ee>
 800559e:	9005      	str	r0, [sp, #20]
 80055a0:	b30c      	cbz	r4, 80055e6 <arm_mat_inverse_f32+0x72>
 80055a2:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80055a6:	1e67      	subs	r7, r4, #1
 80055a8:	f846 bb04 	str.w	fp, [r6], #4
 80055ac:	d01b      	beq.n	80055e6 <arm_mat_inverse_f32+0x72>
 80055ae:	f04f 0801 	mov.w	r8, #1
 80055b2:	00ba      	lsls	r2, r7, #2
 80055b4:	eb06 0a02 	add.w	sl, r6, r2
 80055b8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80055bc:	4630      	mov	r0, r6
 80055be:	2100      	movs	r1, #0
 80055c0:	f000 f976 	bl	80058b0 <memset>
 80055c4:	eb0a 0605 	add.w	r6, sl, r5
 80055c8:	462a      	mov	r2, r5
 80055ca:	2100      	movs	r1, #0
 80055cc:	4650      	mov	r0, sl
 80055ce:	f1b8 0f00 	cmp.w	r8, #0
 80055d2:	f000 80cb 	beq.w	800576c <arm_mat_inverse_f32+0x1f8>
 80055d6:	f000 f96b 	bl	80058b0 <memset>
 80055da:	3f01      	subs	r7, #1
 80055dc:	f108 0801 	add.w	r8, r8, #1
 80055e0:	f846 bb04 	str.w	fp, [r6], #4
 80055e4:	d1e5      	bne.n	80055b2 <arm_mat_inverse_f32+0x3e>
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80b5 	beq.w	8005758 <arm_mat_inverse_f32+0x1e4>
 80055ee:	009d      	lsls	r5, r3, #2
 80055f0:	eb09 0205 	add.w	r2, r9, r5
 80055f4:	46cc      	mov	ip, r9
 80055f6:	9202      	str	r2, [sp, #8]
 80055f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80055fc:	1d2a      	adds	r2, r5, #4
 80055fe:	9204      	str	r2, [sp, #16]
 8005600:	462f      	mov	r7, r5
 8005602:	469e      	mov	lr, r3
 8005604:	2600      	movs	r6, #0
 8005606:	9b02      	ldr	r3, [sp, #8]
 8005608:	eddc 6a00 	vldr	s13, [ip]
 800560c:	42b4      	cmp	r4, r6
 800560e:	eba3 0b07 	sub.w	fp, r3, r7
 8005612:	f000 80a1 	beq.w	8005758 <arm_mat_inverse_f32+0x1e4>
 8005616:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800577c <arm_mat_inverse_f32+0x208>
 800561a:	4632      	mov	r2, r6
 800561c:	4663      	mov	r3, ip
 800561e:	e00b      	b.n	8005638 <arm_mat_inverse_f32+0xc4>
 8005620:	eef4 7a47 	vcmp.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	f102 0201 	add.w	r2, r2, #1
 800562c:	bfc8      	it	gt
 800562e:	eeb0 7a67 	vmovgt.f32	s14, s15
 8005632:	42a2      	cmp	r2, r4
 8005634:	442b      	add	r3, r5
 8005636:	d014      	beq.n	8005662 <arm_mat_inverse_f32+0xee>
 8005638:	edd3 7a00 	vldr	s15, [r3]
 800563c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	eeb1 6a67 	vneg.f32	s12, s15
 8005648:	dcea      	bgt.n	8005620 <arm_mat_inverse_f32+0xac>
 800564a:	eeb4 6a47 	vcmp.f32	s12, s14
 800564e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005652:	f102 0201 	add.w	r2, r2, #1
 8005656:	bfc8      	it	gt
 8005658:	eeb0 7a46 	vmovgt.f32	s14, s12
 800565c:	42a2      	cmp	r2, r4
 800565e:	442b      	add	r3, r5
 8005660:	d1ea      	bne.n	8005638 <arm_mat_inverse_f32+0xc4>
 8005662:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	d075      	beq.n	8005758 <arm_mat_inverse_f32+0x1e4>
 800566c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005674:	d070      	beq.n	8005758 <arm_mat_inverse_f32+0x1e4>
 8005676:	4672      	mov	r2, lr
 8005678:	4663      	mov	r3, ip
 800567a:	ed93 7a00 	vldr	s14, [r3]
 800567e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005682:	3a01      	subs	r2, #1
 8005684:	ece3 7a01 	vstmia	r3!, {s15}
 8005688:	d1f7      	bne.n	800567a <arm_mat_inverse_f32+0x106>
 800568a:	9901      	ldr	r1, [sp, #4]
 800568c:	464b      	mov	r3, r9
 800568e:	ed93 7a00 	vldr	s14, [r3]
 8005692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005696:	3901      	subs	r1, #1
 8005698:	ece3 7a01 	vstmia	r3!, {s15}
 800569c:	d1f7      	bne.n	800568e <arm_mat_inverse_f32+0x11a>
 800569e:	9803      	ldr	r0, [sp, #12]
 80056a0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80056a4:	42b1      	cmp	r1, r6
 80056a6:	d039      	beq.n	800571c <arm_mat_inverse_f32+0x1a8>
 80056a8:	eddb 6a00 	vldr	s13, [fp]
 80056ac:	465a      	mov	r2, fp
 80056ae:	4673      	mov	r3, lr
 80056b0:	46e2      	mov	sl, ip
 80056b2:	ecba 7a01 	vldmia	sl!, {s14}
 80056b6:	edd2 7a00 	vldr	s15, [r2]
 80056ba:	ee26 7a87 	vmul.f32	s14, s13, s14
 80056be:	3b01      	subs	r3, #1
 80056c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056c4:	ece2 7a01 	vstmia	r2!, {s15}
 80056c8:	d1f3      	bne.n	80056b2 <arm_mat_inverse_f32+0x13e>
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	44bb      	add	fp, r7
 80056ce:	4602      	mov	r2, r0
 80056d0:	46ca      	mov	sl, r9
 80056d2:	ecba 7a01 	vldmia	sl!, {s14}
 80056d6:	edd2 7a00 	vldr	s15, [r2]
 80056da:	ee26 7a87 	vmul.f32	s14, s13, s14
 80056de:	3b01      	subs	r3, #1
 80056e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056e4:	ece2 7a01 	vstmia	r2!, {s15}
 80056e8:	d1f3      	bne.n	80056d2 <arm_mat_inverse_f32+0x15e>
 80056ea:	4428      	add	r0, r5
 80056ec:	3101      	adds	r1, #1
 80056ee:	428c      	cmp	r4, r1
 80056f0:	44c3      	add	fp, r8
 80056f2:	d1d7      	bne.n	80056a4 <arm_mat_inverse_f32+0x130>
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	f1be 0e01 	subs.w	lr, lr, #1
 80056fa:	f106 0601 	add.w	r6, r6, #1
 80056fe:	449c      	add	ip, r3
 8005700:	f1a7 0704 	sub.w	r7, r7, #4
 8005704:	44a9      	add	r9, r5
 8005706:	f47f af7e 	bne.w	8005606 <arm_mat_inverse_f32+0x92>
 800570a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005712:	d006      	beq.n	8005722 <arm_mat_inverse_f32+0x1ae>
 8005714:	2000      	movs	r0, #0
 8005716:	b007      	add	sp, #28
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	44bb      	add	fp, r7
 800571e:	4428      	add	r0, r5
 8005720:	e7e4      	b.n	80056ec <arm_mat_inverse_f32+0x178>
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	9a01      	ldr	r2, [sp, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	edd3 7a00 	vldr	s15, [r3]
 800572c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005730:	fb02 f204 	mul.w	r2, r2, r4
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	4614      	mov	r4, r2
 800573a:	bf08      	it	eq
 800573c:	3304      	addeq	r3, #4
 800573e:	d007      	beq.n	8005750 <arm_mat_inverse_f32+0x1dc>
 8005740:	e7e8      	b.n	8005714 <arm_mat_inverse_f32+0x1a0>
 8005742:	ecf3 7a01 	vldmia	r3!, {s15}
 8005746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574e:	d1e1      	bne.n	8005714 <arm_mat_inverse_f32+0x1a0>
 8005750:	f10e 0e01 	add.w	lr, lr, #1
 8005754:	4574      	cmp	r4, lr
 8005756:	d1f4      	bne.n	8005742 <arm_mat_inverse_f32+0x1ce>
 8005758:	f06f 0004 	mvn.w	r0, #4
 800575c:	b007      	add	sp, #28
 800575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005762:	f06f 0002 	mvn.w	r0, #2
 8005766:	b007      	add	sp, #28
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	4656      	mov	r6, sl
 800576e:	3f01      	subs	r7, #1
 8005770:	f846 bb04 	str.w	fp, [r6], #4
 8005774:	f47f af1b 	bne.w	80055ae <arm_mat_inverse_f32+0x3a>
 8005778:	e735      	b.n	80055e6 <arm_mat_inverse_f32+0x72>
 800577a:	bf00      	nop
 800577c:	00000000 	.word	0x00000000

08005780 <arm_mat_init_f32>:
 8005780:	8001      	strh	r1, [r0, #0]
 8005782:	8042      	strh	r2, [r0, #2]
 8005784:	6043      	str	r3, [r0, #4]
 8005786:	4770      	bx	lr

08005788 <arm_mat_add_f32>:
 8005788:	b4f0      	push	{r4, r5, r6, r7}
 800578a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800578e:	6803      	ldr	r3, [r0, #0]
 8005790:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005794:	6856      	ldr	r6, [r2, #4]
 8005796:	42a3      	cmp	r3, r4
 8005798:	d15d      	bne.n	8005856 <arm_mat_add_f32+0xce>
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	4293      	cmp	r3, r2
 800579e:	d15a      	bne.n	8005856 <arm_mat_add_f32+0xce>
 80057a0:	8803      	ldrh	r3, [r0, #0]
 80057a2:	8844      	ldrh	r4, [r0, #2]
 80057a4:	fb04 f403 	mul.w	r4, r4, r3
 80057a8:	08a5      	lsrs	r5, r4, #2
 80057aa:	d032      	beq.n	8005812 <arm_mat_add_f32+0x8a>
 80057ac:	f10c 0110 	add.w	r1, ip, #16
 80057b0:	f107 0210 	add.w	r2, r7, #16
 80057b4:	f106 0310 	add.w	r3, r6, #16
 80057b8:	4628      	mov	r0, r5
 80057ba:	ed12 7a04 	vldr	s14, [r2, #-16]
 80057be:	ed51 7a04 	vldr	s15, [r1, #-16]
 80057c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057c6:	3801      	subs	r0, #1
 80057c8:	ed43 7a04 	vstr	s15, [r3, #-16]
 80057cc:	ed12 7a03 	vldr	s14, [r2, #-12]
 80057d0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80057d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d8:	f101 0110 	add.w	r1, r1, #16
 80057dc:	ed43 7a03 	vstr	s15, [r3, #-12]
 80057e0:	ed12 7a02 	vldr	s14, [r2, #-8]
 80057e4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80057e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ec:	f102 0210 	add.w	r2, r2, #16
 80057f0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80057f4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80057f8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80057fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005800:	f103 0310 	add.w	r3, r3, #16
 8005804:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005808:	d1d7      	bne.n	80057ba <arm_mat_add_f32+0x32>
 800580a:	012b      	lsls	r3, r5, #4
 800580c:	449c      	add	ip, r3
 800580e:	441f      	add	r7, r3
 8005810:	441e      	add	r6, r3
 8005812:	f014 0403 	ands.w	r4, r4, #3
 8005816:	d01b      	beq.n	8005850 <arm_mat_add_f32+0xc8>
 8005818:	edd7 7a00 	vldr	s15, [r7]
 800581c:	ed9c 7a00 	vldr	s14, [ip]
 8005820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005824:	3c01      	subs	r4, #1
 8005826:	edc6 7a00 	vstr	s15, [r6]
 800582a:	d011      	beq.n	8005850 <arm_mat_add_f32+0xc8>
 800582c:	eddc 7a01 	vldr	s15, [ip, #4]
 8005830:	ed97 7a01 	vldr	s14, [r7, #4]
 8005834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005838:	2c01      	cmp	r4, #1
 800583a:	edc6 7a01 	vstr	s15, [r6, #4]
 800583e:	d007      	beq.n	8005850 <arm_mat_add_f32+0xc8>
 8005840:	eddc 7a02 	vldr	s15, [ip, #8]
 8005844:	ed97 7a02 	vldr	s14, [r7, #8]
 8005848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800584c:	edc6 7a02 	vstr	s15, [r6, #8]
 8005850:	2000      	movs	r0, #0
 8005852:	bcf0      	pop	{r4, r5, r6, r7}
 8005854:	4770      	bx	lr
 8005856:	f06f 0002 	mvn.w	r0, #2
 800585a:	e7fa      	b.n	8005852 <arm_mat_add_f32+0xca>

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	; (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000124 	.word	0x20000124

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4d0d      	ldr	r5, [pc, #52]	; (80058a0 <__libc_init_array+0x38>)
 800586c:	4c0d      	ldr	r4, [pc, #52]	; (80058a4 <__libc_init_array+0x3c>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2600      	movs	r6, #0
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	4d0b      	ldr	r5, [pc, #44]	; (80058a8 <__libc_init_array+0x40>)
 800587a:	4c0c      	ldr	r4, [pc, #48]	; (80058ac <__libc_init_array+0x44>)
 800587c:	f005 fcda 	bl	800b234 <_init>
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	2600      	movs	r6, #0
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	0800b900 	.word	0x0800b900
 80058a4:	0800b900 	.word	0x0800b900
 80058a8:	0800b900 	.word	0x0800b900
 80058ac:	0800b904 	.word	0x0800b904

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <__cvt>:
 80058c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	ec55 4b10 	vmov	r4, r5, d0
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	460e      	mov	r6, r1
 80058cc:	4619      	mov	r1, r3
 80058ce:	462b      	mov	r3, r5
 80058d0:	bfbb      	ittet	lt
 80058d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058d6:	461d      	movlt	r5, r3
 80058d8:	2300      	movge	r3, #0
 80058da:	232d      	movlt	r3, #45	; 0x2d
 80058dc:	700b      	strb	r3, [r1, #0]
 80058de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058e4:	4691      	mov	r9, r2
 80058e6:	f023 0820 	bic.w	r8, r3, #32
 80058ea:	bfbc      	itt	lt
 80058ec:	4622      	movlt	r2, r4
 80058ee:	4614      	movlt	r4, r2
 80058f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058f4:	d005      	beq.n	8005902 <__cvt+0x42>
 80058f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058fa:	d100      	bne.n	80058fe <__cvt+0x3e>
 80058fc:	3601      	adds	r6, #1
 80058fe:	2102      	movs	r1, #2
 8005900:	e000      	b.n	8005904 <__cvt+0x44>
 8005902:	2103      	movs	r1, #3
 8005904:	ab03      	add	r3, sp, #12
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	ab02      	add	r3, sp, #8
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	ec45 4b10 	vmov	d0, r4, r5
 8005910:	4653      	mov	r3, sl
 8005912:	4632      	mov	r2, r6
 8005914:	f001 fdac 	bl	8007470 <_dtoa_r>
 8005918:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800591c:	4607      	mov	r7, r0
 800591e:	d102      	bne.n	8005926 <__cvt+0x66>
 8005920:	f019 0f01 	tst.w	r9, #1
 8005924:	d022      	beq.n	800596c <__cvt+0xac>
 8005926:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800592a:	eb07 0906 	add.w	r9, r7, r6
 800592e:	d110      	bne.n	8005952 <__cvt+0x92>
 8005930:	783b      	ldrb	r3, [r7, #0]
 8005932:	2b30      	cmp	r3, #48	; 0x30
 8005934:	d10a      	bne.n	800594c <__cvt+0x8c>
 8005936:	2200      	movs	r2, #0
 8005938:	2300      	movs	r3, #0
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	f7fb f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005942:	b918      	cbnz	r0, 800594c <__cvt+0x8c>
 8005944:	f1c6 0601 	rsb	r6, r6, #1
 8005948:	f8ca 6000 	str.w	r6, [sl]
 800594c:	f8da 3000 	ldr.w	r3, [sl]
 8005950:	4499      	add	r9, r3
 8005952:	2200      	movs	r2, #0
 8005954:	2300      	movs	r3, #0
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	f7fb f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800595e:	b108      	cbz	r0, 8005964 <__cvt+0xa4>
 8005960:	f8cd 900c 	str.w	r9, [sp, #12]
 8005964:	2230      	movs	r2, #48	; 0x30
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	454b      	cmp	r3, r9
 800596a:	d307      	bcc.n	800597c <__cvt+0xbc>
 800596c:	9b03      	ldr	r3, [sp, #12]
 800596e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005970:	1bdb      	subs	r3, r3, r7
 8005972:	4638      	mov	r0, r7
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	b004      	add	sp, #16
 8005978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597c:	1c59      	adds	r1, r3, #1
 800597e:	9103      	str	r1, [sp, #12]
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e7f0      	b.n	8005966 <__cvt+0xa6>

08005984 <__exponent>:
 8005984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005986:	4603      	mov	r3, r0
 8005988:	2900      	cmp	r1, #0
 800598a:	bfb8      	it	lt
 800598c:	4249      	neglt	r1, r1
 800598e:	f803 2b02 	strb.w	r2, [r3], #2
 8005992:	bfb4      	ite	lt
 8005994:	222d      	movlt	r2, #45	; 0x2d
 8005996:	222b      	movge	r2, #43	; 0x2b
 8005998:	2909      	cmp	r1, #9
 800599a:	7042      	strb	r2, [r0, #1]
 800599c:	dd2a      	ble.n	80059f4 <__exponent+0x70>
 800599e:	f10d 0407 	add.w	r4, sp, #7
 80059a2:	46a4      	mov	ip, r4
 80059a4:	270a      	movs	r7, #10
 80059a6:	46a6      	mov	lr, r4
 80059a8:	460a      	mov	r2, r1
 80059aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80059ae:	fb07 1516 	mls	r5, r7, r6, r1
 80059b2:	3530      	adds	r5, #48	; 0x30
 80059b4:	2a63      	cmp	r2, #99	; 0x63
 80059b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80059ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059be:	4631      	mov	r1, r6
 80059c0:	dcf1      	bgt.n	80059a6 <__exponent+0x22>
 80059c2:	3130      	adds	r1, #48	; 0x30
 80059c4:	f1ae 0502 	sub.w	r5, lr, #2
 80059c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059cc:	1c44      	adds	r4, r0, #1
 80059ce:	4629      	mov	r1, r5
 80059d0:	4561      	cmp	r1, ip
 80059d2:	d30a      	bcc.n	80059ea <__exponent+0x66>
 80059d4:	f10d 0209 	add.w	r2, sp, #9
 80059d8:	eba2 020e 	sub.w	r2, r2, lr
 80059dc:	4565      	cmp	r5, ip
 80059de:	bf88      	it	hi
 80059e0:	2200      	movhi	r2, #0
 80059e2:	4413      	add	r3, r2
 80059e4:	1a18      	subs	r0, r3, r0
 80059e6:	b003      	add	sp, #12
 80059e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059f2:	e7ed      	b.n	80059d0 <__exponent+0x4c>
 80059f4:	2330      	movs	r3, #48	; 0x30
 80059f6:	3130      	adds	r1, #48	; 0x30
 80059f8:	7083      	strb	r3, [r0, #2]
 80059fa:	70c1      	strb	r1, [r0, #3]
 80059fc:	1d03      	adds	r3, r0, #4
 80059fe:	e7f1      	b.n	80059e4 <__exponent+0x60>

08005a00 <_printf_float>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	ed2d 8b02 	vpush	{d8}
 8005a08:	b08d      	sub	sp, #52	; 0x34
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a10:	4616      	mov	r6, r2
 8005a12:	461f      	mov	r7, r3
 8005a14:	4605      	mov	r5, r0
 8005a16:	f002 fe89 	bl	800872c <_localeconv_r>
 8005a1a:	f8d0 a000 	ldr.w	sl, [r0]
 8005a1e:	4650      	mov	r0, sl
 8005a20:	f7fa fbde 	bl	80001e0 <strlen>
 8005a24:	2300      	movs	r3, #0
 8005a26:	930a      	str	r3, [sp, #40]	; 0x28
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a34:	3307      	adds	r3, #7
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	f103 0208 	add.w	r2, r3, #8
 8005a3e:	f8c8 2000 	str.w	r2, [r8]
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a52:	9307      	str	r3, [sp, #28]
 8005a54:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a58:	ee08 0a10 	vmov	s16, r0
 8005a5c:	4b9f      	ldr	r3, [pc, #636]	; (8005cdc <_printf_float+0x2dc>)
 8005a5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a62:	f04f 32ff 	mov.w	r2, #4294967295
 8005a66:	f7fb f869 	bl	8000b3c <__aeabi_dcmpun>
 8005a6a:	bb88      	cbnz	r0, 8005ad0 <_printf_float+0xd0>
 8005a6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a70:	4b9a      	ldr	r3, [pc, #616]	; (8005cdc <_printf_float+0x2dc>)
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	f7fb f843 	bl	8000b00 <__aeabi_dcmple>
 8005a7a:	bb48      	cbnz	r0, 8005ad0 <_printf_float+0xd0>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	4640      	mov	r0, r8
 8005a82:	4649      	mov	r1, r9
 8005a84:	f7fb f832 	bl	8000aec <__aeabi_dcmplt>
 8005a88:	b110      	cbz	r0, 8005a90 <_printf_float+0x90>
 8005a8a:	232d      	movs	r3, #45	; 0x2d
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	4b93      	ldr	r3, [pc, #588]	; (8005ce0 <_printf_float+0x2e0>)
 8005a92:	4894      	ldr	r0, [pc, #592]	; (8005ce4 <_printf_float+0x2e4>)
 8005a94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a98:	bf94      	ite	ls
 8005a9a:	4698      	movls	r8, r3
 8005a9c:	4680      	movhi	r8, r0
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	9b05      	ldr	r3, [sp, #20]
 8005aa4:	f023 0204 	bic.w	r2, r3, #4
 8005aa8:	6022      	str	r2, [r4, #0]
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	9700      	str	r7, [sp, #0]
 8005ab0:	4633      	mov	r3, r6
 8005ab2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f9d8 	bl	8005e6c <_printf_common>
 8005abc:	3001      	adds	r0, #1
 8005abe:	f040 8090 	bne.w	8005be2 <_printf_float+0x1e2>
 8005ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac6:	b00d      	add	sp, #52	; 0x34
 8005ac8:	ecbd 8b02 	vpop	{d8}
 8005acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	f7fb f830 	bl	8000b3c <__aeabi_dcmpun>
 8005adc:	b140      	cbz	r0, 8005af0 <_printf_float+0xf0>
 8005ade:	464b      	mov	r3, r9
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfbc      	itt	lt
 8005ae4:	232d      	movlt	r3, #45	; 0x2d
 8005ae6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005aea:	487f      	ldr	r0, [pc, #508]	; (8005ce8 <_printf_float+0x2e8>)
 8005aec:	4b7f      	ldr	r3, [pc, #508]	; (8005cec <_printf_float+0x2ec>)
 8005aee:	e7d1      	b.n	8005a94 <_printf_float+0x94>
 8005af0:	6863      	ldr	r3, [r4, #4]
 8005af2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005af6:	9206      	str	r2, [sp, #24]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	d13f      	bne.n	8005b7c <_printf_float+0x17c>
 8005afc:	2306      	movs	r3, #6
 8005afe:	6063      	str	r3, [r4, #4]
 8005b00:	9b05      	ldr	r3, [sp, #20]
 8005b02:	6861      	ldr	r1, [r4, #4]
 8005b04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9303      	str	r3, [sp, #12]
 8005b0c:	ab0a      	add	r3, sp, #40	; 0x28
 8005b0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b12:	ab09      	add	r3, sp, #36	; 0x24
 8005b14:	ec49 8b10 	vmov	d0, r8, r9
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	6022      	str	r2, [r4, #0]
 8005b1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b20:	4628      	mov	r0, r5
 8005b22:	f7ff fecd 	bl	80058c0 <__cvt>
 8005b26:	9b06      	ldr	r3, [sp, #24]
 8005b28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b2a:	2b47      	cmp	r3, #71	; 0x47
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	d108      	bne.n	8005b42 <_printf_float+0x142>
 8005b30:	1cc8      	adds	r0, r1, #3
 8005b32:	db02      	blt.n	8005b3a <_printf_float+0x13a>
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	4299      	cmp	r1, r3
 8005b38:	dd41      	ble.n	8005bbe <_printf_float+0x1be>
 8005b3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b3e:	fa5f fb8b 	uxtb.w	fp, fp
 8005b42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b46:	d820      	bhi.n	8005b8a <_printf_float+0x18a>
 8005b48:	3901      	subs	r1, #1
 8005b4a:	465a      	mov	r2, fp
 8005b4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b50:	9109      	str	r1, [sp, #36]	; 0x24
 8005b52:	f7ff ff17 	bl	8005984 <__exponent>
 8005b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b58:	1813      	adds	r3, r2, r0
 8005b5a:	2a01      	cmp	r2, #1
 8005b5c:	4681      	mov	r9, r0
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	dc02      	bgt.n	8005b68 <_printf_float+0x168>
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	07d2      	lsls	r2, r2, #31
 8005b66:	d501      	bpl.n	8005b6c <_printf_float+0x16c>
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d09c      	beq.n	8005aae <_printf_float+0xae>
 8005b74:	232d      	movs	r3, #45	; 0x2d
 8005b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7a:	e798      	b.n	8005aae <_printf_float+0xae>
 8005b7c:	9a06      	ldr	r2, [sp, #24]
 8005b7e:	2a47      	cmp	r2, #71	; 0x47
 8005b80:	d1be      	bne.n	8005b00 <_printf_float+0x100>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1bc      	bne.n	8005b00 <_printf_float+0x100>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e7b9      	b.n	8005afe <_printf_float+0xfe>
 8005b8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b8e:	d118      	bne.n	8005bc2 <_printf_float+0x1c2>
 8005b90:	2900      	cmp	r1, #0
 8005b92:	6863      	ldr	r3, [r4, #4]
 8005b94:	dd0b      	ble.n	8005bae <_printf_float+0x1ae>
 8005b96:	6121      	str	r1, [r4, #16]
 8005b98:	b913      	cbnz	r3, 8005ba0 <_printf_float+0x1a0>
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	07d0      	lsls	r0, r2, #31
 8005b9e:	d502      	bpl.n	8005ba6 <_printf_float+0x1a6>
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	440b      	add	r3, r1
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ba8:	f04f 0900 	mov.w	r9, #0
 8005bac:	e7de      	b.n	8005b6c <_printf_float+0x16c>
 8005bae:	b913      	cbnz	r3, 8005bb6 <_printf_float+0x1b6>
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	07d2      	lsls	r2, r2, #31
 8005bb4:	d501      	bpl.n	8005bba <_printf_float+0x1ba>
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	e7f4      	b.n	8005ba4 <_printf_float+0x1a4>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e7f2      	b.n	8005ba4 <_printf_float+0x1a4>
 8005bbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	db05      	blt.n	8005bd4 <_printf_float+0x1d4>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	6121      	str	r1, [r4, #16]
 8005bcc:	07d8      	lsls	r0, r3, #31
 8005bce:	d5ea      	bpl.n	8005ba6 <_printf_float+0x1a6>
 8005bd0:	1c4b      	adds	r3, r1, #1
 8005bd2:	e7e7      	b.n	8005ba4 <_printf_float+0x1a4>
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	bfd4      	ite	le
 8005bd8:	f1c1 0202 	rsble	r2, r1, #2
 8005bdc:	2201      	movgt	r2, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	e7e0      	b.n	8005ba4 <_printf_float+0x1a4>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	055a      	lsls	r2, r3, #21
 8005be6:	d407      	bmi.n	8005bf8 <_printf_float+0x1f8>
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	4642      	mov	r2, r8
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	d12c      	bne.n	8005c50 <_printf_float+0x250>
 8005bf6:	e764      	b.n	8005ac2 <_printf_float+0xc2>
 8005bf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bfc:	f240 80e0 	bls.w	8005dc0 <_printf_float+0x3c0>
 8005c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c04:	2200      	movs	r2, #0
 8005c06:	2300      	movs	r3, #0
 8005c08:	f7fa ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d034      	beq.n	8005c7a <_printf_float+0x27a>
 8005c10:	4a37      	ldr	r2, [pc, #220]	; (8005cf0 <_printf_float+0x2f0>)
 8005c12:	2301      	movs	r3, #1
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f af51 	beq.w	8005ac2 <_printf_float+0xc2>
 8005c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	db02      	blt.n	8005c2e <_printf_float+0x22e>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07d8      	lsls	r0, r3, #31
 8005c2c:	d510      	bpl.n	8005c50 <_printf_float+0x250>
 8005c2e:	ee18 3a10 	vmov	r3, s16
 8005c32:	4652      	mov	r2, sl
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f af41 	beq.w	8005ac2 <_printf_float+0xc2>
 8005c40:	f04f 0800 	mov.w	r8, #0
 8005c44:	f104 091a 	add.w	r9, r4, #26
 8005c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4543      	cmp	r3, r8
 8005c4e:	dc09      	bgt.n	8005c64 <_printf_float+0x264>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	079b      	lsls	r3, r3, #30
 8005c54:	f100 8105 	bmi.w	8005e62 <_printf_float+0x462>
 8005c58:	68e0      	ldr	r0, [r4, #12]
 8005c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c5c:	4298      	cmp	r0, r3
 8005c5e:	bfb8      	it	lt
 8005c60:	4618      	movlt	r0, r3
 8005c62:	e730      	b.n	8005ac6 <_printf_float+0xc6>
 8005c64:	2301      	movs	r3, #1
 8005c66:	464a      	mov	r2, r9
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f43f af27 	beq.w	8005ac2 <_printf_float+0xc2>
 8005c74:	f108 0801 	add.w	r8, r8, #1
 8005c78:	e7e6      	b.n	8005c48 <_printf_float+0x248>
 8005c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dc39      	bgt.n	8005cf4 <_printf_float+0x2f4>
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <_printf_float+0x2f0>)
 8005c82:	2301      	movs	r3, #1
 8005c84:	4631      	mov	r1, r6
 8005c86:	4628      	mov	r0, r5
 8005c88:	47b8      	blx	r7
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f43f af19 	beq.w	8005ac2 <_printf_float+0xc2>
 8005c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c94:	4313      	orrs	r3, r2
 8005c96:	d102      	bne.n	8005c9e <_printf_float+0x29e>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07d9      	lsls	r1, r3, #31
 8005c9c:	d5d8      	bpl.n	8005c50 <_printf_float+0x250>
 8005c9e:	ee18 3a10 	vmov	r3, s16
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f af09 	beq.w	8005ac2 <_printf_float+0xc2>
 8005cb0:	f04f 0900 	mov.w	r9, #0
 8005cb4:	f104 0a1a 	add.w	sl, r4, #26
 8005cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cba:	425b      	negs	r3, r3
 8005cbc:	454b      	cmp	r3, r9
 8005cbe:	dc01      	bgt.n	8005cc4 <_printf_float+0x2c4>
 8005cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc2:	e792      	b.n	8005bea <_printf_float+0x1ea>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4652      	mov	r2, sl
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	47b8      	blx	r7
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f43f aef7 	beq.w	8005ac2 <_printf_float+0xc2>
 8005cd4:	f109 0901 	add.w	r9, r9, #1
 8005cd8:	e7ee      	b.n	8005cb8 <_printf_float+0x2b8>
 8005cda:	bf00      	nop
 8005cdc:	7fefffff 	.word	0x7fefffff
 8005ce0:	0800b278 	.word	0x0800b278
 8005ce4:	0800b27c 	.word	0x0800b27c
 8005ce8:	0800b284 	.word	0x0800b284
 8005cec:	0800b280 	.word	0x0800b280
 8005cf0:	0800b288 	.word	0x0800b288
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	bfa8      	it	ge
 8005cfc:	461a      	movge	r2, r3
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	4691      	mov	r9, r2
 8005d02:	dc37      	bgt.n	8005d74 <_printf_float+0x374>
 8005d04:	f04f 0b00 	mov.w	fp, #0
 8005d08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d0c:	f104 021a 	add.w	r2, r4, #26
 8005d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	eba3 0309 	sub.w	r3, r3, r9
 8005d18:	455b      	cmp	r3, fp
 8005d1a:	dc33      	bgt.n	8005d84 <_printf_float+0x384>
 8005d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d20:	429a      	cmp	r2, r3
 8005d22:	db3b      	blt.n	8005d9c <_printf_float+0x39c>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	07da      	lsls	r2, r3, #31
 8005d28:	d438      	bmi.n	8005d9c <_printf_float+0x39c>
 8005d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2c:	9a05      	ldr	r2, [sp, #20]
 8005d2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d30:	1a9a      	subs	r2, r3, r2
 8005d32:	eba3 0901 	sub.w	r9, r3, r1
 8005d36:	4591      	cmp	r9, r2
 8005d38:	bfa8      	it	ge
 8005d3a:	4691      	movge	r9, r2
 8005d3c:	f1b9 0f00 	cmp.w	r9, #0
 8005d40:	dc35      	bgt.n	8005dae <_printf_float+0x3ae>
 8005d42:	f04f 0800 	mov.w	r8, #0
 8005d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d4a:	f104 0a1a 	add.w	sl, r4, #26
 8005d4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	eba3 0309 	sub.w	r3, r3, r9
 8005d58:	4543      	cmp	r3, r8
 8005d5a:	f77f af79 	ble.w	8005c50 <_printf_float+0x250>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f43f aeaa 	beq.w	8005ac2 <_printf_float+0xc2>
 8005d6e:	f108 0801 	add.w	r8, r8, #1
 8005d72:	e7ec      	b.n	8005d4e <_printf_float+0x34e>
 8005d74:	4613      	mov	r3, r2
 8005d76:	4631      	mov	r1, r6
 8005d78:	4642      	mov	r2, r8
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	47b8      	blx	r7
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d1c0      	bne.n	8005d04 <_printf_float+0x304>
 8005d82:	e69e      	b.n	8005ac2 <_printf_float+0xc2>
 8005d84:	2301      	movs	r3, #1
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	9205      	str	r2, [sp, #20]
 8005d8c:	47b8      	blx	r7
 8005d8e:	3001      	adds	r0, #1
 8005d90:	f43f ae97 	beq.w	8005ac2 <_printf_float+0xc2>
 8005d94:	9a05      	ldr	r2, [sp, #20]
 8005d96:	f10b 0b01 	add.w	fp, fp, #1
 8005d9a:	e7b9      	b.n	8005d10 <_printf_float+0x310>
 8005d9c:	ee18 3a10 	vmov	r3, s16
 8005da0:	4652      	mov	r2, sl
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	d1be      	bne.n	8005d2a <_printf_float+0x32a>
 8005dac:	e689      	b.n	8005ac2 <_printf_float+0xc2>
 8005dae:	9a05      	ldr	r2, [sp, #20]
 8005db0:	464b      	mov	r3, r9
 8005db2:	4442      	add	r2, r8
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d1c1      	bne.n	8005d42 <_printf_float+0x342>
 8005dbe:	e680      	b.n	8005ac2 <_printf_float+0xc2>
 8005dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dc2:	2a01      	cmp	r2, #1
 8005dc4:	dc01      	bgt.n	8005dca <_printf_float+0x3ca>
 8005dc6:	07db      	lsls	r3, r3, #31
 8005dc8:	d538      	bpl.n	8005e3c <_printf_float+0x43c>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4642      	mov	r2, r8
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f ae74 	beq.w	8005ac2 <_printf_float+0xc2>
 8005dda:	ee18 3a10 	vmov	r3, s16
 8005dde:	4652      	mov	r2, sl
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f ae6b 	beq.w	8005ac2 <_printf_float+0xc2>
 8005dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005df0:	2200      	movs	r2, #0
 8005df2:	2300      	movs	r3, #0
 8005df4:	f7fa fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 8005df8:	b9d8      	cbnz	r0, 8005e32 <_printf_float+0x432>
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfc:	f108 0201 	add.w	r2, r8, #1
 8005e00:	3b01      	subs	r3, #1
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d10e      	bne.n	8005e2a <_printf_float+0x42a>
 8005e0c:	e659      	b.n	8005ac2 <_printf_float+0xc2>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4652      	mov	r2, sl
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f ae52 	beq.w	8005ac2 <_printf_float+0xc2>
 8005e1e:	f108 0801 	add.w	r8, r8, #1
 8005e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e24:	3b01      	subs	r3, #1
 8005e26:	4543      	cmp	r3, r8
 8005e28:	dcf1      	bgt.n	8005e0e <_printf_float+0x40e>
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e30:	e6dc      	b.n	8005bec <_printf_float+0x1ec>
 8005e32:	f04f 0800 	mov.w	r8, #0
 8005e36:	f104 0a1a 	add.w	sl, r4, #26
 8005e3a:	e7f2      	b.n	8005e22 <_printf_float+0x422>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	4642      	mov	r2, r8
 8005e40:	e7df      	b.n	8005e02 <_printf_float+0x402>
 8005e42:	2301      	movs	r3, #1
 8005e44:	464a      	mov	r2, r9
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f ae38 	beq.w	8005ac2 <_printf_float+0xc2>
 8005e52:	f108 0801 	add.w	r8, r8, #1
 8005e56:	68e3      	ldr	r3, [r4, #12]
 8005e58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e5a:	1a5b      	subs	r3, r3, r1
 8005e5c:	4543      	cmp	r3, r8
 8005e5e:	dcf0      	bgt.n	8005e42 <_printf_float+0x442>
 8005e60:	e6fa      	b.n	8005c58 <_printf_float+0x258>
 8005e62:	f04f 0800 	mov.w	r8, #0
 8005e66:	f104 0919 	add.w	r9, r4, #25
 8005e6a:	e7f4      	b.n	8005e56 <_printf_float+0x456>

08005e6c <_printf_common>:
 8005e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e70:	4616      	mov	r6, r2
 8005e72:	4699      	mov	r9, r3
 8005e74:	688a      	ldr	r2, [r1, #8]
 8005e76:	690b      	ldr	r3, [r1, #16]
 8005e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	bfb8      	it	lt
 8005e80:	4613      	movlt	r3, r2
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e88:	4607      	mov	r7, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	b10a      	cbz	r2, 8005e92 <_printf_common+0x26>
 8005e8e:	3301      	adds	r3, #1
 8005e90:	6033      	str	r3, [r6, #0]
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	0699      	lsls	r1, r3, #26
 8005e96:	bf42      	ittt	mi
 8005e98:	6833      	ldrmi	r3, [r6, #0]
 8005e9a:	3302      	addmi	r3, #2
 8005e9c:	6033      	strmi	r3, [r6, #0]
 8005e9e:	6825      	ldr	r5, [r4, #0]
 8005ea0:	f015 0506 	ands.w	r5, r5, #6
 8005ea4:	d106      	bne.n	8005eb4 <_printf_common+0x48>
 8005ea6:	f104 0a19 	add.w	sl, r4, #25
 8005eaa:	68e3      	ldr	r3, [r4, #12]
 8005eac:	6832      	ldr	r2, [r6, #0]
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	42ab      	cmp	r3, r5
 8005eb2:	dc26      	bgt.n	8005f02 <_printf_common+0x96>
 8005eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb8:	1e13      	subs	r3, r2, #0
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	bf18      	it	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	0692      	lsls	r2, r2, #26
 8005ec2:	d42b      	bmi.n	8005f1c <_printf_common+0xb0>
 8005ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec8:	4649      	mov	r1, r9
 8005eca:	4638      	mov	r0, r7
 8005ecc:	47c0      	blx	r8
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d01e      	beq.n	8005f10 <_printf_common+0xa4>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	68e5      	ldr	r5, [r4, #12]
 8005ed6:	6832      	ldr	r2, [r6, #0]
 8005ed8:	f003 0306 	and.w	r3, r3, #6
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	bf08      	it	eq
 8005ee0:	1aad      	subeq	r5, r5, r2
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	6922      	ldr	r2, [r4, #16]
 8005ee6:	bf0c      	ite	eq
 8005ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005eec:	2500      	movne	r5, #0
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	bfc4      	itt	gt
 8005ef2:	1a9b      	subgt	r3, r3, r2
 8005ef4:	18ed      	addgt	r5, r5, r3
 8005ef6:	2600      	movs	r6, #0
 8005ef8:	341a      	adds	r4, #26
 8005efa:	42b5      	cmp	r5, r6
 8005efc:	d11a      	bne.n	8005f34 <_printf_common+0xc8>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e008      	b.n	8005f14 <_printf_common+0xa8>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4652      	mov	r2, sl
 8005f06:	4649      	mov	r1, r9
 8005f08:	4638      	mov	r0, r7
 8005f0a:	47c0      	blx	r8
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d103      	bne.n	8005f18 <_printf_common+0xac>
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f18:	3501      	adds	r5, #1
 8005f1a:	e7c6      	b.n	8005eaa <_printf_common+0x3e>
 8005f1c:	18e1      	adds	r1, r4, r3
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	2030      	movs	r0, #48	; 0x30
 8005f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f26:	4422      	add	r2, r4
 8005f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f30:	3302      	adds	r3, #2
 8005f32:	e7c7      	b.n	8005ec4 <_printf_common+0x58>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4622      	mov	r2, r4
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	47c0      	blx	r8
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d0e6      	beq.n	8005f10 <_printf_common+0xa4>
 8005f42:	3601      	adds	r6, #1
 8005f44:	e7d9      	b.n	8005efa <_printf_common+0x8e>
	...

08005f48 <_printf_i>:
 8005f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	7e0f      	ldrb	r7, [r1, #24]
 8005f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f50:	2f78      	cmp	r7, #120	; 0x78
 8005f52:	4691      	mov	r9, r2
 8005f54:	4680      	mov	r8, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	469a      	mov	sl, r3
 8005f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f5e:	d807      	bhi.n	8005f70 <_printf_i+0x28>
 8005f60:	2f62      	cmp	r7, #98	; 0x62
 8005f62:	d80a      	bhi.n	8005f7a <_printf_i+0x32>
 8005f64:	2f00      	cmp	r7, #0
 8005f66:	f000 80d8 	beq.w	800611a <_printf_i+0x1d2>
 8005f6a:	2f58      	cmp	r7, #88	; 0x58
 8005f6c:	f000 80a3 	beq.w	80060b6 <_printf_i+0x16e>
 8005f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f78:	e03a      	b.n	8005ff0 <_printf_i+0xa8>
 8005f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f7e:	2b15      	cmp	r3, #21
 8005f80:	d8f6      	bhi.n	8005f70 <_printf_i+0x28>
 8005f82:	a101      	add	r1, pc, #4	; (adr r1, 8005f88 <_printf_i+0x40>)
 8005f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f88:	08005fe1 	.word	0x08005fe1
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08005f71 	.word	0x08005f71
 8005f94:	08005f71 	.word	0x08005f71
 8005f98:	08005f71 	.word	0x08005f71
 8005f9c:	08005f71 	.word	0x08005f71
 8005fa0:	08005ff5 	.word	0x08005ff5
 8005fa4:	08005f71 	.word	0x08005f71
 8005fa8:	08005f71 	.word	0x08005f71
 8005fac:	08005f71 	.word	0x08005f71
 8005fb0:	08005f71 	.word	0x08005f71
 8005fb4:	08006101 	.word	0x08006101
 8005fb8:	08006025 	.word	0x08006025
 8005fbc:	080060e3 	.word	0x080060e3
 8005fc0:	08005f71 	.word	0x08005f71
 8005fc4:	08005f71 	.word	0x08005f71
 8005fc8:	08006123 	.word	0x08006123
 8005fcc:	08005f71 	.word	0x08005f71
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005f71 	.word	0x08005f71
 8005fd8:	08005f71 	.word	0x08005f71
 8005fdc:	080060eb 	.word	0x080060eb
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	1d1a      	adds	r2, r3, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	602a      	str	r2, [r5, #0]
 8005fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0a3      	b.n	800613c <_printf_i+0x1f4>
 8005ff4:	6820      	ldr	r0, [r4, #0]
 8005ff6:	6829      	ldr	r1, [r5, #0]
 8005ff8:	0606      	lsls	r6, r0, #24
 8005ffa:	f101 0304 	add.w	r3, r1, #4
 8005ffe:	d50a      	bpl.n	8006016 <_printf_i+0xce>
 8006000:	680e      	ldr	r6, [r1, #0]
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	2e00      	cmp	r6, #0
 8006006:	da03      	bge.n	8006010 <_printf_i+0xc8>
 8006008:	232d      	movs	r3, #45	; 0x2d
 800600a:	4276      	negs	r6, r6
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	485e      	ldr	r0, [pc, #376]	; (800618c <_printf_i+0x244>)
 8006012:	230a      	movs	r3, #10
 8006014:	e019      	b.n	800604a <_printf_i+0x102>
 8006016:	680e      	ldr	r6, [r1, #0]
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800601e:	bf18      	it	ne
 8006020:	b236      	sxthne	r6, r6
 8006022:	e7ef      	b.n	8006004 <_printf_i+0xbc>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	6820      	ldr	r0, [r4, #0]
 8006028:	1d19      	adds	r1, r3, #4
 800602a:	6029      	str	r1, [r5, #0]
 800602c:	0601      	lsls	r1, r0, #24
 800602e:	d501      	bpl.n	8006034 <_printf_i+0xec>
 8006030:	681e      	ldr	r6, [r3, #0]
 8006032:	e002      	b.n	800603a <_printf_i+0xf2>
 8006034:	0646      	lsls	r6, r0, #25
 8006036:	d5fb      	bpl.n	8006030 <_printf_i+0xe8>
 8006038:	881e      	ldrh	r6, [r3, #0]
 800603a:	4854      	ldr	r0, [pc, #336]	; (800618c <_printf_i+0x244>)
 800603c:	2f6f      	cmp	r7, #111	; 0x6f
 800603e:	bf0c      	ite	eq
 8006040:	2308      	moveq	r3, #8
 8006042:	230a      	movne	r3, #10
 8006044:	2100      	movs	r1, #0
 8006046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800604a:	6865      	ldr	r5, [r4, #4]
 800604c:	60a5      	str	r5, [r4, #8]
 800604e:	2d00      	cmp	r5, #0
 8006050:	bfa2      	ittt	ge
 8006052:	6821      	ldrge	r1, [r4, #0]
 8006054:	f021 0104 	bicge.w	r1, r1, #4
 8006058:	6021      	strge	r1, [r4, #0]
 800605a:	b90e      	cbnz	r6, 8006060 <_printf_i+0x118>
 800605c:	2d00      	cmp	r5, #0
 800605e:	d04d      	beq.n	80060fc <_printf_i+0x1b4>
 8006060:	4615      	mov	r5, r2
 8006062:	fbb6 f1f3 	udiv	r1, r6, r3
 8006066:	fb03 6711 	mls	r7, r3, r1, r6
 800606a:	5dc7      	ldrb	r7, [r0, r7]
 800606c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006070:	4637      	mov	r7, r6
 8006072:	42bb      	cmp	r3, r7
 8006074:	460e      	mov	r6, r1
 8006076:	d9f4      	bls.n	8006062 <_printf_i+0x11a>
 8006078:	2b08      	cmp	r3, #8
 800607a:	d10b      	bne.n	8006094 <_printf_i+0x14c>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	07de      	lsls	r6, r3, #31
 8006080:	d508      	bpl.n	8006094 <_printf_i+0x14c>
 8006082:	6923      	ldr	r3, [r4, #16]
 8006084:	6861      	ldr	r1, [r4, #4]
 8006086:	4299      	cmp	r1, r3
 8006088:	bfde      	ittt	le
 800608a:	2330      	movle	r3, #48	; 0x30
 800608c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006094:	1b52      	subs	r2, r2, r5
 8006096:	6122      	str	r2, [r4, #16]
 8006098:	f8cd a000 	str.w	sl, [sp]
 800609c:	464b      	mov	r3, r9
 800609e:	aa03      	add	r2, sp, #12
 80060a0:	4621      	mov	r1, r4
 80060a2:	4640      	mov	r0, r8
 80060a4:	f7ff fee2 	bl	8005e6c <_printf_common>
 80060a8:	3001      	adds	r0, #1
 80060aa:	d14c      	bne.n	8006146 <_printf_i+0x1fe>
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	b004      	add	sp, #16
 80060b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b6:	4835      	ldr	r0, [pc, #212]	; (800618c <_printf_i+0x244>)
 80060b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060bc:	6829      	ldr	r1, [r5, #0]
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060c4:	6029      	str	r1, [r5, #0]
 80060c6:	061d      	lsls	r5, r3, #24
 80060c8:	d514      	bpl.n	80060f4 <_printf_i+0x1ac>
 80060ca:	07df      	lsls	r7, r3, #31
 80060cc:	bf44      	itt	mi
 80060ce:	f043 0320 	orrmi.w	r3, r3, #32
 80060d2:	6023      	strmi	r3, [r4, #0]
 80060d4:	b91e      	cbnz	r6, 80060de <_printf_i+0x196>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f023 0320 	bic.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	2310      	movs	r3, #16
 80060e0:	e7b0      	b.n	8006044 <_printf_i+0xfc>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f043 0320 	orr.w	r3, r3, #32
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	2378      	movs	r3, #120	; 0x78
 80060ec:	4828      	ldr	r0, [pc, #160]	; (8006190 <_printf_i+0x248>)
 80060ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060f2:	e7e3      	b.n	80060bc <_printf_i+0x174>
 80060f4:	0659      	lsls	r1, r3, #25
 80060f6:	bf48      	it	mi
 80060f8:	b2b6      	uxthmi	r6, r6
 80060fa:	e7e6      	b.n	80060ca <_printf_i+0x182>
 80060fc:	4615      	mov	r5, r2
 80060fe:	e7bb      	b.n	8006078 <_printf_i+0x130>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	6826      	ldr	r6, [r4, #0]
 8006104:	6961      	ldr	r1, [r4, #20]
 8006106:	1d18      	adds	r0, r3, #4
 8006108:	6028      	str	r0, [r5, #0]
 800610a:	0635      	lsls	r5, r6, #24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	d501      	bpl.n	8006114 <_printf_i+0x1cc>
 8006110:	6019      	str	r1, [r3, #0]
 8006112:	e002      	b.n	800611a <_printf_i+0x1d2>
 8006114:	0670      	lsls	r0, r6, #25
 8006116:	d5fb      	bpl.n	8006110 <_printf_i+0x1c8>
 8006118:	8019      	strh	r1, [r3, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	4615      	mov	r5, r2
 8006120:	e7ba      	b.n	8006098 <_printf_i+0x150>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	602a      	str	r2, [r5, #0]
 8006128:	681d      	ldr	r5, [r3, #0]
 800612a:	6862      	ldr	r2, [r4, #4]
 800612c:	2100      	movs	r1, #0
 800612e:	4628      	mov	r0, r5
 8006130:	f7fa f85e 	bl	80001f0 <memchr>
 8006134:	b108      	cbz	r0, 800613a <_printf_i+0x1f2>
 8006136:	1b40      	subs	r0, r0, r5
 8006138:	6060      	str	r0, [r4, #4]
 800613a:	6863      	ldr	r3, [r4, #4]
 800613c:	6123      	str	r3, [r4, #16]
 800613e:	2300      	movs	r3, #0
 8006140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006144:	e7a8      	b.n	8006098 <_printf_i+0x150>
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	462a      	mov	r2, r5
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d0ab      	beq.n	80060ac <_printf_i+0x164>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	079b      	lsls	r3, r3, #30
 8006158:	d413      	bmi.n	8006182 <_printf_i+0x23a>
 800615a:	68e0      	ldr	r0, [r4, #12]
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	4298      	cmp	r0, r3
 8006160:	bfb8      	it	lt
 8006162:	4618      	movlt	r0, r3
 8006164:	e7a4      	b.n	80060b0 <_printf_i+0x168>
 8006166:	2301      	movs	r3, #1
 8006168:	4632      	mov	r2, r6
 800616a:	4649      	mov	r1, r9
 800616c:	4640      	mov	r0, r8
 800616e:	47d0      	blx	sl
 8006170:	3001      	adds	r0, #1
 8006172:	d09b      	beq.n	80060ac <_printf_i+0x164>
 8006174:	3501      	adds	r5, #1
 8006176:	68e3      	ldr	r3, [r4, #12]
 8006178:	9903      	ldr	r1, [sp, #12]
 800617a:	1a5b      	subs	r3, r3, r1
 800617c:	42ab      	cmp	r3, r5
 800617e:	dcf2      	bgt.n	8006166 <_printf_i+0x21e>
 8006180:	e7eb      	b.n	800615a <_printf_i+0x212>
 8006182:	2500      	movs	r5, #0
 8006184:	f104 0619 	add.w	r6, r4, #25
 8006188:	e7f5      	b.n	8006176 <_printf_i+0x22e>
 800618a:	bf00      	nop
 800618c:	0800b28a 	.word	0x0800b28a
 8006190:	0800b29b 	.word	0x0800b29b

08006194 <_scanf_float>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	b087      	sub	sp, #28
 800619a:	4617      	mov	r7, r2
 800619c:	9303      	str	r3, [sp, #12]
 800619e:	688b      	ldr	r3, [r1, #8]
 80061a0:	1e5a      	subs	r2, r3, #1
 80061a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061a6:	bf83      	ittte	hi
 80061a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061ac:	195b      	addhi	r3, r3, r5
 80061ae:	9302      	strhi	r3, [sp, #8]
 80061b0:	2300      	movls	r3, #0
 80061b2:	bf86      	itte	hi
 80061b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061b8:	608b      	strhi	r3, [r1, #8]
 80061ba:	9302      	strls	r3, [sp, #8]
 80061bc:	680b      	ldr	r3, [r1, #0]
 80061be:	468b      	mov	fp, r1
 80061c0:	2500      	movs	r5, #0
 80061c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80061ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061ce:	4680      	mov	r8, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	465e      	mov	r6, fp
 80061d4:	46aa      	mov	sl, r5
 80061d6:	46a9      	mov	r9, r5
 80061d8:	9501      	str	r5, [sp, #4]
 80061da:	68a2      	ldr	r2, [r4, #8]
 80061dc:	b152      	cbz	r2, 80061f4 <_scanf_float+0x60>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b4e      	cmp	r3, #78	; 0x4e
 80061e4:	d864      	bhi.n	80062b0 <_scanf_float+0x11c>
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d83c      	bhi.n	8006264 <_scanf_float+0xd0>
 80061ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061ee:	b2c8      	uxtb	r0, r1
 80061f0:	280e      	cmp	r0, #14
 80061f2:	d93a      	bls.n	800626a <_scanf_float+0xd6>
 80061f4:	f1b9 0f00 	cmp.w	r9, #0
 80061f8:	d003      	beq.n	8006202 <_scanf_float+0x6e>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006206:	f1ba 0f01 	cmp.w	sl, #1
 800620a:	f200 8113 	bhi.w	8006434 <_scanf_float+0x2a0>
 800620e:	455e      	cmp	r6, fp
 8006210:	f200 8105 	bhi.w	800641e <_scanf_float+0x28a>
 8006214:	2501      	movs	r5, #1
 8006216:	4628      	mov	r0, r5
 8006218:	b007      	add	sp, #28
 800621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006222:	2a0d      	cmp	r2, #13
 8006224:	d8e6      	bhi.n	80061f4 <_scanf_float+0x60>
 8006226:	a101      	add	r1, pc, #4	; (adr r1, 800622c <_scanf_float+0x98>)
 8006228:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800622c:	0800636b 	.word	0x0800636b
 8006230:	080061f5 	.word	0x080061f5
 8006234:	080061f5 	.word	0x080061f5
 8006238:	080061f5 	.word	0x080061f5
 800623c:	080063cb 	.word	0x080063cb
 8006240:	080063a3 	.word	0x080063a3
 8006244:	080061f5 	.word	0x080061f5
 8006248:	080061f5 	.word	0x080061f5
 800624c:	08006379 	.word	0x08006379
 8006250:	080061f5 	.word	0x080061f5
 8006254:	080061f5 	.word	0x080061f5
 8006258:	080061f5 	.word	0x080061f5
 800625c:	080061f5 	.word	0x080061f5
 8006260:	08006331 	.word	0x08006331
 8006264:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006268:	e7db      	b.n	8006222 <_scanf_float+0x8e>
 800626a:	290e      	cmp	r1, #14
 800626c:	d8c2      	bhi.n	80061f4 <_scanf_float+0x60>
 800626e:	a001      	add	r0, pc, #4	; (adr r0, 8006274 <_scanf_float+0xe0>)
 8006270:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006274:	08006323 	.word	0x08006323
 8006278:	080061f5 	.word	0x080061f5
 800627c:	08006323 	.word	0x08006323
 8006280:	080063b7 	.word	0x080063b7
 8006284:	080061f5 	.word	0x080061f5
 8006288:	080062d1 	.word	0x080062d1
 800628c:	0800630d 	.word	0x0800630d
 8006290:	0800630d 	.word	0x0800630d
 8006294:	0800630d 	.word	0x0800630d
 8006298:	0800630d 	.word	0x0800630d
 800629c:	0800630d 	.word	0x0800630d
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	0800630d 	.word	0x0800630d
 80062b0:	2b6e      	cmp	r3, #110	; 0x6e
 80062b2:	d809      	bhi.n	80062c8 <_scanf_float+0x134>
 80062b4:	2b60      	cmp	r3, #96	; 0x60
 80062b6:	d8b2      	bhi.n	800621e <_scanf_float+0x8a>
 80062b8:	2b54      	cmp	r3, #84	; 0x54
 80062ba:	d077      	beq.n	80063ac <_scanf_float+0x218>
 80062bc:	2b59      	cmp	r3, #89	; 0x59
 80062be:	d199      	bne.n	80061f4 <_scanf_float+0x60>
 80062c0:	2d07      	cmp	r5, #7
 80062c2:	d197      	bne.n	80061f4 <_scanf_float+0x60>
 80062c4:	2508      	movs	r5, #8
 80062c6:	e029      	b.n	800631c <_scanf_float+0x188>
 80062c8:	2b74      	cmp	r3, #116	; 0x74
 80062ca:	d06f      	beq.n	80063ac <_scanf_float+0x218>
 80062cc:	2b79      	cmp	r3, #121	; 0x79
 80062ce:	e7f6      	b.n	80062be <_scanf_float+0x12a>
 80062d0:	6821      	ldr	r1, [r4, #0]
 80062d2:	05c8      	lsls	r0, r1, #23
 80062d4:	d51a      	bpl.n	800630c <_scanf_float+0x178>
 80062d6:	9b02      	ldr	r3, [sp, #8]
 80062d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80062dc:	6021      	str	r1, [r4, #0]
 80062de:	f109 0901 	add.w	r9, r9, #1
 80062e2:	b11b      	cbz	r3, 80062ec <_scanf_float+0x158>
 80062e4:	3b01      	subs	r3, #1
 80062e6:	3201      	adds	r2, #1
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	60a2      	str	r2, [r4, #8]
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	3301      	adds	r3, #1
 80062f6:	6123      	str	r3, [r4, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	607b      	str	r3, [r7, #4]
 8006300:	f340 8084 	ble.w	800640c <_scanf_float+0x278>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	e766      	b.n	80061da <_scanf_float+0x46>
 800630c:	eb1a 0f05 	cmn.w	sl, r5
 8006310:	f47f af70 	bne.w	80061f4 <_scanf_float+0x60>
 8006314:	6822      	ldr	r2, [r4, #0]
 8006316:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800631a:	6022      	str	r2, [r4, #0]
 800631c:	f806 3b01 	strb.w	r3, [r6], #1
 8006320:	e7e4      	b.n	80062ec <_scanf_float+0x158>
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	0610      	lsls	r0, r2, #24
 8006326:	f57f af65 	bpl.w	80061f4 <_scanf_float+0x60>
 800632a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800632e:	e7f4      	b.n	800631a <_scanf_float+0x186>
 8006330:	f1ba 0f00 	cmp.w	sl, #0
 8006334:	d10e      	bne.n	8006354 <_scanf_float+0x1c0>
 8006336:	f1b9 0f00 	cmp.w	r9, #0
 800633a:	d10e      	bne.n	800635a <_scanf_float+0x1c6>
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006342:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006346:	d108      	bne.n	800635a <_scanf_float+0x1c6>
 8006348:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800634c:	6022      	str	r2, [r4, #0]
 800634e:	f04f 0a01 	mov.w	sl, #1
 8006352:	e7e3      	b.n	800631c <_scanf_float+0x188>
 8006354:	f1ba 0f02 	cmp.w	sl, #2
 8006358:	d055      	beq.n	8006406 <_scanf_float+0x272>
 800635a:	2d01      	cmp	r5, #1
 800635c:	d002      	beq.n	8006364 <_scanf_float+0x1d0>
 800635e:	2d04      	cmp	r5, #4
 8006360:	f47f af48 	bne.w	80061f4 <_scanf_float+0x60>
 8006364:	3501      	adds	r5, #1
 8006366:	b2ed      	uxtb	r5, r5
 8006368:	e7d8      	b.n	800631c <_scanf_float+0x188>
 800636a:	f1ba 0f01 	cmp.w	sl, #1
 800636e:	f47f af41 	bne.w	80061f4 <_scanf_float+0x60>
 8006372:	f04f 0a02 	mov.w	sl, #2
 8006376:	e7d1      	b.n	800631c <_scanf_float+0x188>
 8006378:	b97d      	cbnz	r5, 800639a <_scanf_float+0x206>
 800637a:	f1b9 0f00 	cmp.w	r9, #0
 800637e:	f47f af3c 	bne.w	80061fa <_scanf_float+0x66>
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006388:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800638c:	f47f af39 	bne.w	8006202 <_scanf_float+0x6e>
 8006390:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006394:	6022      	str	r2, [r4, #0]
 8006396:	2501      	movs	r5, #1
 8006398:	e7c0      	b.n	800631c <_scanf_float+0x188>
 800639a:	2d03      	cmp	r5, #3
 800639c:	d0e2      	beq.n	8006364 <_scanf_float+0x1d0>
 800639e:	2d05      	cmp	r5, #5
 80063a0:	e7de      	b.n	8006360 <_scanf_float+0x1cc>
 80063a2:	2d02      	cmp	r5, #2
 80063a4:	f47f af26 	bne.w	80061f4 <_scanf_float+0x60>
 80063a8:	2503      	movs	r5, #3
 80063aa:	e7b7      	b.n	800631c <_scanf_float+0x188>
 80063ac:	2d06      	cmp	r5, #6
 80063ae:	f47f af21 	bne.w	80061f4 <_scanf_float+0x60>
 80063b2:	2507      	movs	r5, #7
 80063b4:	e7b2      	b.n	800631c <_scanf_float+0x188>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	0591      	lsls	r1, r2, #22
 80063ba:	f57f af1b 	bpl.w	80061f4 <_scanf_float+0x60>
 80063be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80063c2:	6022      	str	r2, [r4, #0]
 80063c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063c8:	e7a8      	b.n	800631c <_scanf_float+0x188>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80063d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80063d4:	d006      	beq.n	80063e4 <_scanf_float+0x250>
 80063d6:	0550      	lsls	r0, r2, #21
 80063d8:	f57f af0c 	bpl.w	80061f4 <_scanf_float+0x60>
 80063dc:	f1b9 0f00 	cmp.w	r9, #0
 80063e0:	f43f af0f 	beq.w	8006202 <_scanf_float+0x6e>
 80063e4:	0591      	lsls	r1, r2, #22
 80063e6:	bf58      	it	pl
 80063e8:	9901      	ldrpl	r1, [sp, #4]
 80063ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063ee:	bf58      	it	pl
 80063f0:	eba9 0101 	subpl.w	r1, r9, r1
 80063f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063f8:	bf58      	it	pl
 80063fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	f04f 0900 	mov.w	r9, #0
 8006404:	e78a      	b.n	800631c <_scanf_float+0x188>
 8006406:	f04f 0a03 	mov.w	sl, #3
 800640a:	e787      	b.n	800631c <_scanf_float+0x188>
 800640c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006410:	4639      	mov	r1, r7
 8006412:	4640      	mov	r0, r8
 8006414:	4798      	blx	r3
 8006416:	2800      	cmp	r0, #0
 8006418:	f43f aedf 	beq.w	80061da <_scanf_float+0x46>
 800641c:	e6ea      	b.n	80061f4 <_scanf_float+0x60>
 800641e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006426:	463a      	mov	r2, r7
 8006428:	4640      	mov	r0, r8
 800642a:	4798      	blx	r3
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	3b01      	subs	r3, #1
 8006430:	6123      	str	r3, [r4, #16]
 8006432:	e6ec      	b.n	800620e <_scanf_float+0x7a>
 8006434:	1e6b      	subs	r3, r5, #1
 8006436:	2b06      	cmp	r3, #6
 8006438:	d825      	bhi.n	8006486 <_scanf_float+0x2f2>
 800643a:	2d02      	cmp	r5, #2
 800643c:	d836      	bhi.n	80064ac <_scanf_float+0x318>
 800643e:	455e      	cmp	r6, fp
 8006440:	f67f aee8 	bls.w	8006214 <_scanf_float+0x80>
 8006444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006448:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800644c:	463a      	mov	r2, r7
 800644e:	4640      	mov	r0, r8
 8006450:	4798      	blx	r3
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	3b01      	subs	r3, #1
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	e7f1      	b.n	800643e <_scanf_float+0x2aa>
 800645a:	9802      	ldr	r0, [sp, #8]
 800645c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006460:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006464:	9002      	str	r0, [sp, #8]
 8006466:	463a      	mov	r2, r7
 8006468:	4640      	mov	r0, r8
 800646a:	4798      	blx	r3
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	3b01      	subs	r3, #1
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006476:	fa5f fa8a 	uxtb.w	sl, sl
 800647a:	f1ba 0f02 	cmp.w	sl, #2
 800647e:	d1ec      	bne.n	800645a <_scanf_float+0x2c6>
 8006480:	3d03      	subs	r5, #3
 8006482:	b2ed      	uxtb	r5, r5
 8006484:	1b76      	subs	r6, r6, r5
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	05da      	lsls	r2, r3, #23
 800648a:	d52f      	bpl.n	80064ec <_scanf_float+0x358>
 800648c:	055b      	lsls	r3, r3, #21
 800648e:	d510      	bpl.n	80064b2 <_scanf_float+0x31e>
 8006490:	455e      	cmp	r6, fp
 8006492:	f67f aebf 	bls.w	8006214 <_scanf_float+0x80>
 8006496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800649a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800649e:	463a      	mov	r2, r7
 80064a0:	4640      	mov	r0, r8
 80064a2:	4798      	blx	r3
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	e7f1      	b.n	8006490 <_scanf_float+0x2fc>
 80064ac:	46aa      	mov	sl, r5
 80064ae:	9602      	str	r6, [sp, #8]
 80064b0:	e7df      	b.n	8006472 <_scanf_float+0x2de>
 80064b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	2965      	cmp	r1, #101	; 0x65
 80064ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80064be:	f106 35ff 	add.w	r5, r6, #4294967295
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	d00c      	beq.n	80064e0 <_scanf_float+0x34c>
 80064c6:	2945      	cmp	r1, #69	; 0x45
 80064c8:	d00a      	beq.n	80064e0 <_scanf_float+0x34c>
 80064ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064ce:	463a      	mov	r2, r7
 80064d0:	4640      	mov	r0, r8
 80064d2:	4798      	blx	r3
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064da:	3b01      	subs	r3, #1
 80064dc:	1eb5      	subs	r5, r6, #2
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064e4:	463a      	mov	r2, r7
 80064e6:	4640      	mov	r0, r8
 80064e8:	4798      	blx	r3
 80064ea:	462e      	mov	r6, r5
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	f015 0510 	ands.w	r5, r5, #16
 80064f2:	d159      	bne.n	80065a8 <_scanf_float+0x414>
 80064f4:	7035      	strb	r5, [r6, #0]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d11b      	bne.n	800653a <_scanf_float+0x3a6>
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	454b      	cmp	r3, r9
 8006506:	eba3 0209 	sub.w	r2, r3, r9
 800650a:	d123      	bne.n	8006554 <_scanf_float+0x3c0>
 800650c:	2200      	movs	r2, #0
 800650e:	4659      	mov	r1, fp
 8006510:	4640      	mov	r0, r8
 8006512:	f000 fe97 	bl	8007244 <_strtod_r>
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	f012 0f02 	tst.w	r2, #2
 800651e:	ec57 6b10 	vmov	r6, r7, d0
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	d021      	beq.n	800656a <_scanf_float+0x3d6>
 8006526:	9903      	ldr	r1, [sp, #12]
 8006528:	1d1a      	adds	r2, r3, #4
 800652a:	600a      	str	r2, [r1, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	e9c3 6700 	strd	r6, r7, [r3]
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60e3      	str	r3, [r4, #12]
 8006538:	e66d      	b.n	8006216 <_scanf_float+0x82>
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0e5      	beq.n	800650c <_scanf_float+0x378>
 8006540:	9905      	ldr	r1, [sp, #20]
 8006542:	230a      	movs	r3, #10
 8006544:	462a      	mov	r2, r5
 8006546:	3101      	adds	r1, #1
 8006548:	4640      	mov	r0, r8
 800654a:	f000 ff03 	bl	8007354 <_strtol_r>
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	9e05      	ldr	r6, [sp, #20]
 8006552:	1ac2      	subs	r2, r0, r3
 8006554:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006558:	429e      	cmp	r6, r3
 800655a:	bf28      	it	cs
 800655c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006560:	4912      	ldr	r1, [pc, #72]	; (80065ac <_scanf_float+0x418>)
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f82c 	bl	80065c0 <siprintf>
 8006568:	e7d0      	b.n	800650c <_scanf_float+0x378>
 800656a:	9903      	ldr	r1, [sp, #12]
 800656c:	f012 0f04 	tst.w	r2, #4
 8006570:	f103 0204 	add.w	r2, r3, #4
 8006574:	600a      	str	r2, [r1, #0]
 8006576:	d1d9      	bne.n	800652c <_scanf_float+0x398>
 8006578:	f8d3 8000 	ldr.w	r8, [r3]
 800657c:	ee10 2a10 	vmov	r2, s0
 8006580:	ee10 0a10 	vmov	r0, s0
 8006584:	463b      	mov	r3, r7
 8006586:	4639      	mov	r1, r7
 8006588:	f7fa fad8 	bl	8000b3c <__aeabi_dcmpun>
 800658c:	b128      	cbz	r0, 800659a <_scanf_float+0x406>
 800658e:	4808      	ldr	r0, [pc, #32]	; (80065b0 <_scanf_float+0x41c>)
 8006590:	f000 f810 	bl	80065b4 <nanf>
 8006594:	ed88 0a00 	vstr	s0, [r8]
 8006598:	e7cb      	b.n	8006532 <_scanf_float+0x39e>
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f7fa fb2b 	bl	8000bf8 <__aeabi_d2f>
 80065a2:	f8c8 0000 	str.w	r0, [r8]
 80065a6:	e7c4      	b.n	8006532 <_scanf_float+0x39e>
 80065a8:	2500      	movs	r5, #0
 80065aa:	e634      	b.n	8006216 <_scanf_float+0x82>
 80065ac:	0800b2ac 	.word	0x0800b2ac
 80065b0:	0800b6b8 	.word	0x0800b6b8

080065b4 <nanf>:
 80065b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80065bc <nanf+0x8>
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	7fc00000 	.word	0x7fc00000

080065c0 <siprintf>:
 80065c0:	b40e      	push	{r1, r2, r3}
 80065c2:	b500      	push	{lr}
 80065c4:	b09c      	sub	sp, #112	; 0x70
 80065c6:	ab1d      	add	r3, sp, #116	; 0x74
 80065c8:	9002      	str	r0, [sp, #8]
 80065ca:	9006      	str	r0, [sp, #24]
 80065cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065d0:	4809      	ldr	r0, [pc, #36]	; (80065f8 <siprintf+0x38>)
 80065d2:	9107      	str	r1, [sp, #28]
 80065d4:	9104      	str	r1, [sp, #16]
 80065d6:	4909      	ldr	r1, [pc, #36]	; (80065fc <siprintf+0x3c>)
 80065d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065dc:	9105      	str	r1, [sp, #20]
 80065de:	6800      	ldr	r0, [r0, #0]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	a902      	add	r1, sp, #8
 80065e4:	f002 fee2 	bl	80093ac <_svfiprintf_r>
 80065e8:	9b02      	ldr	r3, [sp, #8]
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	b01c      	add	sp, #112	; 0x70
 80065f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f4:	b003      	add	sp, #12
 80065f6:	4770      	bx	lr
 80065f8:	20000124 	.word	0x20000124
 80065fc:	ffff0208 	.word	0xffff0208

08006600 <sulp>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	ec45 4b10 	vmov	d0, r4, r5
 800660a:	4616      	mov	r6, r2
 800660c:	f002 fc2c 	bl	8008e68 <__ulp>
 8006610:	ec51 0b10 	vmov	r0, r1, d0
 8006614:	b17e      	cbz	r6, 8006636 <sulp+0x36>
 8006616:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800661a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800661e:	2b00      	cmp	r3, #0
 8006620:	dd09      	ble.n	8006636 <sulp+0x36>
 8006622:	051b      	lsls	r3, r3, #20
 8006624:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006628:	2400      	movs	r4, #0
 800662a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	f7f9 ffe9 	bl	8000608 <__aeabi_dmul>
 8006636:	bd70      	pop	{r4, r5, r6, pc}

08006638 <_strtod_l>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	ed2d 8b02 	vpush	{d8}
 8006640:	b09d      	sub	sp, #116	; 0x74
 8006642:	461f      	mov	r7, r3
 8006644:	2300      	movs	r3, #0
 8006646:	9318      	str	r3, [sp, #96]	; 0x60
 8006648:	4ba2      	ldr	r3, [pc, #648]	; (80068d4 <_strtod_l+0x29c>)
 800664a:	9213      	str	r2, [sp, #76]	; 0x4c
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	9305      	str	r3, [sp, #20]
 8006650:	4604      	mov	r4, r0
 8006652:	4618      	mov	r0, r3
 8006654:	4688      	mov	r8, r1
 8006656:	f7f9 fdc3 	bl	80001e0 <strlen>
 800665a:	f04f 0a00 	mov.w	sl, #0
 800665e:	4605      	mov	r5, r0
 8006660:	f04f 0b00 	mov.w	fp, #0
 8006664:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	2a2b      	cmp	r2, #43	; 0x2b
 800666e:	d04e      	beq.n	800670e <_strtod_l+0xd6>
 8006670:	d83b      	bhi.n	80066ea <_strtod_l+0xb2>
 8006672:	2a0d      	cmp	r2, #13
 8006674:	d834      	bhi.n	80066e0 <_strtod_l+0xa8>
 8006676:	2a08      	cmp	r2, #8
 8006678:	d834      	bhi.n	80066e4 <_strtod_l+0xac>
 800667a:	2a00      	cmp	r2, #0
 800667c:	d03e      	beq.n	80066fc <_strtod_l+0xc4>
 800667e:	2300      	movs	r3, #0
 8006680:	930a      	str	r3, [sp, #40]	; 0x28
 8006682:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006684:	7833      	ldrb	r3, [r6, #0]
 8006686:	2b30      	cmp	r3, #48	; 0x30
 8006688:	f040 80b0 	bne.w	80067ec <_strtod_l+0x1b4>
 800668c:	7873      	ldrb	r3, [r6, #1]
 800668e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006692:	2b58      	cmp	r3, #88	; 0x58
 8006694:	d168      	bne.n	8006768 <_strtod_l+0x130>
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	ab18      	add	r3, sp, #96	; 0x60
 800669c:	9702      	str	r7, [sp, #8]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4a8d      	ldr	r2, [pc, #564]	; (80068d8 <_strtod_l+0x2a0>)
 80066a2:	ab19      	add	r3, sp, #100	; 0x64
 80066a4:	a917      	add	r1, sp, #92	; 0x5c
 80066a6:	4620      	mov	r0, r4
 80066a8:	f001 fd38 	bl	800811c <__gethex>
 80066ac:	f010 0707 	ands.w	r7, r0, #7
 80066b0:	4605      	mov	r5, r0
 80066b2:	d005      	beq.n	80066c0 <_strtod_l+0x88>
 80066b4:	2f06      	cmp	r7, #6
 80066b6:	d12c      	bne.n	8006712 <_strtod_l+0xda>
 80066b8:	3601      	adds	r6, #1
 80066ba:	2300      	movs	r3, #0
 80066bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80066be:	930a      	str	r3, [sp, #40]	; 0x28
 80066c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 8590 	bne.w	80071e8 <_strtod_l+0xbb0>
 80066c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ca:	b1eb      	cbz	r3, 8006708 <_strtod_l+0xd0>
 80066cc:	4652      	mov	r2, sl
 80066ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066d2:	ec43 2b10 	vmov	d0, r2, r3
 80066d6:	b01d      	add	sp, #116	; 0x74
 80066d8:	ecbd 8b02 	vpop	{d8}
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	2a20      	cmp	r2, #32
 80066e2:	d1cc      	bne.n	800667e <_strtod_l+0x46>
 80066e4:	3301      	adds	r3, #1
 80066e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80066e8:	e7be      	b.n	8006668 <_strtod_l+0x30>
 80066ea:	2a2d      	cmp	r2, #45	; 0x2d
 80066ec:	d1c7      	bne.n	800667e <_strtod_l+0x46>
 80066ee:	2201      	movs	r2, #1
 80066f0:	920a      	str	r2, [sp, #40]	; 0x28
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1c2      	bne.n	8006682 <_strtod_l+0x4a>
 80066fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 856e 	bne.w	80071e4 <_strtod_l+0xbac>
 8006708:	4652      	mov	r2, sl
 800670a:	465b      	mov	r3, fp
 800670c:	e7e1      	b.n	80066d2 <_strtod_l+0x9a>
 800670e:	2200      	movs	r2, #0
 8006710:	e7ee      	b.n	80066f0 <_strtod_l+0xb8>
 8006712:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006714:	b13a      	cbz	r2, 8006726 <_strtod_l+0xee>
 8006716:	2135      	movs	r1, #53	; 0x35
 8006718:	a81a      	add	r0, sp, #104	; 0x68
 800671a:	f002 fcb0 	bl	800907e <__copybits>
 800671e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006720:	4620      	mov	r0, r4
 8006722:	f002 f86f 	bl	8008804 <_Bfree>
 8006726:	3f01      	subs	r7, #1
 8006728:	2f04      	cmp	r7, #4
 800672a:	d806      	bhi.n	800673a <_strtod_l+0x102>
 800672c:	e8df f007 	tbb	[pc, r7]
 8006730:	1714030a 	.word	0x1714030a
 8006734:	0a          	.byte	0x0a
 8006735:	00          	.byte	0x00
 8006736:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800673a:	0728      	lsls	r0, r5, #28
 800673c:	d5c0      	bpl.n	80066c0 <_strtod_l+0x88>
 800673e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006742:	e7bd      	b.n	80066c0 <_strtod_l+0x88>
 8006744:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006748:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800674a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800674e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006752:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006756:	e7f0      	b.n	800673a <_strtod_l+0x102>
 8006758:	f8df b180 	ldr.w	fp, [pc, #384]	; 80068dc <_strtod_l+0x2a4>
 800675c:	e7ed      	b.n	800673a <_strtod_l+0x102>
 800675e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006762:	f04f 3aff 	mov.w	sl, #4294967295
 8006766:	e7e8      	b.n	800673a <_strtod_l+0x102>
 8006768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	9217      	str	r2, [sp, #92]	; 0x5c
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b30      	cmp	r3, #48	; 0x30
 8006772:	d0f9      	beq.n	8006768 <_strtod_l+0x130>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0a3      	beq.n	80066c0 <_strtod_l+0x88>
 8006778:	2301      	movs	r3, #1
 800677a:	f04f 0900 	mov.w	r9, #0
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006782:	9308      	str	r3, [sp, #32]
 8006784:	f8cd 901c 	str.w	r9, [sp, #28]
 8006788:	464f      	mov	r7, r9
 800678a:	220a      	movs	r2, #10
 800678c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800678e:	7806      	ldrb	r6, [r0, #0]
 8006790:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006794:	b2d9      	uxtb	r1, r3
 8006796:	2909      	cmp	r1, #9
 8006798:	d92a      	bls.n	80067f0 <_strtod_l+0x1b8>
 800679a:	9905      	ldr	r1, [sp, #20]
 800679c:	462a      	mov	r2, r5
 800679e:	f002 ff1f 	bl	80095e0 <strncmp>
 80067a2:	b398      	cbz	r0, 800680c <_strtod_l+0x1d4>
 80067a4:	2000      	movs	r0, #0
 80067a6:	4632      	mov	r2, r6
 80067a8:	463d      	mov	r5, r7
 80067aa:	9005      	str	r0, [sp, #20]
 80067ac:	4603      	mov	r3, r0
 80067ae:	2a65      	cmp	r2, #101	; 0x65
 80067b0:	d001      	beq.n	80067b6 <_strtod_l+0x17e>
 80067b2:	2a45      	cmp	r2, #69	; 0x45
 80067b4:	d118      	bne.n	80067e8 <_strtod_l+0x1b0>
 80067b6:	b91d      	cbnz	r5, 80067c0 <_strtod_l+0x188>
 80067b8:	9a04      	ldr	r2, [sp, #16]
 80067ba:	4302      	orrs	r2, r0
 80067bc:	d09e      	beq.n	80066fc <_strtod_l+0xc4>
 80067be:	2500      	movs	r5, #0
 80067c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80067c4:	f108 0201 	add.w	r2, r8, #1
 80067c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80067ce:	2a2b      	cmp	r2, #43	; 0x2b
 80067d0:	d075      	beq.n	80068be <_strtod_l+0x286>
 80067d2:	2a2d      	cmp	r2, #45	; 0x2d
 80067d4:	d07b      	beq.n	80068ce <_strtod_l+0x296>
 80067d6:	f04f 0c00 	mov.w	ip, #0
 80067da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80067de:	2909      	cmp	r1, #9
 80067e0:	f240 8082 	bls.w	80068e8 <_strtod_l+0x2b0>
 80067e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067e8:	2600      	movs	r6, #0
 80067ea:	e09d      	b.n	8006928 <_strtod_l+0x2f0>
 80067ec:	2300      	movs	r3, #0
 80067ee:	e7c4      	b.n	800677a <_strtod_l+0x142>
 80067f0:	2f08      	cmp	r7, #8
 80067f2:	bfd8      	it	le
 80067f4:	9907      	ldrle	r1, [sp, #28]
 80067f6:	f100 0001 	add.w	r0, r0, #1
 80067fa:	bfda      	itte	le
 80067fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006800:	9307      	strle	r3, [sp, #28]
 8006802:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006806:	3701      	adds	r7, #1
 8006808:	9017      	str	r0, [sp, #92]	; 0x5c
 800680a:	e7bf      	b.n	800678c <_strtod_l+0x154>
 800680c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800680e:	195a      	adds	r2, r3, r5
 8006810:	9217      	str	r2, [sp, #92]	; 0x5c
 8006812:	5d5a      	ldrb	r2, [r3, r5]
 8006814:	2f00      	cmp	r7, #0
 8006816:	d037      	beq.n	8006888 <_strtod_l+0x250>
 8006818:	9005      	str	r0, [sp, #20]
 800681a:	463d      	mov	r5, r7
 800681c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006820:	2b09      	cmp	r3, #9
 8006822:	d912      	bls.n	800684a <_strtod_l+0x212>
 8006824:	2301      	movs	r3, #1
 8006826:	e7c2      	b.n	80067ae <_strtod_l+0x176>
 8006828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	9217      	str	r2, [sp, #92]	; 0x5c
 800682e:	785a      	ldrb	r2, [r3, #1]
 8006830:	3001      	adds	r0, #1
 8006832:	2a30      	cmp	r2, #48	; 0x30
 8006834:	d0f8      	beq.n	8006828 <_strtod_l+0x1f0>
 8006836:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800683a:	2b08      	cmp	r3, #8
 800683c:	f200 84d9 	bhi.w	80071f2 <_strtod_l+0xbba>
 8006840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006842:	9005      	str	r0, [sp, #20]
 8006844:	2000      	movs	r0, #0
 8006846:	9308      	str	r3, [sp, #32]
 8006848:	4605      	mov	r5, r0
 800684a:	3a30      	subs	r2, #48	; 0x30
 800684c:	f100 0301 	add.w	r3, r0, #1
 8006850:	d014      	beq.n	800687c <_strtod_l+0x244>
 8006852:	9905      	ldr	r1, [sp, #20]
 8006854:	4419      	add	r1, r3
 8006856:	9105      	str	r1, [sp, #20]
 8006858:	462b      	mov	r3, r5
 800685a:	eb00 0e05 	add.w	lr, r0, r5
 800685e:	210a      	movs	r1, #10
 8006860:	4573      	cmp	r3, lr
 8006862:	d113      	bne.n	800688c <_strtod_l+0x254>
 8006864:	182b      	adds	r3, r5, r0
 8006866:	2b08      	cmp	r3, #8
 8006868:	f105 0501 	add.w	r5, r5, #1
 800686c:	4405      	add	r5, r0
 800686e:	dc1c      	bgt.n	80068aa <_strtod_l+0x272>
 8006870:	9907      	ldr	r1, [sp, #28]
 8006872:	230a      	movs	r3, #10
 8006874:	fb03 2301 	mla	r3, r3, r1, r2
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	2300      	movs	r3, #0
 800687c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800687e:	1c51      	adds	r1, r2, #1
 8006880:	9117      	str	r1, [sp, #92]	; 0x5c
 8006882:	7852      	ldrb	r2, [r2, #1]
 8006884:	4618      	mov	r0, r3
 8006886:	e7c9      	b.n	800681c <_strtod_l+0x1e4>
 8006888:	4638      	mov	r0, r7
 800688a:	e7d2      	b.n	8006832 <_strtod_l+0x1fa>
 800688c:	2b08      	cmp	r3, #8
 800688e:	dc04      	bgt.n	800689a <_strtod_l+0x262>
 8006890:	9e07      	ldr	r6, [sp, #28]
 8006892:	434e      	muls	r6, r1
 8006894:	9607      	str	r6, [sp, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	e7e2      	b.n	8006860 <_strtod_l+0x228>
 800689a:	f103 0c01 	add.w	ip, r3, #1
 800689e:	f1bc 0f10 	cmp.w	ip, #16
 80068a2:	bfd8      	it	le
 80068a4:	fb01 f909 	mulle.w	r9, r1, r9
 80068a8:	e7f5      	b.n	8006896 <_strtod_l+0x25e>
 80068aa:	2d10      	cmp	r5, #16
 80068ac:	bfdc      	itt	le
 80068ae:	230a      	movle	r3, #10
 80068b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80068b4:	e7e1      	b.n	800687a <_strtod_l+0x242>
 80068b6:	2300      	movs	r3, #0
 80068b8:	9305      	str	r3, [sp, #20]
 80068ba:	2301      	movs	r3, #1
 80068bc:	e77c      	b.n	80067b8 <_strtod_l+0x180>
 80068be:	f04f 0c00 	mov.w	ip, #0
 80068c2:	f108 0202 	add.w	r2, r8, #2
 80068c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80068c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80068cc:	e785      	b.n	80067da <_strtod_l+0x1a2>
 80068ce:	f04f 0c01 	mov.w	ip, #1
 80068d2:	e7f6      	b.n	80068c2 <_strtod_l+0x28a>
 80068d4:	0800b500 	.word	0x0800b500
 80068d8:	0800b2b4 	.word	0x0800b2b4
 80068dc:	7ff00000 	.word	0x7ff00000
 80068e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068e2:	1c51      	adds	r1, r2, #1
 80068e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80068e6:	7852      	ldrb	r2, [r2, #1]
 80068e8:	2a30      	cmp	r2, #48	; 0x30
 80068ea:	d0f9      	beq.n	80068e0 <_strtod_l+0x2a8>
 80068ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80068f0:	2908      	cmp	r1, #8
 80068f2:	f63f af79 	bhi.w	80067e8 <_strtod_l+0x1b0>
 80068f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068fc:	9206      	str	r2, [sp, #24]
 80068fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006900:	1c51      	adds	r1, r2, #1
 8006902:	9117      	str	r1, [sp, #92]	; 0x5c
 8006904:	7852      	ldrb	r2, [r2, #1]
 8006906:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800690a:	2e09      	cmp	r6, #9
 800690c:	d937      	bls.n	800697e <_strtod_l+0x346>
 800690e:	9e06      	ldr	r6, [sp, #24]
 8006910:	1b89      	subs	r1, r1, r6
 8006912:	2908      	cmp	r1, #8
 8006914:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006918:	dc02      	bgt.n	8006920 <_strtod_l+0x2e8>
 800691a:	4576      	cmp	r6, lr
 800691c:	bfa8      	it	ge
 800691e:	4676      	movge	r6, lr
 8006920:	f1bc 0f00 	cmp.w	ip, #0
 8006924:	d000      	beq.n	8006928 <_strtod_l+0x2f0>
 8006926:	4276      	negs	r6, r6
 8006928:	2d00      	cmp	r5, #0
 800692a:	d14d      	bne.n	80069c8 <_strtod_l+0x390>
 800692c:	9904      	ldr	r1, [sp, #16]
 800692e:	4301      	orrs	r1, r0
 8006930:	f47f aec6 	bne.w	80066c0 <_strtod_l+0x88>
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f aee1 	bne.w	80066fc <_strtod_l+0xc4>
 800693a:	2a69      	cmp	r2, #105	; 0x69
 800693c:	d027      	beq.n	800698e <_strtod_l+0x356>
 800693e:	dc24      	bgt.n	800698a <_strtod_l+0x352>
 8006940:	2a49      	cmp	r2, #73	; 0x49
 8006942:	d024      	beq.n	800698e <_strtod_l+0x356>
 8006944:	2a4e      	cmp	r2, #78	; 0x4e
 8006946:	f47f aed9 	bne.w	80066fc <_strtod_l+0xc4>
 800694a:	499f      	ldr	r1, [pc, #636]	; (8006bc8 <_strtod_l+0x590>)
 800694c:	a817      	add	r0, sp, #92	; 0x5c
 800694e:	f001 fe3d 	bl	80085cc <__match>
 8006952:	2800      	cmp	r0, #0
 8006954:	f43f aed2 	beq.w	80066fc <_strtod_l+0xc4>
 8006958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b28      	cmp	r3, #40	; 0x28
 800695e:	d12d      	bne.n	80069bc <_strtod_l+0x384>
 8006960:	499a      	ldr	r1, [pc, #616]	; (8006bcc <_strtod_l+0x594>)
 8006962:	aa1a      	add	r2, sp, #104	; 0x68
 8006964:	a817      	add	r0, sp, #92	; 0x5c
 8006966:	f001 fe45 	bl	80085f4 <__hexnan>
 800696a:	2805      	cmp	r0, #5
 800696c:	d126      	bne.n	80069bc <_strtod_l+0x384>
 800696e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006970:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006974:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006978:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800697c:	e6a0      	b.n	80066c0 <_strtod_l+0x88>
 800697e:	210a      	movs	r1, #10
 8006980:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006984:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006988:	e7b9      	b.n	80068fe <_strtod_l+0x2c6>
 800698a:	2a6e      	cmp	r2, #110	; 0x6e
 800698c:	e7db      	b.n	8006946 <_strtod_l+0x30e>
 800698e:	4990      	ldr	r1, [pc, #576]	; (8006bd0 <_strtod_l+0x598>)
 8006990:	a817      	add	r0, sp, #92	; 0x5c
 8006992:	f001 fe1b 	bl	80085cc <__match>
 8006996:	2800      	cmp	r0, #0
 8006998:	f43f aeb0 	beq.w	80066fc <_strtod_l+0xc4>
 800699c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800699e:	498d      	ldr	r1, [pc, #564]	; (8006bd4 <_strtod_l+0x59c>)
 80069a0:	3b01      	subs	r3, #1
 80069a2:	a817      	add	r0, sp, #92	; 0x5c
 80069a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80069a6:	f001 fe11 	bl	80085cc <__match>
 80069aa:	b910      	cbnz	r0, 80069b2 <_strtod_l+0x37a>
 80069ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069ae:	3301      	adds	r3, #1
 80069b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80069b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006be4 <_strtod_l+0x5ac>
 80069b6:	f04f 0a00 	mov.w	sl, #0
 80069ba:	e681      	b.n	80066c0 <_strtod_l+0x88>
 80069bc:	4886      	ldr	r0, [pc, #536]	; (8006bd8 <_strtod_l+0x5a0>)
 80069be:	f002 fdf7 	bl	80095b0 <nan>
 80069c2:	ec5b ab10 	vmov	sl, fp, d0
 80069c6:	e67b      	b.n	80066c0 <_strtod_l+0x88>
 80069c8:	9b05      	ldr	r3, [sp, #20]
 80069ca:	9807      	ldr	r0, [sp, #28]
 80069cc:	1af3      	subs	r3, r6, r3
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	bf08      	it	eq
 80069d2:	462f      	moveq	r7, r5
 80069d4:	2d10      	cmp	r5, #16
 80069d6:	9306      	str	r3, [sp, #24]
 80069d8:	46a8      	mov	r8, r5
 80069da:	bfa8      	it	ge
 80069dc:	f04f 0810 	movge.w	r8, #16
 80069e0:	f7f9 fd98 	bl	8000514 <__aeabi_ui2d>
 80069e4:	2d09      	cmp	r5, #9
 80069e6:	4682      	mov	sl, r0
 80069e8:	468b      	mov	fp, r1
 80069ea:	dd13      	ble.n	8006a14 <_strtod_l+0x3dc>
 80069ec:	4b7b      	ldr	r3, [pc, #492]	; (8006bdc <_strtod_l+0x5a4>)
 80069ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069f6:	f7f9 fe07 	bl	8000608 <__aeabi_dmul>
 80069fa:	4682      	mov	sl, r0
 80069fc:	4648      	mov	r0, r9
 80069fe:	468b      	mov	fp, r1
 8006a00:	f7f9 fd88 	bl	8000514 <__aeabi_ui2d>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4650      	mov	r0, sl
 8006a0a:	4659      	mov	r1, fp
 8006a0c:	f7f9 fc46 	bl	800029c <__adddf3>
 8006a10:	4682      	mov	sl, r0
 8006a12:	468b      	mov	fp, r1
 8006a14:	2d0f      	cmp	r5, #15
 8006a16:	dc38      	bgt.n	8006a8a <_strtod_l+0x452>
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f43f ae50 	beq.w	80066c0 <_strtod_l+0x88>
 8006a20:	dd24      	ble.n	8006a6c <_strtod_l+0x434>
 8006a22:	2b16      	cmp	r3, #22
 8006a24:	dc0b      	bgt.n	8006a3e <_strtod_l+0x406>
 8006a26:	496d      	ldr	r1, [pc, #436]	; (8006bdc <_strtod_l+0x5a4>)
 8006a28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a30:	4652      	mov	r2, sl
 8006a32:	465b      	mov	r3, fp
 8006a34:	f7f9 fde8 	bl	8000608 <__aeabi_dmul>
 8006a38:	4682      	mov	sl, r0
 8006a3a:	468b      	mov	fp, r1
 8006a3c:	e640      	b.n	80066c0 <_strtod_l+0x88>
 8006a3e:	9a06      	ldr	r2, [sp, #24]
 8006a40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006a44:	4293      	cmp	r3, r2
 8006a46:	db20      	blt.n	8006a8a <_strtod_l+0x452>
 8006a48:	4c64      	ldr	r4, [pc, #400]	; (8006bdc <_strtod_l+0x5a4>)
 8006a4a:	f1c5 050f 	rsb	r5, r5, #15
 8006a4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a52:	4652      	mov	r2, sl
 8006a54:	465b      	mov	r3, fp
 8006a56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a5a:	f7f9 fdd5 	bl	8000608 <__aeabi_dmul>
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	1b5d      	subs	r5, r3, r5
 8006a62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a6a:	e7e3      	b.n	8006a34 <_strtod_l+0x3fc>
 8006a6c:	9b06      	ldr	r3, [sp, #24]
 8006a6e:	3316      	adds	r3, #22
 8006a70:	db0b      	blt.n	8006a8a <_strtod_l+0x452>
 8006a72:	9b05      	ldr	r3, [sp, #20]
 8006a74:	1b9e      	subs	r6, r3, r6
 8006a76:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <_strtod_l+0x5a4>)
 8006a78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a80:	4650      	mov	r0, sl
 8006a82:	4659      	mov	r1, fp
 8006a84:	f7f9 feea 	bl	800085c <__aeabi_ddiv>
 8006a88:	e7d6      	b.n	8006a38 <_strtod_l+0x400>
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	eba5 0808 	sub.w	r8, r5, r8
 8006a90:	4498      	add	r8, r3
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	dd74      	ble.n	8006b82 <_strtod_l+0x54a>
 8006a98:	f018 030f 	ands.w	r3, r8, #15
 8006a9c:	d00a      	beq.n	8006ab4 <_strtod_l+0x47c>
 8006a9e:	494f      	ldr	r1, [pc, #316]	; (8006bdc <_strtod_l+0x5a4>)
 8006aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	465b      	mov	r3, fp
 8006aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aac:	f7f9 fdac 	bl	8000608 <__aeabi_dmul>
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	468b      	mov	fp, r1
 8006ab4:	f038 080f 	bics.w	r8, r8, #15
 8006ab8:	d04f      	beq.n	8006b5a <_strtod_l+0x522>
 8006aba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006abe:	dd22      	ble.n	8006b06 <_strtod_l+0x4ce>
 8006ac0:	2500      	movs	r5, #0
 8006ac2:	462e      	mov	r6, r5
 8006ac4:	9507      	str	r5, [sp, #28]
 8006ac6:	9505      	str	r5, [sp, #20]
 8006ac8:	2322      	movs	r3, #34	; 0x22
 8006aca:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006be4 <_strtod_l+0x5ac>
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	f04f 0a00 	mov.w	sl, #0
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f43f adf2 	beq.w	80066c0 <_strtod_l+0x88>
 8006adc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f001 fe90 	bl	8008804 <_Bfree>
 8006ae4:	9905      	ldr	r1, [sp, #20]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f001 fe8c 	bl	8008804 <_Bfree>
 8006aec:	4631      	mov	r1, r6
 8006aee:	4620      	mov	r0, r4
 8006af0:	f001 fe88 	bl	8008804 <_Bfree>
 8006af4:	9907      	ldr	r1, [sp, #28]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f001 fe84 	bl	8008804 <_Bfree>
 8006afc:	4629      	mov	r1, r5
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 fe80 	bl	8008804 <_Bfree>
 8006b04:	e5dc      	b.n	80066c0 <_strtod_l+0x88>
 8006b06:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <_strtod_l+0x5a8>)
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006b10:	4650      	mov	r0, sl
 8006b12:	4659      	mov	r1, fp
 8006b14:	4699      	mov	r9, r3
 8006b16:	f1b8 0f01 	cmp.w	r8, #1
 8006b1a:	dc21      	bgt.n	8006b60 <_strtod_l+0x528>
 8006b1c:	b10b      	cbz	r3, 8006b22 <_strtod_l+0x4ea>
 8006b1e:	4682      	mov	sl, r0
 8006b20:	468b      	mov	fp, r1
 8006b22:	4b2f      	ldr	r3, [pc, #188]	; (8006be0 <_strtod_l+0x5a8>)
 8006b24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006b28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	465b      	mov	r3, fp
 8006b30:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006b34:	f7f9 fd68 	bl	8000608 <__aeabi_dmul>
 8006b38:	4b2a      	ldr	r3, [pc, #168]	; (8006be4 <_strtod_l+0x5ac>)
 8006b3a:	460a      	mov	r2, r1
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	492a      	ldr	r1, [pc, #168]	; (8006be8 <_strtod_l+0x5b0>)
 8006b40:	428b      	cmp	r3, r1
 8006b42:	4682      	mov	sl, r0
 8006b44:	d8bc      	bhi.n	8006ac0 <_strtod_l+0x488>
 8006b46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b4a:	428b      	cmp	r3, r1
 8006b4c:	bf86      	itte	hi
 8006b4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006bec <_strtod_l+0x5b4>
 8006b52:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9304      	str	r3, [sp, #16]
 8006b5e:	e084      	b.n	8006c6a <_strtod_l+0x632>
 8006b60:	f018 0f01 	tst.w	r8, #1
 8006b64:	d005      	beq.n	8006b72 <_strtod_l+0x53a>
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fd4c 	bl	8000608 <__aeabi_dmul>
 8006b70:	2301      	movs	r3, #1
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	3208      	adds	r2, #8
 8006b76:	f109 0901 	add.w	r9, r9, #1
 8006b7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b7e:	9204      	str	r2, [sp, #16]
 8006b80:	e7c9      	b.n	8006b16 <_strtod_l+0x4de>
 8006b82:	d0ea      	beq.n	8006b5a <_strtod_l+0x522>
 8006b84:	f1c8 0800 	rsb	r8, r8, #0
 8006b88:	f018 020f 	ands.w	r2, r8, #15
 8006b8c:	d00a      	beq.n	8006ba4 <_strtod_l+0x56c>
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <_strtod_l+0x5a4>)
 8006b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f7f9 fe5e 	bl	800085c <__aeabi_ddiv>
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	468b      	mov	fp, r1
 8006ba4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ba8:	d0d7      	beq.n	8006b5a <_strtod_l+0x522>
 8006baa:	f1b8 0f1f 	cmp.w	r8, #31
 8006bae:	dd1f      	ble.n	8006bf0 <_strtod_l+0x5b8>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	462e      	mov	r6, r5
 8006bb4:	9507      	str	r5, [sp, #28]
 8006bb6:	9505      	str	r5, [sp, #20]
 8006bb8:	2322      	movs	r3, #34	; 0x22
 8006bba:	f04f 0a00 	mov.w	sl, #0
 8006bbe:	f04f 0b00 	mov.w	fp, #0
 8006bc2:	6023      	str	r3, [r4, #0]
 8006bc4:	e786      	b.n	8006ad4 <_strtod_l+0x49c>
 8006bc6:	bf00      	nop
 8006bc8:	0800b285 	.word	0x0800b285
 8006bcc:	0800b2c8 	.word	0x0800b2c8
 8006bd0:	0800b27d 	.word	0x0800b27d
 8006bd4:	0800b40c 	.word	0x0800b40c
 8006bd8:	0800b6b8 	.word	0x0800b6b8
 8006bdc:	0800b598 	.word	0x0800b598
 8006be0:	0800b570 	.word	0x0800b570
 8006be4:	7ff00000 	.word	0x7ff00000
 8006be8:	7ca00000 	.word	0x7ca00000
 8006bec:	7fefffff 	.word	0x7fefffff
 8006bf0:	f018 0310 	ands.w	r3, r8, #16
 8006bf4:	bf18      	it	ne
 8006bf6:	236a      	movne	r3, #106	; 0x6a
 8006bf8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006fa8 <_strtod_l+0x970>
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	4650      	mov	r0, sl
 8006c00:	4659      	mov	r1, fp
 8006c02:	2300      	movs	r3, #0
 8006c04:	f018 0f01 	tst.w	r8, #1
 8006c08:	d004      	beq.n	8006c14 <_strtod_l+0x5dc>
 8006c0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006c0e:	f7f9 fcfb 	bl	8000608 <__aeabi_dmul>
 8006c12:	2301      	movs	r3, #1
 8006c14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006c18:	f109 0908 	add.w	r9, r9, #8
 8006c1c:	d1f2      	bne.n	8006c04 <_strtod_l+0x5cc>
 8006c1e:	b10b      	cbz	r3, 8006c24 <_strtod_l+0x5ec>
 8006c20:	4682      	mov	sl, r0
 8006c22:	468b      	mov	fp, r1
 8006c24:	9b04      	ldr	r3, [sp, #16]
 8006c26:	b1c3      	cbz	r3, 8006c5a <_strtod_l+0x622>
 8006c28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	4659      	mov	r1, fp
 8006c34:	dd11      	ble.n	8006c5a <_strtod_l+0x622>
 8006c36:	2b1f      	cmp	r3, #31
 8006c38:	f340 8124 	ble.w	8006e84 <_strtod_l+0x84c>
 8006c3c:	2b34      	cmp	r3, #52	; 0x34
 8006c3e:	bfde      	ittt	le
 8006c40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006c44:	f04f 33ff 	movle.w	r3, #4294967295
 8006c48:	fa03 f202 	lslle.w	r2, r3, r2
 8006c4c:	f04f 0a00 	mov.w	sl, #0
 8006c50:	bfcc      	ite	gt
 8006c52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c56:	ea02 0b01 	andle.w	fp, r2, r1
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4650      	mov	r0, sl
 8006c60:	4659      	mov	r1, fp
 8006c62:	f7f9 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d1a2      	bne.n	8006bb0 <_strtod_l+0x578>
 8006c6a:	9b07      	ldr	r3, [sp, #28]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	9908      	ldr	r1, [sp, #32]
 8006c70:	462b      	mov	r3, r5
 8006c72:	463a      	mov	r2, r7
 8006c74:	4620      	mov	r0, r4
 8006c76:	f001 fe2d 	bl	80088d4 <__s2b>
 8006c7a:	9007      	str	r0, [sp, #28]
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	f43f af1f 	beq.w	8006ac0 <_strtod_l+0x488>
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	1b9e      	subs	r6, r3, r6
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bfb4      	ite	lt
 8006c8c:	4633      	movlt	r3, r6
 8006c8e:	2300      	movge	r3, #0
 8006c90:	930c      	str	r3, [sp, #48]	; 0x30
 8006c92:	9b06      	ldr	r3, [sp, #24]
 8006c94:	2500      	movs	r5, #0
 8006c96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c9a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c9c:	462e      	mov	r6, r5
 8006c9e:	9b07      	ldr	r3, [sp, #28]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	6859      	ldr	r1, [r3, #4]
 8006ca4:	f001 fd6e 	bl	8008784 <_Balloc>
 8006ca8:	9005      	str	r0, [sp, #20]
 8006caa:	2800      	cmp	r0, #0
 8006cac:	f43f af0c 	beq.w	8006ac8 <_strtod_l+0x490>
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	3202      	adds	r2, #2
 8006cb6:	f103 010c 	add.w	r1, r3, #12
 8006cba:	0092      	lsls	r2, r2, #2
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	f001 fd53 	bl	8008768 <memcpy>
 8006cc2:	ec4b ab10 	vmov	d0, sl, fp
 8006cc6:	aa1a      	add	r2, sp, #104	; 0x68
 8006cc8:	a919      	add	r1, sp, #100	; 0x64
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f002 f948 	bl	8008f60 <__d2b>
 8006cd0:	ec4b ab18 	vmov	d8, sl, fp
 8006cd4:	9018      	str	r0, [sp, #96]	; 0x60
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f aef6 	beq.w	8006ac8 <_strtod_l+0x490>
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f001 fe92 	bl	8008a08 <__i2b>
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f43f aeee 	beq.w	8006ac8 <_strtod_l+0x490>
 8006cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cee:	9904      	ldr	r1, [sp, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfab      	itete	ge
 8006cf4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006cf6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006cf8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006cfa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006cfe:	bfac      	ite	ge
 8006d00:	eb03 0902 	addge.w	r9, r3, r2
 8006d04:	1ad7      	sublt	r7, r2, r3
 8006d06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d08:	eba3 0801 	sub.w	r8, r3, r1
 8006d0c:	4490      	add	r8, r2
 8006d0e:	4ba1      	ldr	r3, [pc, #644]	; (8006f94 <_strtod_l+0x95c>)
 8006d10:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d14:	4598      	cmp	r8, r3
 8006d16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d1a:	f280 80c7 	bge.w	8006eac <_strtod_l+0x874>
 8006d1e:	eba3 0308 	sub.w	r3, r3, r8
 8006d22:	2b1f      	cmp	r3, #31
 8006d24:	eba2 0203 	sub.w	r2, r2, r3
 8006d28:	f04f 0101 	mov.w	r1, #1
 8006d2c:	f300 80b1 	bgt.w	8006e92 <_strtod_l+0x85a>
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	930d      	str	r3, [sp, #52]	; 0x34
 8006d36:	2300      	movs	r3, #0
 8006d38:	9308      	str	r3, [sp, #32]
 8006d3a:	eb09 0802 	add.w	r8, r9, r2
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	45c1      	cmp	r9, r8
 8006d42:	4417      	add	r7, r2
 8006d44:	441f      	add	r7, r3
 8006d46:	464b      	mov	r3, r9
 8006d48:	bfa8      	it	ge
 8006d4a:	4643      	movge	r3, r8
 8006d4c:	42bb      	cmp	r3, r7
 8006d4e:	bfa8      	it	ge
 8006d50:	463b      	movge	r3, r7
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bfc2      	ittt	gt
 8006d56:	eba8 0803 	subgt.w	r8, r8, r3
 8006d5a:	1aff      	subgt	r7, r7, r3
 8006d5c:	eba9 0903 	subgt.w	r9, r9, r3
 8006d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	dd17      	ble.n	8006d96 <_strtod_l+0x75e>
 8006d66:	4631      	mov	r1, r6
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f001 ff0c 	bl	8008b88 <__pow5mult>
 8006d70:	4606      	mov	r6, r0
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f43f aea8 	beq.w	8006ac8 <_strtod_l+0x490>
 8006d78:	4601      	mov	r1, r0
 8006d7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f001 fe59 	bl	8008a34 <__multiply>
 8006d82:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f43f ae9f 	beq.w	8006ac8 <_strtod_l+0x490>
 8006d8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f001 fd39 	bl	8008804 <_Bfree>
 8006d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d94:	9318      	str	r3, [sp, #96]	; 0x60
 8006d96:	f1b8 0f00 	cmp.w	r8, #0
 8006d9a:	f300 808c 	bgt.w	8006eb6 <_strtod_l+0x87e>
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dd08      	ble.n	8006db6 <_strtod_l+0x77e>
 8006da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006da6:	9905      	ldr	r1, [sp, #20]
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 feed 	bl	8008b88 <__pow5mult>
 8006dae:	9005      	str	r0, [sp, #20]
 8006db0:	2800      	cmp	r0, #0
 8006db2:	f43f ae89 	beq.w	8006ac8 <_strtod_l+0x490>
 8006db6:	2f00      	cmp	r7, #0
 8006db8:	dd08      	ble.n	8006dcc <_strtod_l+0x794>
 8006dba:	9905      	ldr	r1, [sp, #20]
 8006dbc:	463a      	mov	r2, r7
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f001 ff3c 	bl	8008c3c <__lshift>
 8006dc4:	9005      	str	r0, [sp, #20]
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f43f ae7e 	beq.w	8006ac8 <_strtod_l+0x490>
 8006dcc:	f1b9 0f00 	cmp.w	r9, #0
 8006dd0:	dd08      	ble.n	8006de4 <_strtod_l+0x7ac>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	464a      	mov	r2, r9
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f001 ff30 	bl	8008c3c <__lshift>
 8006ddc:	4606      	mov	r6, r0
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f43f ae72 	beq.w	8006ac8 <_strtod_l+0x490>
 8006de4:	9a05      	ldr	r2, [sp, #20]
 8006de6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006de8:	4620      	mov	r0, r4
 8006dea:	f001 ffb3 	bl	8008d54 <__mdiff>
 8006dee:	4605      	mov	r5, r0
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f43f ae69 	beq.w	8006ac8 <_strtod_l+0x490>
 8006df6:	68c3      	ldr	r3, [r0, #12]
 8006df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60c3      	str	r3, [r0, #12]
 8006dfe:	4631      	mov	r1, r6
 8006e00:	f001 ff8c 	bl	8008d1c <__mcmp>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	da60      	bge.n	8006eca <_strtod_l+0x892>
 8006e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e0e:	f040 8082 	bne.w	8006f16 <_strtod_l+0x8de>
 8006e12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d17d      	bne.n	8006f16 <_strtod_l+0x8de>
 8006e1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e1e:	0d1b      	lsrs	r3, r3, #20
 8006e20:	051b      	lsls	r3, r3, #20
 8006e22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006e26:	d976      	bls.n	8006f16 <_strtod_l+0x8de>
 8006e28:	696b      	ldr	r3, [r5, #20]
 8006e2a:	b913      	cbnz	r3, 8006e32 <_strtod_l+0x7fa>
 8006e2c:	692b      	ldr	r3, [r5, #16]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	dd71      	ble.n	8006f16 <_strtod_l+0x8de>
 8006e32:	4629      	mov	r1, r5
 8006e34:	2201      	movs	r2, #1
 8006e36:	4620      	mov	r0, r4
 8006e38:	f001 ff00 	bl	8008c3c <__lshift>
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4605      	mov	r5, r0
 8006e40:	f001 ff6c 	bl	8008d1c <__mcmp>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	dd66      	ble.n	8006f16 <_strtod_l+0x8de>
 8006e48:	9904      	ldr	r1, [sp, #16]
 8006e4a:	4a53      	ldr	r2, [pc, #332]	; (8006f98 <_strtod_l+0x960>)
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	f000 8081 	beq.w	8006f56 <_strtod_l+0x91e>
 8006e54:	ea02 010b 	and.w	r1, r2, fp
 8006e58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e5c:	dc7b      	bgt.n	8006f56 <_strtod_l+0x91e>
 8006e5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e62:	f77f aea9 	ble.w	8006bb8 <_strtod_l+0x580>
 8006e66:	4b4d      	ldr	r3, [pc, #308]	; (8006f9c <_strtod_l+0x964>)
 8006e68:	4650      	mov	r0, sl
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f7f9 fbcb 	bl	8000608 <__aeabi_dmul>
 8006e72:	460b      	mov	r3, r1
 8006e74:	4303      	orrs	r3, r0
 8006e76:	bf08      	it	eq
 8006e78:	2322      	moveq	r3, #34	; 0x22
 8006e7a:	4682      	mov	sl, r0
 8006e7c:	468b      	mov	fp, r1
 8006e7e:	bf08      	it	eq
 8006e80:	6023      	streq	r3, [r4, #0]
 8006e82:	e62b      	b.n	8006adc <_strtod_l+0x4a4>
 8006e84:	f04f 32ff 	mov.w	r2, #4294967295
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	ea03 0a0a 	and.w	sl, r3, sl
 8006e90:	e6e3      	b.n	8006c5a <_strtod_l+0x622>
 8006e92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006e96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006e9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006e9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ea2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ea6:	9308      	str	r3, [sp, #32]
 8006ea8:	910d      	str	r1, [sp, #52]	; 0x34
 8006eaa:	e746      	b.n	8006d3a <_strtod_l+0x702>
 8006eac:	2300      	movs	r3, #0
 8006eae:	9308      	str	r3, [sp, #32]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb4:	e741      	b.n	8006d3a <_strtod_l+0x702>
 8006eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f001 febe 	bl	8008c3c <__lshift>
 8006ec0:	9018      	str	r0, [sp, #96]	; 0x60
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f47f af6b 	bne.w	8006d9e <_strtod_l+0x766>
 8006ec8:	e5fe      	b.n	8006ac8 <_strtod_l+0x490>
 8006eca:	465f      	mov	r7, fp
 8006ecc:	d16e      	bne.n	8006fac <_strtod_l+0x974>
 8006ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ed0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ed4:	b342      	cbz	r2, 8006f28 <_strtod_l+0x8f0>
 8006ed6:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <_strtod_l+0x968>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d128      	bne.n	8006f2e <_strtod_l+0x8f6>
 8006edc:	9b04      	ldr	r3, [sp, #16]
 8006ede:	4651      	mov	r1, sl
 8006ee0:	b1eb      	cbz	r3, 8006f1e <_strtod_l+0x8e6>
 8006ee2:	4b2d      	ldr	r3, [pc, #180]	; (8006f98 <_strtod_l+0x960>)
 8006ee4:	403b      	ands	r3, r7
 8006ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	d819      	bhi.n	8006f24 <_strtod_l+0x8ec>
 8006ef0:	0d1b      	lsrs	r3, r3, #20
 8006ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d117      	bne.n	8006f2e <_strtod_l+0x8f6>
 8006efe:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <_strtod_l+0x96c>)
 8006f00:	429f      	cmp	r7, r3
 8006f02:	d102      	bne.n	8006f0a <_strtod_l+0x8d2>
 8006f04:	3101      	adds	r1, #1
 8006f06:	f43f addf 	beq.w	8006ac8 <_strtod_l+0x490>
 8006f0a:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <_strtod_l+0x960>)
 8006f0c:	403b      	ands	r3, r7
 8006f0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006f12:	f04f 0a00 	mov.w	sl, #0
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1a4      	bne.n	8006e66 <_strtod_l+0x82e>
 8006f1c:	e5de      	b.n	8006adc <_strtod_l+0x4a4>
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	e7ea      	b.n	8006efa <_strtod_l+0x8c2>
 8006f24:	4613      	mov	r3, r2
 8006f26:	e7e8      	b.n	8006efa <_strtod_l+0x8c2>
 8006f28:	ea53 030a 	orrs.w	r3, r3, sl
 8006f2c:	d08c      	beq.n	8006e48 <_strtod_l+0x810>
 8006f2e:	9b08      	ldr	r3, [sp, #32]
 8006f30:	b1db      	cbz	r3, 8006f6a <_strtod_l+0x932>
 8006f32:	423b      	tst	r3, r7
 8006f34:	d0ef      	beq.n	8006f16 <_strtod_l+0x8de>
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	9a04      	ldr	r2, [sp, #16]
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	b1c3      	cbz	r3, 8006f72 <_strtod_l+0x93a>
 8006f40:	f7ff fb5e 	bl	8006600 <sulp>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	ec51 0b18 	vmov	r0, r1, d8
 8006f4c:	f7f9 f9a6 	bl	800029c <__adddf3>
 8006f50:	4682      	mov	sl, r0
 8006f52:	468b      	mov	fp, r1
 8006f54:	e7df      	b.n	8006f16 <_strtod_l+0x8de>
 8006f56:	4013      	ands	r3, r2
 8006f58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f64:	f04f 3aff 	mov.w	sl, #4294967295
 8006f68:	e7d5      	b.n	8006f16 <_strtod_l+0x8de>
 8006f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f6c:	ea13 0f0a 	tst.w	r3, sl
 8006f70:	e7e0      	b.n	8006f34 <_strtod_l+0x8fc>
 8006f72:	f7ff fb45 	bl	8006600 <sulp>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	ec51 0b18 	vmov	r0, r1, d8
 8006f7e:	f7f9 f98b 	bl	8000298 <__aeabi_dsub>
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	4682      	mov	sl, r0
 8006f88:	468b      	mov	fp, r1
 8006f8a:	f7f9 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0c1      	beq.n	8006f16 <_strtod_l+0x8de>
 8006f92:	e611      	b.n	8006bb8 <_strtod_l+0x580>
 8006f94:	fffffc02 	.word	0xfffffc02
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	39500000 	.word	0x39500000
 8006fa0:	000fffff 	.word	0x000fffff
 8006fa4:	7fefffff 	.word	0x7fefffff
 8006fa8:	0800b2e0 	.word	0x0800b2e0
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f002 f832 	bl	8009018 <__ratio>
 8006fb4:	ec59 8b10 	vmov	r8, r9, d0
 8006fb8:	ee10 0a10 	vmov	r0, s0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 fd9c 	bl	8000b00 <__aeabi_dcmple>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d07a      	beq.n	80070c2 <_strtod_l+0xa8a>
 8006fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d04a      	beq.n	8007068 <_strtod_l+0xa30>
 8006fd2:	4b95      	ldr	r3, [pc, #596]	; (8007228 <_strtod_l+0xbf0>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007228 <_strtod_l+0xbf0>
 8006fde:	f04f 0800 	mov.w	r8, #0
 8006fe2:	4b92      	ldr	r3, [pc, #584]	; (800722c <_strtod_l+0xbf4>)
 8006fe4:	403b      	ands	r3, r7
 8006fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8006fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fea:	4b91      	ldr	r3, [pc, #580]	; (8007230 <_strtod_l+0xbf8>)
 8006fec:	429a      	cmp	r2, r3
 8006fee:	f040 80b0 	bne.w	8007152 <_strtod_l+0xb1a>
 8006ff2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ff6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006ffa:	ec4b ab10 	vmov	d0, sl, fp
 8006ffe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007002:	f001 ff31 	bl	8008e68 <__ulp>
 8007006:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800700a:	ec53 2b10 	vmov	r2, r3, d0
 800700e:	f7f9 fafb 	bl	8000608 <__aeabi_dmul>
 8007012:	4652      	mov	r2, sl
 8007014:	465b      	mov	r3, fp
 8007016:	f7f9 f941 	bl	800029c <__adddf3>
 800701a:	460b      	mov	r3, r1
 800701c:	4983      	ldr	r1, [pc, #524]	; (800722c <_strtod_l+0xbf4>)
 800701e:	4a85      	ldr	r2, [pc, #532]	; (8007234 <_strtod_l+0xbfc>)
 8007020:	4019      	ands	r1, r3
 8007022:	4291      	cmp	r1, r2
 8007024:	4682      	mov	sl, r0
 8007026:	d960      	bls.n	80070ea <_strtod_l+0xab2>
 8007028:	ee18 3a90 	vmov	r3, s17
 800702c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007030:	4293      	cmp	r3, r2
 8007032:	d104      	bne.n	800703e <_strtod_l+0xa06>
 8007034:	ee18 3a10 	vmov	r3, s16
 8007038:	3301      	adds	r3, #1
 800703a:	f43f ad45 	beq.w	8006ac8 <_strtod_l+0x490>
 800703e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007240 <_strtod_l+0xc08>
 8007042:	f04f 3aff 	mov.w	sl, #4294967295
 8007046:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fbdb 	bl	8008804 <_Bfree>
 800704e:	9905      	ldr	r1, [sp, #20]
 8007050:	4620      	mov	r0, r4
 8007052:	f001 fbd7 	bl	8008804 <_Bfree>
 8007056:	4631      	mov	r1, r6
 8007058:	4620      	mov	r0, r4
 800705a:	f001 fbd3 	bl	8008804 <_Bfree>
 800705e:	4629      	mov	r1, r5
 8007060:	4620      	mov	r0, r4
 8007062:	f001 fbcf 	bl	8008804 <_Bfree>
 8007066:	e61a      	b.n	8006c9e <_strtod_l+0x666>
 8007068:	f1ba 0f00 	cmp.w	sl, #0
 800706c:	d11b      	bne.n	80070a6 <_strtod_l+0xa6e>
 800706e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007072:	b9f3      	cbnz	r3, 80070b2 <_strtod_l+0xa7a>
 8007074:	4b6c      	ldr	r3, [pc, #432]	; (8007228 <_strtod_l+0xbf0>)
 8007076:	2200      	movs	r2, #0
 8007078:	4640      	mov	r0, r8
 800707a:	4649      	mov	r1, r9
 800707c:	f7f9 fd36 	bl	8000aec <__aeabi_dcmplt>
 8007080:	b9d0      	cbnz	r0, 80070b8 <_strtod_l+0xa80>
 8007082:	4640      	mov	r0, r8
 8007084:	4649      	mov	r1, r9
 8007086:	4b6c      	ldr	r3, [pc, #432]	; (8007238 <_strtod_l+0xc00>)
 8007088:	2200      	movs	r2, #0
 800708a:	f7f9 fabd 	bl	8000608 <__aeabi_dmul>
 800708e:	4680      	mov	r8, r0
 8007090:	4689      	mov	r9, r1
 8007092:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007096:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800709a:	9315      	str	r3, [sp, #84]	; 0x54
 800709c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80070a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070a4:	e79d      	b.n	8006fe2 <_strtod_l+0x9aa>
 80070a6:	f1ba 0f01 	cmp.w	sl, #1
 80070aa:	d102      	bne.n	80070b2 <_strtod_l+0xa7a>
 80070ac:	2f00      	cmp	r7, #0
 80070ae:	f43f ad83 	beq.w	8006bb8 <_strtod_l+0x580>
 80070b2:	4b62      	ldr	r3, [pc, #392]	; (800723c <_strtod_l+0xc04>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	e78e      	b.n	8006fd6 <_strtod_l+0x99e>
 80070b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007238 <_strtod_l+0xc00>
 80070bc:	f04f 0800 	mov.w	r8, #0
 80070c0:	e7e7      	b.n	8007092 <_strtod_l+0xa5a>
 80070c2:	4b5d      	ldr	r3, [pc, #372]	; (8007238 <_strtod_l+0xc00>)
 80070c4:	4640      	mov	r0, r8
 80070c6:	4649      	mov	r1, r9
 80070c8:	2200      	movs	r2, #0
 80070ca:	f7f9 fa9d 	bl	8000608 <__aeabi_dmul>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d0:	4680      	mov	r8, r0
 80070d2:	4689      	mov	r9, r1
 80070d4:	b933      	cbnz	r3, 80070e4 <_strtod_l+0xaac>
 80070d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070da:	900e      	str	r0, [sp, #56]	; 0x38
 80070dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80070e2:	e7dd      	b.n	80070a0 <_strtod_l+0xa68>
 80070e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80070e8:	e7f9      	b.n	80070de <_strtod_l+0xaa6>
 80070ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1a8      	bne.n	8007046 <_strtod_l+0xa0e>
 80070f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fa:	0d1b      	lsrs	r3, r3, #20
 80070fc:	051b      	lsls	r3, r3, #20
 80070fe:	429a      	cmp	r2, r3
 8007100:	d1a1      	bne.n	8007046 <_strtod_l+0xa0e>
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 fddf 	bl	8000cc8 <__aeabi_d2lz>
 800710a:	f7f9 fa4f 	bl	80005ac <__aeabi_l2d>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4640      	mov	r0, r8
 8007114:	4649      	mov	r1, r9
 8007116:	f7f9 f8bf 	bl	8000298 <__aeabi_dsub>
 800711a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800711c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007120:	ea43 030a 	orr.w	r3, r3, sl
 8007124:	4313      	orrs	r3, r2
 8007126:	4680      	mov	r8, r0
 8007128:	4689      	mov	r9, r1
 800712a:	d055      	beq.n	80071d8 <_strtod_l+0xba0>
 800712c:	a336      	add	r3, pc, #216	; (adr r3, 8007208 <_strtod_l+0xbd0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	f47f acd0 	bne.w	8006adc <_strtod_l+0x4a4>
 800713c:	a334      	add	r3, pc, #208	; (adr r3, 8007210 <_strtod_l+0xbd8>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	4640      	mov	r0, r8
 8007144:	4649      	mov	r1, r9
 8007146:	f7f9 fcef 	bl	8000b28 <__aeabi_dcmpgt>
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f af7b 	beq.w	8007046 <_strtod_l+0xa0e>
 8007150:	e4c4      	b.n	8006adc <_strtod_l+0x4a4>
 8007152:	9b04      	ldr	r3, [sp, #16]
 8007154:	b333      	cbz	r3, 80071a4 <_strtod_l+0xb6c>
 8007156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007158:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800715c:	d822      	bhi.n	80071a4 <_strtod_l+0xb6c>
 800715e:	a32e      	add	r3, pc, #184	; (adr r3, 8007218 <_strtod_l+0xbe0>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	4640      	mov	r0, r8
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 fcca 	bl	8000b00 <__aeabi_dcmple>
 800716c:	b1a0      	cbz	r0, 8007198 <_strtod_l+0xb60>
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	f7f9 fd21 	bl	8000bb8 <__aeabi_d2uiz>
 8007176:	2801      	cmp	r0, #1
 8007178:	bf38      	it	cc
 800717a:	2001      	movcc	r0, #1
 800717c:	f7f9 f9ca 	bl	8000514 <__aeabi_ui2d>
 8007180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007182:	4680      	mov	r8, r0
 8007184:	4689      	mov	r9, r1
 8007186:	bb23      	cbnz	r3, 80071d2 <_strtod_l+0xb9a>
 8007188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800718c:	9010      	str	r0, [sp, #64]	; 0x40
 800718e:	9311      	str	r3, [sp, #68]	; 0x44
 8007190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007194:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800719c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	9309      	str	r3, [sp, #36]	; 0x24
 80071a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071a8:	eeb0 0a48 	vmov.f32	s0, s16
 80071ac:	eef0 0a68 	vmov.f32	s1, s17
 80071b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80071b4:	f001 fe58 	bl	8008e68 <__ulp>
 80071b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80071bc:	ec53 2b10 	vmov	r2, r3, d0
 80071c0:	f7f9 fa22 	bl	8000608 <__aeabi_dmul>
 80071c4:	ec53 2b18 	vmov	r2, r3, d8
 80071c8:	f7f9 f868 	bl	800029c <__adddf3>
 80071cc:	4682      	mov	sl, r0
 80071ce:	468b      	mov	fp, r1
 80071d0:	e78d      	b.n	80070ee <_strtod_l+0xab6>
 80071d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80071d6:	e7db      	b.n	8007190 <_strtod_l+0xb58>
 80071d8:	a311      	add	r3, pc, #68	; (adr r3, 8007220 <_strtod_l+0xbe8>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 fc85 	bl	8000aec <__aeabi_dcmplt>
 80071e2:	e7b2      	b.n	800714a <_strtod_l+0xb12>
 80071e4:	2300      	movs	r3, #0
 80071e6:	930a      	str	r3, [sp, #40]	; 0x28
 80071e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	f7ff ba6b 	b.w	80066c8 <_strtod_l+0x90>
 80071f2:	2a65      	cmp	r2, #101	; 0x65
 80071f4:	f43f ab5f 	beq.w	80068b6 <_strtod_l+0x27e>
 80071f8:	2a45      	cmp	r2, #69	; 0x45
 80071fa:	f43f ab5c 	beq.w	80068b6 <_strtod_l+0x27e>
 80071fe:	2301      	movs	r3, #1
 8007200:	f7ff bb94 	b.w	800692c <_strtod_l+0x2f4>
 8007204:	f3af 8000 	nop.w
 8007208:	94a03595 	.word	0x94a03595
 800720c:	3fdfffff 	.word	0x3fdfffff
 8007210:	35afe535 	.word	0x35afe535
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	ffc00000 	.word	0xffc00000
 800721c:	41dfffff 	.word	0x41dfffff
 8007220:	94a03595 	.word	0x94a03595
 8007224:	3fcfffff 	.word	0x3fcfffff
 8007228:	3ff00000 	.word	0x3ff00000
 800722c:	7ff00000 	.word	0x7ff00000
 8007230:	7fe00000 	.word	0x7fe00000
 8007234:	7c9fffff 	.word	0x7c9fffff
 8007238:	3fe00000 	.word	0x3fe00000
 800723c:	bff00000 	.word	0xbff00000
 8007240:	7fefffff 	.word	0x7fefffff

08007244 <_strtod_r>:
 8007244:	4b01      	ldr	r3, [pc, #4]	; (800724c <_strtod_r+0x8>)
 8007246:	f7ff b9f7 	b.w	8006638 <_strtod_l>
 800724a:	bf00      	nop
 800724c:	2000018c 	.word	0x2000018c

08007250 <_strtol_l.constprop.0>:
 8007250:	2b01      	cmp	r3, #1
 8007252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007256:	d001      	beq.n	800725c <_strtol_l.constprop.0+0xc>
 8007258:	2b24      	cmp	r3, #36	; 0x24
 800725a:	d906      	bls.n	800726a <_strtol_l.constprop.0+0x1a>
 800725c:	f7fe fafe 	bl	800585c <__errno>
 8007260:	2316      	movs	r3, #22
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007350 <_strtol_l.constprop.0+0x100>
 800726e:	460d      	mov	r5, r1
 8007270:	462e      	mov	r6, r5
 8007272:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007276:	f814 700c 	ldrb.w	r7, [r4, ip]
 800727a:	f017 0708 	ands.w	r7, r7, #8
 800727e:	d1f7      	bne.n	8007270 <_strtol_l.constprop.0+0x20>
 8007280:	2c2d      	cmp	r4, #45	; 0x2d
 8007282:	d132      	bne.n	80072ea <_strtol_l.constprop.0+0x9a>
 8007284:	782c      	ldrb	r4, [r5, #0]
 8007286:	2701      	movs	r7, #1
 8007288:	1cb5      	adds	r5, r6, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d05b      	beq.n	8007346 <_strtol_l.constprop.0+0xf6>
 800728e:	2b10      	cmp	r3, #16
 8007290:	d109      	bne.n	80072a6 <_strtol_l.constprop.0+0x56>
 8007292:	2c30      	cmp	r4, #48	; 0x30
 8007294:	d107      	bne.n	80072a6 <_strtol_l.constprop.0+0x56>
 8007296:	782c      	ldrb	r4, [r5, #0]
 8007298:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800729c:	2c58      	cmp	r4, #88	; 0x58
 800729e:	d14d      	bne.n	800733c <_strtol_l.constprop.0+0xec>
 80072a0:	786c      	ldrb	r4, [r5, #1]
 80072a2:	2310      	movs	r3, #16
 80072a4:	3502      	adds	r5, #2
 80072a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80072aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80072ae:	f04f 0c00 	mov.w	ip, #0
 80072b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80072b6:	4666      	mov	r6, ip
 80072b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80072bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80072c0:	f1be 0f09 	cmp.w	lr, #9
 80072c4:	d816      	bhi.n	80072f4 <_strtol_l.constprop.0+0xa4>
 80072c6:	4674      	mov	r4, lr
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	dd24      	ble.n	8007316 <_strtol_l.constprop.0+0xc6>
 80072cc:	f1bc 0f00 	cmp.w	ip, #0
 80072d0:	db1e      	blt.n	8007310 <_strtol_l.constprop.0+0xc0>
 80072d2:	45b1      	cmp	r9, r6
 80072d4:	d31c      	bcc.n	8007310 <_strtol_l.constprop.0+0xc0>
 80072d6:	d101      	bne.n	80072dc <_strtol_l.constprop.0+0x8c>
 80072d8:	45a2      	cmp	sl, r4
 80072da:	db19      	blt.n	8007310 <_strtol_l.constprop.0+0xc0>
 80072dc:	fb06 4603 	mla	r6, r6, r3, r4
 80072e0:	f04f 0c01 	mov.w	ip, #1
 80072e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072e8:	e7e8      	b.n	80072bc <_strtol_l.constprop.0+0x6c>
 80072ea:	2c2b      	cmp	r4, #43	; 0x2b
 80072ec:	bf04      	itt	eq
 80072ee:	782c      	ldrbeq	r4, [r5, #0]
 80072f0:	1cb5      	addeq	r5, r6, #2
 80072f2:	e7ca      	b.n	800728a <_strtol_l.constprop.0+0x3a>
 80072f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072f8:	f1be 0f19 	cmp.w	lr, #25
 80072fc:	d801      	bhi.n	8007302 <_strtol_l.constprop.0+0xb2>
 80072fe:	3c37      	subs	r4, #55	; 0x37
 8007300:	e7e2      	b.n	80072c8 <_strtol_l.constprop.0+0x78>
 8007302:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007306:	f1be 0f19 	cmp.w	lr, #25
 800730a:	d804      	bhi.n	8007316 <_strtol_l.constprop.0+0xc6>
 800730c:	3c57      	subs	r4, #87	; 0x57
 800730e:	e7db      	b.n	80072c8 <_strtol_l.constprop.0+0x78>
 8007310:	f04f 3cff 	mov.w	ip, #4294967295
 8007314:	e7e6      	b.n	80072e4 <_strtol_l.constprop.0+0x94>
 8007316:	f1bc 0f00 	cmp.w	ip, #0
 800731a:	da05      	bge.n	8007328 <_strtol_l.constprop.0+0xd8>
 800731c:	2322      	movs	r3, #34	; 0x22
 800731e:	6003      	str	r3, [r0, #0]
 8007320:	4646      	mov	r6, r8
 8007322:	b942      	cbnz	r2, 8007336 <_strtol_l.constprop.0+0xe6>
 8007324:	4630      	mov	r0, r6
 8007326:	e79e      	b.n	8007266 <_strtol_l.constprop.0+0x16>
 8007328:	b107      	cbz	r7, 800732c <_strtol_l.constprop.0+0xdc>
 800732a:	4276      	negs	r6, r6
 800732c:	2a00      	cmp	r2, #0
 800732e:	d0f9      	beq.n	8007324 <_strtol_l.constprop.0+0xd4>
 8007330:	f1bc 0f00 	cmp.w	ip, #0
 8007334:	d000      	beq.n	8007338 <_strtol_l.constprop.0+0xe8>
 8007336:	1e69      	subs	r1, r5, #1
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	e7f3      	b.n	8007324 <_strtol_l.constprop.0+0xd4>
 800733c:	2430      	movs	r4, #48	; 0x30
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1b1      	bne.n	80072a6 <_strtol_l.constprop.0+0x56>
 8007342:	2308      	movs	r3, #8
 8007344:	e7af      	b.n	80072a6 <_strtol_l.constprop.0+0x56>
 8007346:	2c30      	cmp	r4, #48	; 0x30
 8007348:	d0a5      	beq.n	8007296 <_strtol_l.constprop.0+0x46>
 800734a:	230a      	movs	r3, #10
 800734c:	e7ab      	b.n	80072a6 <_strtol_l.constprop.0+0x56>
 800734e:	bf00      	nop
 8007350:	0800b309 	.word	0x0800b309

08007354 <_strtol_r>:
 8007354:	f7ff bf7c 	b.w	8007250 <_strtol_l.constprop.0>

08007358 <quorem>:
 8007358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	6903      	ldr	r3, [r0, #16]
 800735e:	690c      	ldr	r4, [r1, #16]
 8007360:	42a3      	cmp	r3, r4
 8007362:	4607      	mov	r7, r0
 8007364:	f2c0 8081 	blt.w	800746a <quorem+0x112>
 8007368:	3c01      	subs	r4, #1
 800736a:	f101 0814 	add.w	r8, r1, #20
 800736e:	f100 0514 	add.w	r5, r0, #20
 8007372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800737c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007380:	3301      	adds	r3, #1
 8007382:	429a      	cmp	r2, r3
 8007384:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007388:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800738c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007390:	d331      	bcc.n	80073f6 <quorem+0x9e>
 8007392:	f04f 0e00 	mov.w	lr, #0
 8007396:	4640      	mov	r0, r8
 8007398:	46ac      	mov	ip, r5
 800739a:	46f2      	mov	sl, lr
 800739c:	f850 2b04 	ldr.w	r2, [r0], #4
 80073a0:	b293      	uxth	r3, r2
 80073a2:	fb06 e303 	mla	r3, r6, r3, lr
 80073a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	ebaa 0303 	sub.w	r3, sl, r3
 80073b0:	f8dc a000 	ldr.w	sl, [ip]
 80073b4:	0c12      	lsrs	r2, r2, #16
 80073b6:	fa13 f38a 	uxtah	r3, r3, sl
 80073ba:	fb06 e202 	mla	r2, r6, r2, lr
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	9b00      	ldr	r3, [sp, #0]
 80073c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073c6:	b292      	uxth	r2, r2
 80073c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80073d4:	4581      	cmp	r9, r0
 80073d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073da:	f84c 3b04 	str.w	r3, [ip], #4
 80073de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073e2:	d2db      	bcs.n	800739c <quorem+0x44>
 80073e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80073e8:	b92b      	cbnz	r3, 80073f6 <quorem+0x9e>
 80073ea:	9b01      	ldr	r3, [sp, #4]
 80073ec:	3b04      	subs	r3, #4
 80073ee:	429d      	cmp	r5, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	d32e      	bcc.n	8007452 <quorem+0xfa>
 80073f4:	613c      	str	r4, [r7, #16]
 80073f6:	4638      	mov	r0, r7
 80073f8:	f001 fc90 	bl	8008d1c <__mcmp>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	db24      	blt.n	800744a <quorem+0xf2>
 8007400:	3601      	adds	r6, #1
 8007402:	4628      	mov	r0, r5
 8007404:	f04f 0c00 	mov.w	ip, #0
 8007408:	f858 2b04 	ldr.w	r2, [r8], #4
 800740c:	f8d0 e000 	ldr.w	lr, [r0]
 8007410:	b293      	uxth	r3, r2
 8007412:	ebac 0303 	sub.w	r3, ip, r3
 8007416:	0c12      	lsrs	r2, r2, #16
 8007418:	fa13 f38e 	uxtah	r3, r3, lr
 800741c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007420:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007424:	b29b      	uxth	r3, r3
 8007426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800742a:	45c1      	cmp	r9, r8
 800742c:	f840 3b04 	str.w	r3, [r0], #4
 8007430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007434:	d2e8      	bcs.n	8007408 <quorem+0xb0>
 8007436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800743a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800743e:	b922      	cbnz	r2, 800744a <quorem+0xf2>
 8007440:	3b04      	subs	r3, #4
 8007442:	429d      	cmp	r5, r3
 8007444:	461a      	mov	r2, r3
 8007446:	d30a      	bcc.n	800745e <quorem+0x106>
 8007448:	613c      	str	r4, [r7, #16]
 800744a:	4630      	mov	r0, r6
 800744c:	b003      	add	sp, #12
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	6812      	ldr	r2, [r2, #0]
 8007454:	3b04      	subs	r3, #4
 8007456:	2a00      	cmp	r2, #0
 8007458:	d1cc      	bne.n	80073f4 <quorem+0x9c>
 800745a:	3c01      	subs	r4, #1
 800745c:	e7c7      	b.n	80073ee <quorem+0x96>
 800745e:	6812      	ldr	r2, [r2, #0]
 8007460:	3b04      	subs	r3, #4
 8007462:	2a00      	cmp	r2, #0
 8007464:	d1f0      	bne.n	8007448 <quorem+0xf0>
 8007466:	3c01      	subs	r4, #1
 8007468:	e7eb      	b.n	8007442 <quorem+0xea>
 800746a:	2000      	movs	r0, #0
 800746c:	e7ee      	b.n	800744c <quorem+0xf4>
	...

08007470 <_dtoa_r>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	ed2d 8b04 	vpush	{d8-d9}
 8007478:	ec57 6b10 	vmov	r6, r7, d0
 800747c:	b093      	sub	sp, #76	; 0x4c
 800747e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007484:	9106      	str	r1, [sp, #24]
 8007486:	ee10 aa10 	vmov	sl, s0
 800748a:	4604      	mov	r4, r0
 800748c:	9209      	str	r2, [sp, #36]	; 0x24
 800748e:	930c      	str	r3, [sp, #48]	; 0x30
 8007490:	46bb      	mov	fp, r7
 8007492:	b975      	cbnz	r5, 80074b2 <_dtoa_r+0x42>
 8007494:	2010      	movs	r0, #16
 8007496:	f001 f94d 	bl	8008734 <malloc>
 800749a:	4602      	mov	r2, r0
 800749c:	6260      	str	r0, [r4, #36]	; 0x24
 800749e:	b920      	cbnz	r0, 80074aa <_dtoa_r+0x3a>
 80074a0:	4ba7      	ldr	r3, [pc, #668]	; (8007740 <_dtoa_r+0x2d0>)
 80074a2:	21ea      	movs	r1, #234	; 0xea
 80074a4:	48a7      	ldr	r0, [pc, #668]	; (8007744 <_dtoa_r+0x2d4>)
 80074a6:	f002 f8bd 	bl	8009624 <__assert_func>
 80074aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074ae:	6005      	str	r5, [r0, #0]
 80074b0:	60c5      	str	r5, [r0, #12]
 80074b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b4:	6819      	ldr	r1, [r3, #0]
 80074b6:	b151      	cbz	r1, 80074ce <_dtoa_r+0x5e>
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	604a      	str	r2, [r1, #4]
 80074bc:	2301      	movs	r3, #1
 80074be:	4093      	lsls	r3, r2
 80074c0:	608b      	str	r3, [r1, #8]
 80074c2:	4620      	mov	r0, r4
 80074c4:	f001 f99e 	bl	8008804 <_Bfree>
 80074c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	1e3b      	subs	r3, r7, #0
 80074d0:	bfaa      	itet	ge
 80074d2:	2300      	movge	r3, #0
 80074d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80074d8:	f8c8 3000 	strge.w	r3, [r8]
 80074dc:	4b9a      	ldr	r3, [pc, #616]	; (8007748 <_dtoa_r+0x2d8>)
 80074de:	bfbc      	itt	lt
 80074e0:	2201      	movlt	r2, #1
 80074e2:	f8c8 2000 	strlt.w	r2, [r8]
 80074e6:	ea33 030b 	bics.w	r3, r3, fp
 80074ea:	d11b      	bne.n	8007524 <_dtoa_r+0xb4>
 80074ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074f8:	4333      	orrs	r3, r6
 80074fa:	f000 8592 	beq.w	8008022 <_dtoa_r+0xbb2>
 80074fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007500:	b963      	cbnz	r3, 800751c <_dtoa_r+0xac>
 8007502:	4b92      	ldr	r3, [pc, #584]	; (800774c <_dtoa_r+0x2dc>)
 8007504:	e022      	b.n	800754c <_dtoa_r+0xdc>
 8007506:	4b92      	ldr	r3, [pc, #584]	; (8007750 <_dtoa_r+0x2e0>)
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	3308      	adds	r3, #8
 800750c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	9801      	ldr	r0, [sp, #4]
 8007512:	b013      	add	sp, #76	; 0x4c
 8007514:	ecbd 8b04 	vpop	{d8-d9}
 8007518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751c:	4b8b      	ldr	r3, [pc, #556]	; (800774c <_dtoa_r+0x2dc>)
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	3303      	adds	r3, #3
 8007522:	e7f3      	b.n	800750c <_dtoa_r+0x9c>
 8007524:	2200      	movs	r2, #0
 8007526:	2300      	movs	r3, #0
 8007528:	4650      	mov	r0, sl
 800752a:	4659      	mov	r1, fp
 800752c:	f7f9 fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007530:	ec4b ab19 	vmov	d9, sl, fp
 8007534:	4680      	mov	r8, r0
 8007536:	b158      	cbz	r0, 8007550 <_dtoa_r+0xe0>
 8007538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800753a:	2301      	movs	r3, #1
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 856b 	beq.w	800801c <_dtoa_r+0xbac>
 8007546:	4883      	ldr	r0, [pc, #524]	; (8007754 <_dtoa_r+0x2e4>)
 8007548:	6018      	str	r0, [r3, #0]
 800754a:	1e43      	subs	r3, r0, #1
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	e7df      	b.n	8007510 <_dtoa_r+0xa0>
 8007550:	ec4b ab10 	vmov	d0, sl, fp
 8007554:	aa10      	add	r2, sp, #64	; 0x40
 8007556:	a911      	add	r1, sp, #68	; 0x44
 8007558:	4620      	mov	r0, r4
 800755a:	f001 fd01 	bl	8008f60 <__d2b>
 800755e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007562:	ee08 0a10 	vmov	s16, r0
 8007566:	2d00      	cmp	r5, #0
 8007568:	f000 8084 	beq.w	8007674 <_dtoa_r+0x204>
 800756c:	ee19 3a90 	vmov	r3, s19
 8007570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007578:	4656      	mov	r6, sl
 800757a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800757e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007586:	4b74      	ldr	r3, [pc, #464]	; (8007758 <_dtoa_r+0x2e8>)
 8007588:	2200      	movs	r2, #0
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f8 fe83 	bl	8000298 <__aeabi_dsub>
 8007592:	a365      	add	r3, pc, #404	; (adr r3, 8007728 <_dtoa_r+0x2b8>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f9 f836 	bl	8000608 <__aeabi_dmul>
 800759c:	a364      	add	r3, pc, #400	; (adr r3, 8007730 <_dtoa_r+0x2c0>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f8 fe7b 	bl	800029c <__adddf3>
 80075a6:	4606      	mov	r6, r0
 80075a8:	4628      	mov	r0, r5
 80075aa:	460f      	mov	r7, r1
 80075ac:	f7f8 ffc2 	bl	8000534 <__aeabi_i2d>
 80075b0:	a361      	add	r3, pc, #388	; (adr r3, 8007738 <_dtoa_r+0x2c8>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4630      	mov	r0, r6
 80075c0:	4639      	mov	r1, r7
 80075c2:	f7f8 fe6b 	bl	800029c <__adddf3>
 80075c6:	4606      	mov	r6, r0
 80075c8:	460f      	mov	r7, r1
 80075ca:	f7f9 facd 	bl	8000b68 <__aeabi_d2iz>
 80075ce:	2200      	movs	r2, #0
 80075d0:	9000      	str	r0, [sp, #0]
 80075d2:	2300      	movs	r3, #0
 80075d4:	4630      	mov	r0, r6
 80075d6:	4639      	mov	r1, r7
 80075d8:	f7f9 fa88 	bl	8000aec <__aeabi_dcmplt>
 80075dc:	b150      	cbz	r0, 80075f4 <_dtoa_r+0x184>
 80075de:	9800      	ldr	r0, [sp, #0]
 80075e0:	f7f8 ffa8 	bl	8000534 <__aeabi_i2d>
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	f7f9 fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ec:	b910      	cbnz	r0, 80075f4 <_dtoa_r+0x184>
 80075ee:	9b00      	ldr	r3, [sp, #0]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	9b00      	ldr	r3, [sp, #0]
 80075f6:	2b16      	cmp	r3, #22
 80075f8:	d85a      	bhi.n	80076b0 <_dtoa_r+0x240>
 80075fa:	9a00      	ldr	r2, [sp, #0]
 80075fc:	4b57      	ldr	r3, [pc, #348]	; (800775c <_dtoa_r+0x2ec>)
 80075fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	ec51 0b19 	vmov	r0, r1, d9
 800760a:	f7f9 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	d050      	beq.n	80076b4 <_dtoa_r+0x244>
 8007612:	9b00      	ldr	r3, [sp, #0]
 8007614:	3b01      	subs	r3, #1
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	2300      	movs	r3, #0
 800761a:	930b      	str	r3, [sp, #44]	; 0x2c
 800761c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800761e:	1b5d      	subs	r5, r3, r5
 8007620:	1e6b      	subs	r3, r5, #1
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	bf45      	ittet	mi
 8007626:	f1c5 0301 	rsbmi	r3, r5, #1
 800762a:	9304      	strmi	r3, [sp, #16]
 800762c:	2300      	movpl	r3, #0
 800762e:	2300      	movmi	r3, #0
 8007630:	bf4c      	ite	mi
 8007632:	9305      	strmi	r3, [sp, #20]
 8007634:	9304      	strpl	r3, [sp, #16]
 8007636:	9b00      	ldr	r3, [sp, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	db3d      	blt.n	80076b8 <_dtoa_r+0x248>
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	9a00      	ldr	r2, [sp, #0]
 8007640:	920a      	str	r2, [sp, #40]	; 0x28
 8007642:	4413      	add	r3, r2
 8007644:	9305      	str	r3, [sp, #20]
 8007646:	2300      	movs	r3, #0
 8007648:	9307      	str	r3, [sp, #28]
 800764a:	9b06      	ldr	r3, [sp, #24]
 800764c:	2b09      	cmp	r3, #9
 800764e:	f200 8089 	bhi.w	8007764 <_dtoa_r+0x2f4>
 8007652:	2b05      	cmp	r3, #5
 8007654:	bfc4      	itt	gt
 8007656:	3b04      	subgt	r3, #4
 8007658:	9306      	strgt	r3, [sp, #24]
 800765a:	9b06      	ldr	r3, [sp, #24]
 800765c:	f1a3 0302 	sub.w	r3, r3, #2
 8007660:	bfcc      	ite	gt
 8007662:	2500      	movgt	r5, #0
 8007664:	2501      	movle	r5, #1
 8007666:	2b03      	cmp	r3, #3
 8007668:	f200 8087 	bhi.w	800777a <_dtoa_r+0x30a>
 800766c:	e8df f003 	tbb	[pc, r3]
 8007670:	59383a2d 	.word	0x59383a2d
 8007674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007678:	441d      	add	r5, r3
 800767a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800767e:	2b20      	cmp	r3, #32
 8007680:	bfc1      	itttt	gt
 8007682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800768a:	fa0b f303 	lslgt.w	r3, fp, r3
 800768e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007692:	bfda      	itte	le
 8007694:	f1c3 0320 	rsble	r3, r3, #32
 8007698:	fa06 f003 	lslle.w	r0, r6, r3
 800769c:	4318      	orrgt	r0, r3
 800769e:	f7f8 ff39 	bl	8000514 <__aeabi_ui2d>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4606      	mov	r6, r0
 80076a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076aa:	3d01      	subs	r5, #1
 80076ac:	930e      	str	r3, [sp, #56]	; 0x38
 80076ae:	e76a      	b.n	8007586 <_dtoa_r+0x116>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e7b2      	b.n	800761a <_dtoa_r+0x1aa>
 80076b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80076b6:	e7b1      	b.n	800761c <_dtoa_r+0x1ac>
 80076b8:	9b04      	ldr	r3, [sp, #16]
 80076ba:	9a00      	ldr	r2, [sp, #0]
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	9304      	str	r3, [sp, #16]
 80076c0:	4253      	negs	r3, r2
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	2300      	movs	r3, #0
 80076c6:	930a      	str	r3, [sp, #40]	; 0x28
 80076c8:	e7bf      	b.n	800764a <_dtoa_r+0x1da>
 80076ca:	2300      	movs	r3, #0
 80076cc:	9308      	str	r3, [sp, #32]
 80076ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dc55      	bgt.n	8007780 <_dtoa_r+0x310>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80076da:	461a      	mov	r2, r3
 80076dc:	9209      	str	r2, [sp, #36]	; 0x24
 80076de:	e00c      	b.n	80076fa <_dtoa_r+0x28a>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e7f3      	b.n	80076cc <_dtoa_r+0x25c>
 80076e4:	2300      	movs	r3, #0
 80076e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e8:	9308      	str	r3, [sp, #32]
 80076ea:	9b00      	ldr	r3, [sp, #0]
 80076ec:	4413      	add	r3, r2
 80076ee:	9302      	str	r3, [sp, #8]
 80076f0:	3301      	adds	r3, #1
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	bfb8      	it	lt
 80076f8:	2301      	movlt	r3, #1
 80076fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076fc:	2200      	movs	r2, #0
 80076fe:	6042      	str	r2, [r0, #4]
 8007700:	2204      	movs	r2, #4
 8007702:	f102 0614 	add.w	r6, r2, #20
 8007706:	429e      	cmp	r6, r3
 8007708:	6841      	ldr	r1, [r0, #4]
 800770a:	d93d      	bls.n	8007788 <_dtoa_r+0x318>
 800770c:	4620      	mov	r0, r4
 800770e:	f001 f839 	bl	8008784 <_Balloc>
 8007712:	9001      	str	r0, [sp, #4]
 8007714:	2800      	cmp	r0, #0
 8007716:	d13b      	bne.n	8007790 <_dtoa_r+0x320>
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <_dtoa_r+0x2f0>)
 800771a:	4602      	mov	r2, r0
 800771c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007720:	e6c0      	b.n	80074a4 <_dtoa_r+0x34>
 8007722:	2301      	movs	r3, #1
 8007724:	e7df      	b.n	80076e6 <_dtoa_r+0x276>
 8007726:	bf00      	nop
 8007728:	636f4361 	.word	0x636f4361
 800772c:	3fd287a7 	.word	0x3fd287a7
 8007730:	8b60c8b3 	.word	0x8b60c8b3
 8007734:	3fc68a28 	.word	0x3fc68a28
 8007738:	509f79fb 	.word	0x509f79fb
 800773c:	3fd34413 	.word	0x3fd34413
 8007740:	0800b416 	.word	0x0800b416
 8007744:	0800b42d 	.word	0x0800b42d
 8007748:	7ff00000 	.word	0x7ff00000
 800774c:	0800b412 	.word	0x0800b412
 8007750:	0800b409 	.word	0x0800b409
 8007754:	0800b289 	.word	0x0800b289
 8007758:	3ff80000 	.word	0x3ff80000
 800775c:	0800b598 	.word	0x0800b598
 8007760:	0800b488 	.word	0x0800b488
 8007764:	2501      	movs	r5, #1
 8007766:	2300      	movs	r3, #0
 8007768:	9306      	str	r3, [sp, #24]
 800776a:	9508      	str	r5, [sp, #32]
 800776c:	f04f 33ff 	mov.w	r3, #4294967295
 8007770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	2312      	movs	r3, #18
 8007778:	e7b0      	b.n	80076dc <_dtoa_r+0x26c>
 800777a:	2301      	movs	r3, #1
 800777c:	9308      	str	r3, [sp, #32]
 800777e:	e7f5      	b.n	800776c <_dtoa_r+0x2fc>
 8007780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007786:	e7b8      	b.n	80076fa <_dtoa_r+0x28a>
 8007788:	3101      	adds	r1, #1
 800778a:	6041      	str	r1, [r0, #4]
 800778c:	0052      	lsls	r2, r2, #1
 800778e:	e7b8      	b.n	8007702 <_dtoa_r+0x292>
 8007790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007792:	9a01      	ldr	r2, [sp, #4]
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	2b0e      	cmp	r3, #14
 800779a:	f200 809d 	bhi.w	80078d8 <_dtoa_r+0x468>
 800779e:	2d00      	cmp	r5, #0
 80077a0:	f000 809a 	beq.w	80078d8 <_dtoa_r+0x468>
 80077a4:	9b00      	ldr	r3, [sp, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dd32      	ble.n	8007810 <_dtoa_r+0x3a0>
 80077aa:	4ab7      	ldr	r2, [pc, #732]	; (8007a88 <_dtoa_r+0x618>)
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077b8:	9b00      	ldr	r3, [sp, #0]
 80077ba:	05d8      	lsls	r0, r3, #23
 80077bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077c0:	d516      	bpl.n	80077f0 <_dtoa_r+0x380>
 80077c2:	4bb2      	ldr	r3, [pc, #712]	; (8007a8c <_dtoa_r+0x61c>)
 80077c4:	ec51 0b19 	vmov	r0, r1, d9
 80077c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077cc:	f7f9 f846 	bl	800085c <__aeabi_ddiv>
 80077d0:	f007 070f 	and.w	r7, r7, #15
 80077d4:	4682      	mov	sl, r0
 80077d6:	468b      	mov	fp, r1
 80077d8:	2503      	movs	r5, #3
 80077da:	4eac      	ldr	r6, [pc, #688]	; (8007a8c <_dtoa_r+0x61c>)
 80077dc:	b957      	cbnz	r7, 80077f4 <_dtoa_r+0x384>
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	4650      	mov	r0, sl
 80077e4:	4659      	mov	r1, fp
 80077e6:	f7f9 f839 	bl	800085c <__aeabi_ddiv>
 80077ea:	4682      	mov	sl, r0
 80077ec:	468b      	mov	fp, r1
 80077ee:	e028      	b.n	8007842 <_dtoa_r+0x3d2>
 80077f0:	2502      	movs	r5, #2
 80077f2:	e7f2      	b.n	80077da <_dtoa_r+0x36a>
 80077f4:	07f9      	lsls	r1, r7, #31
 80077f6:	d508      	bpl.n	800780a <_dtoa_r+0x39a>
 80077f8:	4640      	mov	r0, r8
 80077fa:	4649      	mov	r1, r9
 80077fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007800:	f7f8 ff02 	bl	8000608 <__aeabi_dmul>
 8007804:	3501      	adds	r5, #1
 8007806:	4680      	mov	r8, r0
 8007808:	4689      	mov	r9, r1
 800780a:	107f      	asrs	r7, r7, #1
 800780c:	3608      	adds	r6, #8
 800780e:	e7e5      	b.n	80077dc <_dtoa_r+0x36c>
 8007810:	f000 809b 	beq.w	800794a <_dtoa_r+0x4da>
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	4f9d      	ldr	r7, [pc, #628]	; (8007a8c <_dtoa_r+0x61c>)
 8007818:	425e      	negs	r6, r3
 800781a:	4b9b      	ldr	r3, [pc, #620]	; (8007a88 <_dtoa_r+0x618>)
 800781c:	f006 020f 	and.w	r2, r6, #15
 8007820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	ec51 0b19 	vmov	r0, r1, d9
 800782c:	f7f8 feec 	bl	8000608 <__aeabi_dmul>
 8007830:	1136      	asrs	r6, r6, #4
 8007832:	4682      	mov	sl, r0
 8007834:	468b      	mov	fp, r1
 8007836:	2300      	movs	r3, #0
 8007838:	2502      	movs	r5, #2
 800783a:	2e00      	cmp	r6, #0
 800783c:	d17a      	bne.n	8007934 <_dtoa_r+0x4c4>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1d3      	bne.n	80077ea <_dtoa_r+0x37a>
 8007842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8082 	beq.w	800794e <_dtoa_r+0x4de>
 800784a:	4b91      	ldr	r3, [pc, #580]	; (8007a90 <_dtoa_r+0x620>)
 800784c:	2200      	movs	r2, #0
 800784e:	4650      	mov	r0, sl
 8007850:	4659      	mov	r1, fp
 8007852:	f7f9 f94b 	bl	8000aec <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d079      	beq.n	800794e <_dtoa_r+0x4de>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d076      	beq.n	800794e <_dtoa_r+0x4de>
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	dd36      	ble.n	80078d4 <_dtoa_r+0x464>
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	1e5f      	subs	r7, r3, #1
 800786e:	2200      	movs	r2, #0
 8007870:	4b88      	ldr	r3, [pc, #544]	; (8007a94 <_dtoa_r+0x624>)
 8007872:	f7f8 fec9 	bl	8000608 <__aeabi_dmul>
 8007876:	9e02      	ldr	r6, [sp, #8]
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	3501      	adds	r5, #1
 800787e:	4628      	mov	r0, r5
 8007880:	f7f8 fe58 	bl	8000534 <__aeabi_i2d>
 8007884:	4652      	mov	r2, sl
 8007886:	465b      	mov	r3, fp
 8007888:	f7f8 febe 	bl	8000608 <__aeabi_dmul>
 800788c:	4b82      	ldr	r3, [pc, #520]	; (8007a98 <_dtoa_r+0x628>)
 800788e:	2200      	movs	r2, #0
 8007890:	f7f8 fd04 	bl	800029c <__adddf3>
 8007894:	46d0      	mov	r8, sl
 8007896:	46d9      	mov	r9, fp
 8007898:	4682      	mov	sl, r0
 800789a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800789e:	2e00      	cmp	r6, #0
 80078a0:	d158      	bne.n	8007954 <_dtoa_r+0x4e4>
 80078a2:	4b7e      	ldr	r3, [pc, #504]	; (8007a9c <_dtoa_r+0x62c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	4640      	mov	r0, r8
 80078a8:	4649      	mov	r1, r9
 80078aa:	f7f8 fcf5 	bl	8000298 <__aeabi_dsub>
 80078ae:	4652      	mov	r2, sl
 80078b0:	465b      	mov	r3, fp
 80078b2:	4680      	mov	r8, r0
 80078b4:	4689      	mov	r9, r1
 80078b6:	f7f9 f937 	bl	8000b28 <__aeabi_dcmpgt>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	f040 8295 	bne.w	8007dea <_dtoa_r+0x97a>
 80078c0:	4652      	mov	r2, sl
 80078c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	f7f9 f90f 	bl	8000aec <__aeabi_dcmplt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f040 8289 	bne.w	8007de6 <_dtoa_r+0x976>
 80078d4:	ec5b ab19 	vmov	sl, fp, d9
 80078d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f2c0 8148 	blt.w	8007b70 <_dtoa_r+0x700>
 80078e0:	9a00      	ldr	r2, [sp, #0]
 80078e2:	2a0e      	cmp	r2, #14
 80078e4:	f300 8144 	bgt.w	8007b70 <_dtoa_r+0x700>
 80078e8:	4b67      	ldr	r3, [pc, #412]	; (8007a88 <_dtoa_r+0x618>)
 80078ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f280 80d5 	bge.w	8007aa4 <_dtoa_r+0x634>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f300 80d1 	bgt.w	8007aa4 <_dtoa_r+0x634>
 8007902:	f040 826f 	bne.w	8007de4 <_dtoa_r+0x974>
 8007906:	4b65      	ldr	r3, [pc, #404]	; (8007a9c <_dtoa_r+0x62c>)
 8007908:	2200      	movs	r2, #0
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	f7f8 fe7b 	bl	8000608 <__aeabi_dmul>
 8007912:	4652      	mov	r2, sl
 8007914:	465b      	mov	r3, fp
 8007916:	f7f9 f8fd 	bl	8000b14 <__aeabi_dcmpge>
 800791a:	9e03      	ldr	r6, [sp, #12]
 800791c:	4637      	mov	r7, r6
 800791e:	2800      	cmp	r0, #0
 8007920:	f040 8245 	bne.w	8007dae <_dtoa_r+0x93e>
 8007924:	9d01      	ldr	r5, [sp, #4]
 8007926:	2331      	movs	r3, #49	; 0x31
 8007928:	f805 3b01 	strb.w	r3, [r5], #1
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	e240      	b.n	8007db6 <_dtoa_r+0x946>
 8007934:	07f2      	lsls	r2, r6, #31
 8007936:	d505      	bpl.n	8007944 <_dtoa_r+0x4d4>
 8007938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800793c:	f7f8 fe64 	bl	8000608 <__aeabi_dmul>
 8007940:	3501      	adds	r5, #1
 8007942:	2301      	movs	r3, #1
 8007944:	1076      	asrs	r6, r6, #1
 8007946:	3708      	adds	r7, #8
 8007948:	e777      	b.n	800783a <_dtoa_r+0x3ca>
 800794a:	2502      	movs	r5, #2
 800794c:	e779      	b.n	8007842 <_dtoa_r+0x3d2>
 800794e:	9f00      	ldr	r7, [sp, #0]
 8007950:	9e03      	ldr	r6, [sp, #12]
 8007952:	e794      	b.n	800787e <_dtoa_r+0x40e>
 8007954:	9901      	ldr	r1, [sp, #4]
 8007956:	4b4c      	ldr	r3, [pc, #304]	; (8007a88 <_dtoa_r+0x618>)
 8007958:	4431      	add	r1, r6
 800795a:	910d      	str	r1, [sp, #52]	; 0x34
 800795c:	9908      	ldr	r1, [sp, #32]
 800795e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007966:	2900      	cmp	r1, #0
 8007968:	d043      	beq.n	80079f2 <_dtoa_r+0x582>
 800796a:	494d      	ldr	r1, [pc, #308]	; (8007aa0 <_dtoa_r+0x630>)
 800796c:	2000      	movs	r0, #0
 800796e:	f7f8 ff75 	bl	800085c <__aeabi_ddiv>
 8007972:	4652      	mov	r2, sl
 8007974:	465b      	mov	r3, fp
 8007976:	f7f8 fc8f 	bl	8000298 <__aeabi_dsub>
 800797a:	9d01      	ldr	r5, [sp, #4]
 800797c:	4682      	mov	sl, r0
 800797e:	468b      	mov	fp, r1
 8007980:	4649      	mov	r1, r9
 8007982:	4640      	mov	r0, r8
 8007984:	f7f9 f8f0 	bl	8000b68 <__aeabi_d2iz>
 8007988:	4606      	mov	r6, r0
 800798a:	f7f8 fdd3 	bl	8000534 <__aeabi_i2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f8 fc7f 	bl	8000298 <__aeabi_dsub>
 800799a:	3630      	adds	r6, #48	; 0x30
 800799c:	f805 6b01 	strb.w	r6, [r5], #1
 80079a0:	4652      	mov	r2, sl
 80079a2:	465b      	mov	r3, fp
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	f7f9 f8a0 	bl	8000aec <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d163      	bne.n	8007a78 <_dtoa_r+0x608>
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	4936      	ldr	r1, [pc, #216]	; (8007a90 <_dtoa_r+0x620>)
 80079b6:	2000      	movs	r0, #0
 80079b8:	f7f8 fc6e 	bl	8000298 <__aeabi_dsub>
 80079bc:	4652      	mov	r2, sl
 80079be:	465b      	mov	r3, fp
 80079c0:	f7f9 f894 	bl	8000aec <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f040 80b5 	bne.w	8007b34 <_dtoa_r+0x6c4>
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	429d      	cmp	r5, r3
 80079ce:	d081      	beq.n	80078d4 <_dtoa_r+0x464>
 80079d0:	4b30      	ldr	r3, [pc, #192]	; (8007a94 <_dtoa_r+0x624>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	4650      	mov	r0, sl
 80079d6:	4659      	mov	r1, fp
 80079d8:	f7f8 fe16 	bl	8000608 <__aeabi_dmul>
 80079dc:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <_dtoa_r+0x624>)
 80079de:	4682      	mov	sl, r0
 80079e0:	468b      	mov	fp, r1
 80079e2:	4640      	mov	r0, r8
 80079e4:	4649      	mov	r1, r9
 80079e6:	2200      	movs	r2, #0
 80079e8:	f7f8 fe0e 	bl	8000608 <__aeabi_dmul>
 80079ec:	4680      	mov	r8, r0
 80079ee:	4689      	mov	r9, r1
 80079f0:	e7c6      	b.n	8007980 <_dtoa_r+0x510>
 80079f2:	4650      	mov	r0, sl
 80079f4:	4659      	mov	r1, fp
 80079f6:	f7f8 fe07 	bl	8000608 <__aeabi_dmul>
 80079fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079fc:	9d01      	ldr	r5, [sp, #4]
 80079fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a00:	4682      	mov	sl, r0
 8007a02:	468b      	mov	fp, r1
 8007a04:	4649      	mov	r1, r9
 8007a06:	4640      	mov	r0, r8
 8007a08:	f7f9 f8ae 	bl	8000b68 <__aeabi_d2iz>
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	f7f8 fd91 	bl	8000534 <__aeabi_i2d>
 8007a12:	3630      	adds	r6, #48	; 0x30
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f8 fc3c 	bl	8000298 <__aeabi_dsub>
 8007a20:	f805 6b01 	strb.w	r6, [r5], #1
 8007a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a26:	429d      	cmp	r5, r3
 8007a28:	4680      	mov	r8, r0
 8007a2a:	4689      	mov	r9, r1
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	d124      	bne.n	8007a7c <_dtoa_r+0x60c>
 8007a32:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <_dtoa_r+0x630>)
 8007a34:	4650      	mov	r0, sl
 8007a36:	4659      	mov	r1, fp
 8007a38:	f7f8 fc30 	bl	800029c <__adddf3>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4640      	mov	r0, r8
 8007a42:	4649      	mov	r1, r9
 8007a44:	f7f9 f870 	bl	8000b28 <__aeabi_dcmpgt>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d173      	bne.n	8007b34 <_dtoa_r+0x6c4>
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	465b      	mov	r3, fp
 8007a50:	4913      	ldr	r1, [pc, #76]	; (8007aa0 <_dtoa_r+0x630>)
 8007a52:	2000      	movs	r0, #0
 8007a54:	f7f8 fc20 	bl	8000298 <__aeabi_dsub>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4649      	mov	r1, r9
 8007a60:	f7f9 f844 	bl	8000aec <__aeabi_dcmplt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f af35 	beq.w	80078d4 <_dtoa_r+0x464>
 8007a6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a6c:	1e6b      	subs	r3, r5, #1
 8007a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a74:	2b30      	cmp	r3, #48	; 0x30
 8007a76:	d0f8      	beq.n	8007a6a <_dtoa_r+0x5fa>
 8007a78:	9700      	str	r7, [sp, #0]
 8007a7a:	e049      	b.n	8007b10 <_dtoa_r+0x6a0>
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <_dtoa_r+0x624>)
 8007a7e:	f7f8 fdc3 	bl	8000608 <__aeabi_dmul>
 8007a82:	4680      	mov	r8, r0
 8007a84:	4689      	mov	r9, r1
 8007a86:	e7bd      	b.n	8007a04 <_dtoa_r+0x594>
 8007a88:	0800b598 	.word	0x0800b598
 8007a8c:	0800b570 	.word	0x0800b570
 8007a90:	3ff00000 	.word	0x3ff00000
 8007a94:	40240000 	.word	0x40240000
 8007a98:	401c0000 	.word	0x401c0000
 8007a9c:	40140000 	.word	0x40140000
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	9d01      	ldr	r5, [sp, #4]
 8007aa6:	4656      	mov	r6, sl
 8007aa8:	465f      	mov	r7, fp
 8007aaa:	4642      	mov	r2, r8
 8007aac:	464b      	mov	r3, r9
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f8 fed3 	bl	800085c <__aeabi_ddiv>
 8007ab6:	f7f9 f857 	bl	8000b68 <__aeabi_d2iz>
 8007aba:	4682      	mov	sl, r0
 8007abc:	f7f8 fd3a 	bl	8000534 <__aeabi_i2d>
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	f7f8 fda0 	bl	8000608 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ad4:	f7f8 fbe0 	bl	8000298 <__aeabi_dsub>
 8007ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8007adc:	9e01      	ldr	r6, [sp, #4]
 8007ade:	9f03      	ldr	r7, [sp, #12]
 8007ae0:	1bae      	subs	r6, r5, r6
 8007ae2:	42b7      	cmp	r7, r6
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	d135      	bne.n	8007b56 <_dtoa_r+0x6e6>
 8007aea:	f7f8 fbd7 	bl	800029c <__adddf3>
 8007aee:	4642      	mov	r2, r8
 8007af0:	464b      	mov	r3, r9
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	f7f9 f817 	bl	8000b28 <__aeabi_dcmpgt>
 8007afa:	b9d0      	cbnz	r0, 8007b32 <_dtoa_r+0x6c2>
 8007afc:	4642      	mov	r2, r8
 8007afe:	464b      	mov	r3, r9
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b08:	b110      	cbz	r0, 8007b10 <_dtoa_r+0x6a0>
 8007b0a:	f01a 0f01 	tst.w	sl, #1
 8007b0e:	d110      	bne.n	8007b32 <_dtoa_r+0x6c2>
 8007b10:	4620      	mov	r0, r4
 8007b12:	ee18 1a10 	vmov	r1, s16
 8007b16:	f000 fe75 	bl	8008804 <_Bfree>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9800      	ldr	r0, [sp, #0]
 8007b1e:	702b      	strb	r3, [r5, #0]
 8007b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b22:	3001      	adds	r0, #1
 8007b24:	6018      	str	r0, [r3, #0]
 8007b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f43f acf1 	beq.w	8007510 <_dtoa_r+0xa0>
 8007b2e:	601d      	str	r5, [r3, #0]
 8007b30:	e4ee      	b.n	8007510 <_dtoa_r+0xa0>
 8007b32:	9f00      	ldr	r7, [sp, #0]
 8007b34:	462b      	mov	r3, r5
 8007b36:	461d      	mov	r5, r3
 8007b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b3c:	2a39      	cmp	r2, #57	; 0x39
 8007b3e:	d106      	bne.n	8007b4e <_dtoa_r+0x6de>
 8007b40:	9a01      	ldr	r2, [sp, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d1f7      	bne.n	8007b36 <_dtoa_r+0x6c6>
 8007b46:	9901      	ldr	r1, [sp, #4]
 8007b48:	2230      	movs	r2, #48	; 0x30
 8007b4a:	3701      	adds	r7, #1
 8007b4c:	700a      	strb	r2, [r1, #0]
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	3201      	adds	r2, #1
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e790      	b.n	8007a78 <_dtoa_r+0x608>
 8007b56:	4ba6      	ldr	r3, [pc, #664]	; (8007df0 <_dtoa_r+0x980>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f7f8 fd55 	bl	8000608 <__aeabi_dmul>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2300      	movs	r3, #0
 8007b62:	4606      	mov	r6, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	f7f8 ffb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d09d      	beq.n	8007aaa <_dtoa_r+0x63a>
 8007b6e:	e7cf      	b.n	8007b10 <_dtoa_r+0x6a0>
 8007b70:	9a08      	ldr	r2, [sp, #32]
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	f000 80d7 	beq.w	8007d26 <_dtoa_r+0x8b6>
 8007b78:	9a06      	ldr	r2, [sp, #24]
 8007b7a:	2a01      	cmp	r2, #1
 8007b7c:	f300 80ba 	bgt.w	8007cf4 <_dtoa_r+0x884>
 8007b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	f000 80b2 	beq.w	8007cec <_dtoa_r+0x87c>
 8007b88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b8c:	9e07      	ldr	r6, [sp, #28]
 8007b8e:	9d04      	ldr	r5, [sp, #16]
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	441a      	add	r2, r3
 8007b94:	9204      	str	r2, [sp, #16]
 8007b96:	9a05      	ldr	r2, [sp, #20]
 8007b98:	2101      	movs	r1, #1
 8007b9a:	441a      	add	r2, r3
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	9205      	str	r2, [sp, #20]
 8007ba0:	f000 ff32 	bl	8008a08 <__i2b>
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	dd0c      	ble.n	8007bc4 <_dtoa_r+0x754>
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd09      	ble.n	8007bc4 <_dtoa_r+0x754>
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	9a04      	ldr	r2, [sp, #16]
 8007bb4:	bfa8      	it	ge
 8007bb6:	462b      	movge	r3, r5
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	9204      	str	r2, [sp, #16]
 8007bbc:	9a05      	ldr	r2, [sp, #20]
 8007bbe:	1aed      	subs	r5, r5, r3
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	9305      	str	r3, [sp, #20]
 8007bc4:	9b07      	ldr	r3, [sp, #28]
 8007bc6:	b31b      	cbz	r3, 8007c10 <_dtoa_r+0x7a0>
 8007bc8:	9b08      	ldr	r3, [sp, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80af 	beq.w	8007d2e <_dtoa_r+0x8be>
 8007bd0:	2e00      	cmp	r6, #0
 8007bd2:	dd13      	ble.n	8007bfc <_dtoa_r+0x78c>
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 ffd5 	bl	8008b88 <__pow5mult>
 8007bde:	ee18 2a10 	vmov	r2, s16
 8007be2:	4601      	mov	r1, r0
 8007be4:	4607      	mov	r7, r0
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 ff24 	bl	8008a34 <__multiply>
 8007bec:	ee18 1a10 	vmov	r1, s16
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 fe06 	bl	8008804 <_Bfree>
 8007bf8:	ee08 8a10 	vmov	s16, r8
 8007bfc:	9b07      	ldr	r3, [sp, #28]
 8007bfe:	1b9a      	subs	r2, r3, r6
 8007c00:	d006      	beq.n	8007c10 <_dtoa_r+0x7a0>
 8007c02:	ee18 1a10 	vmov	r1, s16
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 ffbe 	bl	8008b88 <__pow5mult>
 8007c0c:	ee08 0a10 	vmov	s16, r0
 8007c10:	2101      	movs	r1, #1
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fef8 	bl	8008a08 <__i2b>
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	f340 8088 	ble.w	8007d32 <_dtoa_r+0x8c2>
 8007c22:	461a      	mov	r2, r3
 8007c24:	4601      	mov	r1, r0
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 ffae 	bl	8008b88 <__pow5mult>
 8007c2c:	9b06      	ldr	r3, [sp, #24]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	4606      	mov	r6, r0
 8007c32:	f340 8081 	ble.w	8007d38 <_dtoa_r+0x8c8>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	6933      	ldr	r3, [r6, #16]
 8007c3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c40:	6918      	ldr	r0, [r3, #16]
 8007c42:	f000 fe91 	bl	8008968 <__hi0bits>
 8007c46:	f1c0 0020 	rsb	r0, r0, #32
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	4418      	add	r0, r3
 8007c4e:	f010 001f 	ands.w	r0, r0, #31
 8007c52:	f000 8092 	beq.w	8007d7a <_dtoa_r+0x90a>
 8007c56:	f1c0 0320 	rsb	r3, r0, #32
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	f340 808a 	ble.w	8007d74 <_dtoa_r+0x904>
 8007c60:	f1c0 001c 	rsb	r0, r0, #28
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	4403      	add	r3, r0
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	9b05      	ldr	r3, [sp, #20]
 8007c6c:	4403      	add	r3, r0
 8007c6e:	4405      	add	r5, r0
 8007c70:	9305      	str	r3, [sp, #20]
 8007c72:	9b04      	ldr	r3, [sp, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	dd07      	ble.n	8007c88 <_dtoa_r+0x818>
 8007c78:	ee18 1a10 	vmov	r1, s16
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 ffdc 	bl	8008c3c <__lshift>
 8007c84:	ee08 0a10 	vmov	s16, r0
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dd05      	ble.n	8007c9a <_dtoa_r+0x82a>
 8007c8e:	4631      	mov	r1, r6
 8007c90:	461a      	mov	r2, r3
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 ffd2 	bl	8008c3c <__lshift>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d06e      	beq.n	8007d7e <_dtoa_r+0x90e>
 8007ca0:	ee18 0a10 	vmov	r0, s16
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	f001 f839 	bl	8008d1c <__mcmp>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	da67      	bge.n	8007d7e <_dtoa_r+0x90e>
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	ee18 1a10 	vmov	r1, s16
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	220a      	movs	r2, #10
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fdc3 	bl	8008848 <__multadd>
 8007cc2:	9b08      	ldr	r3, [sp, #32]
 8007cc4:	ee08 0a10 	vmov	s16, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 81b1 	beq.w	8008030 <_dtoa_r+0xbc0>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fdb7 	bl	8008848 <__multadd>
 8007cda:	9b02      	ldr	r3, [sp, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	4607      	mov	r7, r0
 8007ce0:	f300 808e 	bgt.w	8007e00 <_dtoa_r+0x990>
 8007ce4:	9b06      	ldr	r3, [sp, #24]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	dc51      	bgt.n	8007d8e <_dtoa_r+0x91e>
 8007cea:	e089      	b.n	8007e00 <_dtoa_r+0x990>
 8007cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cf2:	e74b      	b.n	8007b8c <_dtoa_r+0x71c>
 8007cf4:	9b03      	ldr	r3, [sp, #12]
 8007cf6:	1e5e      	subs	r6, r3, #1
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	42b3      	cmp	r3, r6
 8007cfc:	bfbf      	itttt	lt
 8007cfe:	9b07      	ldrlt	r3, [sp, #28]
 8007d00:	9607      	strlt	r6, [sp, #28]
 8007d02:	1af2      	sublt	r2, r6, r3
 8007d04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d06:	bfb6      	itet	lt
 8007d08:	189b      	addlt	r3, r3, r2
 8007d0a:	1b9e      	subge	r6, r3, r6
 8007d0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d0e:	9b03      	ldr	r3, [sp, #12]
 8007d10:	bfb8      	it	lt
 8007d12:	2600      	movlt	r6, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bfb7      	itett	lt
 8007d18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d20:	1a9d      	sublt	r5, r3, r2
 8007d22:	2300      	movlt	r3, #0
 8007d24:	e734      	b.n	8007b90 <_dtoa_r+0x720>
 8007d26:	9e07      	ldr	r6, [sp, #28]
 8007d28:	9d04      	ldr	r5, [sp, #16]
 8007d2a:	9f08      	ldr	r7, [sp, #32]
 8007d2c:	e73b      	b.n	8007ba6 <_dtoa_r+0x736>
 8007d2e:	9a07      	ldr	r2, [sp, #28]
 8007d30:	e767      	b.n	8007c02 <_dtoa_r+0x792>
 8007d32:	9b06      	ldr	r3, [sp, #24]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	dc18      	bgt.n	8007d6a <_dtoa_r+0x8fa>
 8007d38:	f1ba 0f00 	cmp.w	sl, #0
 8007d3c:	d115      	bne.n	8007d6a <_dtoa_r+0x8fa>
 8007d3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d42:	b993      	cbnz	r3, 8007d6a <_dtoa_r+0x8fa>
 8007d44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	051b      	lsls	r3, r3, #20
 8007d4c:	b183      	cbz	r3, 8007d70 <_dtoa_r+0x900>
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	3301      	adds	r3, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	9b05      	ldr	r3, [sp, #20]
 8007d56:	3301      	adds	r3, #1
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	f04f 0801 	mov.w	r8, #1
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f47f af6a 	bne.w	8007c3a <_dtoa_r+0x7ca>
 8007d66:	2001      	movs	r0, #1
 8007d68:	e76f      	b.n	8007c4a <_dtoa_r+0x7da>
 8007d6a:	f04f 0800 	mov.w	r8, #0
 8007d6e:	e7f6      	b.n	8007d5e <_dtoa_r+0x8ee>
 8007d70:	4698      	mov	r8, r3
 8007d72:	e7f4      	b.n	8007d5e <_dtoa_r+0x8ee>
 8007d74:	f43f af7d 	beq.w	8007c72 <_dtoa_r+0x802>
 8007d78:	4618      	mov	r0, r3
 8007d7a:	301c      	adds	r0, #28
 8007d7c:	e772      	b.n	8007c64 <_dtoa_r+0x7f4>
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dc37      	bgt.n	8007df4 <_dtoa_r+0x984>
 8007d84:	9b06      	ldr	r3, [sp, #24]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	dd34      	ble.n	8007df4 <_dtoa_r+0x984>
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	9302      	str	r3, [sp, #8]
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	b96b      	cbnz	r3, 8007dae <_dtoa_r+0x93e>
 8007d92:	4631      	mov	r1, r6
 8007d94:	2205      	movs	r2, #5
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 fd56 	bl	8008848 <__multadd>
 8007d9c:	4601      	mov	r1, r0
 8007d9e:	4606      	mov	r6, r0
 8007da0:	ee18 0a10 	vmov	r0, s16
 8007da4:	f000 ffba 	bl	8008d1c <__mcmp>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f73f adbb 	bgt.w	8007924 <_dtoa_r+0x4b4>
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	9d01      	ldr	r5, [sp, #4]
 8007db2:	43db      	mvns	r3, r3
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	f04f 0800 	mov.w	r8, #0
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fd21 	bl	8008804 <_Bfree>
 8007dc2:	2f00      	cmp	r7, #0
 8007dc4:	f43f aea4 	beq.w	8007b10 <_dtoa_r+0x6a0>
 8007dc8:	f1b8 0f00 	cmp.w	r8, #0
 8007dcc:	d005      	beq.n	8007dda <_dtoa_r+0x96a>
 8007dce:	45b8      	cmp	r8, r7
 8007dd0:	d003      	beq.n	8007dda <_dtoa_r+0x96a>
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fd15 	bl	8008804 <_Bfree>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 fd11 	bl	8008804 <_Bfree>
 8007de2:	e695      	b.n	8007b10 <_dtoa_r+0x6a0>
 8007de4:	2600      	movs	r6, #0
 8007de6:	4637      	mov	r7, r6
 8007de8:	e7e1      	b.n	8007dae <_dtoa_r+0x93e>
 8007dea:	9700      	str	r7, [sp, #0]
 8007dec:	4637      	mov	r7, r6
 8007dee:	e599      	b.n	8007924 <_dtoa_r+0x4b4>
 8007df0:	40240000 	.word	0x40240000
 8007df4:	9b08      	ldr	r3, [sp, #32]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80ca 	beq.w	8007f90 <_dtoa_r+0xb20>
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	9302      	str	r3, [sp, #8]
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	dd05      	ble.n	8007e10 <_dtoa_r+0x9a0>
 8007e04:	4639      	mov	r1, r7
 8007e06:	462a      	mov	r2, r5
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 ff17 	bl	8008c3c <__lshift>
 8007e0e:	4607      	mov	r7, r0
 8007e10:	f1b8 0f00 	cmp.w	r8, #0
 8007e14:	d05b      	beq.n	8007ece <_dtoa_r+0xa5e>
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 fcb3 	bl	8008784 <_Balloc>
 8007e1e:	4605      	mov	r5, r0
 8007e20:	b928      	cbnz	r0, 8007e2e <_dtoa_r+0x9be>
 8007e22:	4b87      	ldr	r3, [pc, #540]	; (8008040 <_dtoa_r+0xbd0>)
 8007e24:	4602      	mov	r2, r0
 8007e26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e2a:	f7ff bb3b 	b.w	80074a4 <_dtoa_r+0x34>
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	3202      	adds	r2, #2
 8007e32:	0092      	lsls	r2, r2, #2
 8007e34:	f107 010c 	add.w	r1, r7, #12
 8007e38:	300c      	adds	r0, #12
 8007e3a:	f000 fc95 	bl	8008768 <memcpy>
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4629      	mov	r1, r5
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fefa 	bl	8008c3c <__lshift>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	f103 0901 	add.w	r9, r3, #1
 8007e4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e52:	4413      	add	r3, r2
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	f00a 0301 	and.w	r3, sl, #1
 8007e5a:	46b8      	mov	r8, r7
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	4607      	mov	r7, r0
 8007e60:	4631      	mov	r1, r6
 8007e62:	ee18 0a10 	vmov	r0, s16
 8007e66:	f7ff fa77 	bl	8007358 <quorem>
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	9002      	str	r0, [sp, #8]
 8007e6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e72:	ee18 0a10 	vmov	r0, s16
 8007e76:	f000 ff51 	bl	8008d1c <__mcmp>
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	9003      	str	r0, [sp, #12]
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 ff67 	bl	8008d54 <__mdiff>
 8007e86:	68c2      	ldr	r2, [r0, #12]
 8007e88:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	bb02      	cbnz	r2, 8007ed2 <_dtoa_r+0xa62>
 8007e90:	4601      	mov	r1, r0
 8007e92:	ee18 0a10 	vmov	r0, s16
 8007e96:	f000 ff41 	bl	8008d1c <__mcmp>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	9207      	str	r2, [sp, #28]
 8007ea2:	f000 fcaf 	bl	8008804 <_Bfree>
 8007ea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007eaa:	ea43 0102 	orr.w	r1, r3, r2
 8007eae:	9b04      	ldr	r3, [sp, #16]
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	464d      	mov	r5, r9
 8007eb4:	d10f      	bne.n	8007ed6 <_dtoa_r+0xa66>
 8007eb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007eba:	d02a      	beq.n	8007f12 <_dtoa_r+0xaa2>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd02      	ble.n	8007ec8 <_dtoa_r+0xa58>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007ec8:	f88b a000 	strb.w	sl, [fp]
 8007ecc:	e775      	b.n	8007dba <_dtoa_r+0x94a>
 8007ece:	4638      	mov	r0, r7
 8007ed0:	e7ba      	b.n	8007e48 <_dtoa_r+0x9d8>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	e7e2      	b.n	8007e9c <_dtoa_r+0xa2c>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	db04      	blt.n	8007ee6 <_dtoa_r+0xa76>
 8007edc:	9906      	ldr	r1, [sp, #24]
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	9904      	ldr	r1, [sp, #16]
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	d122      	bne.n	8007f2c <_dtoa_r+0xabc>
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	ddee      	ble.n	8007ec8 <_dtoa_r+0xa58>
 8007eea:	ee18 1a10 	vmov	r1, s16
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fea3 	bl	8008c3c <__lshift>
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	ee08 0a10 	vmov	s16, r0
 8007efc:	f000 ff0e 	bl	8008d1c <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	dc03      	bgt.n	8007f0c <_dtoa_r+0xa9c>
 8007f04:	d1e0      	bne.n	8007ec8 <_dtoa_r+0xa58>
 8007f06:	f01a 0f01 	tst.w	sl, #1
 8007f0a:	d0dd      	beq.n	8007ec8 <_dtoa_r+0xa58>
 8007f0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f10:	d1d7      	bne.n	8007ec2 <_dtoa_r+0xa52>
 8007f12:	2339      	movs	r3, #57	; 0x39
 8007f14:	f88b 3000 	strb.w	r3, [fp]
 8007f18:	462b      	mov	r3, r5
 8007f1a:	461d      	mov	r5, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f22:	2a39      	cmp	r2, #57	; 0x39
 8007f24:	d071      	beq.n	800800a <_dtoa_r+0xb9a>
 8007f26:	3201      	adds	r2, #1
 8007f28:	701a      	strb	r2, [r3, #0]
 8007f2a:	e746      	b.n	8007dba <_dtoa_r+0x94a>
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	dd07      	ble.n	8007f40 <_dtoa_r+0xad0>
 8007f30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f34:	d0ed      	beq.n	8007f12 <_dtoa_r+0xaa2>
 8007f36:	f10a 0301 	add.w	r3, sl, #1
 8007f3a:	f88b 3000 	strb.w	r3, [fp]
 8007f3e:	e73c      	b.n	8007dba <_dtoa_r+0x94a>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f46:	4599      	cmp	r9, r3
 8007f48:	d047      	beq.n	8007fda <_dtoa_r+0xb6a>
 8007f4a:	ee18 1a10 	vmov	r1, s16
 8007f4e:	2300      	movs	r3, #0
 8007f50:	220a      	movs	r2, #10
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 fc78 	bl	8008848 <__multadd>
 8007f58:	45b8      	cmp	r8, r7
 8007f5a:	ee08 0a10 	vmov	s16, r0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	f04f 020a 	mov.w	r2, #10
 8007f66:	4641      	mov	r1, r8
 8007f68:	4620      	mov	r0, r4
 8007f6a:	d106      	bne.n	8007f7a <_dtoa_r+0xb0a>
 8007f6c:	f000 fc6c 	bl	8008848 <__multadd>
 8007f70:	4680      	mov	r8, r0
 8007f72:	4607      	mov	r7, r0
 8007f74:	f109 0901 	add.w	r9, r9, #1
 8007f78:	e772      	b.n	8007e60 <_dtoa_r+0x9f0>
 8007f7a:	f000 fc65 	bl	8008848 <__multadd>
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4680      	mov	r8, r0
 8007f82:	2300      	movs	r3, #0
 8007f84:	220a      	movs	r2, #10
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fc5e 	bl	8008848 <__multadd>
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	e7f1      	b.n	8007f74 <_dtoa_r+0xb04>
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	9d01      	ldr	r5, [sp, #4]
 8007f96:	ee18 0a10 	vmov	r0, s16
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	f7ff f9dc 	bl	8007358 <quorem>
 8007fa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	f805 ab01 	strb.w	sl, [r5], #1
 8007faa:	1aea      	subs	r2, r5, r3
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	dd09      	ble.n	8007fc6 <_dtoa_r+0xb56>
 8007fb2:	ee18 1a10 	vmov	r1, s16
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	220a      	movs	r2, #10
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fc44 	bl	8008848 <__multadd>
 8007fc0:	ee08 0a10 	vmov	s16, r0
 8007fc4:	e7e7      	b.n	8007f96 <_dtoa_r+0xb26>
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bfc8      	it	gt
 8007fcc:	461d      	movgt	r5, r3
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	bfd8      	it	le
 8007fd2:	2501      	movle	r5, #1
 8007fd4:	441d      	add	r5, r3
 8007fd6:	f04f 0800 	mov.w	r8, #0
 8007fda:	ee18 1a10 	vmov	r1, s16
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fe2b 	bl	8008c3c <__lshift>
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	ee08 0a10 	vmov	s16, r0
 8007fec:	f000 fe96 	bl	8008d1c <__mcmp>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	dc91      	bgt.n	8007f18 <_dtoa_r+0xaa8>
 8007ff4:	d102      	bne.n	8007ffc <_dtoa_r+0xb8c>
 8007ff6:	f01a 0f01 	tst.w	sl, #1
 8007ffa:	d18d      	bne.n	8007f18 <_dtoa_r+0xaa8>
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	461d      	mov	r5, r3
 8008000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008004:	2a30      	cmp	r2, #48	; 0x30
 8008006:	d0fa      	beq.n	8007ffe <_dtoa_r+0xb8e>
 8008008:	e6d7      	b.n	8007dba <_dtoa_r+0x94a>
 800800a:	9a01      	ldr	r2, [sp, #4]
 800800c:	429a      	cmp	r2, r3
 800800e:	d184      	bne.n	8007f1a <_dtoa_r+0xaaa>
 8008010:	9b00      	ldr	r3, [sp, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	2331      	movs	r3, #49	; 0x31
 8008018:	7013      	strb	r3, [r2, #0]
 800801a:	e6ce      	b.n	8007dba <_dtoa_r+0x94a>
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <_dtoa_r+0xbd4>)
 800801e:	f7ff ba95 	b.w	800754c <_dtoa_r+0xdc>
 8008022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008024:	2b00      	cmp	r3, #0
 8008026:	f47f aa6e 	bne.w	8007506 <_dtoa_r+0x96>
 800802a:	4b07      	ldr	r3, [pc, #28]	; (8008048 <_dtoa_r+0xbd8>)
 800802c:	f7ff ba8e 	b.w	800754c <_dtoa_r+0xdc>
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	dcae      	bgt.n	8007f94 <_dtoa_r+0xb24>
 8008036:	9b06      	ldr	r3, [sp, #24]
 8008038:	2b02      	cmp	r3, #2
 800803a:	f73f aea8 	bgt.w	8007d8e <_dtoa_r+0x91e>
 800803e:	e7a9      	b.n	8007f94 <_dtoa_r+0xb24>
 8008040:	0800b488 	.word	0x0800b488
 8008044:	0800b288 	.word	0x0800b288
 8008048:	0800b409 	.word	0x0800b409

0800804c <rshift>:
 800804c:	6903      	ldr	r3, [r0, #16]
 800804e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008056:	ea4f 1261 	mov.w	r2, r1, asr #5
 800805a:	f100 0414 	add.w	r4, r0, #20
 800805e:	dd45      	ble.n	80080ec <rshift+0xa0>
 8008060:	f011 011f 	ands.w	r1, r1, #31
 8008064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800806c:	d10c      	bne.n	8008088 <rshift+0x3c>
 800806e:	f100 0710 	add.w	r7, r0, #16
 8008072:	4629      	mov	r1, r5
 8008074:	42b1      	cmp	r1, r6
 8008076:	d334      	bcc.n	80080e2 <rshift+0x96>
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	1eea      	subs	r2, r5, #3
 800807e:	4296      	cmp	r6, r2
 8008080:	bf38      	it	cc
 8008082:	2300      	movcc	r3, #0
 8008084:	4423      	add	r3, r4
 8008086:	e015      	b.n	80080b4 <rshift+0x68>
 8008088:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800808c:	f1c1 0820 	rsb	r8, r1, #32
 8008090:	40cf      	lsrs	r7, r1
 8008092:	f105 0e04 	add.w	lr, r5, #4
 8008096:	46a1      	mov	r9, r4
 8008098:	4576      	cmp	r6, lr
 800809a:	46f4      	mov	ip, lr
 800809c:	d815      	bhi.n	80080ca <rshift+0x7e>
 800809e:	1a9a      	subs	r2, r3, r2
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	3a04      	subs	r2, #4
 80080a4:	3501      	adds	r5, #1
 80080a6:	42ae      	cmp	r6, r5
 80080a8:	bf38      	it	cc
 80080aa:	2200      	movcc	r2, #0
 80080ac:	18a3      	adds	r3, r4, r2
 80080ae:	50a7      	str	r7, [r4, r2]
 80080b0:	b107      	cbz	r7, 80080b4 <rshift+0x68>
 80080b2:	3304      	adds	r3, #4
 80080b4:	1b1a      	subs	r2, r3, r4
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080bc:	bf08      	it	eq
 80080be:	2300      	moveq	r3, #0
 80080c0:	6102      	str	r2, [r0, #16]
 80080c2:	bf08      	it	eq
 80080c4:	6143      	streq	r3, [r0, #20]
 80080c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ca:	f8dc c000 	ldr.w	ip, [ip]
 80080ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80080d2:	ea4c 0707 	orr.w	r7, ip, r7
 80080d6:	f849 7b04 	str.w	r7, [r9], #4
 80080da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080de:	40cf      	lsrs	r7, r1
 80080e0:	e7da      	b.n	8008098 <rshift+0x4c>
 80080e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80080e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80080ea:	e7c3      	b.n	8008074 <rshift+0x28>
 80080ec:	4623      	mov	r3, r4
 80080ee:	e7e1      	b.n	80080b4 <rshift+0x68>

080080f0 <__hexdig_fun>:
 80080f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080f4:	2b09      	cmp	r3, #9
 80080f6:	d802      	bhi.n	80080fe <__hexdig_fun+0xe>
 80080f8:	3820      	subs	r0, #32
 80080fa:	b2c0      	uxtb	r0, r0
 80080fc:	4770      	bx	lr
 80080fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008102:	2b05      	cmp	r3, #5
 8008104:	d801      	bhi.n	800810a <__hexdig_fun+0x1a>
 8008106:	3847      	subs	r0, #71	; 0x47
 8008108:	e7f7      	b.n	80080fa <__hexdig_fun+0xa>
 800810a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800810e:	2b05      	cmp	r3, #5
 8008110:	d801      	bhi.n	8008116 <__hexdig_fun+0x26>
 8008112:	3827      	subs	r0, #39	; 0x27
 8008114:	e7f1      	b.n	80080fa <__hexdig_fun+0xa>
 8008116:	2000      	movs	r0, #0
 8008118:	4770      	bx	lr
	...

0800811c <__gethex>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	ed2d 8b02 	vpush	{d8}
 8008124:	b089      	sub	sp, #36	; 0x24
 8008126:	ee08 0a10 	vmov	s16, r0
 800812a:	9304      	str	r3, [sp, #16]
 800812c:	4bb4      	ldr	r3, [pc, #720]	; (8008400 <__gethex+0x2e4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	4618      	mov	r0, r3
 8008134:	468b      	mov	fp, r1
 8008136:	4690      	mov	r8, r2
 8008138:	f7f8 f852 	bl	80001e0 <strlen>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	f8db 2000 	ldr.w	r2, [fp]
 8008142:	4403      	add	r3, r0
 8008144:	4682      	mov	sl, r0
 8008146:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	1c93      	adds	r3, r2, #2
 800814e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008152:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008156:	32fe      	adds	r2, #254	; 0xfe
 8008158:	18d1      	adds	r1, r2, r3
 800815a:	461f      	mov	r7, r3
 800815c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008160:	9100      	str	r1, [sp, #0]
 8008162:	2830      	cmp	r0, #48	; 0x30
 8008164:	d0f8      	beq.n	8008158 <__gethex+0x3c>
 8008166:	f7ff ffc3 	bl	80080f0 <__hexdig_fun>
 800816a:	4604      	mov	r4, r0
 800816c:	2800      	cmp	r0, #0
 800816e:	d13a      	bne.n	80081e6 <__gethex+0xca>
 8008170:	9901      	ldr	r1, [sp, #4]
 8008172:	4652      	mov	r2, sl
 8008174:	4638      	mov	r0, r7
 8008176:	f001 fa33 	bl	80095e0 <strncmp>
 800817a:	4605      	mov	r5, r0
 800817c:	2800      	cmp	r0, #0
 800817e:	d168      	bne.n	8008252 <__gethex+0x136>
 8008180:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008184:	eb07 060a 	add.w	r6, r7, sl
 8008188:	f7ff ffb2 	bl	80080f0 <__hexdig_fun>
 800818c:	2800      	cmp	r0, #0
 800818e:	d062      	beq.n	8008256 <__gethex+0x13a>
 8008190:	4633      	mov	r3, r6
 8008192:	7818      	ldrb	r0, [r3, #0]
 8008194:	2830      	cmp	r0, #48	; 0x30
 8008196:	461f      	mov	r7, r3
 8008198:	f103 0301 	add.w	r3, r3, #1
 800819c:	d0f9      	beq.n	8008192 <__gethex+0x76>
 800819e:	f7ff ffa7 	bl	80080f0 <__hexdig_fun>
 80081a2:	2301      	movs	r3, #1
 80081a4:	fab0 f480 	clz	r4, r0
 80081a8:	0964      	lsrs	r4, r4, #5
 80081aa:	4635      	mov	r5, r6
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	463a      	mov	r2, r7
 80081b0:	4616      	mov	r6, r2
 80081b2:	3201      	adds	r2, #1
 80081b4:	7830      	ldrb	r0, [r6, #0]
 80081b6:	f7ff ff9b 	bl	80080f0 <__hexdig_fun>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d1f8      	bne.n	80081b0 <__gethex+0x94>
 80081be:	9901      	ldr	r1, [sp, #4]
 80081c0:	4652      	mov	r2, sl
 80081c2:	4630      	mov	r0, r6
 80081c4:	f001 fa0c 	bl	80095e0 <strncmp>
 80081c8:	b980      	cbnz	r0, 80081ec <__gethex+0xd0>
 80081ca:	b94d      	cbnz	r5, 80081e0 <__gethex+0xc4>
 80081cc:	eb06 050a 	add.w	r5, r6, sl
 80081d0:	462a      	mov	r2, r5
 80081d2:	4616      	mov	r6, r2
 80081d4:	3201      	adds	r2, #1
 80081d6:	7830      	ldrb	r0, [r6, #0]
 80081d8:	f7ff ff8a 	bl	80080f0 <__hexdig_fun>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1f8      	bne.n	80081d2 <__gethex+0xb6>
 80081e0:	1bad      	subs	r5, r5, r6
 80081e2:	00ad      	lsls	r5, r5, #2
 80081e4:	e004      	b.n	80081f0 <__gethex+0xd4>
 80081e6:	2400      	movs	r4, #0
 80081e8:	4625      	mov	r5, r4
 80081ea:	e7e0      	b.n	80081ae <__gethex+0x92>
 80081ec:	2d00      	cmp	r5, #0
 80081ee:	d1f7      	bne.n	80081e0 <__gethex+0xc4>
 80081f0:	7833      	ldrb	r3, [r6, #0]
 80081f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081f6:	2b50      	cmp	r3, #80	; 0x50
 80081f8:	d13b      	bne.n	8008272 <__gethex+0x156>
 80081fa:	7873      	ldrb	r3, [r6, #1]
 80081fc:	2b2b      	cmp	r3, #43	; 0x2b
 80081fe:	d02c      	beq.n	800825a <__gethex+0x13e>
 8008200:	2b2d      	cmp	r3, #45	; 0x2d
 8008202:	d02e      	beq.n	8008262 <__gethex+0x146>
 8008204:	1c71      	adds	r1, r6, #1
 8008206:	f04f 0900 	mov.w	r9, #0
 800820a:	7808      	ldrb	r0, [r1, #0]
 800820c:	f7ff ff70 	bl	80080f0 <__hexdig_fun>
 8008210:	1e43      	subs	r3, r0, #1
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b18      	cmp	r3, #24
 8008216:	d82c      	bhi.n	8008272 <__gethex+0x156>
 8008218:	f1a0 0210 	sub.w	r2, r0, #16
 800821c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008220:	f7ff ff66 	bl	80080f0 <__hexdig_fun>
 8008224:	1e43      	subs	r3, r0, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b18      	cmp	r3, #24
 800822a:	d91d      	bls.n	8008268 <__gethex+0x14c>
 800822c:	f1b9 0f00 	cmp.w	r9, #0
 8008230:	d000      	beq.n	8008234 <__gethex+0x118>
 8008232:	4252      	negs	r2, r2
 8008234:	4415      	add	r5, r2
 8008236:	f8cb 1000 	str.w	r1, [fp]
 800823a:	b1e4      	cbz	r4, 8008276 <__gethex+0x15a>
 800823c:	9b00      	ldr	r3, [sp, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	bf14      	ite	ne
 8008242:	2700      	movne	r7, #0
 8008244:	2706      	moveq	r7, #6
 8008246:	4638      	mov	r0, r7
 8008248:	b009      	add	sp, #36	; 0x24
 800824a:	ecbd 8b02 	vpop	{d8}
 800824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	463e      	mov	r6, r7
 8008254:	4625      	mov	r5, r4
 8008256:	2401      	movs	r4, #1
 8008258:	e7ca      	b.n	80081f0 <__gethex+0xd4>
 800825a:	f04f 0900 	mov.w	r9, #0
 800825e:	1cb1      	adds	r1, r6, #2
 8008260:	e7d3      	b.n	800820a <__gethex+0xee>
 8008262:	f04f 0901 	mov.w	r9, #1
 8008266:	e7fa      	b.n	800825e <__gethex+0x142>
 8008268:	230a      	movs	r3, #10
 800826a:	fb03 0202 	mla	r2, r3, r2, r0
 800826e:	3a10      	subs	r2, #16
 8008270:	e7d4      	b.n	800821c <__gethex+0x100>
 8008272:	4631      	mov	r1, r6
 8008274:	e7df      	b.n	8008236 <__gethex+0x11a>
 8008276:	1bf3      	subs	r3, r6, r7
 8008278:	3b01      	subs	r3, #1
 800827a:	4621      	mov	r1, r4
 800827c:	2b07      	cmp	r3, #7
 800827e:	dc0b      	bgt.n	8008298 <__gethex+0x17c>
 8008280:	ee18 0a10 	vmov	r0, s16
 8008284:	f000 fa7e 	bl	8008784 <_Balloc>
 8008288:	4604      	mov	r4, r0
 800828a:	b940      	cbnz	r0, 800829e <__gethex+0x182>
 800828c:	4b5d      	ldr	r3, [pc, #372]	; (8008404 <__gethex+0x2e8>)
 800828e:	4602      	mov	r2, r0
 8008290:	21de      	movs	r1, #222	; 0xde
 8008292:	485d      	ldr	r0, [pc, #372]	; (8008408 <__gethex+0x2ec>)
 8008294:	f001 f9c6 	bl	8009624 <__assert_func>
 8008298:	3101      	adds	r1, #1
 800829a:	105b      	asrs	r3, r3, #1
 800829c:	e7ee      	b.n	800827c <__gethex+0x160>
 800829e:	f100 0914 	add.w	r9, r0, #20
 80082a2:	f04f 0b00 	mov.w	fp, #0
 80082a6:	f1ca 0301 	rsb	r3, sl, #1
 80082aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80082ae:	f8cd b000 	str.w	fp, [sp]
 80082b2:	9306      	str	r3, [sp, #24]
 80082b4:	42b7      	cmp	r7, r6
 80082b6:	d340      	bcc.n	800833a <__gethex+0x21e>
 80082b8:	9802      	ldr	r0, [sp, #8]
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	f840 3b04 	str.w	r3, [r0], #4
 80082c0:	eba0 0009 	sub.w	r0, r0, r9
 80082c4:	1080      	asrs	r0, r0, #2
 80082c6:	0146      	lsls	r6, r0, #5
 80082c8:	6120      	str	r0, [r4, #16]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fb4c 	bl	8008968 <__hi0bits>
 80082d0:	1a30      	subs	r0, r6, r0
 80082d2:	f8d8 6000 	ldr.w	r6, [r8]
 80082d6:	42b0      	cmp	r0, r6
 80082d8:	dd63      	ble.n	80083a2 <__gethex+0x286>
 80082da:	1b87      	subs	r7, r0, r6
 80082dc:	4639      	mov	r1, r7
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fef0 	bl	80090c4 <__any_on>
 80082e4:	4682      	mov	sl, r0
 80082e6:	b1a8      	cbz	r0, 8008314 <__gethex+0x1f8>
 80082e8:	1e7b      	subs	r3, r7, #1
 80082ea:	1159      	asrs	r1, r3, #5
 80082ec:	f003 021f 	and.w	r2, r3, #31
 80082f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80082f4:	f04f 0a01 	mov.w	sl, #1
 80082f8:	fa0a f202 	lsl.w	r2, sl, r2
 80082fc:	420a      	tst	r2, r1
 80082fe:	d009      	beq.n	8008314 <__gethex+0x1f8>
 8008300:	4553      	cmp	r3, sl
 8008302:	dd05      	ble.n	8008310 <__gethex+0x1f4>
 8008304:	1eb9      	subs	r1, r7, #2
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fedc 	bl	80090c4 <__any_on>
 800830c:	2800      	cmp	r0, #0
 800830e:	d145      	bne.n	800839c <__gethex+0x280>
 8008310:	f04f 0a02 	mov.w	sl, #2
 8008314:	4639      	mov	r1, r7
 8008316:	4620      	mov	r0, r4
 8008318:	f7ff fe98 	bl	800804c <rshift>
 800831c:	443d      	add	r5, r7
 800831e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008322:	42ab      	cmp	r3, r5
 8008324:	da4c      	bge.n	80083c0 <__gethex+0x2a4>
 8008326:	ee18 0a10 	vmov	r0, s16
 800832a:	4621      	mov	r1, r4
 800832c:	f000 fa6a 	bl	8008804 <_Bfree>
 8008330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008332:	2300      	movs	r3, #0
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	27a3      	movs	r7, #163	; 0xa3
 8008338:	e785      	b.n	8008246 <__gethex+0x12a>
 800833a:	1e73      	subs	r3, r6, #1
 800833c:	9a05      	ldr	r2, [sp, #20]
 800833e:	9303      	str	r3, [sp, #12]
 8008340:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008344:	4293      	cmp	r3, r2
 8008346:	d019      	beq.n	800837c <__gethex+0x260>
 8008348:	f1bb 0f20 	cmp.w	fp, #32
 800834c:	d107      	bne.n	800835e <__gethex+0x242>
 800834e:	9b02      	ldr	r3, [sp, #8]
 8008350:	9a00      	ldr	r2, [sp, #0]
 8008352:	f843 2b04 	str.w	r2, [r3], #4
 8008356:	9302      	str	r3, [sp, #8]
 8008358:	2300      	movs	r3, #0
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	469b      	mov	fp, r3
 800835e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008362:	f7ff fec5 	bl	80080f0 <__hexdig_fun>
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	f000 000f 	and.w	r0, r0, #15
 800836c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008370:	4303      	orrs	r3, r0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	f10b 0b04 	add.w	fp, fp, #4
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	e00d      	b.n	8008398 <__gethex+0x27c>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	9a06      	ldr	r2, [sp, #24]
 8008380:	4413      	add	r3, r2
 8008382:	42bb      	cmp	r3, r7
 8008384:	d3e0      	bcc.n	8008348 <__gethex+0x22c>
 8008386:	4618      	mov	r0, r3
 8008388:	9901      	ldr	r1, [sp, #4]
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	4652      	mov	r2, sl
 800838e:	f001 f927 	bl	80095e0 <strncmp>
 8008392:	9b07      	ldr	r3, [sp, #28]
 8008394:	2800      	cmp	r0, #0
 8008396:	d1d7      	bne.n	8008348 <__gethex+0x22c>
 8008398:	461e      	mov	r6, r3
 800839a:	e78b      	b.n	80082b4 <__gethex+0x198>
 800839c:	f04f 0a03 	mov.w	sl, #3
 80083a0:	e7b8      	b.n	8008314 <__gethex+0x1f8>
 80083a2:	da0a      	bge.n	80083ba <__gethex+0x29e>
 80083a4:	1a37      	subs	r7, r6, r0
 80083a6:	4621      	mov	r1, r4
 80083a8:	ee18 0a10 	vmov	r0, s16
 80083ac:	463a      	mov	r2, r7
 80083ae:	f000 fc45 	bl	8008c3c <__lshift>
 80083b2:	1bed      	subs	r5, r5, r7
 80083b4:	4604      	mov	r4, r0
 80083b6:	f100 0914 	add.w	r9, r0, #20
 80083ba:	f04f 0a00 	mov.w	sl, #0
 80083be:	e7ae      	b.n	800831e <__gethex+0x202>
 80083c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80083c4:	42a8      	cmp	r0, r5
 80083c6:	dd72      	ble.n	80084ae <__gethex+0x392>
 80083c8:	1b45      	subs	r5, r0, r5
 80083ca:	42ae      	cmp	r6, r5
 80083cc:	dc36      	bgt.n	800843c <__gethex+0x320>
 80083ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d02a      	beq.n	800842c <__gethex+0x310>
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d02c      	beq.n	8008434 <__gethex+0x318>
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d11c      	bne.n	8008418 <__gethex+0x2fc>
 80083de:	42ae      	cmp	r6, r5
 80083e0:	d11a      	bne.n	8008418 <__gethex+0x2fc>
 80083e2:	2e01      	cmp	r6, #1
 80083e4:	d112      	bne.n	800840c <__gethex+0x2f0>
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	2301      	movs	r3, #1
 80083f0:	6123      	str	r3, [r4, #16]
 80083f2:	f8c9 3000 	str.w	r3, [r9]
 80083f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083f8:	2762      	movs	r7, #98	; 0x62
 80083fa:	601c      	str	r4, [r3, #0]
 80083fc:	e723      	b.n	8008246 <__gethex+0x12a>
 80083fe:	bf00      	nop
 8008400:	0800b500 	.word	0x0800b500
 8008404:	0800b488 	.word	0x0800b488
 8008408:	0800b499 	.word	0x0800b499
 800840c:	1e71      	subs	r1, r6, #1
 800840e:	4620      	mov	r0, r4
 8008410:	f000 fe58 	bl	80090c4 <__any_on>
 8008414:	2800      	cmp	r0, #0
 8008416:	d1e6      	bne.n	80083e6 <__gethex+0x2ca>
 8008418:	ee18 0a10 	vmov	r0, s16
 800841c:	4621      	mov	r1, r4
 800841e:	f000 f9f1 	bl	8008804 <_Bfree>
 8008422:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008424:	2300      	movs	r3, #0
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	2750      	movs	r7, #80	; 0x50
 800842a:	e70c      	b.n	8008246 <__gethex+0x12a>
 800842c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f2      	bne.n	8008418 <__gethex+0x2fc>
 8008432:	e7d8      	b.n	80083e6 <__gethex+0x2ca>
 8008434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1d5      	bne.n	80083e6 <__gethex+0x2ca>
 800843a:	e7ed      	b.n	8008418 <__gethex+0x2fc>
 800843c:	1e6f      	subs	r7, r5, #1
 800843e:	f1ba 0f00 	cmp.w	sl, #0
 8008442:	d131      	bne.n	80084a8 <__gethex+0x38c>
 8008444:	b127      	cbz	r7, 8008450 <__gethex+0x334>
 8008446:	4639      	mov	r1, r7
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fe3b 	bl	80090c4 <__any_on>
 800844e:	4682      	mov	sl, r0
 8008450:	117b      	asrs	r3, r7, #5
 8008452:	2101      	movs	r1, #1
 8008454:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008458:	f007 071f 	and.w	r7, r7, #31
 800845c:	fa01 f707 	lsl.w	r7, r1, r7
 8008460:	421f      	tst	r7, r3
 8008462:	4629      	mov	r1, r5
 8008464:	4620      	mov	r0, r4
 8008466:	bf18      	it	ne
 8008468:	f04a 0a02 	orrne.w	sl, sl, #2
 800846c:	1b76      	subs	r6, r6, r5
 800846e:	f7ff fded 	bl	800804c <rshift>
 8008472:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008476:	2702      	movs	r7, #2
 8008478:	f1ba 0f00 	cmp.w	sl, #0
 800847c:	d048      	beq.n	8008510 <__gethex+0x3f4>
 800847e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d015      	beq.n	80084b2 <__gethex+0x396>
 8008486:	2b03      	cmp	r3, #3
 8008488:	d017      	beq.n	80084ba <__gethex+0x39e>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d109      	bne.n	80084a2 <__gethex+0x386>
 800848e:	f01a 0f02 	tst.w	sl, #2
 8008492:	d006      	beq.n	80084a2 <__gethex+0x386>
 8008494:	f8d9 0000 	ldr.w	r0, [r9]
 8008498:	ea4a 0a00 	orr.w	sl, sl, r0
 800849c:	f01a 0f01 	tst.w	sl, #1
 80084a0:	d10e      	bne.n	80084c0 <__gethex+0x3a4>
 80084a2:	f047 0710 	orr.w	r7, r7, #16
 80084a6:	e033      	b.n	8008510 <__gethex+0x3f4>
 80084a8:	f04f 0a01 	mov.w	sl, #1
 80084ac:	e7d0      	b.n	8008450 <__gethex+0x334>
 80084ae:	2701      	movs	r7, #1
 80084b0:	e7e2      	b.n	8008478 <__gethex+0x35c>
 80084b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084b4:	f1c3 0301 	rsb	r3, r3, #1
 80084b8:	9315      	str	r3, [sp, #84]	; 0x54
 80084ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0f0      	beq.n	80084a2 <__gethex+0x386>
 80084c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80084c4:	f104 0314 	add.w	r3, r4, #20
 80084c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80084cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80084d0:	f04f 0c00 	mov.w	ip, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80084de:	d01c      	beq.n	800851a <__gethex+0x3fe>
 80084e0:	3201      	adds	r2, #1
 80084e2:	6002      	str	r2, [r0, #0]
 80084e4:	2f02      	cmp	r7, #2
 80084e6:	f104 0314 	add.w	r3, r4, #20
 80084ea:	d13f      	bne.n	800856c <__gethex+0x450>
 80084ec:	f8d8 2000 	ldr.w	r2, [r8]
 80084f0:	3a01      	subs	r2, #1
 80084f2:	42b2      	cmp	r2, r6
 80084f4:	d10a      	bne.n	800850c <__gethex+0x3f0>
 80084f6:	1171      	asrs	r1, r6, #5
 80084f8:	2201      	movs	r2, #1
 80084fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084fe:	f006 061f 	and.w	r6, r6, #31
 8008502:	fa02 f606 	lsl.w	r6, r2, r6
 8008506:	421e      	tst	r6, r3
 8008508:	bf18      	it	ne
 800850a:	4617      	movne	r7, r2
 800850c:	f047 0720 	orr.w	r7, r7, #32
 8008510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008512:	601c      	str	r4, [r3, #0]
 8008514:	9b04      	ldr	r3, [sp, #16]
 8008516:	601d      	str	r5, [r3, #0]
 8008518:	e695      	b.n	8008246 <__gethex+0x12a>
 800851a:	4299      	cmp	r1, r3
 800851c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008520:	d8d8      	bhi.n	80084d4 <__gethex+0x3b8>
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	459b      	cmp	fp, r3
 8008526:	db19      	blt.n	800855c <__gethex+0x440>
 8008528:	6861      	ldr	r1, [r4, #4]
 800852a:	ee18 0a10 	vmov	r0, s16
 800852e:	3101      	adds	r1, #1
 8008530:	f000 f928 	bl	8008784 <_Balloc>
 8008534:	4681      	mov	r9, r0
 8008536:	b918      	cbnz	r0, 8008540 <__gethex+0x424>
 8008538:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <__gethex+0x488>)
 800853a:	4602      	mov	r2, r0
 800853c:	2184      	movs	r1, #132	; 0x84
 800853e:	e6a8      	b.n	8008292 <__gethex+0x176>
 8008540:	6922      	ldr	r2, [r4, #16]
 8008542:	3202      	adds	r2, #2
 8008544:	f104 010c 	add.w	r1, r4, #12
 8008548:	0092      	lsls	r2, r2, #2
 800854a:	300c      	adds	r0, #12
 800854c:	f000 f90c 	bl	8008768 <memcpy>
 8008550:	4621      	mov	r1, r4
 8008552:	ee18 0a10 	vmov	r0, s16
 8008556:	f000 f955 	bl	8008804 <_Bfree>
 800855a:	464c      	mov	r4, r9
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008564:	6122      	str	r2, [r4, #16]
 8008566:	2201      	movs	r2, #1
 8008568:	615a      	str	r2, [r3, #20]
 800856a:	e7bb      	b.n	80084e4 <__gethex+0x3c8>
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	455a      	cmp	r2, fp
 8008570:	dd0b      	ble.n	800858a <__gethex+0x46e>
 8008572:	2101      	movs	r1, #1
 8008574:	4620      	mov	r0, r4
 8008576:	f7ff fd69 	bl	800804c <rshift>
 800857a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800857e:	3501      	adds	r5, #1
 8008580:	42ab      	cmp	r3, r5
 8008582:	f6ff aed0 	blt.w	8008326 <__gethex+0x20a>
 8008586:	2701      	movs	r7, #1
 8008588:	e7c0      	b.n	800850c <__gethex+0x3f0>
 800858a:	f016 061f 	ands.w	r6, r6, #31
 800858e:	d0fa      	beq.n	8008586 <__gethex+0x46a>
 8008590:	4453      	add	r3, sl
 8008592:	f1c6 0620 	rsb	r6, r6, #32
 8008596:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800859a:	f000 f9e5 	bl	8008968 <__hi0bits>
 800859e:	42b0      	cmp	r0, r6
 80085a0:	dbe7      	blt.n	8008572 <__gethex+0x456>
 80085a2:	e7f0      	b.n	8008586 <__gethex+0x46a>
 80085a4:	0800b488 	.word	0x0800b488

080085a8 <L_shift>:
 80085a8:	f1c2 0208 	rsb	r2, r2, #8
 80085ac:	0092      	lsls	r2, r2, #2
 80085ae:	b570      	push	{r4, r5, r6, lr}
 80085b0:	f1c2 0620 	rsb	r6, r2, #32
 80085b4:	6843      	ldr	r3, [r0, #4]
 80085b6:	6804      	ldr	r4, [r0, #0]
 80085b8:	fa03 f506 	lsl.w	r5, r3, r6
 80085bc:	432c      	orrs	r4, r5
 80085be:	40d3      	lsrs	r3, r2
 80085c0:	6004      	str	r4, [r0, #0]
 80085c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80085c6:	4288      	cmp	r0, r1
 80085c8:	d3f4      	bcc.n	80085b4 <L_shift+0xc>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}

080085cc <__match>:
 80085cc:	b530      	push	{r4, r5, lr}
 80085ce:	6803      	ldr	r3, [r0, #0]
 80085d0:	3301      	adds	r3, #1
 80085d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d6:	b914      	cbnz	r4, 80085de <__match+0x12>
 80085d8:	6003      	str	r3, [r0, #0]
 80085da:	2001      	movs	r0, #1
 80085dc:	bd30      	pop	{r4, r5, pc}
 80085de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80085e6:	2d19      	cmp	r5, #25
 80085e8:	bf98      	it	ls
 80085ea:	3220      	addls	r2, #32
 80085ec:	42a2      	cmp	r2, r4
 80085ee:	d0f0      	beq.n	80085d2 <__match+0x6>
 80085f0:	2000      	movs	r0, #0
 80085f2:	e7f3      	b.n	80085dc <__match+0x10>

080085f4 <__hexnan>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	680b      	ldr	r3, [r1, #0]
 80085fa:	115e      	asrs	r6, r3, #5
 80085fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008600:	f013 031f 	ands.w	r3, r3, #31
 8008604:	b087      	sub	sp, #28
 8008606:	bf18      	it	ne
 8008608:	3604      	addne	r6, #4
 800860a:	2500      	movs	r5, #0
 800860c:	1f37      	subs	r7, r6, #4
 800860e:	4690      	mov	r8, r2
 8008610:	6802      	ldr	r2, [r0, #0]
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	4682      	mov	sl, r0
 8008616:	f846 5c04 	str.w	r5, [r6, #-4]
 800861a:	46b9      	mov	r9, r7
 800861c:	463c      	mov	r4, r7
 800861e:	9502      	str	r5, [sp, #8]
 8008620:	46ab      	mov	fp, r5
 8008622:	7851      	ldrb	r1, [r2, #1]
 8008624:	1c53      	adds	r3, r2, #1
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	b341      	cbz	r1, 800867c <__hexnan+0x88>
 800862a:	4608      	mov	r0, r1
 800862c:	9205      	str	r2, [sp, #20]
 800862e:	9104      	str	r1, [sp, #16]
 8008630:	f7ff fd5e 	bl	80080f0 <__hexdig_fun>
 8008634:	2800      	cmp	r0, #0
 8008636:	d14f      	bne.n	80086d8 <__hexnan+0xe4>
 8008638:	9904      	ldr	r1, [sp, #16]
 800863a:	9a05      	ldr	r2, [sp, #20]
 800863c:	2920      	cmp	r1, #32
 800863e:	d818      	bhi.n	8008672 <__hexnan+0x7e>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	459b      	cmp	fp, r3
 8008644:	dd13      	ble.n	800866e <__hexnan+0x7a>
 8008646:	454c      	cmp	r4, r9
 8008648:	d206      	bcs.n	8008658 <__hexnan+0x64>
 800864a:	2d07      	cmp	r5, #7
 800864c:	dc04      	bgt.n	8008658 <__hexnan+0x64>
 800864e:	462a      	mov	r2, r5
 8008650:	4649      	mov	r1, r9
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff ffa8 	bl	80085a8 <L_shift>
 8008658:	4544      	cmp	r4, r8
 800865a:	d950      	bls.n	80086fe <__hexnan+0x10a>
 800865c:	2300      	movs	r3, #0
 800865e:	f1a4 0904 	sub.w	r9, r4, #4
 8008662:	f844 3c04 	str.w	r3, [r4, #-4]
 8008666:	f8cd b008 	str.w	fp, [sp, #8]
 800866a:	464c      	mov	r4, r9
 800866c:	461d      	mov	r5, r3
 800866e:	9a03      	ldr	r2, [sp, #12]
 8008670:	e7d7      	b.n	8008622 <__hexnan+0x2e>
 8008672:	2929      	cmp	r1, #41	; 0x29
 8008674:	d156      	bne.n	8008724 <__hexnan+0x130>
 8008676:	3202      	adds	r2, #2
 8008678:	f8ca 2000 	str.w	r2, [sl]
 800867c:	f1bb 0f00 	cmp.w	fp, #0
 8008680:	d050      	beq.n	8008724 <__hexnan+0x130>
 8008682:	454c      	cmp	r4, r9
 8008684:	d206      	bcs.n	8008694 <__hexnan+0xa0>
 8008686:	2d07      	cmp	r5, #7
 8008688:	dc04      	bgt.n	8008694 <__hexnan+0xa0>
 800868a:	462a      	mov	r2, r5
 800868c:	4649      	mov	r1, r9
 800868e:	4620      	mov	r0, r4
 8008690:	f7ff ff8a 	bl	80085a8 <L_shift>
 8008694:	4544      	cmp	r4, r8
 8008696:	d934      	bls.n	8008702 <__hexnan+0x10e>
 8008698:	f1a8 0204 	sub.w	r2, r8, #4
 800869c:	4623      	mov	r3, r4
 800869e:	f853 1b04 	ldr.w	r1, [r3], #4
 80086a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80086a6:	429f      	cmp	r7, r3
 80086a8:	d2f9      	bcs.n	800869e <__hexnan+0xaa>
 80086aa:	1b3b      	subs	r3, r7, r4
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	3304      	adds	r3, #4
 80086b2:	3401      	adds	r4, #1
 80086b4:	3e03      	subs	r6, #3
 80086b6:	42b4      	cmp	r4, r6
 80086b8:	bf88      	it	hi
 80086ba:	2304      	movhi	r3, #4
 80086bc:	4443      	add	r3, r8
 80086be:	2200      	movs	r2, #0
 80086c0:	f843 2b04 	str.w	r2, [r3], #4
 80086c4:	429f      	cmp	r7, r3
 80086c6:	d2fb      	bcs.n	80086c0 <__hexnan+0xcc>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	b91b      	cbnz	r3, 80086d4 <__hexnan+0xe0>
 80086cc:	4547      	cmp	r7, r8
 80086ce:	d127      	bne.n	8008720 <__hexnan+0x12c>
 80086d0:	2301      	movs	r3, #1
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	2005      	movs	r0, #5
 80086d6:	e026      	b.n	8008726 <__hexnan+0x132>
 80086d8:	3501      	adds	r5, #1
 80086da:	2d08      	cmp	r5, #8
 80086dc:	f10b 0b01 	add.w	fp, fp, #1
 80086e0:	dd06      	ble.n	80086f0 <__hexnan+0xfc>
 80086e2:	4544      	cmp	r4, r8
 80086e4:	d9c3      	bls.n	800866e <__hexnan+0x7a>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80086ec:	2501      	movs	r5, #1
 80086ee:	3c04      	subs	r4, #4
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	f000 000f 	and.w	r0, r0, #15
 80086f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	e7b7      	b.n	800866e <__hexnan+0x7a>
 80086fe:	2508      	movs	r5, #8
 8008700:	e7b5      	b.n	800866e <__hexnan+0x7a>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0df      	beq.n	80086c8 <__hexnan+0xd4>
 8008708:	f04f 32ff 	mov.w	r2, #4294967295
 800870c:	f1c3 0320 	rsb	r3, r3, #32
 8008710:	fa22 f303 	lsr.w	r3, r2, r3
 8008714:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008718:	401a      	ands	r2, r3
 800871a:	f846 2c04 	str.w	r2, [r6, #-4]
 800871e:	e7d3      	b.n	80086c8 <__hexnan+0xd4>
 8008720:	3f04      	subs	r7, #4
 8008722:	e7d1      	b.n	80086c8 <__hexnan+0xd4>
 8008724:	2004      	movs	r0, #4
 8008726:	b007      	add	sp, #28
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800872c <_localeconv_r>:
 800872c:	4800      	ldr	r0, [pc, #0]	; (8008730 <_localeconv_r+0x4>)
 800872e:	4770      	bx	lr
 8008730:	2000027c 	.word	0x2000027c

08008734 <malloc>:
 8008734:	4b02      	ldr	r3, [pc, #8]	; (8008740 <malloc+0xc>)
 8008736:	4601      	mov	r1, r0
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	f000 bd67 	b.w	800920c <_malloc_r>
 800873e:	bf00      	nop
 8008740:	20000124 	.word	0x20000124

08008744 <__ascii_mbtowc>:
 8008744:	b082      	sub	sp, #8
 8008746:	b901      	cbnz	r1, 800874a <__ascii_mbtowc+0x6>
 8008748:	a901      	add	r1, sp, #4
 800874a:	b142      	cbz	r2, 800875e <__ascii_mbtowc+0x1a>
 800874c:	b14b      	cbz	r3, 8008762 <__ascii_mbtowc+0x1e>
 800874e:	7813      	ldrb	r3, [r2, #0]
 8008750:	600b      	str	r3, [r1, #0]
 8008752:	7812      	ldrb	r2, [r2, #0]
 8008754:	1e10      	subs	r0, r2, #0
 8008756:	bf18      	it	ne
 8008758:	2001      	movne	r0, #1
 800875a:	b002      	add	sp, #8
 800875c:	4770      	bx	lr
 800875e:	4610      	mov	r0, r2
 8008760:	e7fb      	b.n	800875a <__ascii_mbtowc+0x16>
 8008762:	f06f 0001 	mvn.w	r0, #1
 8008766:	e7f8      	b.n	800875a <__ascii_mbtowc+0x16>

08008768 <memcpy>:
 8008768:	440a      	add	r2, r1
 800876a:	4291      	cmp	r1, r2
 800876c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008770:	d100      	bne.n	8008774 <memcpy+0xc>
 8008772:	4770      	bx	lr
 8008774:	b510      	push	{r4, lr}
 8008776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800877a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800877e:	4291      	cmp	r1, r2
 8008780:	d1f9      	bne.n	8008776 <memcpy+0xe>
 8008782:	bd10      	pop	{r4, pc}

08008784 <_Balloc>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008788:	4604      	mov	r4, r0
 800878a:	460d      	mov	r5, r1
 800878c:	b976      	cbnz	r6, 80087ac <_Balloc+0x28>
 800878e:	2010      	movs	r0, #16
 8008790:	f7ff ffd0 	bl	8008734 <malloc>
 8008794:	4602      	mov	r2, r0
 8008796:	6260      	str	r0, [r4, #36]	; 0x24
 8008798:	b920      	cbnz	r0, 80087a4 <_Balloc+0x20>
 800879a:	4b18      	ldr	r3, [pc, #96]	; (80087fc <_Balloc+0x78>)
 800879c:	4818      	ldr	r0, [pc, #96]	; (8008800 <_Balloc+0x7c>)
 800879e:	2166      	movs	r1, #102	; 0x66
 80087a0:	f000 ff40 	bl	8009624 <__assert_func>
 80087a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087a8:	6006      	str	r6, [r0, #0]
 80087aa:	60c6      	str	r6, [r0, #12]
 80087ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087ae:	68f3      	ldr	r3, [r6, #12]
 80087b0:	b183      	cbz	r3, 80087d4 <_Balloc+0x50>
 80087b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ba:	b9b8      	cbnz	r0, 80087ec <_Balloc+0x68>
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f605 	lsl.w	r6, r1, r5
 80087c2:	1d72      	adds	r2, r6, #5
 80087c4:	0092      	lsls	r2, r2, #2
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 fc9d 	bl	8009106 <_calloc_r>
 80087cc:	b160      	cbz	r0, 80087e8 <_Balloc+0x64>
 80087ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087d2:	e00e      	b.n	80087f2 <_Balloc+0x6e>
 80087d4:	2221      	movs	r2, #33	; 0x21
 80087d6:	2104      	movs	r1, #4
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fc94 	bl	8009106 <_calloc_r>
 80087de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e0:	60f0      	str	r0, [r6, #12]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e4      	bne.n	80087b2 <_Balloc+0x2e>
 80087e8:	2000      	movs	r0, #0
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	6802      	ldr	r2, [r0, #0]
 80087ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087f2:	2300      	movs	r3, #0
 80087f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087f8:	e7f7      	b.n	80087ea <_Balloc+0x66>
 80087fa:	bf00      	nop
 80087fc:	0800b416 	.word	0x0800b416
 8008800:	0800b514 	.word	0x0800b514

08008804 <_Bfree>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008808:	4605      	mov	r5, r0
 800880a:	460c      	mov	r4, r1
 800880c:	b976      	cbnz	r6, 800882c <_Bfree+0x28>
 800880e:	2010      	movs	r0, #16
 8008810:	f7ff ff90 	bl	8008734 <malloc>
 8008814:	4602      	mov	r2, r0
 8008816:	6268      	str	r0, [r5, #36]	; 0x24
 8008818:	b920      	cbnz	r0, 8008824 <_Bfree+0x20>
 800881a:	4b09      	ldr	r3, [pc, #36]	; (8008840 <_Bfree+0x3c>)
 800881c:	4809      	ldr	r0, [pc, #36]	; (8008844 <_Bfree+0x40>)
 800881e:	218a      	movs	r1, #138	; 0x8a
 8008820:	f000 ff00 	bl	8009624 <__assert_func>
 8008824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008828:	6006      	str	r6, [r0, #0]
 800882a:	60c6      	str	r6, [r0, #12]
 800882c:	b13c      	cbz	r4, 800883e <_Bfree+0x3a>
 800882e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008830:	6862      	ldr	r2, [r4, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008838:	6021      	str	r1, [r4, #0]
 800883a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	0800b416 	.word	0x0800b416
 8008844:	0800b514 	.word	0x0800b514

08008848 <__multadd>:
 8008848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	690d      	ldr	r5, [r1, #16]
 800884e:	4607      	mov	r7, r0
 8008850:	460c      	mov	r4, r1
 8008852:	461e      	mov	r6, r3
 8008854:	f101 0c14 	add.w	ip, r1, #20
 8008858:	2000      	movs	r0, #0
 800885a:	f8dc 3000 	ldr.w	r3, [ip]
 800885e:	b299      	uxth	r1, r3
 8008860:	fb02 6101 	mla	r1, r2, r1, r6
 8008864:	0c1e      	lsrs	r6, r3, #16
 8008866:	0c0b      	lsrs	r3, r1, #16
 8008868:	fb02 3306 	mla	r3, r2, r6, r3
 800886c:	b289      	uxth	r1, r1
 800886e:	3001      	adds	r0, #1
 8008870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008874:	4285      	cmp	r5, r0
 8008876:	f84c 1b04 	str.w	r1, [ip], #4
 800887a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800887e:	dcec      	bgt.n	800885a <__multadd+0x12>
 8008880:	b30e      	cbz	r6, 80088c6 <__multadd+0x7e>
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	42ab      	cmp	r3, r5
 8008886:	dc19      	bgt.n	80088bc <__multadd+0x74>
 8008888:	6861      	ldr	r1, [r4, #4]
 800888a:	4638      	mov	r0, r7
 800888c:	3101      	adds	r1, #1
 800888e:	f7ff ff79 	bl	8008784 <_Balloc>
 8008892:	4680      	mov	r8, r0
 8008894:	b928      	cbnz	r0, 80088a2 <__multadd+0x5a>
 8008896:	4602      	mov	r2, r0
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <__multadd+0x84>)
 800889a:	480d      	ldr	r0, [pc, #52]	; (80088d0 <__multadd+0x88>)
 800889c:	21b5      	movs	r1, #181	; 0xb5
 800889e:	f000 fec1 	bl	8009624 <__assert_func>
 80088a2:	6922      	ldr	r2, [r4, #16]
 80088a4:	3202      	adds	r2, #2
 80088a6:	f104 010c 	add.w	r1, r4, #12
 80088aa:	0092      	lsls	r2, r2, #2
 80088ac:	300c      	adds	r0, #12
 80088ae:	f7ff ff5b 	bl	8008768 <memcpy>
 80088b2:	4621      	mov	r1, r4
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ffa5 	bl	8008804 <_Bfree>
 80088ba:	4644      	mov	r4, r8
 80088bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088c0:	3501      	adds	r5, #1
 80088c2:	615e      	str	r6, [r3, #20]
 80088c4:	6125      	str	r5, [r4, #16]
 80088c6:	4620      	mov	r0, r4
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088cc:	0800b488 	.word	0x0800b488
 80088d0:	0800b514 	.word	0x0800b514

080088d4 <__s2b>:
 80088d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	4615      	mov	r5, r2
 80088dc:	461f      	mov	r7, r3
 80088de:	2209      	movs	r2, #9
 80088e0:	3308      	adds	r3, #8
 80088e2:	4606      	mov	r6, r0
 80088e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e8:	2100      	movs	r1, #0
 80088ea:	2201      	movs	r2, #1
 80088ec:	429a      	cmp	r2, r3
 80088ee:	db09      	blt.n	8008904 <__s2b+0x30>
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ff47 	bl	8008784 <_Balloc>
 80088f6:	b940      	cbnz	r0, 800890a <__s2b+0x36>
 80088f8:	4602      	mov	r2, r0
 80088fa:	4b19      	ldr	r3, [pc, #100]	; (8008960 <__s2b+0x8c>)
 80088fc:	4819      	ldr	r0, [pc, #100]	; (8008964 <__s2b+0x90>)
 80088fe:	21ce      	movs	r1, #206	; 0xce
 8008900:	f000 fe90 	bl	8009624 <__assert_func>
 8008904:	0052      	lsls	r2, r2, #1
 8008906:	3101      	adds	r1, #1
 8008908:	e7f0      	b.n	80088ec <__s2b+0x18>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	6143      	str	r3, [r0, #20]
 800890e:	2d09      	cmp	r5, #9
 8008910:	f04f 0301 	mov.w	r3, #1
 8008914:	6103      	str	r3, [r0, #16]
 8008916:	dd16      	ble.n	8008946 <__s2b+0x72>
 8008918:	f104 0909 	add.w	r9, r4, #9
 800891c:	46c8      	mov	r8, r9
 800891e:	442c      	add	r4, r5
 8008920:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008924:	4601      	mov	r1, r0
 8008926:	3b30      	subs	r3, #48	; 0x30
 8008928:	220a      	movs	r2, #10
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ff8c 	bl	8008848 <__multadd>
 8008930:	45a0      	cmp	r8, r4
 8008932:	d1f5      	bne.n	8008920 <__s2b+0x4c>
 8008934:	f1a5 0408 	sub.w	r4, r5, #8
 8008938:	444c      	add	r4, r9
 800893a:	1b2d      	subs	r5, r5, r4
 800893c:	1963      	adds	r3, r4, r5
 800893e:	42bb      	cmp	r3, r7
 8008940:	db04      	blt.n	800894c <__s2b+0x78>
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	340a      	adds	r4, #10
 8008948:	2509      	movs	r5, #9
 800894a:	e7f6      	b.n	800893a <__s2b+0x66>
 800894c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008950:	4601      	mov	r1, r0
 8008952:	3b30      	subs	r3, #48	; 0x30
 8008954:	220a      	movs	r2, #10
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ff76 	bl	8008848 <__multadd>
 800895c:	e7ee      	b.n	800893c <__s2b+0x68>
 800895e:	bf00      	nop
 8008960:	0800b488 	.word	0x0800b488
 8008964:	0800b514 	.word	0x0800b514

08008968 <__hi0bits>:
 8008968:	0c03      	lsrs	r3, r0, #16
 800896a:	041b      	lsls	r3, r3, #16
 800896c:	b9d3      	cbnz	r3, 80089a4 <__hi0bits+0x3c>
 800896e:	0400      	lsls	r0, r0, #16
 8008970:	2310      	movs	r3, #16
 8008972:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008976:	bf04      	itt	eq
 8008978:	0200      	lsleq	r0, r0, #8
 800897a:	3308      	addeq	r3, #8
 800897c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008980:	bf04      	itt	eq
 8008982:	0100      	lsleq	r0, r0, #4
 8008984:	3304      	addeq	r3, #4
 8008986:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800898a:	bf04      	itt	eq
 800898c:	0080      	lsleq	r0, r0, #2
 800898e:	3302      	addeq	r3, #2
 8008990:	2800      	cmp	r0, #0
 8008992:	db05      	blt.n	80089a0 <__hi0bits+0x38>
 8008994:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008998:	f103 0301 	add.w	r3, r3, #1
 800899c:	bf08      	it	eq
 800899e:	2320      	moveq	r3, #32
 80089a0:	4618      	mov	r0, r3
 80089a2:	4770      	bx	lr
 80089a4:	2300      	movs	r3, #0
 80089a6:	e7e4      	b.n	8008972 <__hi0bits+0xa>

080089a8 <__lo0bits>:
 80089a8:	6803      	ldr	r3, [r0, #0]
 80089aa:	f013 0207 	ands.w	r2, r3, #7
 80089ae:	4601      	mov	r1, r0
 80089b0:	d00b      	beq.n	80089ca <__lo0bits+0x22>
 80089b2:	07da      	lsls	r2, r3, #31
 80089b4:	d423      	bmi.n	80089fe <__lo0bits+0x56>
 80089b6:	0798      	lsls	r0, r3, #30
 80089b8:	bf49      	itett	mi
 80089ba:	085b      	lsrmi	r3, r3, #1
 80089bc:	089b      	lsrpl	r3, r3, #2
 80089be:	2001      	movmi	r0, #1
 80089c0:	600b      	strmi	r3, [r1, #0]
 80089c2:	bf5c      	itt	pl
 80089c4:	600b      	strpl	r3, [r1, #0]
 80089c6:	2002      	movpl	r0, #2
 80089c8:	4770      	bx	lr
 80089ca:	b298      	uxth	r0, r3
 80089cc:	b9a8      	cbnz	r0, 80089fa <__lo0bits+0x52>
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	2010      	movs	r0, #16
 80089d2:	b2da      	uxtb	r2, r3
 80089d4:	b90a      	cbnz	r2, 80089da <__lo0bits+0x32>
 80089d6:	3008      	adds	r0, #8
 80089d8:	0a1b      	lsrs	r3, r3, #8
 80089da:	071a      	lsls	r2, r3, #28
 80089dc:	bf04      	itt	eq
 80089de:	091b      	lsreq	r3, r3, #4
 80089e0:	3004      	addeq	r0, #4
 80089e2:	079a      	lsls	r2, r3, #30
 80089e4:	bf04      	itt	eq
 80089e6:	089b      	lsreq	r3, r3, #2
 80089e8:	3002      	addeq	r0, #2
 80089ea:	07da      	lsls	r2, r3, #31
 80089ec:	d403      	bmi.n	80089f6 <__lo0bits+0x4e>
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	f100 0001 	add.w	r0, r0, #1
 80089f4:	d005      	beq.n	8008a02 <__lo0bits+0x5a>
 80089f6:	600b      	str	r3, [r1, #0]
 80089f8:	4770      	bx	lr
 80089fa:	4610      	mov	r0, r2
 80089fc:	e7e9      	b.n	80089d2 <__lo0bits+0x2a>
 80089fe:	2000      	movs	r0, #0
 8008a00:	4770      	bx	lr
 8008a02:	2020      	movs	r0, #32
 8008a04:	4770      	bx	lr
	...

08008a08 <__i2b>:
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	f7ff feb9 	bl	8008784 <_Balloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <__i2b+0x1a>
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <__i2b+0x24>)
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <__i2b+0x28>)
 8008a1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a1e:	f000 fe01 	bl	8009624 <__assert_func>
 8008a22:	2301      	movs	r3, #1
 8008a24:	6144      	str	r4, [r0, #20]
 8008a26:	6103      	str	r3, [r0, #16]
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800b488 	.word	0x0800b488
 8008a30:	0800b514 	.word	0x0800b514

08008a34 <__multiply>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	4691      	mov	r9, r2
 8008a3a:	690a      	ldr	r2, [r1, #16]
 8008a3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	bfb8      	it	lt
 8008a44:	460b      	movlt	r3, r1
 8008a46:	460c      	mov	r4, r1
 8008a48:	bfbc      	itt	lt
 8008a4a:	464c      	movlt	r4, r9
 8008a4c:	4699      	movlt	r9, r3
 8008a4e:	6927      	ldr	r7, [r4, #16]
 8008a50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a54:	68a3      	ldr	r3, [r4, #8]
 8008a56:	6861      	ldr	r1, [r4, #4]
 8008a58:	eb07 060a 	add.w	r6, r7, sl
 8008a5c:	42b3      	cmp	r3, r6
 8008a5e:	b085      	sub	sp, #20
 8008a60:	bfb8      	it	lt
 8008a62:	3101      	addlt	r1, #1
 8008a64:	f7ff fe8e 	bl	8008784 <_Balloc>
 8008a68:	b930      	cbnz	r0, 8008a78 <__multiply+0x44>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	4b44      	ldr	r3, [pc, #272]	; (8008b80 <__multiply+0x14c>)
 8008a6e:	4845      	ldr	r0, [pc, #276]	; (8008b84 <__multiply+0x150>)
 8008a70:	f240 115d 	movw	r1, #349	; 0x15d
 8008a74:	f000 fdd6 	bl	8009624 <__assert_func>
 8008a78:	f100 0514 	add.w	r5, r0, #20
 8008a7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a80:	462b      	mov	r3, r5
 8008a82:	2200      	movs	r2, #0
 8008a84:	4543      	cmp	r3, r8
 8008a86:	d321      	bcc.n	8008acc <__multiply+0x98>
 8008a88:	f104 0314 	add.w	r3, r4, #20
 8008a8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a90:	f109 0314 	add.w	r3, r9, #20
 8008a94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a98:	9202      	str	r2, [sp, #8]
 8008a9a:	1b3a      	subs	r2, r7, r4
 8008a9c:	3a15      	subs	r2, #21
 8008a9e:	f022 0203 	bic.w	r2, r2, #3
 8008aa2:	3204      	adds	r2, #4
 8008aa4:	f104 0115 	add.w	r1, r4, #21
 8008aa8:	428f      	cmp	r7, r1
 8008aaa:	bf38      	it	cc
 8008aac:	2204      	movcc	r2, #4
 8008aae:	9201      	str	r2, [sp, #4]
 8008ab0:	9a02      	ldr	r2, [sp, #8]
 8008ab2:	9303      	str	r3, [sp, #12]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d80c      	bhi.n	8008ad2 <__multiply+0x9e>
 8008ab8:	2e00      	cmp	r6, #0
 8008aba:	dd03      	ble.n	8008ac4 <__multiply+0x90>
 8008abc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d05a      	beq.n	8008b7a <__multiply+0x146>
 8008ac4:	6106      	str	r6, [r0, #16]
 8008ac6:	b005      	add	sp, #20
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	f843 2b04 	str.w	r2, [r3], #4
 8008ad0:	e7d8      	b.n	8008a84 <__multiply+0x50>
 8008ad2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ad6:	f1ba 0f00 	cmp.w	sl, #0
 8008ada:	d024      	beq.n	8008b26 <__multiply+0xf2>
 8008adc:	f104 0e14 	add.w	lr, r4, #20
 8008ae0:	46a9      	mov	r9, r5
 8008ae2:	f04f 0c00 	mov.w	ip, #0
 8008ae6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008aea:	f8d9 1000 	ldr.w	r1, [r9]
 8008aee:	fa1f fb82 	uxth.w	fp, r2
 8008af2:	b289      	uxth	r1, r1
 8008af4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008af8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008afc:	f8d9 2000 	ldr.w	r2, [r9]
 8008b00:	4461      	add	r1, ip
 8008b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b06:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b0e:	b289      	uxth	r1, r1
 8008b10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b14:	4577      	cmp	r7, lr
 8008b16:	f849 1b04 	str.w	r1, [r9], #4
 8008b1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b1e:	d8e2      	bhi.n	8008ae6 <__multiply+0xb2>
 8008b20:	9a01      	ldr	r2, [sp, #4]
 8008b22:	f845 c002 	str.w	ip, [r5, r2]
 8008b26:	9a03      	ldr	r2, [sp, #12]
 8008b28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	f1b9 0f00 	cmp.w	r9, #0
 8008b32:	d020      	beq.n	8008b76 <__multiply+0x142>
 8008b34:	6829      	ldr	r1, [r5, #0]
 8008b36:	f104 0c14 	add.w	ip, r4, #20
 8008b3a:	46ae      	mov	lr, r5
 8008b3c:	f04f 0a00 	mov.w	sl, #0
 8008b40:	f8bc b000 	ldrh.w	fp, [ip]
 8008b44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b48:	fb09 220b 	mla	r2, r9, fp, r2
 8008b4c:	4492      	add	sl, r2
 8008b4e:	b289      	uxth	r1, r1
 8008b50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b54:	f84e 1b04 	str.w	r1, [lr], #4
 8008b58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b5c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b60:	0c12      	lsrs	r2, r2, #16
 8008b62:	fb09 1102 	mla	r1, r9, r2, r1
 8008b66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b6a:	4567      	cmp	r7, ip
 8008b6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b70:	d8e6      	bhi.n	8008b40 <__multiply+0x10c>
 8008b72:	9a01      	ldr	r2, [sp, #4]
 8008b74:	50a9      	str	r1, [r5, r2]
 8008b76:	3504      	adds	r5, #4
 8008b78:	e79a      	b.n	8008ab0 <__multiply+0x7c>
 8008b7a:	3e01      	subs	r6, #1
 8008b7c:	e79c      	b.n	8008ab8 <__multiply+0x84>
 8008b7e:	bf00      	nop
 8008b80:	0800b488 	.word	0x0800b488
 8008b84:	0800b514 	.word	0x0800b514

08008b88 <__pow5mult>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	f012 0203 	ands.w	r2, r2, #3
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	d007      	beq.n	8008ba8 <__pow5mult+0x20>
 8008b98:	4c25      	ldr	r4, [pc, #148]	; (8008c30 <__pow5mult+0xa8>)
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ba2:	f7ff fe51 	bl	8008848 <__multadd>
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	10ad      	asrs	r5, r5, #2
 8008baa:	d03d      	beq.n	8008c28 <__pow5mult+0xa0>
 8008bac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bae:	b97c      	cbnz	r4, 8008bd0 <__pow5mult+0x48>
 8008bb0:	2010      	movs	r0, #16
 8008bb2:	f7ff fdbf 	bl	8008734 <malloc>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6270      	str	r0, [r6, #36]	; 0x24
 8008bba:	b928      	cbnz	r0, 8008bc8 <__pow5mult+0x40>
 8008bbc:	4b1d      	ldr	r3, [pc, #116]	; (8008c34 <__pow5mult+0xac>)
 8008bbe:	481e      	ldr	r0, [pc, #120]	; (8008c38 <__pow5mult+0xb0>)
 8008bc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bc4:	f000 fd2e 	bl	8009624 <__assert_func>
 8008bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bcc:	6004      	str	r4, [r0, #0]
 8008bce:	60c4      	str	r4, [r0, #12]
 8008bd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bd8:	b94c      	cbnz	r4, 8008bee <__pow5mult+0x66>
 8008bda:	f240 2171 	movw	r1, #625	; 0x271
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ff12 	bl	8008a08 <__i2b>
 8008be4:	2300      	movs	r3, #0
 8008be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bea:	4604      	mov	r4, r0
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	f04f 0900 	mov.w	r9, #0
 8008bf2:	07eb      	lsls	r3, r5, #31
 8008bf4:	d50a      	bpl.n	8008c0c <__pow5mult+0x84>
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff ff1a 	bl	8008a34 <__multiply>
 8008c00:	4639      	mov	r1, r7
 8008c02:	4680      	mov	r8, r0
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff fdfd 	bl	8008804 <_Bfree>
 8008c0a:	4647      	mov	r7, r8
 8008c0c:	106d      	asrs	r5, r5, #1
 8008c0e:	d00b      	beq.n	8008c28 <__pow5mult+0xa0>
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	b938      	cbnz	r0, 8008c24 <__pow5mult+0x9c>
 8008c14:	4622      	mov	r2, r4
 8008c16:	4621      	mov	r1, r4
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7ff ff0b 	bl	8008a34 <__multiply>
 8008c1e:	6020      	str	r0, [r4, #0]
 8008c20:	f8c0 9000 	str.w	r9, [r0]
 8008c24:	4604      	mov	r4, r0
 8008c26:	e7e4      	b.n	8008bf2 <__pow5mult+0x6a>
 8008c28:	4638      	mov	r0, r7
 8008c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2e:	bf00      	nop
 8008c30:	0800b660 	.word	0x0800b660
 8008c34:	0800b416 	.word	0x0800b416
 8008c38:	0800b514 	.word	0x0800b514

08008c3c <__lshift>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	460c      	mov	r4, r1
 8008c42:	6849      	ldr	r1, [r1, #4]
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	4691      	mov	r9, r2
 8008c50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c54:	f108 0601 	add.w	r6, r8, #1
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	db0b      	blt.n	8008c74 <__lshift+0x38>
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	f7ff fd91 	bl	8008784 <_Balloc>
 8008c62:	4605      	mov	r5, r0
 8008c64:	b948      	cbnz	r0, 8008c7a <__lshift+0x3e>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b2a      	ldr	r3, [pc, #168]	; (8008d14 <__lshift+0xd8>)
 8008c6a:	482b      	ldr	r0, [pc, #172]	; (8008d18 <__lshift+0xdc>)
 8008c6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c70:	f000 fcd8 	bl	8009624 <__assert_func>
 8008c74:	3101      	adds	r1, #1
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	e7ee      	b.n	8008c58 <__lshift+0x1c>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f100 0114 	add.w	r1, r0, #20
 8008c80:	f100 0210 	add.w	r2, r0, #16
 8008c84:	4618      	mov	r0, r3
 8008c86:	4553      	cmp	r3, sl
 8008c88:	db37      	blt.n	8008cfa <__lshift+0xbe>
 8008c8a:	6920      	ldr	r0, [r4, #16]
 8008c8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c90:	f104 0314 	add.w	r3, r4, #20
 8008c94:	f019 091f 	ands.w	r9, r9, #31
 8008c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ca0:	d02f      	beq.n	8008d02 <__lshift+0xc6>
 8008ca2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ca6:	468a      	mov	sl, r1
 8008ca8:	f04f 0c00 	mov.w	ip, #0
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	fa02 f209 	lsl.w	r2, r2, r9
 8008cb2:	ea42 020c 	orr.w	r2, r2, ip
 8008cb6:	f84a 2b04 	str.w	r2, [sl], #4
 8008cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cbe:	4298      	cmp	r0, r3
 8008cc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cc4:	d8f2      	bhi.n	8008cac <__lshift+0x70>
 8008cc6:	1b03      	subs	r3, r0, r4
 8008cc8:	3b15      	subs	r3, #21
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	3304      	adds	r3, #4
 8008cd0:	f104 0215 	add.w	r2, r4, #21
 8008cd4:	4290      	cmp	r0, r2
 8008cd6:	bf38      	it	cc
 8008cd8:	2304      	movcc	r3, #4
 8008cda:	f841 c003 	str.w	ip, [r1, r3]
 8008cde:	f1bc 0f00 	cmp.w	ip, #0
 8008ce2:	d001      	beq.n	8008ce8 <__lshift+0xac>
 8008ce4:	f108 0602 	add.w	r6, r8, #2
 8008ce8:	3e01      	subs	r6, #1
 8008cea:	4638      	mov	r0, r7
 8008cec:	612e      	str	r6, [r5, #16]
 8008cee:	4621      	mov	r1, r4
 8008cf0:	f7ff fd88 	bl	8008804 <_Bfree>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cfe:	3301      	adds	r3, #1
 8008d00:	e7c1      	b.n	8008c86 <__lshift+0x4a>
 8008d02:	3904      	subs	r1, #4
 8008d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d0c:	4298      	cmp	r0, r3
 8008d0e:	d8f9      	bhi.n	8008d04 <__lshift+0xc8>
 8008d10:	e7ea      	b.n	8008ce8 <__lshift+0xac>
 8008d12:	bf00      	nop
 8008d14:	0800b488 	.word	0x0800b488
 8008d18:	0800b514 	.word	0x0800b514

08008d1c <__mcmp>:
 8008d1c:	b530      	push	{r4, r5, lr}
 8008d1e:	6902      	ldr	r2, [r0, #16]
 8008d20:	690c      	ldr	r4, [r1, #16]
 8008d22:	1b12      	subs	r2, r2, r4
 8008d24:	d10e      	bne.n	8008d44 <__mcmp+0x28>
 8008d26:	f100 0314 	add.w	r3, r0, #20
 8008d2a:	3114      	adds	r1, #20
 8008d2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d3c:	42a5      	cmp	r5, r4
 8008d3e:	d003      	beq.n	8008d48 <__mcmp+0x2c>
 8008d40:	d305      	bcc.n	8008d4e <__mcmp+0x32>
 8008d42:	2201      	movs	r2, #1
 8008d44:	4610      	mov	r0, r2
 8008d46:	bd30      	pop	{r4, r5, pc}
 8008d48:	4283      	cmp	r3, r0
 8008d4a:	d3f3      	bcc.n	8008d34 <__mcmp+0x18>
 8008d4c:	e7fa      	b.n	8008d44 <__mcmp+0x28>
 8008d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d52:	e7f7      	b.n	8008d44 <__mcmp+0x28>

08008d54 <__mdiff>:
 8008d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4690      	mov	r8, r2
 8008d62:	f7ff ffdb 	bl	8008d1c <__mcmp>
 8008d66:	1e05      	subs	r5, r0, #0
 8008d68:	d110      	bne.n	8008d8c <__mdiff+0x38>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff fd09 	bl	8008784 <_Balloc>
 8008d72:	b930      	cbnz	r0, 8008d82 <__mdiff+0x2e>
 8008d74:	4b3a      	ldr	r3, [pc, #232]	; (8008e60 <__mdiff+0x10c>)
 8008d76:	4602      	mov	r2, r0
 8008d78:	f240 2132 	movw	r1, #562	; 0x232
 8008d7c:	4839      	ldr	r0, [pc, #228]	; (8008e64 <__mdiff+0x110>)
 8008d7e:	f000 fc51 	bl	8009624 <__assert_func>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	bfa4      	itt	ge
 8008d8e:	4643      	movge	r3, r8
 8008d90:	46a0      	movge	r8, r4
 8008d92:	4630      	mov	r0, r6
 8008d94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d98:	bfa6      	itte	ge
 8008d9a:	461c      	movge	r4, r3
 8008d9c:	2500      	movge	r5, #0
 8008d9e:	2501      	movlt	r5, #1
 8008da0:	f7ff fcf0 	bl	8008784 <_Balloc>
 8008da4:	b920      	cbnz	r0, 8008db0 <__mdiff+0x5c>
 8008da6:	4b2e      	ldr	r3, [pc, #184]	; (8008e60 <__mdiff+0x10c>)
 8008da8:	4602      	mov	r2, r0
 8008daa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dae:	e7e5      	b.n	8008d7c <__mdiff+0x28>
 8008db0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008db4:	6926      	ldr	r6, [r4, #16]
 8008db6:	60c5      	str	r5, [r0, #12]
 8008db8:	f104 0914 	add.w	r9, r4, #20
 8008dbc:	f108 0514 	add.w	r5, r8, #20
 8008dc0:	f100 0e14 	add.w	lr, r0, #20
 8008dc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dcc:	f108 0210 	add.w	r2, r8, #16
 8008dd0:	46f2      	mov	sl, lr
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ddc:	fa1f f883 	uxth.w	r8, r3
 8008de0:	fa11 f18b 	uxtah	r1, r1, fp
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	eba1 0808 	sub.w	r8, r1, r8
 8008dea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008df2:	fa1f f888 	uxth.w	r8, r8
 8008df6:	1419      	asrs	r1, r3, #16
 8008df8:	454e      	cmp	r6, r9
 8008dfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008dfe:	f84a 3b04 	str.w	r3, [sl], #4
 8008e02:	d8e7      	bhi.n	8008dd4 <__mdiff+0x80>
 8008e04:	1b33      	subs	r3, r6, r4
 8008e06:	3b15      	subs	r3, #21
 8008e08:	f023 0303 	bic.w	r3, r3, #3
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	3415      	adds	r4, #21
 8008e10:	42a6      	cmp	r6, r4
 8008e12:	bf38      	it	cc
 8008e14:	2304      	movcc	r3, #4
 8008e16:	441d      	add	r5, r3
 8008e18:	4473      	add	r3, lr
 8008e1a:	469e      	mov	lr, r3
 8008e1c:	462e      	mov	r6, r5
 8008e1e:	4566      	cmp	r6, ip
 8008e20:	d30e      	bcc.n	8008e40 <__mdiff+0xec>
 8008e22:	f10c 0203 	add.w	r2, ip, #3
 8008e26:	1b52      	subs	r2, r2, r5
 8008e28:	f022 0203 	bic.w	r2, r2, #3
 8008e2c:	3d03      	subs	r5, #3
 8008e2e:	45ac      	cmp	ip, r5
 8008e30:	bf38      	it	cc
 8008e32:	2200      	movcc	r2, #0
 8008e34:	441a      	add	r2, r3
 8008e36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e3a:	b17b      	cbz	r3, 8008e5c <__mdiff+0x108>
 8008e3c:	6107      	str	r7, [r0, #16]
 8008e3e:	e7a3      	b.n	8008d88 <__mdiff+0x34>
 8008e40:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e44:	fa11 f288 	uxtah	r2, r1, r8
 8008e48:	1414      	asrs	r4, r2, #16
 8008e4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e54:	f84e 2b04 	str.w	r2, [lr], #4
 8008e58:	1421      	asrs	r1, r4, #16
 8008e5a:	e7e0      	b.n	8008e1e <__mdiff+0xca>
 8008e5c:	3f01      	subs	r7, #1
 8008e5e:	e7ea      	b.n	8008e36 <__mdiff+0xe2>
 8008e60:	0800b488 	.word	0x0800b488
 8008e64:	0800b514 	.word	0x0800b514

08008e68 <__ulp>:
 8008e68:	b082      	sub	sp, #8
 8008e6a:	ed8d 0b00 	vstr	d0, [sp]
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	4912      	ldr	r1, [pc, #72]	; (8008ebc <__ulp+0x54>)
 8008e72:	4019      	ands	r1, r3
 8008e74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e78:	2900      	cmp	r1, #0
 8008e7a:	dd05      	ble.n	8008e88 <__ulp+0x20>
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	ec43 2b10 	vmov	d0, r2, r3
 8008e84:	b002      	add	sp, #8
 8008e86:	4770      	bx	lr
 8008e88:	4249      	negs	r1, r1
 8008e8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	da04      	bge.n	8008ea6 <__ulp+0x3e>
 8008e9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008ea0:	fa41 f300 	asr.w	r3, r1, r0
 8008ea4:	e7ec      	b.n	8008e80 <__ulp+0x18>
 8008ea6:	f1a0 0114 	sub.w	r1, r0, #20
 8008eaa:	291e      	cmp	r1, #30
 8008eac:	bfda      	itte	le
 8008eae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008eb2:	fa20 f101 	lsrle.w	r1, r0, r1
 8008eb6:	2101      	movgt	r1, #1
 8008eb8:	460a      	mov	r2, r1
 8008eba:	e7e1      	b.n	8008e80 <__ulp+0x18>
 8008ebc:	7ff00000 	.word	0x7ff00000

08008ec0 <__b2d>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	6905      	ldr	r5, [r0, #16]
 8008ec4:	f100 0714 	add.w	r7, r0, #20
 8008ec8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008ecc:	1f2e      	subs	r6, r5, #4
 8008ece:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff fd48 	bl	8008968 <__hi0bits>
 8008ed8:	f1c0 0320 	rsb	r3, r0, #32
 8008edc:	280a      	cmp	r0, #10
 8008ede:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f5c <__b2d+0x9c>
 8008ee2:	600b      	str	r3, [r1, #0]
 8008ee4:	dc14      	bgt.n	8008f10 <__b2d+0x50>
 8008ee6:	f1c0 0e0b 	rsb	lr, r0, #11
 8008eea:	fa24 f10e 	lsr.w	r1, r4, lr
 8008eee:	42b7      	cmp	r7, r6
 8008ef0:	ea41 030c 	orr.w	r3, r1, ip
 8008ef4:	bf34      	ite	cc
 8008ef6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008efa:	2100      	movcs	r1, #0
 8008efc:	3015      	adds	r0, #21
 8008efe:	fa04 f000 	lsl.w	r0, r4, r0
 8008f02:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f06:	ea40 0201 	orr.w	r2, r0, r1
 8008f0a:	ec43 2b10 	vmov	d0, r2, r3
 8008f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f10:	42b7      	cmp	r7, r6
 8008f12:	bf3a      	itte	cc
 8008f14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f18:	f1a5 0608 	subcc.w	r6, r5, #8
 8008f1c:	2100      	movcs	r1, #0
 8008f1e:	380b      	subs	r0, #11
 8008f20:	d017      	beq.n	8008f52 <__b2d+0x92>
 8008f22:	f1c0 0c20 	rsb	ip, r0, #32
 8008f26:	fa04 f500 	lsl.w	r5, r4, r0
 8008f2a:	42be      	cmp	r6, r7
 8008f2c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008f30:	ea45 0504 	orr.w	r5, r5, r4
 8008f34:	bf8c      	ite	hi
 8008f36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008f3a:	2400      	movls	r4, #0
 8008f3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008f40:	fa01 f000 	lsl.w	r0, r1, r0
 8008f44:	fa24 f40c 	lsr.w	r4, r4, ip
 8008f48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f4c:	ea40 0204 	orr.w	r2, r0, r4
 8008f50:	e7db      	b.n	8008f0a <__b2d+0x4a>
 8008f52:	ea44 030c 	orr.w	r3, r4, ip
 8008f56:	460a      	mov	r2, r1
 8008f58:	e7d7      	b.n	8008f0a <__b2d+0x4a>
 8008f5a:	bf00      	nop
 8008f5c:	3ff00000 	.word	0x3ff00000

08008f60 <__d2b>:
 8008f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	4689      	mov	r9, r1
 8008f66:	2101      	movs	r1, #1
 8008f68:	ec57 6b10 	vmov	r6, r7, d0
 8008f6c:	4690      	mov	r8, r2
 8008f6e:	f7ff fc09 	bl	8008784 <_Balloc>
 8008f72:	4604      	mov	r4, r0
 8008f74:	b930      	cbnz	r0, 8008f84 <__d2b+0x24>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b25      	ldr	r3, [pc, #148]	; (8009010 <__d2b+0xb0>)
 8008f7a:	4826      	ldr	r0, [pc, #152]	; (8009014 <__d2b+0xb4>)
 8008f7c:	f240 310a 	movw	r1, #778	; 0x30a
 8008f80:	f000 fb50 	bl	8009624 <__assert_func>
 8008f84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f8c:	bb35      	cbnz	r5, 8008fdc <__d2b+0x7c>
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	d028      	beq.n	8008fe6 <__d2b+0x86>
 8008f94:	4668      	mov	r0, sp
 8008f96:	9600      	str	r6, [sp, #0]
 8008f98:	f7ff fd06 	bl	80089a8 <__lo0bits>
 8008f9c:	9900      	ldr	r1, [sp, #0]
 8008f9e:	b300      	cbz	r0, 8008fe2 <__d2b+0x82>
 8008fa0:	9a01      	ldr	r2, [sp, #4]
 8008fa2:	f1c0 0320 	rsb	r3, r0, #32
 8008fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008faa:	430b      	orrs	r3, r1
 8008fac:	40c2      	lsrs	r2, r0
 8008fae:	6163      	str	r3, [r4, #20]
 8008fb0:	9201      	str	r2, [sp, #4]
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	61a3      	str	r3, [r4, #24]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bf14      	ite	ne
 8008fba:	2202      	movne	r2, #2
 8008fbc:	2201      	moveq	r2, #1
 8008fbe:	6122      	str	r2, [r4, #16]
 8008fc0:	b1d5      	cbz	r5, 8008ff8 <__d2b+0x98>
 8008fc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fc6:	4405      	add	r5, r0
 8008fc8:	f8c9 5000 	str.w	r5, [r9]
 8008fcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fd0:	f8c8 0000 	str.w	r0, [r8]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	b003      	add	sp, #12
 8008fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fe0:	e7d5      	b.n	8008f8e <__d2b+0x2e>
 8008fe2:	6161      	str	r1, [r4, #20]
 8008fe4:	e7e5      	b.n	8008fb2 <__d2b+0x52>
 8008fe6:	a801      	add	r0, sp, #4
 8008fe8:	f7ff fcde 	bl	80089a8 <__lo0bits>
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	6122      	str	r2, [r4, #16]
 8008ff4:	3020      	adds	r0, #32
 8008ff6:	e7e3      	b.n	8008fc0 <__d2b+0x60>
 8008ff8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ffc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009000:	f8c9 0000 	str.w	r0, [r9]
 8009004:	6918      	ldr	r0, [r3, #16]
 8009006:	f7ff fcaf 	bl	8008968 <__hi0bits>
 800900a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800900e:	e7df      	b.n	8008fd0 <__d2b+0x70>
 8009010:	0800b488 	.word	0x0800b488
 8009014:	0800b514 	.word	0x0800b514

08009018 <__ratio>:
 8009018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	4688      	mov	r8, r1
 800901e:	4669      	mov	r1, sp
 8009020:	4681      	mov	r9, r0
 8009022:	f7ff ff4d 	bl	8008ec0 <__b2d>
 8009026:	a901      	add	r1, sp, #4
 8009028:	4640      	mov	r0, r8
 800902a:	ec55 4b10 	vmov	r4, r5, d0
 800902e:	f7ff ff47 	bl	8008ec0 <__b2d>
 8009032:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009036:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800903a:	eba3 0c02 	sub.w	ip, r3, r2
 800903e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009048:	ec51 0b10 	vmov	r0, r1, d0
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfd6      	itet	le
 8009050:	460a      	movle	r2, r1
 8009052:	462a      	movgt	r2, r5
 8009054:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009058:	468b      	mov	fp, r1
 800905a:	462f      	mov	r7, r5
 800905c:	bfd4      	ite	le
 800905e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009062:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009066:	4620      	mov	r0, r4
 8009068:	ee10 2a10 	vmov	r2, s0
 800906c:	465b      	mov	r3, fp
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 fbf4 	bl	800085c <__aeabi_ddiv>
 8009074:	ec41 0b10 	vmov	d0, r0, r1
 8009078:	b003      	add	sp, #12
 800907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800907e <__copybits>:
 800907e:	3901      	subs	r1, #1
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	1149      	asrs	r1, r1, #5
 8009084:	6914      	ldr	r4, [r2, #16]
 8009086:	3101      	adds	r1, #1
 8009088:	f102 0314 	add.w	r3, r2, #20
 800908c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009090:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009094:	1f05      	subs	r5, r0, #4
 8009096:	42a3      	cmp	r3, r4
 8009098:	d30c      	bcc.n	80090b4 <__copybits+0x36>
 800909a:	1aa3      	subs	r3, r4, r2
 800909c:	3b11      	subs	r3, #17
 800909e:	f023 0303 	bic.w	r3, r3, #3
 80090a2:	3211      	adds	r2, #17
 80090a4:	42a2      	cmp	r2, r4
 80090a6:	bf88      	it	hi
 80090a8:	2300      	movhi	r3, #0
 80090aa:	4418      	add	r0, r3
 80090ac:	2300      	movs	r3, #0
 80090ae:	4288      	cmp	r0, r1
 80090b0:	d305      	bcc.n	80090be <__copybits+0x40>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f853 6b04 	ldr.w	r6, [r3], #4
 80090b8:	f845 6f04 	str.w	r6, [r5, #4]!
 80090bc:	e7eb      	b.n	8009096 <__copybits+0x18>
 80090be:	f840 3b04 	str.w	r3, [r0], #4
 80090c2:	e7f4      	b.n	80090ae <__copybits+0x30>

080090c4 <__any_on>:
 80090c4:	f100 0214 	add.w	r2, r0, #20
 80090c8:	6900      	ldr	r0, [r0, #16]
 80090ca:	114b      	asrs	r3, r1, #5
 80090cc:	4298      	cmp	r0, r3
 80090ce:	b510      	push	{r4, lr}
 80090d0:	db11      	blt.n	80090f6 <__any_on+0x32>
 80090d2:	dd0a      	ble.n	80090ea <__any_on+0x26>
 80090d4:	f011 011f 	ands.w	r1, r1, #31
 80090d8:	d007      	beq.n	80090ea <__any_on+0x26>
 80090da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090de:	fa24 f001 	lsr.w	r0, r4, r1
 80090e2:	fa00 f101 	lsl.w	r1, r0, r1
 80090e6:	428c      	cmp	r4, r1
 80090e8:	d10b      	bne.n	8009102 <__any_on+0x3e>
 80090ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d803      	bhi.n	80090fa <__any_on+0x36>
 80090f2:	2000      	movs	r0, #0
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	4603      	mov	r3, r0
 80090f8:	e7f7      	b.n	80090ea <__any_on+0x26>
 80090fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090fe:	2900      	cmp	r1, #0
 8009100:	d0f5      	beq.n	80090ee <__any_on+0x2a>
 8009102:	2001      	movs	r0, #1
 8009104:	e7f6      	b.n	80090f4 <__any_on+0x30>

08009106 <_calloc_r>:
 8009106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009108:	fba1 2402 	umull	r2, r4, r1, r2
 800910c:	b94c      	cbnz	r4, 8009122 <_calloc_r+0x1c>
 800910e:	4611      	mov	r1, r2
 8009110:	9201      	str	r2, [sp, #4]
 8009112:	f000 f87b 	bl	800920c <_malloc_r>
 8009116:	9a01      	ldr	r2, [sp, #4]
 8009118:	4605      	mov	r5, r0
 800911a:	b930      	cbnz	r0, 800912a <_calloc_r+0x24>
 800911c:	4628      	mov	r0, r5
 800911e:	b003      	add	sp, #12
 8009120:	bd30      	pop	{r4, r5, pc}
 8009122:	220c      	movs	r2, #12
 8009124:	6002      	str	r2, [r0, #0]
 8009126:	2500      	movs	r5, #0
 8009128:	e7f8      	b.n	800911c <_calloc_r+0x16>
 800912a:	4621      	mov	r1, r4
 800912c:	f7fc fbc0 	bl	80058b0 <memset>
 8009130:	e7f4      	b.n	800911c <_calloc_r+0x16>
	...

08009134 <_free_r>:
 8009134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009136:	2900      	cmp	r1, #0
 8009138:	d044      	beq.n	80091c4 <_free_r+0x90>
 800913a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913e:	9001      	str	r0, [sp, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f1a1 0404 	sub.w	r4, r1, #4
 8009146:	bfb8      	it	lt
 8009148:	18e4      	addlt	r4, r4, r3
 800914a:	f000 fab5 	bl	80096b8 <__malloc_lock>
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <_free_r+0x94>)
 8009150:	9801      	ldr	r0, [sp, #4]
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	b933      	cbnz	r3, 8009164 <_free_r+0x30>
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	6014      	str	r4, [r2, #0]
 800915a:	b003      	add	sp, #12
 800915c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009160:	f000 bab0 	b.w	80096c4 <__malloc_unlock>
 8009164:	42a3      	cmp	r3, r4
 8009166:	d908      	bls.n	800917a <_free_r+0x46>
 8009168:	6825      	ldr	r5, [r4, #0]
 800916a:	1961      	adds	r1, r4, r5
 800916c:	428b      	cmp	r3, r1
 800916e:	bf01      	itttt	eq
 8009170:	6819      	ldreq	r1, [r3, #0]
 8009172:	685b      	ldreq	r3, [r3, #4]
 8009174:	1949      	addeq	r1, r1, r5
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	e7ed      	b.n	8009156 <_free_r+0x22>
 800917a:	461a      	mov	r2, r3
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b10b      	cbz	r3, 8009184 <_free_r+0x50>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x46>
 8009184:	6811      	ldr	r1, [r2, #0]
 8009186:	1855      	adds	r5, r2, r1
 8009188:	42a5      	cmp	r5, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x70>
 800918c:	6824      	ldr	r4, [r4, #0]
 800918e:	4421      	add	r1, r4
 8009190:	1854      	adds	r4, r2, r1
 8009192:	42a3      	cmp	r3, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	d1e0      	bne.n	800915a <_free_r+0x26>
 8009198:	681c      	ldr	r4, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	6053      	str	r3, [r2, #4]
 800919e:	4421      	add	r1, r4
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	e7da      	b.n	800915a <_free_r+0x26>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x78>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	e7d6      	b.n	800915a <_free_r+0x26>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1949      	addeq	r1, r1, r5
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	6054      	str	r4, [r2, #4]
 80091c2:	e7ca      	b.n	800915a <_free_r+0x26>
 80091c4:	b003      	add	sp, #12
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	200006b8 	.word	0x200006b8

080091cc <sbrk_aligned>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	4e0e      	ldr	r6, [pc, #56]	; (8009208 <sbrk_aligned+0x3c>)
 80091d0:	460c      	mov	r4, r1
 80091d2:	6831      	ldr	r1, [r6, #0]
 80091d4:	4605      	mov	r5, r0
 80091d6:	b911      	cbnz	r1, 80091de <sbrk_aligned+0x12>
 80091d8:	f000 f9f2 	bl	80095c0 <_sbrk_r>
 80091dc:	6030      	str	r0, [r6, #0]
 80091de:	4621      	mov	r1, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 f9ed 	bl	80095c0 <_sbrk_r>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	d00a      	beq.n	8009200 <sbrk_aligned+0x34>
 80091ea:	1cc4      	adds	r4, r0, #3
 80091ec:	f024 0403 	bic.w	r4, r4, #3
 80091f0:	42a0      	cmp	r0, r4
 80091f2:	d007      	beq.n	8009204 <sbrk_aligned+0x38>
 80091f4:	1a21      	subs	r1, r4, r0
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f9e2 	bl	80095c0 <_sbrk_r>
 80091fc:	3001      	adds	r0, #1
 80091fe:	d101      	bne.n	8009204 <sbrk_aligned+0x38>
 8009200:	f04f 34ff 	mov.w	r4, #4294967295
 8009204:	4620      	mov	r0, r4
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	200006bc 	.word	0x200006bc

0800920c <_malloc_r>:
 800920c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009210:	1ccd      	adds	r5, r1, #3
 8009212:	f025 0503 	bic.w	r5, r5, #3
 8009216:	3508      	adds	r5, #8
 8009218:	2d0c      	cmp	r5, #12
 800921a:	bf38      	it	cc
 800921c:	250c      	movcc	r5, #12
 800921e:	2d00      	cmp	r5, #0
 8009220:	4607      	mov	r7, r0
 8009222:	db01      	blt.n	8009228 <_malloc_r+0x1c>
 8009224:	42a9      	cmp	r1, r5
 8009226:	d905      	bls.n	8009234 <_malloc_r+0x28>
 8009228:	230c      	movs	r3, #12
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	2600      	movs	r6, #0
 800922e:	4630      	mov	r0, r6
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	4e2e      	ldr	r6, [pc, #184]	; (80092f0 <_malloc_r+0xe4>)
 8009236:	f000 fa3f 	bl	80096b8 <__malloc_lock>
 800923a:	6833      	ldr	r3, [r6, #0]
 800923c:	461c      	mov	r4, r3
 800923e:	bb34      	cbnz	r4, 800928e <_malloc_r+0x82>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	f7ff ffc2 	bl	80091cc <sbrk_aligned>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	4604      	mov	r4, r0
 800924c:	d14d      	bne.n	80092ea <_malloc_r+0xde>
 800924e:	6834      	ldr	r4, [r6, #0]
 8009250:	4626      	mov	r6, r4
 8009252:	2e00      	cmp	r6, #0
 8009254:	d140      	bne.n	80092d8 <_malloc_r+0xcc>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	4631      	mov	r1, r6
 800925a:	4638      	mov	r0, r7
 800925c:	eb04 0803 	add.w	r8, r4, r3
 8009260:	f000 f9ae 	bl	80095c0 <_sbrk_r>
 8009264:	4580      	cmp	r8, r0
 8009266:	d13a      	bne.n	80092de <_malloc_r+0xd2>
 8009268:	6821      	ldr	r1, [r4, #0]
 800926a:	3503      	adds	r5, #3
 800926c:	1a6d      	subs	r5, r5, r1
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	4629      	mov	r1, r5
 800927c:	4638      	mov	r0, r7
 800927e:	f7ff ffa5 	bl	80091cc <sbrk_aligned>
 8009282:	3001      	adds	r0, #1
 8009284:	d02b      	beq.n	80092de <_malloc_r+0xd2>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	442b      	add	r3, r5
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	e00e      	b.n	80092ac <_malloc_r+0xa0>
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	1b52      	subs	r2, r2, r5
 8009292:	d41e      	bmi.n	80092d2 <_malloc_r+0xc6>
 8009294:	2a0b      	cmp	r2, #11
 8009296:	d916      	bls.n	80092c6 <_malloc_r+0xba>
 8009298:	1961      	adds	r1, r4, r5
 800929a:	42a3      	cmp	r3, r4
 800929c:	6025      	str	r5, [r4, #0]
 800929e:	bf18      	it	ne
 80092a0:	6059      	strne	r1, [r3, #4]
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	bf08      	it	eq
 80092a6:	6031      	streq	r1, [r6, #0]
 80092a8:	5162      	str	r2, [r4, r5]
 80092aa:	604b      	str	r3, [r1, #4]
 80092ac:	4638      	mov	r0, r7
 80092ae:	f104 060b 	add.w	r6, r4, #11
 80092b2:	f000 fa07 	bl	80096c4 <__malloc_unlock>
 80092b6:	f026 0607 	bic.w	r6, r6, #7
 80092ba:	1d23      	adds	r3, r4, #4
 80092bc:	1af2      	subs	r2, r6, r3
 80092be:	d0b6      	beq.n	800922e <_malloc_r+0x22>
 80092c0:	1b9b      	subs	r3, r3, r6
 80092c2:	50a3      	str	r3, [r4, r2]
 80092c4:	e7b3      	b.n	800922e <_malloc_r+0x22>
 80092c6:	6862      	ldr	r2, [r4, #4]
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	bf0c      	ite	eq
 80092cc:	6032      	streq	r2, [r6, #0]
 80092ce:	605a      	strne	r2, [r3, #4]
 80092d0:	e7ec      	b.n	80092ac <_malloc_r+0xa0>
 80092d2:	4623      	mov	r3, r4
 80092d4:	6864      	ldr	r4, [r4, #4]
 80092d6:	e7b2      	b.n	800923e <_malloc_r+0x32>
 80092d8:	4634      	mov	r4, r6
 80092da:	6876      	ldr	r6, [r6, #4]
 80092dc:	e7b9      	b.n	8009252 <_malloc_r+0x46>
 80092de:	230c      	movs	r3, #12
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	4638      	mov	r0, r7
 80092e4:	f000 f9ee 	bl	80096c4 <__malloc_unlock>
 80092e8:	e7a1      	b.n	800922e <_malloc_r+0x22>
 80092ea:	6025      	str	r5, [r4, #0]
 80092ec:	e7de      	b.n	80092ac <_malloc_r+0xa0>
 80092ee:	bf00      	nop
 80092f0:	200006b8 	.word	0x200006b8

080092f4 <__ssputs_r>:
 80092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	688e      	ldr	r6, [r1, #8]
 80092fa:	429e      	cmp	r6, r3
 80092fc:	4682      	mov	sl, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	4690      	mov	r8, r2
 8009302:	461f      	mov	r7, r3
 8009304:	d838      	bhi.n	8009378 <__ssputs_r+0x84>
 8009306:	898a      	ldrh	r2, [r1, #12]
 8009308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800930c:	d032      	beq.n	8009374 <__ssputs_r+0x80>
 800930e:	6825      	ldr	r5, [r4, #0]
 8009310:	6909      	ldr	r1, [r1, #16]
 8009312:	eba5 0901 	sub.w	r9, r5, r1
 8009316:	6965      	ldr	r5, [r4, #20]
 8009318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800931c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009320:	3301      	adds	r3, #1
 8009322:	444b      	add	r3, r9
 8009324:	106d      	asrs	r5, r5, #1
 8009326:	429d      	cmp	r5, r3
 8009328:	bf38      	it	cc
 800932a:	461d      	movcc	r5, r3
 800932c:	0553      	lsls	r3, r2, #21
 800932e:	d531      	bpl.n	8009394 <__ssputs_r+0xa0>
 8009330:	4629      	mov	r1, r5
 8009332:	f7ff ff6b 	bl	800920c <_malloc_r>
 8009336:	4606      	mov	r6, r0
 8009338:	b950      	cbnz	r0, 8009350 <__ssputs_r+0x5c>
 800933a:	230c      	movs	r3, #12
 800933c:	f8ca 3000 	str.w	r3, [sl]
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009350:	6921      	ldr	r1, [r4, #16]
 8009352:	464a      	mov	r2, r9
 8009354:	f7ff fa08 	bl	8008768 <memcpy>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800935e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009362:	81a3      	strh	r3, [r4, #12]
 8009364:	6126      	str	r6, [r4, #16]
 8009366:	6165      	str	r5, [r4, #20]
 8009368:	444e      	add	r6, r9
 800936a:	eba5 0509 	sub.w	r5, r5, r9
 800936e:	6026      	str	r6, [r4, #0]
 8009370:	60a5      	str	r5, [r4, #8]
 8009372:	463e      	mov	r6, r7
 8009374:	42be      	cmp	r6, r7
 8009376:	d900      	bls.n	800937a <__ssputs_r+0x86>
 8009378:	463e      	mov	r6, r7
 800937a:	6820      	ldr	r0, [r4, #0]
 800937c:	4632      	mov	r2, r6
 800937e:	4641      	mov	r1, r8
 8009380:	f000 f980 	bl	8009684 <memmove>
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	1b9b      	subs	r3, r3, r6
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	4433      	add	r3, r6
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	2000      	movs	r0, #0
 8009392:	e7db      	b.n	800934c <__ssputs_r+0x58>
 8009394:	462a      	mov	r2, r5
 8009396:	f000 f99b 	bl	80096d0 <_realloc_r>
 800939a:	4606      	mov	r6, r0
 800939c:	2800      	cmp	r0, #0
 800939e:	d1e1      	bne.n	8009364 <__ssputs_r+0x70>
 80093a0:	6921      	ldr	r1, [r4, #16]
 80093a2:	4650      	mov	r0, sl
 80093a4:	f7ff fec6 	bl	8009134 <_free_r>
 80093a8:	e7c7      	b.n	800933a <__ssputs_r+0x46>
	...

080093ac <_svfiprintf_r>:
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	4698      	mov	r8, r3
 80093b2:	898b      	ldrh	r3, [r1, #12]
 80093b4:	061b      	lsls	r3, r3, #24
 80093b6:	b09d      	sub	sp, #116	; 0x74
 80093b8:	4607      	mov	r7, r0
 80093ba:	460d      	mov	r5, r1
 80093bc:	4614      	mov	r4, r2
 80093be:	d50e      	bpl.n	80093de <_svfiprintf_r+0x32>
 80093c0:	690b      	ldr	r3, [r1, #16]
 80093c2:	b963      	cbnz	r3, 80093de <_svfiprintf_r+0x32>
 80093c4:	2140      	movs	r1, #64	; 0x40
 80093c6:	f7ff ff21 	bl	800920c <_malloc_r>
 80093ca:	6028      	str	r0, [r5, #0]
 80093cc:	6128      	str	r0, [r5, #16]
 80093ce:	b920      	cbnz	r0, 80093da <_svfiprintf_r+0x2e>
 80093d0:	230c      	movs	r3, #12
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	e0d1      	b.n	800957e <_svfiprintf_r+0x1d2>
 80093da:	2340      	movs	r3, #64	; 0x40
 80093dc:	616b      	str	r3, [r5, #20]
 80093de:	2300      	movs	r3, #0
 80093e0:	9309      	str	r3, [sp, #36]	; 0x24
 80093e2:	2320      	movs	r3, #32
 80093e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ec:	2330      	movs	r3, #48	; 0x30
 80093ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009598 <_svfiprintf_r+0x1ec>
 80093f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093f6:	f04f 0901 	mov.w	r9, #1
 80093fa:	4623      	mov	r3, r4
 80093fc:	469a      	mov	sl, r3
 80093fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009402:	b10a      	cbz	r2, 8009408 <_svfiprintf_r+0x5c>
 8009404:	2a25      	cmp	r2, #37	; 0x25
 8009406:	d1f9      	bne.n	80093fc <_svfiprintf_r+0x50>
 8009408:	ebba 0b04 	subs.w	fp, sl, r4
 800940c:	d00b      	beq.n	8009426 <_svfiprintf_r+0x7a>
 800940e:	465b      	mov	r3, fp
 8009410:	4622      	mov	r2, r4
 8009412:	4629      	mov	r1, r5
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff ff6d 	bl	80092f4 <__ssputs_r>
 800941a:	3001      	adds	r0, #1
 800941c:	f000 80aa 	beq.w	8009574 <_svfiprintf_r+0x1c8>
 8009420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009422:	445a      	add	r2, fp
 8009424:	9209      	str	r2, [sp, #36]	; 0x24
 8009426:	f89a 3000 	ldrb.w	r3, [sl]
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 80a2 	beq.w	8009574 <_svfiprintf_r+0x1c8>
 8009430:	2300      	movs	r3, #0
 8009432:	f04f 32ff 	mov.w	r2, #4294967295
 8009436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943a:	f10a 0a01 	add.w	sl, sl, #1
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	9307      	str	r3, [sp, #28]
 8009442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009446:	931a      	str	r3, [sp, #104]	; 0x68
 8009448:	4654      	mov	r4, sl
 800944a:	2205      	movs	r2, #5
 800944c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009450:	4851      	ldr	r0, [pc, #324]	; (8009598 <_svfiprintf_r+0x1ec>)
 8009452:	f7f6 fecd 	bl	80001f0 <memchr>
 8009456:	9a04      	ldr	r2, [sp, #16]
 8009458:	b9d8      	cbnz	r0, 8009492 <_svfiprintf_r+0xe6>
 800945a:	06d0      	lsls	r0, r2, #27
 800945c:	bf44      	itt	mi
 800945e:	2320      	movmi	r3, #32
 8009460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009464:	0711      	lsls	r1, r2, #28
 8009466:	bf44      	itt	mi
 8009468:	232b      	movmi	r3, #43	; 0x2b
 800946a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946e:	f89a 3000 	ldrb.w	r3, [sl]
 8009472:	2b2a      	cmp	r3, #42	; 0x2a
 8009474:	d015      	beq.n	80094a2 <_svfiprintf_r+0xf6>
 8009476:	9a07      	ldr	r2, [sp, #28]
 8009478:	4654      	mov	r4, sl
 800947a:	2000      	movs	r0, #0
 800947c:	f04f 0c0a 	mov.w	ip, #10
 8009480:	4621      	mov	r1, r4
 8009482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009486:	3b30      	subs	r3, #48	; 0x30
 8009488:	2b09      	cmp	r3, #9
 800948a:	d94e      	bls.n	800952a <_svfiprintf_r+0x17e>
 800948c:	b1b0      	cbz	r0, 80094bc <_svfiprintf_r+0x110>
 800948e:	9207      	str	r2, [sp, #28]
 8009490:	e014      	b.n	80094bc <_svfiprintf_r+0x110>
 8009492:	eba0 0308 	sub.w	r3, r0, r8
 8009496:	fa09 f303 	lsl.w	r3, r9, r3
 800949a:	4313      	orrs	r3, r2
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	46a2      	mov	sl, r4
 80094a0:	e7d2      	b.n	8009448 <_svfiprintf_r+0x9c>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	1d19      	adds	r1, r3, #4
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	9103      	str	r1, [sp, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	bfbb      	ittet	lt
 80094ae:	425b      	neglt	r3, r3
 80094b0:	f042 0202 	orrlt.w	r2, r2, #2
 80094b4:	9307      	strge	r3, [sp, #28]
 80094b6:	9307      	strlt	r3, [sp, #28]
 80094b8:	bfb8      	it	lt
 80094ba:	9204      	strlt	r2, [sp, #16]
 80094bc:	7823      	ldrb	r3, [r4, #0]
 80094be:	2b2e      	cmp	r3, #46	; 0x2e
 80094c0:	d10c      	bne.n	80094dc <_svfiprintf_r+0x130>
 80094c2:	7863      	ldrb	r3, [r4, #1]
 80094c4:	2b2a      	cmp	r3, #42	; 0x2a
 80094c6:	d135      	bne.n	8009534 <_svfiprintf_r+0x188>
 80094c8:	9b03      	ldr	r3, [sp, #12]
 80094ca:	1d1a      	adds	r2, r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	9203      	str	r2, [sp, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bfb8      	it	lt
 80094d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094d8:	3402      	adds	r4, #2
 80094da:	9305      	str	r3, [sp, #20]
 80094dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095a8 <_svfiprintf_r+0x1fc>
 80094e0:	7821      	ldrb	r1, [r4, #0]
 80094e2:	2203      	movs	r2, #3
 80094e4:	4650      	mov	r0, sl
 80094e6:	f7f6 fe83 	bl	80001f0 <memchr>
 80094ea:	b140      	cbz	r0, 80094fe <_svfiprintf_r+0x152>
 80094ec:	2340      	movs	r3, #64	; 0x40
 80094ee:	eba0 000a 	sub.w	r0, r0, sl
 80094f2:	fa03 f000 	lsl.w	r0, r3, r0
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	4303      	orrs	r3, r0
 80094fa:	3401      	adds	r4, #1
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009502:	4826      	ldr	r0, [pc, #152]	; (800959c <_svfiprintf_r+0x1f0>)
 8009504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009508:	2206      	movs	r2, #6
 800950a:	f7f6 fe71 	bl	80001f0 <memchr>
 800950e:	2800      	cmp	r0, #0
 8009510:	d038      	beq.n	8009584 <_svfiprintf_r+0x1d8>
 8009512:	4b23      	ldr	r3, [pc, #140]	; (80095a0 <_svfiprintf_r+0x1f4>)
 8009514:	bb1b      	cbnz	r3, 800955e <_svfiprintf_r+0x1b2>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	3307      	adds	r3, #7
 800951a:	f023 0307 	bic.w	r3, r3, #7
 800951e:	3308      	adds	r3, #8
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009524:	4433      	add	r3, r6
 8009526:	9309      	str	r3, [sp, #36]	; 0x24
 8009528:	e767      	b.n	80093fa <_svfiprintf_r+0x4e>
 800952a:	fb0c 3202 	mla	r2, ip, r2, r3
 800952e:	460c      	mov	r4, r1
 8009530:	2001      	movs	r0, #1
 8009532:	e7a5      	b.n	8009480 <_svfiprintf_r+0xd4>
 8009534:	2300      	movs	r3, #0
 8009536:	3401      	adds	r4, #1
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	4619      	mov	r1, r3
 800953c:	f04f 0c0a 	mov.w	ip, #10
 8009540:	4620      	mov	r0, r4
 8009542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009546:	3a30      	subs	r2, #48	; 0x30
 8009548:	2a09      	cmp	r2, #9
 800954a:	d903      	bls.n	8009554 <_svfiprintf_r+0x1a8>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0c5      	beq.n	80094dc <_svfiprintf_r+0x130>
 8009550:	9105      	str	r1, [sp, #20]
 8009552:	e7c3      	b.n	80094dc <_svfiprintf_r+0x130>
 8009554:	fb0c 2101 	mla	r1, ip, r1, r2
 8009558:	4604      	mov	r4, r0
 800955a:	2301      	movs	r3, #1
 800955c:	e7f0      	b.n	8009540 <_svfiprintf_r+0x194>
 800955e:	ab03      	add	r3, sp, #12
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	462a      	mov	r2, r5
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <_svfiprintf_r+0x1f8>)
 8009566:	a904      	add	r1, sp, #16
 8009568:	4638      	mov	r0, r7
 800956a:	f7fc fa49 	bl	8005a00 <_printf_float>
 800956e:	1c42      	adds	r2, r0, #1
 8009570:	4606      	mov	r6, r0
 8009572:	d1d6      	bne.n	8009522 <_svfiprintf_r+0x176>
 8009574:	89ab      	ldrh	r3, [r5, #12]
 8009576:	065b      	lsls	r3, r3, #25
 8009578:	f53f af2c 	bmi.w	80093d4 <_svfiprintf_r+0x28>
 800957c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957e:	b01d      	add	sp, #116	; 0x74
 8009580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009584:	ab03      	add	r3, sp, #12
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	462a      	mov	r2, r5
 800958a:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <_svfiprintf_r+0x1f8>)
 800958c:	a904      	add	r1, sp, #16
 800958e:	4638      	mov	r0, r7
 8009590:	f7fc fcda 	bl	8005f48 <_printf_i>
 8009594:	e7eb      	b.n	800956e <_svfiprintf_r+0x1c2>
 8009596:	bf00      	nop
 8009598:	0800b66c 	.word	0x0800b66c
 800959c:	0800b676 	.word	0x0800b676
 80095a0:	08005a01 	.word	0x08005a01
 80095a4:	080092f5 	.word	0x080092f5
 80095a8:	0800b672 	.word	0x0800b672
 80095ac:	00000000 	.word	0x00000000

080095b0 <nan>:
 80095b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80095b8 <nan+0x8>
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	00000000 	.word	0x00000000
 80095bc:	7ff80000 	.word	0x7ff80000

080095c0 <_sbrk_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_sbrk_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f8 fca2 	bl	8001f14 <_sbrk>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_sbrk_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_sbrk_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	200006c0 	.word	0x200006c0

080095e0 <strncmp>:
 80095e0:	b510      	push	{r4, lr}
 80095e2:	b17a      	cbz	r2, 8009604 <strncmp+0x24>
 80095e4:	4603      	mov	r3, r0
 80095e6:	3901      	subs	r1, #1
 80095e8:	1884      	adds	r4, r0, r2
 80095ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095f2:	4290      	cmp	r0, r2
 80095f4:	d101      	bne.n	80095fa <strncmp+0x1a>
 80095f6:	42a3      	cmp	r3, r4
 80095f8:	d101      	bne.n	80095fe <strncmp+0x1e>
 80095fa:	1a80      	subs	r0, r0, r2
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	2800      	cmp	r0, #0
 8009600:	d1f3      	bne.n	80095ea <strncmp+0xa>
 8009602:	e7fa      	b.n	80095fa <strncmp+0x1a>
 8009604:	4610      	mov	r0, r2
 8009606:	e7f9      	b.n	80095fc <strncmp+0x1c>

08009608 <__ascii_wctomb>:
 8009608:	b149      	cbz	r1, 800961e <__ascii_wctomb+0x16>
 800960a:	2aff      	cmp	r2, #255	; 0xff
 800960c:	bf85      	ittet	hi
 800960e:	238a      	movhi	r3, #138	; 0x8a
 8009610:	6003      	strhi	r3, [r0, #0]
 8009612:	700a      	strbls	r2, [r1, #0]
 8009614:	f04f 30ff 	movhi.w	r0, #4294967295
 8009618:	bf98      	it	ls
 800961a:	2001      	movls	r0, #1
 800961c:	4770      	bx	lr
 800961e:	4608      	mov	r0, r1
 8009620:	4770      	bx	lr
	...

08009624 <__assert_func>:
 8009624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009626:	4614      	mov	r4, r2
 8009628:	461a      	mov	r2, r3
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <__assert_func+0x2c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4605      	mov	r5, r0
 8009630:	68d8      	ldr	r0, [r3, #12]
 8009632:	b14c      	cbz	r4, 8009648 <__assert_func+0x24>
 8009634:	4b07      	ldr	r3, [pc, #28]	; (8009654 <__assert_func+0x30>)
 8009636:	9100      	str	r1, [sp, #0]
 8009638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800963c:	4906      	ldr	r1, [pc, #24]	; (8009658 <__assert_func+0x34>)
 800963e:	462b      	mov	r3, r5
 8009640:	f000 f80e 	bl	8009660 <fiprintf>
 8009644:	f000 fa8c 	bl	8009b60 <abort>
 8009648:	4b04      	ldr	r3, [pc, #16]	; (800965c <__assert_func+0x38>)
 800964a:	461c      	mov	r4, r3
 800964c:	e7f3      	b.n	8009636 <__assert_func+0x12>
 800964e:	bf00      	nop
 8009650:	20000124 	.word	0x20000124
 8009654:	0800b67d 	.word	0x0800b67d
 8009658:	0800b68a 	.word	0x0800b68a
 800965c:	0800b6b8 	.word	0x0800b6b8

08009660 <fiprintf>:
 8009660:	b40e      	push	{r1, r2, r3}
 8009662:	b503      	push	{r0, r1, lr}
 8009664:	4601      	mov	r1, r0
 8009666:	ab03      	add	r3, sp, #12
 8009668:	4805      	ldr	r0, [pc, #20]	; (8009680 <fiprintf+0x20>)
 800966a:	f853 2b04 	ldr.w	r2, [r3], #4
 800966e:	6800      	ldr	r0, [r0, #0]
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	f000 f885 	bl	8009780 <_vfiprintf_r>
 8009676:	b002      	add	sp, #8
 8009678:	f85d eb04 	ldr.w	lr, [sp], #4
 800967c:	b003      	add	sp, #12
 800967e:	4770      	bx	lr
 8009680:	20000124 	.word	0x20000124

08009684 <memmove>:
 8009684:	4288      	cmp	r0, r1
 8009686:	b510      	push	{r4, lr}
 8009688:	eb01 0402 	add.w	r4, r1, r2
 800968c:	d902      	bls.n	8009694 <memmove+0x10>
 800968e:	4284      	cmp	r4, r0
 8009690:	4623      	mov	r3, r4
 8009692:	d807      	bhi.n	80096a4 <memmove+0x20>
 8009694:	1e43      	subs	r3, r0, #1
 8009696:	42a1      	cmp	r1, r4
 8009698:	d008      	beq.n	80096ac <memmove+0x28>
 800969a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800969e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096a2:	e7f8      	b.n	8009696 <memmove+0x12>
 80096a4:	4402      	add	r2, r0
 80096a6:	4601      	mov	r1, r0
 80096a8:	428a      	cmp	r2, r1
 80096aa:	d100      	bne.n	80096ae <memmove+0x2a>
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096b6:	e7f7      	b.n	80096a8 <memmove+0x24>

080096b8 <__malloc_lock>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__malloc_lock+0x8>)
 80096ba:	f000 bc11 	b.w	8009ee0 <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	200006c4 	.word	0x200006c4

080096c4 <__malloc_unlock>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__malloc_unlock+0x8>)
 80096c6:	f000 bc0c 	b.w	8009ee2 <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	200006c4 	.word	0x200006c4

080096d0 <_realloc_r>:
 80096d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d4:	4680      	mov	r8, r0
 80096d6:	4614      	mov	r4, r2
 80096d8:	460e      	mov	r6, r1
 80096da:	b921      	cbnz	r1, 80096e6 <_realloc_r+0x16>
 80096dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096e0:	4611      	mov	r1, r2
 80096e2:	f7ff bd93 	b.w	800920c <_malloc_r>
 80096e6:	b92a      	cbnz	r2, 80096f4 <_realloc_r+0x24>
 80096e8:	f7ff fd24 	bl	8009134 <_free_r>
 80096ec:	4625      	mov	r5, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f4:	f000 fc5c 	bl	8009fb0 <_malloc_usable_size_r>
 80096f8:	4284      	cmp	r4, r0
 80096fa:	4607      	mov	r7, r0
 80096fc:	d802      	bhi.n	8009704 <_realloc_r+0x34>
 80096fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009702:	d812      	bhi.n	800972a <_realloc_r+0x5a>
 8009704:	4621      	mov	r1, r4
 8009706:	4640      	mov	r0, r8
 8009708:	f7ff fd80 	bl	800920c <_malloc_r>
 800970c:	4605      	mov	r5, r0
 800970e:	2800      	cmp	r0, #0
 8009710:	d0ed      	beq.n	80096ee <_realloc_r+0x1e>
 8009712:	42bc      	cmp	r4, r7
 8009714:	4622      	mov	r2, r4
 8009716:	4631      	mov	r1, r6
 8009718:	bf28      	it	cs
 800971a:	463a      	movcs	r2, r7
 800971c:	f7ff f824 	bl	8008768 <memcpy>
 8009720:	4631      	mov	r1, r6
 8009722:	4640      	mov	r0, r8
 8009724:	f7ff fd06 	bl	8009134 <_free_r>
 8009728:	e7e1      	b.n	80096ee <_realloc_r+0x1e>
 800972a:	4635      	mov	r5, r6
 800972c:	e7df      	b.n	80096ee <_realloc_r+0x1e>

0800972e <__sfputc_r>:
 800972e:	6893      	ldr	r3, [r2, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	b410      	push	{r4}
 8009736:	6093      	str	r3, [r2, #8]
 8009738:	da08      	bge.n	800974c <__sfputc_r+0x1e>
 800973a:	6994      	ldr	r4, [r2, #24]
 800973c:	42a3      	cmp	r3, r4
 800973e:	db01      	blt.n	8009744 <__sfputc_r+0x16>
 8009740:	290a      	cmp	r1, #10
 8009742:	d103      	bne.n	800974c <__sfputc_r+0x1e>
 8009744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009748:	f000 b94a 	b.w	80099e0 <__swbuf_r>
 800974c:	6813      	ldr	r3, [r2, #0]
 800974e:	1c58      	adds	r0, r3, #1
 8009750:	6010      	str	r0, [r2, #0]
 8009752:	7019      	strb	r1, [r3, #0]
 8009754:	4608      	mov	r0, r1
 8009756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975a:	4770      	bx	lr

0800975c <__sfputs_r>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	4606      	mov	r6, r0
 8009760:	460f      	mov	r7, r1
 8009762:	4614      	mov	r4, r2
 8009764:	18d5      	adds	r5, r2, r3
 8009766:	42ac      	cmp	r4, r5
 8009768:	d101      	bne.n	800976e <__sfputs_r+0x12>
 800976a:	2000      	movs	r0, #0
 800976c:	e007      	b.n	800977e <__sfputs_r+0x22>
 800976e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009772:	463a      	mov	r2, r7
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ffda 	bl	800972e <__sfputc_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d1f3      	bne.n	8009766 <__sfputs_r+0xa>
 800977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009780 <_vfiprintf_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	460d      	mov	r5, r1
 8009786:	b09d      	sub	sp, #116	; 0x74
 8009788:	4614      	mov	r4, r2
 800978a:	4698      	mov	r8, r3
 800978c:	4606      	mov	r6, r0
 800978e:	b118      	cbz	r0, 8009798 <_vfiprintf_r+0x18>
 8009790:	6983      	ldr	r3, [r0, #24]
 8009792:	b90b      	cbnz	r3, 8009798 <_vfiprintf_r+0x18>
 8009794:	f000 fb06 	bl	8009da4 <__sinit>
 8009798:	4b89      	ldr	r3, [pc, #548]	; (80099c0 <_vfiprintf_r+0x240>)
 800979a:	429d      	cmp	r5, r3
 800979c:	d11b      	bne.n	80097d6 <_vfiprintf_r+0x56>
 800979e:	6875      	ldr	r5, [r6, #4]
 80097a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a2:	07d9      	lsls	r1, r3, #31
 80097a4:	d405      	bmi.n	80097b2 <_vfiprintf_r+0x32>
 80097a6:	89ab      	ldrh	r3, [r5, #12]
 80097a8:	059a      	lsls	r2, r3, #22
 80097aa:	d402      	bmi.n	80097b2 <_vfiprintf_r+0x32>
 80097ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ae:	f000 fb97 	bl	8009ee0 <__retarget_lock_acquire_recursive>
 80097b2:	89ab      	ldrh	r3, [r5, #12]
 80097b4:	071b      	lsls	r3, r3, #28
 80097b6:	d501      	bpl.n	80097bc <_vfiprintf_r+0x3c>
 80097b8:	692b      	ldr	r3, [r5, #16]
 80097ba:	b9eb      	cbnz	r3, 80097f8 <_vfiprintf_r+0x78>
 80097bc:	4629      	mov	r1, r5
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 f960 	bl	8009a84 <__swsetup_r>
 80097c4:	b1c0      	cbz	r0, 80097f8 <_vfiprintf_r+0x78>
 80097c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c8:	07dc      	lsls	r4, r3, #31
 80097ca:	d50e      	bpl.n	80097ea <_vfiprintf_r+0x6a>
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	b01d      	add	sp, #116	; 0x74
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	4b7b      	ldr	r3, [pc, #492]	; (80099c4 <_vfiprintf_r+0x244>)
 80097d8:	429d      	cmp	r5, r3
 80097da:	d101      	bne.n	80097e0 <_vfiprintf_r+0x60>
 80097dc:	68b5      	ldr	r5, [r6, #8]
 80097de:	e7df      	b.n	80097a0 <_vfiprintf_r+0x20>
 80097e0:	4b79      	ldr	r3, [pc, #484]	; (80099c8 <_vfiprintf_r+0x248>)
 80097e2:	429d      	cmp	r5, r3
 80097e4:	bf08      	it	eq
 80097e6:	68f5      	ldreq	r5, [r6, #12]
 80097e8:	e7da      	b.n	80097a0 <_vfiprintf_r+0x20>
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	0598      	lsls	r0, r3, #22
 80097ee:	d4ed      	bmi.n	80097cc <_vfiprintf_r+0x4c>
 80097f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097f2:	f000 fb76 	bl	8009ee2 <__retarget_lock_release_recursive>
 80097f6:	e7e9      	b.n	80097cc <_vfiprintf_r+0x4c>
 80097f8:	2300      	movs	r3, #0
 80097fa:	9309      	str	r3, [sp, #36]	; 0x24
 80097fc:	2320      	movs	r3, #32
 80097fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009802:	f8cd 800c 	str.w	r8, [sp, #12]
 8009806:	2330      	movs	r3, #48	; 0x30
 8009808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099cc <_vfiprintf_r+0x24c>
 800980c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009810:	f04f 0901 	mov.w	r9, #1
 8009814:	4623      	mov	r3, r4
 8009816:	469a      	mov	sl, r3
 8009818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800981c:	b10a      	cbz	r2, 8009822 <_vfiprintf_r+0xa2>
 800981e:	2a25      	cmp	r2, #37	; 0x25
 8009820:	d1f9      	bne.n	8009816 <_vfiprintf_r+0x96>
 8009822:	ebba 0b04 	subs.w	fp, sl, r4
 8009826:	d00b      	beq.n	8009840 <_vfiprintf_r+0xc0>
 8009828:	465b      	mov	r3, fp
 800982a:	4622      	mov	r2, r4
 800982c:	4629      	mov	r1, r5
 800982e:	4630      	mov	r0, r6
 8009830:	f7ff ff94 	bl	800975c <__sfputs_r>
 8009834:	3001      	adds	r0, #1
 8009836:	f000 80aa 	beq.w	800998e <_vfiprintf_r+0x20e>
 800983a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800983c:	445a      	add	r2, fp
 800983e:	9209      	str	r2, [sp, #36]	; 0x24
 8009840:	f89a 3000 	ldrb.w	r3, [sl]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80a2 	beq.w	800998e <_vfiprintf_r+0x20e>
 800984a:	2300      	movs	r3, #0
 800984c:	f04f 32ff 	mov.w	r2, #4294967295
 8009850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009854:	f10a 0a01 	add.w	sl, sl, #1
 8009858:	9304      	str	r3, [sp, #16]
 800985a:	9307      	str	r3, [sp, #28]
 800985c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009860:	931a      	str	r3, [sp, #104]	; 0x68
 8009862:	4654      	mov	r4, sl
 8009864:	2205      	movs	r2, #5
 8009866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986a:	4858      	ldr	r0, [pc, #352]	; (80099cc <_vfiprintf_r+0x24c>)
 800986c:	f7f6 fcc0 	bl	80001f0 <memchr>
 8009870:	9a04      	ldr	r2, [sp, #16]
 8009872:	b9d8      	cbnz	r0, 80098ac <_vfiprintf_r+0x12c>
 8009874:	06d1      	lsls	r1, r2, #27
 8009876:	bf44      	itt	mi
 8009878:	2320      	movmi	r3, #32
 800987a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800987e:	0713      	lsls	r3, r2, #28
 8009880:	bf44      	itt	mi
 8009882:	232b      	movmi	r3, #43	; 0x2b
 8009884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009888:	f89a 3000 	ldrb.w	r3, [sl]
 800988c:	2b2a      	cmp	r3, #42	; 0x2a
 800988e:	d015      	beq.n	80098bc <_vfiprintf_r+0x13c>
 8009890:	9a07      	ldr	r2, [sp, #28]
 8009892:	4654      	mov	r4, sl
 8009894:	2000      	movs	r0, #0
 8009896:	f04f 0c0a 	mov.w	ip, #10
 800989a:	4621      	mov	r1, r4
 800989c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098a0:	3b30      	subs	r3, #48	; 0x30
 80098a2:	2b09      	cmp	r3, #9
 80098a4:	d94e      	bls.n	8009944 <_vfiprintf_r+0x1c4>
 80098a6:	b1b0      	cbz	r0, 80098d6 <_vfiprintf_r+0x156>
 80098a8:	9207      	str	r2, [sp, #28]
 80098aa:	e014      	b.n	80098d6 <_vfiprintf_r+0x156>
 80098ac:	eba0 0308 	sub.w	r3, r0, r8
 80098b0:	fa09 f303 	lsl.w	r3, r9, r3
 80098b4:	4313      	orrs	r3, r2
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	46a2      	mov	sl, r4
 80098ba:	e7d2      	b.n	8009862 <_vfiprintf_r+0xe2>
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	1d19      	adds	r1, r3, #4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	9103      	str	r1, [sp, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	bfbb      	ittet	lt
 80098c8:	425b      	neglt	r3, r3
 80098ca:	f042 0202 	orrlt.w	r2, r2, #2
 80098ce:	9307      	strge	r3, [sp, #28]
 80098d0:	9307      	strlt	r3, [sp, #28]
 80098d2:	bfb8      	it	lt
 80098d4:	9204      	strlt	r2, [sp, #16]
 80098d6:	7823      	ldrb	r3, [r4, #0]
 80098d8:	2b2e      	cmp	r3, #46	; 0x2e
 80098da:	d10c      	bne.n	80098f6 <_vfiprintf_r+0x176>
 80098dc:	7863      	ldrb	r3, [r4, #1]
 80098de:	2b2a      	cmp	r3, #42	; 0x2a
 80098e0:	d135      	bne.n	800994e <_vfiprintf_r+0x1ce>
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	1d1a      	adds	r2, r3, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	9203      	str	r2, [sp, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bfb8      	it	lt
 80098ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80098f2:	3402      	adds	r4, #2
 80098f4:	9305      	str	r3, [sp, #20]
 80098f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099dc <_vfiprintf_r+0x25c>
 80098fa:	7821      	ldrb	r1, [r4, #0]
 80098fc:	2203      	movs	r2, #3
 80098fe:	4650      	mov	r0, sl
 8009900:	f7f6 fc76 	bl	80001f0 <memchr>
 8009904:	b140      	cbz	r0, 8009918 <_vfiprintf_r+0x198>
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	eba0 000a 	sub.w	r0, r0, sl
 800990c:	fa03 f000 	lsl.w	r0, r3, r0
 8009910:	9b04      	ldr	r3, [sp, #16]
 8009912:	4303      	orrs	r3, r0
 8009914:	3401      	adds	r4, #1
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991c:	482c      	ldr	r0, [pc, #176]	; (80099d0 <_vfiprintf_r+0x250>)
 800991e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009922:	2206      	movs	r2, #6
 8009924:	f7f6 fc64 	bl	80001f0 <memchr>
 8009928:	2800      	cmp	r0, #0
 800992a:	d03f      	beq.n	80099ac <_vfiprintf_r+0x22c>
 800992c:	4b29      	ldr	r3, [pc, #164]	; (80099d4 <_vfiprintf_r+0x254>)
 800992e:	bb1b      	cbnz	r3, 8009978 <_vfiprintf_r+0x1f8>
 8009930:	9b03      	ldr	r3, [sp, #12]
 8009932:	3307      	adds	r3, #7
 8009934:	f023 0307 	bic.w	r3, r3, #7
 8009938:	3308      	adds	r3, #8
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993e:	443b      	add	r3, r7
 8009940:	9309      	str	r3, [sp, #36]	; 0x24
 8009942:	e767      	b.n	8009814 <_vfiprintf_r+0x94>
 8009944:	fb0c 3202 	mla	r2, ip, r2, r3
 8009948:	460c      	mov	r4, r1
 800994a:	2001      	movs	r0, #1
 800994c:	e7a5      	b.n	800989a <_vfiprintf_r+0x11a>
 800994e:	2300      	movs	r3, #0
 8009950:	3401      	adds	r4, #1
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	4619      	mov	r1, r3
 8009956:	f04f 0c0a 	mov.w	ip, #10
 800995a:	4620      	mov	r0, r4
 800995c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009960:	3a30      	subs	r2, #48	; 0x30
 8009962:	2a09      	cmp	r2, #9
 8009964:	d903      	bls.n	800996e <_vfiprintf_r+0x1ee>
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0c5      	beq.n	80098f6 <_vfiprintf_r+0x176>
 800996a:	9105      	str	r1, [sp, #20]
 800996c:	e7c3      	b.n	80098f6 <_vfiprintf_r+0x176>
 800996e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009972:	4604      	mov	r4, r0
 8009974:	2301      	movs	r3, #1
 8009976:	e7f0      	b.n	800995a <_vfiprintf_r+0x1da>
 8009978:	ab03      	add	r3, sp, #12
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	462a      	mov	r2, r5
 800997e:	4b16      	ldr	r3, [pc, #88]	; (80099d8 <_vfiprintf_r+0x258>)
 8009980:	a904      	add	r1, sp, #16
 8009982:	4630      	mov	r0, r6
 8009984:	f7fc f83c 	bl	8005a00 <_printf_float>
 8009988:	4607      	mov	r7, r0
 800998a:	1c78      	adds	r0, r7, #1
 800998c:	d1d6      	bne.n	800993c <_vfiprintf_r+0x1bc>
 800998e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009990:	07d9      	lsls	r1, r3, #31
 8009992:	d405      	bmi.n	80099a0 <_vfiprintf_r+0x220>
 8009994:	89ab      	ldrh	r3, [r5, #12]
 8009996:	059a      	lsls	r2, r3, #22
 8009998:	d402      	bmi.n	80099a0 <_vfiprintf_r+0x220>
 800999a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800999c:	f000 faa1 	bl	8009ee2 <__retarget_lock_release_recursive>
 80099a0:	89ab      	ldrh	r3, [r5, #12]
 80099a2:	065b      	lsls	r3, r3, #25
 80099a4:	f53f af12 	bmi.w	80097cc <_vfiprintf_r+0x4c>
 80099a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099aa:	e711      	b.n	80097d0 <_vfiprintf_r+0x50>
 80099ac:	ab03      	add	r3, sp, #12
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	462a      	mov	r2, r5
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <_vfiprintf_r+0x258>)
 80099b4:	a904      	add	r1, sp, #16
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7fc fac6 	bl	8005f48 <_printf_i>
 80099bc:	e7e4      	b.n	8009988 <_vfiprintf_r+0x208>
 80099be:	bf00      	nop
 80099c0:	0800b6dc 	.word	0x0800b6dc
 80099c4:	0800b6fc 	.word	0x0800b6fc
 80099c8:	0800b6bc 	.word	0x0800b6bc
 80099cc:	0800b66c 	.word	0x0800b66c
 80099d0:	0800b676 	.word	0x0800b676
 80099d4:	08005a01 	.word	0x08005a01
 80099d8:	0800975d 	.word	0x0800975d
 80099dc:	0800b672 	.word	0x0800b672

080099e0 <__swbuf_r>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	460e      	mov	r6, r1
 80099e4:	4614      	mov	r4, r2
 80099e6:	4605      	mov	r5, r0
 80099e8:	b118      	cbz	r0, 80099f2 <__swbuf_r+0x12>
 80099ea:	6983      	ldr	r3, [r0, #24]
 80099ec:	b90b      	cbnz	r3, 80099f2 <__swbuf_r+0x12>
 80099ee:	f000 f9d9 	bl	8009da4 <__sinit>
 80099f2:	4b21      	ldr	r3, [pc, #132]	; (8009a78 <__swbuf_r+0x98>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	d12b      	bne.n	8009a50 <__swbuf_r+0x70>
 80099f8:	686c      	ldr	r4, [r5, #4]
 80099fa:	69a3      	ldr	r3, [r4, #24]
 80099fc:	60a3      	str	r3, [r4, #8]
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	071a      	lsls	r2, r3, #28
 8009a02:	d52f      	bpl.n	8009a64 <__swbuf_r+0x84>
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	b36b      	cbz	r3, 8009a64 <__swbuf_r+0x84>
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	6820      	ldr	r0, [r4, #0]
 8009a0c:	1ac0      	subs	r0, r0, r3
 8009a0e:	6963      	ldr	r3, [r4, #20]
 8009a10:	b2f6      	uxtb	r6, r6
 8009a12:	4283      	cmp	r3, r0
 8009a14:	4637      	mov	r7, r6
 8009a16:	dc04      	bgt.n	8009a22 <__swbuf_r+0x42>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 f92e 	bl	8009c7c <_fflush_r>
 8009a20:	bb30      	cbnz	r0, 8009a70 <__swbuf_r+0x90>
 8009a22:	68a3      	ldr	r3, [r4, #8]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	701e      	strb	r6, [r3, #0]
 8009a30:	6963      	ldr	r3, [r4, #20]
 8009a32:	3001      	adds	r0, #1
 8009a34:	4283      	cmp	r3, r0
 8009a36:	d004      	beq.n	8009a42 <__swbuf_r+0x62>
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d506      	bpl.n	8009a4c <__swbuf_r+0x6c>
 8009a3e:	2e0a      	cmp	r6, #10
 8009a40:	d104      	bne.n	8009a4c <__swbuf_r+0x6c>
 8009a42:	4621      	mov	r1, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	f000 f919 	bl	8009c7c <_fflush_r>
 8009a4a:	b988      	cbnz	r0, 8009a70 <__swbuf_r+0x90>
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <__swbuf_r+0x9c>)
 8009a52:	429c      	cmp	r4, r3
 8009a54:	d101      	bne.n	8009a5a <__swbuf_r+0x7a>
 8009a56:	68ac      	ldr	r4, [r5, #8]
 8009a58:	e7cf      	b.n	80099fa <__swbuf_r+0x1a>
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <__swbuf_r+0xa0>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	bf08      	it	eq
 8009a60:	68ec      	ldreq	r4, [r5, #12]
 8009a62:	e7ca      	b.n	80099fa <__swbuf_r+0x1a>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 f80c 	bl	8009a84 <__swsetup_r>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d0cb      	beq.n	8009a08 <__swbuf_r+0x28>
 8009a70:	f04f 37ff 	mov.w	r7, #4294967295
 8009a74:	e7ea      	b.n	8009a4c <__swbuf_r+0x6c>
 8009a76:	bf00      	nop
 8009a78:	0800b6dc 	.word	0x0800b6dc
 8009a7c:	0800b6fc 	.word	0x0800b6fc
 8009a80:	0800b6bc 	.word	0x0800b6bc

08009a84 <__swsetup_r>:
 8009a84:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <__swsetup_r+0xcc>)
 8009a86:	b570      	push	{r4, r5, r6, lr}
 8009a88:	681d      	ldr	r5, [r3, #0]
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	b125      	cbz	r5, 8009a9a <__swsetup_r+0x16>
 8009a90:	69ab      	ldr	r3, [r5, #24]
 8009a92:	b913      	cbnz	r3, 8009a9a <__swsetup_r+0x16>
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 f985 	bl	8009da4 <__sinit>
 8009a9a:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <__swsetup_r+0xd0>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d10f      	bne.n	8009ac0 <__swsetup_r+0x3c>
 8009aa0:	686c      	ldr	r4, [r5, #4]
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aa8:	0719      	lsls	r1, r3, #28
 8009aaa:	d42c      	bmi.n	8009b06 <__swsetup_r+0x82>
 8009aac:	06dd      	lsls	r5, r3, #27
 8009aae:	d411      	bmi.n	8009ad4 <__swsetup_r+0x50>
 8009ab0:	2309      	movs	r3, #9
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	e03e      	b.n	8009b3e <__swsetup_r+0xba>
 8009ac0:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <__swsetup_r+0xd4>)
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d101      	bne.n	8009aca <__swsetup_r+0x46>
 8009ac6:	68ac      	ldr	r4, [r5, #8]
 8009ac8:	e7eb      	b.n	8009aa2 <__swsetup_r+0x1e>
 8009aca:	4b24      	ldr	r3, [pc, #144]	; (8009b5c <__swsetup_r+0xd8>)
 8009acc:	429c      	cmp	r4, r3
 8009ace:	bf08      	it	eq
 8009ad0:	68ec      	ldreq	r4, [r5, #12]
 8009ad2:	e7e6      	b.n	8009aa2 <__swsetup_r+0x1e>
 8009ad4:	0758      	lsls	r0, r3, #29
 8009ad6:	d512      	bpl.n	8009afe <__swsetup_r+0x7a>
 8009ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ada:	b141      	cbz	r1, 8009aee <__swsetup_r+0x6a>
 8009adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	d002      	beq.n	8009aea <__swsetup_r+0x66>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff fb25 	bl	8009134 <_free_r>
 8009aea:	2300      	movs	r3, #0
 8009aec:	6363      	str	r3, [r4, #52]	; 0x34
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009af4:	81a3      	strh	r3, [r4, #12]
 8009af6:	2300      	movs	r3, #0
 8009af8:	6063      	str	r3, [r4, #4]
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	f043 0308 	orr.w	r3, r3, #8
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	b94b      	cbnz	r3, 8009b1e <__swsetup_r+0x9a>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b14:	d003      	beq.n	8009b1e <__swsetup_r+0x9a>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 fa09 	bl	8009f30 <__smakebuf_r>
 8009b1e:	89a0      	ldrh	r0, [r4, #12]
 8009b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b24:	f010 0301 	ands.w	r3, r0, #1
 8009b28:	d00a      	beq.n	8009b40 <__swsetup_r+0xbc>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60a3      	str	r3, [r4, #8]
 8009b2e:	6963      	ldr	r3, [r4, #20]
 8009b30:	425b      	negs	r3, r3
 8009b32:	61a3      	str	r3, [r4, #24]
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	b943      	cbnz	r3, 8009b4a <__swsetup_r+0xc6>
 8009b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b3c:	d1ba      	bne.n	8009ab4 <__swsetup_r+0x30>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	0781      	lsls	r1, r0, #30
 8009b42:	bf58      	it	pl
 8009b44:	6963      	ldrpl	r3, [r4, #20]
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	e7f4      	b.n	8009b34 <__swsetup_r+0xb0>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e7f7      	b.n	8009b3e <__swsetup_r+0xba>
 8009b4e:	bf00      	nop
 8009b50:	20000124 	.word	0x20000124
 8009b54:	0800b6dc 	.word	0x0800b6dc
 8009b58:	0800b6fc 	.word	0x0800b6fc
 8009b5c:	0800b6bc 	.word	0x0800b6bc

08009b60 <abort>:
 8009b60:	b508      	push	{r3, lr}
 8009b62:	2006      	movs	r0, #6
 8009b64:	f000 fa54 	bl	800a010 <raise>
 8009b68:	2001      	movs	r0, #1
 8009b6a:	f7f8 f95b 	bl	8001e24 <_exit>
	...

08009b70 <__sflush_r>:
 8009b70:	898a      	ldrh	r2, [r1, #12]
 8009b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b76:	4605      	mov	r5, r0
 8009b78:	0710      	lsls	r0, r2, #28
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	d458      	bmi.n	8009c30 <__sflush_r+0xc0>
 8009b7e:	684b      	ldr	r3, [r1, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dc05      	bgt.n	8009b90 <__sflush_r+0x20>
 8009b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	dc02      	bgt.n	8009b90 <__sflush_r+0x20>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b92:	2e00      	cmp	r6, #0
 8009b94:	d0f9      	beq.n	8009b8a <__sflush_r+0x1a>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b9c:	682f      	ldr	r7, [r5, #0]
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	d032      	beq.n	8009c08 <__sflush_r+0x98>
 8009ba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	075a      	lsls	r2, r3, #29
 8009ba8:	d505      	bpl.n	8009bb6 <__sflush_r+0x46>
 8009baa:	6863      	ldr	r3, [r4, #4]
 8009bac:	1ac0      	subs	r0, r0, r3
 8009bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bb0:	b10b      	cbz	r3, 8009bb6 <__sflush_r+0x46>
 8009bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bb4:	1ac0      	subs	r0, r0, r3
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4602      	mov	r2, r0
 8009bba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bbc:	6a21      	ldr	r1, [r4, #32]
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	47b0      	blx	r6
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	d106      	bne.n	8009bd6 <__sflush_r+0x66>
 8009bc8:	6829      	ldr	r1, [r5, #0]
 8009bca:	291d      	cmp	r1, #29
 8009bcc:	d82c      	bhi.n	8009c28 <__sflush_r+0xb8>
 8009bce:	4a2a      	ldr	r2, [pc, #168]	; (8009c78 <__sflush_r+0x108>)
 8009bd0:	40ca      	lsrs	r2, r1
 8009bd2:	07d6      	lsls	r6, r2, #31
 8009bd4:	d528      	bpl.n	8009c28 <__sflush_r+0xb8>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	6062      	str	r2, [r4, #4]
 8009bda:	04d9      	lsls	r1, r3, #19
 8009bdc:	6922      	ldr	r2, [r4, #16]
 8009bde:	6022      	str	r2, [r4, #0]
 8009be0:	d504      	bpl.n	8009bec <__sflush_r+0x7c>
 8009be2:	1c42      	adds	r2, r0, #1
 8009be4:	d101      	bne.n	8009bea <__sflush_r+0x7a>
 8009be6:	682b      	ldr	r3, [r5, #0]
 8009be8:	b903      	cbnz	r3, 8009bec <__sflush_r+0x7c>
 8009bea:	6560      	str	r0, [r4, #84]	; 0x54
 8009bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bee:	602f      	str	r7, [r5, #0]
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	d0ca      	beq.n	8009b8a <__sflush_r+0x1a>
 8009bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	d002      	beq.n	8009c02 <__sflush_r+0x92>
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7ff fa99 	bl	8009134 <_free_r>
 8009c02:	2000      	movs	r0, #0
 8009c04:	6360      	str	r0, [r4, #52]	; 0x34
 8009c06:	e7c1      	b.n	8009b8c <__sflush_r+0x1c>
 8009c08:	6a21      	ldr	r1, [r4, #32]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	47b0      	blx	r6
 8009c10:	1c41      	adds	r1, r0, #1
 8009c12:	d1c7      	bne.n	8009ba4 <__sflush_r+0x34>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0c4      	beq.n	8009ba4 <__sflush_r+0x34>
 8009c1a:	2b1d      	cmp	r3, #29
 8009c1c:	d001      	beq.n	8009c22 <__sflush_r+0xb2>
 8009c1e:	2b16      	cmp	r3, #22
 8009c20:	d101      	bne.n	8009c26 <__sflush_r+0xb6>
 8009c22:	602f      	str	r7, [r5, #0]
 8009c24:	e7b1      	b.n	8009b8a <__sflush_r+0x1a>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	e7ad      	b.n	8009b8c <__sflush_r+0x1c>
 8009c30:	690f      	ldr	r7, [r1, #16]
 8009c32:	2f00      	cmp	r7, #0
 8009c34:	d0a9      	beq.n	8009b8a <__sflush_r+0x1a>
 8009c36:	0793      	lsls	r3, r2, #30
 8009c38:	680e      	ldr	r6, [r1, #0]
 8009c3a:	bf08      	it	eq
 8009c3c:	694b      	ldreq	r3, [r1, #20]
 8009c3e:	600f      	str	r7, [r1, #0]
 8009c40:	bf18      	it	ne
 8009c42:	2300      	movne	r3, #0
 8009c44:	eba6 0807 	sub.w	r8, r6, r7
 8009c48:	608b      	str	r3, [r1, #8]
 8009c4a:	f1b8 0f00 	cmp.w	r8, #0
 8009c4e:	dd9c      	ble.n	8009b8a <__sflush_r+0x1a>
 8009c50:	6a21      	ldr	r1, [r4, #32]
 8009c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c54:	4643      	mov	r3, r8
 8009c56:	463a      	mov	r2, r7
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b0      	blx	r6
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dc06      	bgt.n	8009c6e <__sflush_r+0xfe>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	e78e      	b.n	8009b8c <__sflush_r+0x1c>
 8009c6e:	4407      	add	r7, r0
 8009c70:	eba8 0800 	sub.w	r8, r8, r0
 8009c74:	e7e9      	b.n	8009c4a <__sflush_r+0xda>
 8009c76:	bf00      	nop
 8009c78:	20400001 	.word	0x20400001

08009c7c <_fflush_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	690b      	ldr	r3, [r1, #16]
 8009c80:	4605      	mov	r5, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	b913      	cbnz	r3, 8009c8c <_fflush_r+0x10>
 8009c86:	2500      	movs	r5, #0
 8009c88:	4628      	mov	r0, r5
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	b118      	cbz	r0, 8009c96 <_fflush_r+0x1a>
 8009c8e:	6983      	ldr	r3, [r0, #24]
 8009c90:	b90b      	cbnz	r3, 8009c96 <_fflush_r+0x1a>
 8009c92:	f000 f887 	bl	8009da4 <__sinit>
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <_fflush_r+0x6c>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	d11b      	bne.n	8009cd4 <_fflush_r+0x58>
 8009c9c:	686c      	ldr	r4, [r5, #4]
 8009c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0ef      	beq.n	8009c86 <_fflush_r+0xa>
 8009ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ca8:	07d0      	lsls	r0, r2, #31
 8009caa:	d404      	bmi.n	8009cb6 <_fflush_r+0x3a>
 8009cac:	0599      	lsls	r1, r3, #22
 8009cae:	d402      	bmi.n	8009cb6 <_fflush_r+0x3a>
 8009cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cb2:	f000 f915 	bl	8009ee0 <__retarget_lock_acquire_recursive>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	4621      	mov	r1, r4
 8009cba:	f7ff ff59 	bl	8009b70 <__sflush_r>
 8009cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cc0:	07da      	lsls	r2, r3, #31
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	d4e0      	bmi.n	8009c88 <_fflush_r+0xc>
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	059b      	lsls	r3, r3, #22
 8009cca:	d4dd      	bmi.n	8009c88 <_fflush_r+0xc>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cce:	f000 f908 	bl	8009ee2 <__retarget_lock_release_recursive>
 8009cd2:	e7d9      	b.n	8009c88 <_fflush_r+0xc>
 8009cd4:	4b05      	ldr	r3, [pc, #20]	; (8009cec <_fflush_r+0x70>)
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	d101      	bne.n	8009cde <_fflush_r+0x62>
 8009cda:	68ac      	ldr	r4, [r5, #8]
 8009cdc:	e7df      	b.n	8009c9e <_fflush_r+0x22>
 8009cde:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <_fflush_r+0x74>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	bf08      	it	eq
 8009ce4:	68ec      	ldreq	r4, [r5, #12]
 8009ce6:	e7da      	b.n	8009c9e <_fflush_r+0x22>
 8009ce8:	0800b6dc 	.word	0x0800b6dc
 8009cec:	0800b6fc 	.word	0x0800b6fc
 8009cf0:	0800b6bc 	.word	0x0800b6bc

08009cf4 <std>:
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8009cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d02:	6083      	str	r3, [r0, #8]
 8009d04:	8181      	strh	r1, [r0, #12]
 8009d06:	6643      	str	r3, [r0, #100]	; 0x64
 8009d08:	81c2      	strh	r2, [r0, #14]
 8009d0a:	6183      	str	r3, [r0, #24]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	2208      	movs	r2, #8
 8009d10:	305c      	adds	r0, #92	; 0x5c
 8009d12:	f7fb fdcd 	bl	80058b0 <memset>
 8009d16:	4b05      	ldr	r3, [pc, #20]	; (8009d2c <std+0x38>)
 8009d18:	6263      	str	r3, [r4, #36]	; 0x24
 8009d1a:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <std+0x3c>)
 8009d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d1e:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <std+0x40>)
 8009d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d22:	4b05      	ldr	r3, [pc, #20]	; (8009d38 <std+0x44>)
 8009d24:	6224      	str	r4, [r4, #32]
 8009d26:	6323      	str	r3, [r4, #48]	; 0x30
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800a049 	.word	0x0800a049
 8009d30:	0800a06b 	.word	0x0800a06b
 8009d34:	0800a0a3 	.word	0x0800a0a3
 8009d38:	0800a0c7 	.word	0x0800a0c7

08009d3c <_cleanup_r>:
 8009d3c:	4901      	ldr	r1, [pc, #4]	; (8009d44 <_cleanup_r+0x8>)
 8009d3e:	f000 b8af 	b.w	8009ea0 <_fwalk_reent>
 8009d42:	bf00      	nop
 8009d44:	08009c7d 	.word	0x08009c7d

08009d48 <__sfmoreglue>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	2268      	movs	r2, #104	; 0x68
 8009d4c:	1e4d      	subs	r5, r1, #1
 8009d4e:	4355      	muls	r5, r2
 8009d50:	460e      	mov	r6, r1
 8009d52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d56:	f7ff fa59 	bl	800920c <_malloc_r>
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	b140      	cbz	r0, 8009d70 <__sfmoreglue+0x28>
 8009d5e:	2100      	movs	r1, #0
 8009d60:	e9c0 1600 	strd	r1, r6, [r0]
 8009d64:	300c      	adds	r0, #12
 8009d66:	60a0      	str	r0, [r4, #8]
 8009d68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d6c:	f7fb fda0 	bl	80058b0 <memset>
 8009d70:	4620      	mov	r0, r4
 8009d72:	bd70      	pop	{r4, r5, r6, pc}

08009d74 <__sfp_lock_acquire>:
 8009d74:	4801      	ldr	r0, [pc, #4]	; (8009d7c <__sfp_lock_acquire+0x8>)
 8009d76:	f000 b8b3 	b.w	8009ee0 <__retarget_lock_acquire_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	200006c5 	.word	0x200006c5

08009d80 <__sfp_lock_release>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__sfp_lock_release+0x8>)
 8009d82:	f000 b8ae 	b.w	8009ee2 <__retarget_lock_release_recursive>
 8009d86:	bf00      	nop
 8009d88:	200006c5 	.word	0x200006c5

08009d8c <__sinit_lock_acquire>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__sinit_lock_acquire+0x8>)
 8009d8e:	f000 b8a7 	b.w	8009ee0 <__retarget_lock_acquire_recursive>
 8009d92:	bf00      	nop
 8009d94:	200006c6 	.word	0x200006c6

08009d98 <__sinit_lock_release>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__sinit_lock_release+0x8>)
 8009d9a:	f000 b8a2 	b.w	8009ee2 <__retarget_lock_release_recursive>
 8009d9e:	bf00      	nop
 8009da0:	200006c6 	.word	0x200006c6

08009da4 <__sinit>:
 8009da4:	b510      	push	{r4, lr}
 8009da6:	4604      	mov	r4, r0
 8009da8:	f7ff fff0 	bl	8009d8c <__sinit_lock_acquire>
 8009dac:	69a3      	ldr	r3, [r4, #24]
 8009dae:	b11b      	cbz	r3, 8009db8 <__sinit+0x14>
 8009db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009db4:	f7ff bff0 	b.w	8009d98 <__sinit_lock_release>
 8009db8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dbc:	6523      	str	r3, [r4, #80]	; 0x50
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <__sinit+0x68>)
 8009dc0:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <__sinit+0x6c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	bf04      	itt	eq
 8009dca:	2301      	moveq	r3, #1
 8009dcc:	61a3      	streq	r3, [r4, #24]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 f820 	bl	8009e14 <__sfp>
 8009dd4:	6060      	str	r0, [r4, #4]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 f81c 	bl	8009e14 <__sfp>
 8009ddc:	60a0      	str	r0, [r4, #8]
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 f818 	bl	8009e14 <__sfp>
 8009de4:	2200      	movs	r2, #0
 8009de6:	60e0      	str	r0, [r4, #12]
 8009de8:	2104      	movs	r1, #4
 8009dea:	6860      	ldr	r0, [r4, #4]
 8009dec:	f7ff ff82 	bl	8009cf4 <std>
 8009df0:	68a0      	ldr	r0, [r4, #8]
 8009df2:	2201      	movs	r2, #1
 8009df4:	2109      	movs	r1, #9
 8009df6:	f7ff ff7d 	bl	8009cf4 <std>
 8009dfa:	68e0      	ldr	r0, [r4, #12]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	2112      	movs	r1, #18
 8009e00:	f7ff ff78 	bl	8009cf4 <std>
 8009e04:	2301      	movs	r3, #1
 8009e06:	61a3      	str	r3, [r4, #24]
 8009e08:	e7d2      	b.n	8009db0 <__sinit+0xc>
 8009e0a:	bf00      	nop
 8009e0c:	0800b274 	.word	0x0800b274
 8009e10:	08009d3d 	.word	0x08009d3d

08009e14 <__sfp>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	4607      	mov	r7, r0
 8009e18:	f7ff ffac 	bl	8009d74 <__sfp_lock_acquire>
 8009e1c:	4b1e      	ldr	r3, [pc, #120]	; (8009e98 <__sfp+0x84>)
 8009e1e:	681e      	ldr	r6, [r3, #0]
 8009e20:	69b3      	ldr	r3, [r6, #24]
 8009e22:	b913      	cbnz	r3, 8009e2a <__sfp+0x16>
 8009e24:	4630      	mov	r0, r6
 8009e26:	f7ff ffbd 	bl	8009da4 <__sinit>
 8009e2a:	3648      	adds	r6, #72	; 0x48
 8009e2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	d503      	bpl.n	8009e3c <__sfp+0x28>
 8009e34:	6833      	ldr	r3, [r6, #0]
 8009e36:	b30b      	cbz	r3, 8009e7c <__sfp+0x68>
 8009e38:	6836      	ldr	r6, [r6, #0]
 8009e3a:	e7f7      	b.n	8009e2c <__sfp+0x18>
 8009e3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e40:	b9d5      	cbnz	r5, 8009e78 <__sfp+0x64>
 8009e42:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <__sfp+0x88>)
 8009e44:	60e3      	str	r3, [r4, #12]
 8009e46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e4a:	6665      	str	r5, [r4, #100]	; 0x64
 8009e4c:	f000 f847 	bl	8009ede <__retarget_lock_init_recursive>
 8009e50:	f7ff ff96 	bl	8009d80 <__sfp_lock_release>
 8009e54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e5c:	6025      	str	r5, [r4, #0]
 8009e5e:	61a5      	str	r5, [r4, #24]
 8009e60:	2208      	movs	r2, #8
 8009e62:	4629      	mov	r1, r5
 8009e64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e68:	f7fb fd22 	bl	80058b0 <memset>
 8009e6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e74:	4620      	mov	r0, r4
 8009e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e78:	3468      	adds	r4, #104	; 0x68
 8009e7a:	e7d9      	b.n	8009e30 <__sfp+0x1c>
 8009e7c:	2104      	movs	r1, #4
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7ff ff62 	bl	8009d48 <__sfmoreglue>
 8009e84:	4604      	mov	r4, r0
 8009e86:	6030      	str	r0, [r6, #0]
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1d5      	bne.n	8009e38 <__sfp+0x24>
 8009e8c:	f7ff ff78 	bl	8009d80 <__sfp_lock_release>
 8009e90:	230c      	movs	r3, #12
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	e7ee      	b.n	8009e74 <__sfp+0x60>
 8009e96:	bf00      	nop
 8009e98:	0800b274 	.word	0x0800b274
 8009e9c:	ffff0001 	.word	0xffff0001

08009ea0 <_fwalk_reent>:
 8009ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	4688      	mov	r8, r1
 8009ea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009eac:	2700      	movs	r7, #0
 8009eae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eb2:	f1b9 0901 	subs.w	r9, r9, #1
 8009eb6:	d505      	bpl.n	8009ec4 <_fwalk_reent+0x24>
 8009eb8:	6824      	ldr	r4, [r4, #0]
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d1f7      	bne.n	8009eae <_fwalk_reent+0xe>
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ec4:	89ab      	ldrh	r3, [r5, #12]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d907      	bls.n	8009eda <_fwalk_reent+0x3a>
 8009eca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	d003      	beq.n	8009eda <_fwalk_reent+0x3a>
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	47c0      	blx	r8
 8009ed8:	4307      	orrs	r7, r0
 8009eda:	3568      	adds	r5, #104	; 0x68
 8009edc:	e7e9      	b.n	8009eb2 <_fwalk_reent+0x12>

08009ede <__retarget_lock_init_recursive>:
 8009ede:	4770      	bx	lr

08009ee0 <__retarget_lock_acquire_recursive>:
 8009ee0:	4770      	bx	lr

08009ee2 <__retarget_lock_release_recursive>:
 8009ee2:	4770      	bx	lr

08009ee4 <__swhatbuf_r>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	460e      	mov	r6, r1
 8009ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eec:	2900      	cmp	r1, #0
 8009eee:	b096      	sub	sp, #88	; 0x58
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	461d      	mov	r5, r3
 8009ef4:	da08      	bge.n	8009f08 <__swhatbuf_r+0x24>
 8009ef6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	602a      	str	r2, [r5, #0]
 8009efe:	061a      	lsls	r2, r3, #24
 8009f00:	d410      	bmi.n	8009f24 <__swhatbuf_r+0x40>
 8009f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f06:	e00e      	b.n	8009f26 <__swhatbuf_r+0x42>
 8009f08:	466a      	mov	r2, sp
 8009f0a:	f000 f903 	bl	800a114 <_fstat_r>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	dbf1      	blt.n	8009ef6 <__swhatbuf_r+0x12>
 8009f12:	9a01      	ldr	r2, [sp, #4]
 8009f14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f1c:	425a      	negs	r2, r3
 8009f1e:	415a      	adcs	r2, r3
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	e7ee      	b.n	8009f02 <__swhatbuf_r+0x1e>
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	2000      	movs	r0, #0
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	b016      	add	sp, #88	; 0x58
 8009f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f30 <__smakebuf_r>:
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f34:	079d      	lsls	r5, r3, #30
 8009f36:	4606      	mov	r6, r0
 8009f38:	460c      	mov	r4, r1
 8009f3a:	d507      	bpl.n	8009f4c <__smakebuf_r+0x1c>
 8009f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	2301      	movs	r3, #1
 8009f46:	6163      	str	r3, [r4, #20]
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}
 8009f4c:	ab01      	add	r3, sp, #4
 8009f4e:	466a      	mov	r2, sp
 8009f50:	f7ff ffc8 	bl	8009ee4 <__swhatbuf_r>
 8009f54:	9900      	ldr	r1, [sp, #0]
 8009f56:	4605      	mov	r5, r0
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff f957 	bl	800920c <_malloc_r>
 8009f5e:	b948      	cbnz	r0, 8009f74 <__smakebuf_r+0x44>
 8009f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f64:	059a      	lsls	r2, r3, #22
 8009f66:	d4ef      	bmi.n	8009f48 <__smakebuf_r+0x18>
 8009f68:	f023 0303 	bic.w	r3, r3, #3
 8009f6c:	f043 0302 	orr.w	r3, r3, #2
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	e7e3      	b.n	8009f3c <__smakebuf_r+0xc>
 8009f74:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <__smakebuf_r+0x7c>)
 8009f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	6020      	str	r0, [r4, #0]
 8009f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f80:	81a3      	strh	r3, [r4, #12]
 8009f82:	9b00      	ldr	r3, [sp, #0]
 8009f84:	6163      	str	r3, [r4, #20]
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	6120      	str	r0, [r4, #16]
 8009f8a:	b15b      	cbz	r3, 8009fa4 <__smakebuf_r+0x74>
 8009f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f90:	4630      	mov	r0, r6
 8009f92:	f000 f8d1 	bl	800a138 <_isatty_r>
 8009f96:	b128      	cbz	r0, 8009fa4 <__smakebuf_r+0x74>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	89a0      	ldrh	r0, [r4, #12]
 8009fa6:	4305      	orrs	r5, r0
 8009fa8:	81a5      	strh	r5, [r4, #12]
 8009faa:	e7cd      	b.n	8009f48 <__smakebuf_r+0x18>
 8009fac:	08009d3d 	.word	0x08009d3d

08009fb0 <_malloc_usable_size_r>:
 8009fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb4:	1f18      	subs	r0, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	bfbc      	itt	lt
 8009fba:	580b      	ldrlt	r3, [r1, r0]
 8009fbc:	18c0      	addlt	r0, r0, r3
 8009fbe:	4770      	bx	lr

08009fc0 <_raise_r>:
 8009fc0:	291f      	cmp	r1, #31
 8009fc2:	b538      	push	{r3, r4, r5, lr}
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	d904      	bls.n	8009fd4 <_raise_r+0x14>
 8009fca:	2316      	movs	r3, #22
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fd6:	b112      	cbz	r2, 8009fde <_raise_r+0x1e>
 8009fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fdc:	b94b      	cbnz	r3, 8009ff2 <_raise_r+0x32>
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 f830 	bl	800a044 <_getpid_r>
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	4620      	mov	r0, r4
 8009fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fee:	f000 b817 	b.w	800a020 <_kill_r>
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d00a      	beq.n	800a00c <_raise_r+0x4c>
 8009ff6:	1c59      	adds	r1, r3, #1
 8009ff8:	d103      	bne.n	800a002 <_raise_r+0x42>
 8009ffa:	2316      	movs	r3, #22
 8009ffc:	6003      	str	r3, [r0, #0]
 8009ffe:	2001      	movs	r0, #1
 800a000:	e7e7      	b.n	8009fd2 <_raise_r+0x12>
 800a002:	2400      	movs	r4, #0
 800a004:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a008:	4628      	mov	r0, r5
 800a00a:	4798      	blx	r3
 800a00c:	2000      	movs	r0, #0
 800a00e:	e7e0      	b.n	8009fd2 <_raise_r+0x12>

0800a010 <raise>:
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <raise+0xc>)
 800a012:	4601      	mov	r1, r0
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f7ff bfd3 	b.w	8009fc0 <_raise_r>
 800a01a:	bf00      	nop
 800a01c:	20000124 	.word	0x20000124

0800a020 <_kill_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	; (800a040 <_kill_r+0x20>)
 800a024:	2300      	movs	r3, #0
 800a026:	4604      	mov	r4, r0
 800a028:	4608      	mov	r0, r1
 800a02a:	4611      	mov	r1, r2
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	f7f7 fee9 	bl	8001e04 <_kill>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d102      	bne.n	800a03c <_kill_r+0x1c>
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	b103      	cbz	r3, 800a03c <_kill_r+0x1c>
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	200006c0 	.word	0x200006c0

0800a044 <_getpid_r>:
 800a044:	f7f7 bed6 	b.w	8001df4 <_getpid>

0800a048 <__sread>:
 800a048:	b510      	push	{r4, lr}
 800a04a:	460c      	mov	r4, r1
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	f000 f894 	bl	800a17c <_read_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	bfab      	itete	ge
 800a058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a05a:	89a3      	ldrhlt	r3, [r4, #12]
 800a05c:	181b      	addge	r3, r3, r0
 800a05e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a062:	bfac      	ite	ge
 800a064:	6563      	strge	r3, [r4, #84]	; 0x54
 800a066:	81a3      	strhlt	r3, [r4, #12]
 800a068:	bd10      	pop	{r4, pc}

0800a06a <__swrite>:
 800a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	461f      	mov	r7, r3
 800a070:	898b      	ldrh	r3, [r1, #12]
 800a072:	05db      	lsls	r3, r3, #23
 800a074:	4605      	mov	r5, r0
 800a076:	460c      	mov	r4, r1
 800a078:	4616      	mov	r6, r2
 800a07a:	d505      	bpl.n	800a088 <__swrite+0x1e>
 800a07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a080:	2302      	movs	r3, #2
 800a082:	2200      	movs	r2, #0
 800a084:	f000 f868 	bl	800a158 <_lseek_r>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	4632      	mov	r2, r6
 800a096:	463b      	mov	r3, r7
 800a098:	4628      	mov	r0, r5
 800a09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a09e:	f000 b817 	b.w	800a0d0 <_write_r>

0800a0a2 <__sseek>:
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0aa:	f000 f855 	bl	800a158 <_lseek_r>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	bf15      	itete	ne
 800a0b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0be:	81a3      	strheq	r3, [r4, #12]
 800a0c0:	bf18      	it	ne
 800a0c2:	81a3      	strhne	r3, [r4, #12]
 800a0c4:	bd10      	pop	{r4, pc}

0800a0c6 <__sclose>:
 800a0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ca:	f000 b813 	b.w	800a0f4 <_close_r>
	...

0800a0d0 <_write_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	; (800a0f0 <_write_r+0x20>)
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f7 fec7 	bl	8001e72 <_write>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_write_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_write_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	200006c0 	.word	0x200006c0

0800a0f4 <_close_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d06      	ldr	r5, [pc, #24]	; (800a110 <_close_r+0x1c>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	f7f7 fed3 	bl	8001eaa <_close>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_close_r+0x1a>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_close_r+0x1a>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	200006c0 	.word	0x200006c0

0800a114 <_fstat_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d07      	ldr	r5, [pc, #28]	; (800a134 <_fstat_r+0x20>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	4611      	mov	r1, r2
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	f7f7 fece 	bl	8001ec2 <_fstat>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	d102      	bne.n	800a130 <_fstat_r+0x1c>
 800a12a:	682b      	ldr	r3, [r5, #0]
 800a12c:	b103      	cbz	r3, 800a130 <_fstat_r+0x1c>
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	200006c0 	.word	0x200006c0

0800a138 <_isatty_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d06      	ldr	r5, [pc, #24]	; (800a154 <_isatty_r+0x1c>)
 800a13c:	2300      	movs	r3, #0
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	602b      	str	r3, [r5, #0]
 800a144:	f7f7 fecd 	bl	8001ee2 <_isatty>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_isatty_r+0x1a>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_isatty_r+0x1a>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	200006c0 	.word	0x200006c0

0800a158 <_lseek_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4d07      	ldr	r5, [pc, #28]	; (800a178 <_lseek_r+0x20>)
 800a15c:	4604      	mov	r4, r0
 800a15e:	4608      	mov	r0, r1
 800a160:	4611      	mov	r1, r2
 800a162:	2200      	movs	r2, #0
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	f7f7 fec6 	bl	8001ef8 <_lseek>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_lseek_r+0x1e>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_lseek_r+0x1e>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	200006c0 	.word	0x200006c0

0800a17c <_read_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4d07      	ldr	r5, [pc, #28]	; (800a19c <_read_r+0x20>)
 800a180:	4604      	mov	r4, r0
 800a182:	4608      	mov	r0, r1
 800a184:	4611      	mov	r1, r2
 800a186:	2200      	movs	r2, #0
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f7f7 fe54 	bl	8001e38 <_read>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_read_r+0x1e>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_read_r+0x1e>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	200006c0 	.word	0x200006c0

0800a1a0 <sin>:
 800a1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1a2:	ec53 2b10 	vmov	r2, r3, d0
 800a1a6:	4828      	ldr	r0, [pc, #160]	; (800a248 <sin+0xa8>)
 800a1a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1ac:	4281      	cmp	r1, r0
 800a1ae:	dc07      	bgt.n	800a1c0 <sin+0x20>
 800a1b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a240 <sin+0xa0>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	b005      	add	sp, #20
 800a1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1bc:	f000 be6c 	b.w	800ae98 <__kernel_sin>
 800a1c0:	4822      	ldr	r0, [pc, #136]	; (800a24c <sin+0xac>)
 800a1c2:	4281      	cmp	r1, r0
 800a1c4:	dd09      	ble.n	800a1da <sin+0x3a>
 800a1c6:	ee10 0a10 	vmov	r0, s0
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f7f6 f864 	bl	8000298 <__aeabi_dsub>
 800a1d0:	ec41 0b10 	vmov	d0, r0, r1
 800a1d4:	b005      	add	sp, #20
 800a1d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1da:	4668      	mov	r0, sp
 800a1dc:	f000 f838 	bl	800a250 <__ieee754_rem_pio2>
 800a1e0:	f000 0003 	and.w	r0, r0, #3
 800a1e4:	2801      	cmp	r0, #1
 800a1e6:	d00c      	beq.n	800a202 <sin+0x62>
 800a1e8:	2802      	cmp	r0, #2
 800a1ea:	d011      	beq.n	800a210 <sin+0x70>
 800a1ec:	b9f0      	cbnz	r0, 800a22c <sin+0x8c>
 800a1ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1f2:	ed9d 0b00 	vldr	d0, [sp]
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	f000 fe4e 	bl	800ae98 <__kernel_sin>
 800a1fc:	ec51 0b10 	vmov	r0, r1, d0
 800a200:	e7e6      	b.n	800a1d0 <sin+0x30>
 800a202:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a206:	ed9d 0b00 	vldr	d0, [sp]
 800a20a:	f000 fa2d 	bl	800a668 <__kernel_cos>
 800a20e:	e7f5      	b.n	800a1fc <sin+0x5c>
 800a210:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a214:	ed9d 0b00 	vldr	d0, [sp]
 800a218:	2001      	movs	r0, #1
 800a21a:	f000 fe3d 	bl	800ae98 <__kernel_sin>
 800a21e:	ec53 2b10 	vmov	r2, r3, d0
 800a222:	ee10 0a10 	vmov	r0, s0
 800a226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a22a:	e7d1      	b.n	800a1d0 <sin+0x30>
 800a22c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a230:	ed9d 0b00 	vldr	d0, [sp]
 800a234:	f000 fa18 	bl	800a668 <__kernel_cos>
 800a238:	e7f1      	b.n	800a21e <sin+0x7e>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
	...
 800a248:	3fe921fb 	.word	0x3fe921fb
 800a24c:	7fefffff 	.word	0x7fefffff

0800a250 <__ieee754_rem_pio2>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	ed2d 8b02 	vpush	{d8}
 800a258:	ec55 4b10 	vmov	r4, r5, d0
 800a25c:	4bca      	ldr	r3, [pc, #808]	; (800a588 <__ieee754_rem_pio2+0x338>)
 800a25e:	b08b      	sub	sp, #44	; 0x2c
 800a260:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a264:	4598      	cmp	r8, r3
 800a266:	4682      	mov	sl, r0
 800a268:	9502      	str	r5, [sp, #8]
 800a26a:	dc08      	bgt.n	800a27e <__ieee754_rem_pio2+0x2e>
 800a26c:	2200      	movs	r2, #0
 800a26e:	2300      	movs	r3, #0
 800a270:	ed80 0b00 	vstr	d0, [r0]
 800a274:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a278:	f04f 0b00 	mov.w	fp, #0
 800a27c:	e028      	b.n	800a2d0 <__ieee754_rem_pio2+0x80>
 800a27e:	4bc3      	ldr	r3, [pc, #780]	; (800a58c <__ieee754_rem_pio2+0x33c>)
 800a280:	4598      	cmp	r8, r3
 800a282:	dc78      	bgt.n	800a376 <__ieee754_rem_pio2+0x126>
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	4ec2      	ldr	r6, [pc, #776]	; (800a590 <__ieee754_rem_pio2+0x340>)
 800a288:	2b00      	cmp	r3, #0
 800a28a:	ee10 0a10 	vmov	r0, s0
 800a28e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a550 <__ieee754_rem_pio2+0x300>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	4629      	mov	r1, r5
 800a296:	dd39      	ble.n	800a30c <__ieee754_rem_pio2+0xbc>
 800a298:	f7f5 fffe 	bl	8000298 <__aeabi_dsub>
 800a29c:	45b0      	cmp	r8, r6
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	d01b      	beq.n	800a2dc <__ieee754_rem_pio2+0x8c>
 800a2a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a558 <__ieee754_rem_pio2+0x308>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f5 fff5 	bl	8000298 <__aeabi_dsub>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	e9ca 2300 	strd	r2, r3, [sl]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f5 ffed 	bl	8000298 <__aeabi_dsub>
 800a2be:	a3a6      	add	r3, pc, #664	; (adr r3, 800a558 <__ieee754_rem_pio2+0x308>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	f7f5 ffe8 	bl	8000298 <__aeabi_dsub>
 800a2c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2cc:	f04f 0b01 	mov.w	fp, #1
 800a2d0:	4658      	mov	r0, fp
 800a2d2:	b00b      	add	sp, #44	; 0x2c
 800a2d4:	ecbd 8b02 	vpop	{d8}
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a560 <__ieee754_rem_pio2+0x310>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 ffd9 	bl	8000298 <__aeabi_dsub>
 800a2e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a568 <__ieee754_rem_pio2+0x318>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	f7f5 ffd2 	bl	8000298 <__aeabi_dsub>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	e9ca 2300 	strd	r2, r3, [sl]
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f5 ffca 	bl	8000298 <__aeabi_dsub>
 800a304:	a398      	add	r3, pc, #608	; (adr r3, 800a568 <__ieee754_rem_pio2+0x318>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	e7db      	b.n	800a2c4 <__ieee754_rem_pio2+0x74>
 800a30c:	f7f5 ffc6 	bl	800029c <__adddf3>
 800a310:	45b0      	cmp	r8, r6
 800a312:	4604      	mov	r4, r0
 800a314:	460d      	mov	r5, r1
 800a316:	d016      	beq.n	800a346 <__ieee754_rem_pio2+0xf6>
 800a318:	a38f      	add	r3, pc, #572	; (adr r3, 800a558 <__ieee754_rem_pio2+0x308>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ffbd 	bl	800029c <__adddf3>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	e9ca 2300 	strd	r2, r3, [sl]
 800a32a:	4620      	mov	r0, r4
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7f5 ffb3 	bl	8000298 <__aeabi_dsub>
 800a332:	a389      	add	r3, pc, #548	; (adr r3, 800a558 <__ieee754_rem_pio2+0x308>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f5 ffb0 	bl	800029c <__adddf3>
 800a33c:	f04f 3bff 	mov.w	fp, #4294967295
 800a340:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a344:	e7c4      	b.n	800a2d0 <__ieee754_rem_pio2+0x80>
 800a346:	a386      	add	r3, pc, #536	; (adr r3, 800a560 <__ieee754_rem_pio2+0x310>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	f7f5 ffa6 	bl	800029c <__adddf3>
 800a350:	a385      	add	r3, pc, #532	; (adr r3, 800a568 <__ieee754_rem_pio2+0x318>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	4604      	mov	r4, r0
 800a358:	460d      	mov	r5, r1
 800a35a:	f7f5 ff9f 	bl	800029c <__adddf3>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	e9ca 2300 	strd	r2, r3, [sl]
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f5 ff95 	bl	8000298 <__aeabi_dsub>
 800a36e:	a37e      	add	r3, pc, #504	; (adr r3, 800a568 <__ieee754_rem_pio2+0x318>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	e7e0      	b.n	800a338 <__ieee754_rem_pio2+0xe8>
 800a376:	4b87      	ldr	r3, [pc, #540]	; (800a594 <__ieee754_rem_pio2+0x344>)
 800a378:	4598      	cmp	r8, r3
 800a37a:	f300 80d9 	bgt.w	800a530 <__ieee754_rem_pio2+0x2e0>
 800a37e:	f000 fe49 	bl	800b014 <fabs>
 800a382:	ec55 4b10 	vmov	r4, r5, d0
 800a386:	ee10 0a10 	vmov	r0, s0
 800a38a:	a379      	add	r3, pc, #484	; (adr r3, 800a570 <__ieee754_rem_pio2+0x320>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	4629      	mov	r1, r5
 800a392:	f7f6 f939 	bl	8000608 <__aeabi_dmul>
 800a396:	4b80      	ldr	r3, [pc, #512]	; (800a598 <__ieee754_rem_pio2+0x348>)
 800a398:	2200      	movs	r2, #0
 800a39a:	f7f5 ff7f 	bl	800029c <__adddf3>
 800a39e:	f7f6 fbe3 	bl	8000b68 <__aeabi_d2iz>
 800a3a2:	4683      	mov	fp, r0
 800a3a4:	f7f6 f8c6 	bl	8000534 <__aeabi_i2d>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	ec43 2b18 	vmov	d8, r2, r3
 800a3b0:	a367      	add	r3, pc, #412	; (adr r3, 800a550 <__ieee754_rem_pio2+0x300>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f6 f927 	bl	8000608 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f5 ff69 	bl	8000298 <__aeabi_dsub>
 800a3c6:	a364      	add	r3, pc, #400	; (adr r3, 800a558 <__ieee754_rem_pio2+0x308>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460f      	mov	r7, r1
 800a3d0:	ec51 0b18 	vmov	r0, r1, d8
 800a3d4:	f7f6 f918 	bl	8000608 <__aeabi_dmul>
 800a3d8:	f1bb 0f1f 	cmp.w	fp, #31
 800a3dc:	4604      	mov	r4, r0
 800a3de:	460d      	mov	r5, r1
 800a3e0:	dc0d      	bgt.n	800a3fe <__ieee754_rem_pio2+0x1ae>
 800a3e2:	4b6e      	ldr	r3, [pc, #440]	; (800a59c <__ieee754_rem_pio2+0x34c>)
 800a3e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ec:	4543      	cmp	r3, r8
 800a3ee:	d006      	beq.n	800a3fe <__ieee754_rem_pio2+0x1ae>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	f7f5 ff4e 	bl	8000298 <__aeabi_dsub>
 800a3fc:	e00f      	b.n	800a41e <__ieee754_rem_pio2+0x1ce>
 800a3fe:	462b      	mov	r3, r5
 800a400:	4622      	mov	r2, r4
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f5 ff47 	bl	8000298 <__aeabi_dsub>
 800a40a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a414:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a418:	f1b8 0f10 	cmp.w	r8, #16
 800a41c:	dc02      	bgt.n	800a424 <__ieee754_rem_pio2+0x1d4>
 800a41e:	e9ca 0100 	strd	r0, r1, [sl]
 800a422:	e039      	b.n	800a498 <__ieee754_rem_pio2+0x248>
 800a424:	a34e      	add	r3, pc, #312	; (adr r3, 800a560 <__ieee754_rem_pio2+0x310>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	ec51 0b18 	vmov	r0, r1, d8
 800a42e:	f7f6 f8eb 	bl	8000608 <__aeabi_dmul>
 800a432:	4604      	mov	r4, r0
 800a434:	460d      	mov	r5, r1
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4630      	mov	r0, r6
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f5 ff2b 	bl	8000298 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f5 ff23 	bl	8000298 <__aeabi_dsub>
 800a452:	4622      	mov	r2, r4
 800a454:	462b      	mov	r3, r5
 800a456:	f7f5 ff1f 	bl	8000298 <__aeabi_dsub>
 800a45a:	a343      	add	r3, pc, #268	; (adr r3, 800a568 <__ieee754_rem_pio2+0x318>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	ec51 0b18 	vmov	r0, r1, d8
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	4622      	mov	r2, r4
 800a46e:	462b      	mov	r3, r5
 800a470:	f7f5 ff12 	bl	8000298 <__aeabi_dsub>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4604      	mov	r4, r0
 800a47a:	460d      	mov	r5, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f5 ff0a 	bl	8000298 <__aeabi_dsub>
 800a484:	9a03      	ldr	r2, [sp, #12]
 800a486:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b31      	cmp	r3, #49	; 0x31
 800a48e:	dc24      	bgt.n	800a4da <__ieee754_rem_pio2+0x28a>
 800a490:	e9ca 0100 	strd	r0, r1, [sl]
 800a494:	4646      	mov	r6, r8
 800a496:	464f      	mov	r7, r9
 800a498:	e9da 8900 	ldrd	r8, r9, [sl]
 800a49c:	4630      	mov	r0, r6
 800a49e:	4642      	mov	r2, r8
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f5 fef8 	bl	8000298 <__aeabi_dsub>
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	f7f5 fef4 	bl	8000298 <__aeabi_dsub>
 800a4b0:	9b02      	ldr	r3, [sp, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4b8:	f6bf af0a 	bge.w	800a2d0 <__ieee754_rem_pio2+0x80>
 800a4bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4c0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a4c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4c8:	f8ca 8000 	str.w	r8, [sl]
 800a4cc:	f8ca 0008 	str.w	r0, [sl, #8]
 800a4d0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a4d4:	f1cb 0b00 	rsb	fp, fp, #0
 800a4d8:	e6fa      	b.n	800a2d0 <__ieee754_rem_pio2+0x80>
 800a4da:	a327      	add	r3, pc, #156	; (adr r3, 800a578 <__ieee754_rem_pio2+0x328>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	ec51 0b18 	vmov	r0, r1, d8
 800a4e4:	f7f6 f890 	bl	8000608 <__aeabi_dmul>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	f7f5 fed0 	bl	8000298 <__aeabi_dsub>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	4640      	mov	r0, r8
 800a502:	4649      	mov	r1, r9
 800a504:	f7f5 fec8 	bl	8000298 <__aeabi_dsub>
 800a508:	4622      	mov	r2, r4
 800a50a:	462b      	mov	r3, r5
 800a50c:	f7f5 fec4 	bl	8000298 <__aeabi_dsub>
 800a510:	a31b      	add	r3, pc, #108	; (adr r3, 800a580 <__ieee754_rem_pio2+0x330>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	4604      	mov	r4, r0
 800a518:	460d      	mov	r5, r1
 800a51a:	ec51 0b18 	vmov	r0, r1, d8
 800a51e:	f7f6 f873 	bl	8000608 <__aeabi_dmul>
 800a522:	4622      	mov	r2, r4
 800a524:	462b      	mov	r3, r5
 800a526:	f7f5 feb7 	bl	8000298 <__aeabi_dsub>
 800a52a:	4604      	mov	r4, r0
 800a52c:	460d      	mov	r5, r1
 800a52e:	e75f      	b.n	800a3f0 <__ieee754_rem_pio2+0x1a0>
 800a530:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <__ieee754_rem_pio2+0x350>)
 800a532:	4598      	cmp	r8, r3
 800a534:	dd36      	ble.n	800a5a4 <__ieee754_rem_pio2+0x354>
 800a536:	ee10 2a10 	vmov	r2, s0
 800a53a:	462b      	mov	r3, r5
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f5 feaa 	bl	8000298 <__aeabi_dsub>
 800a544:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a548:	e9ca 0100 	strd	r0, r1, [sl]
 800a54c:	e694      	b.n	800a278 <__ieee754_rem_pio2+0x28>
 800a54e:	bf00      	nop
 800a550:	54400000 	.word	0x54400000
 800a554:	3ff921fb 	.word	0x3ff921fb
 800a558:	1a626331 	.word	0x1a626331
 800a55c:	3dd0b461 	.word	0x3dd0b461
 800a560:	1a600000 	.word	0x1a600000
 800a564:	3dd0b461 	.word	0x3dd0b461
 800a568:	2e037073 	.word	0x2e037073
 800a56c:	3ba3198a 	.word	0x3ba3198a
 800a570:	6dc9c883 	.word	0x6dc9c883
 800a574:	3fe45f30 	.word	0x3fe45f30
 800a578:	2e000000 	.word	0x2e000000
 800a57c:	3ba3198a 	.word	0x3ba3198a
 800a580:	252049c1 	.word	0x252049c1
 800a584:	397b839a 	.word	0x397b839a
 800a588:	3fe921fb 	.word	0x3fe921fb
 800a58c:	4002d97b 	.word	0x4002d97b
 800a590:	3ff921fb 	.word	0x3ff921fb
 800a594:	413921fb 	.word	0x413921fb
 800a598:	3fe00000 	.word	0x3fe00000
 800a59c:	0800b71c 	.word	0x0800b71c
 800a5a0:	7fefffff 	.word	0x7fefffff
 800a5a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a5a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a5ac:	ee10 0a10 	vmov	r0, s0
 800a5b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a5b4:	ee10 6a10 	vmov	r6, s0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	f7f6 fad5 	bl	8000b68 <__aeabi_d2iz>
 800a5be:	f7f5 ffb9 	bl	8000534 <__aeabi_i2d>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5ce:	f7f5 fe63 	bl	8000298 <__aeabi_dsub>
 800a5d2:	4b23      	ldr	r3, [pc, #140]	; (800a660 <__ieee754_rem_pio2+0x410>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f7f6 f817 	bl	8000608 <__aeabi_dmul>
 800a5da:	460f      	mov	r7, r1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	f7f6 fac3 	bl	8000b68 <__aeabi_d2iz>
 800a5e2:	f7f5 ffa7 	bl	8000534 <__aeabi_i2d>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5f2:	f7f5 fe51 	bl	8000298 <__aeabi_dsub>
 800a5f6:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <__ieee754_rem_pio2+0x410>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f7f6 f805 	bl	8000608 <__aeabi_dmul>
 800a5fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a602:	ad04      	add	r5, sp, #16
 800a604:	f04f 0803 	mov.w	r8, #3
 800a608:	46a9      	mov	r9, r5
 800a60a:	2600      	movs	r6, #0
 800a60c:	2700      	movs	r7, #0
 800a60e:	4632      	mov	r2, r6
 800a610:	463b      	mov	r3, r7
 800a612:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a616:	46c3      	mov	fp, r8
 800a618:	3d08      	subs	r5, #8
 800a61a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a61e:	f7f6 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a622:	2800      	cmp	r0, #0
 800a624:	d1f3      	bne.n	800a60e <__ieee754_rem_pio2+0x3be>
 800a626:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <__ieee754_rem_pio2+0x414>)
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	2302      	movs	r3, #2
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	4622      	mov	r2, r4
 800a630:	465b      	mov	r3, fp
 800a632:	4651      	mov	r1, sl
 800a634:	4648      	mov	r0, r9
 800a636:	f000 f8df 	bl	800a7f8 <__kernel_rem_pio2>
 800a63a:	9b02      	ldr	r3, [sp, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	4683      	mov	fp, r0
 800a640:	f6bf ae46 	bge.w	800a2d0 <__ieee754_rem_pio2+0x80>
 800a644:	e9da 2100 	ldrd	r2, r1, [sl]
 800a648:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a64c:	e9ca 2300 	strd	r2, r3, [sl]
 800a650:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a658:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a65c:	e73a      	b.n	800a4d4 <__ieee754_rem_pio2+0x284>
 800a65e:	bf00      	nop
 800a660:	41700000 	.word	0x41700000
 800a664:	0800b79c 	.word	0x0800b79c

0800a668 <__kernel_cos>:
 800a668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	ec57 6b10 	vmov	r6, r7, d0
 800a670:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a674:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a678:	ed8d 1b00 	vstr	d1, [sp]
 800a67c:	da07      	bge.n	800a68e <__kernel_cos+0x26>
 800a67e:	ee10 0a10 	vmov	r0, s0
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 fa70 	bl	8000b68 <__aeabi_d2iz>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f000 8088 	beq.w	800a79e <__kernel_cos+0x136>
 800a68e:	4632      	mov	r2, r6
 800a690:	463b      	mov	r3, r7
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f5 ffb7 	bl	8000608 <__aeabi_dmul>
 800a69a:	4b51      	ldr	r3, [pc, #324]	; (800a7e0 <__kernel_cos+0x178>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	f7f5 ffb1 	bl	8000608 <__aeabi_dmul>
 800a6a6:	a340      	add	r3, pc, #256	; (adr r3, 800a7a8 <__kernel_cos+0x140>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	468b      	mov	fp, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 ffa8 	bl	8000608 <__aeabi_dmul>
 800a6b8:	a33d      	add	r3, pc, #244	; (adr r3, 800a7b0 <__kernel_cos+0x148>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fded 	bl	800029c <__adddf3>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	f7f5 ff9f 	bl	8000608 <__aeabi_dmul>
 800a6ca:	a33b      	add	r3, pc, #236	; (adr r3, 800a7b8 <__kernel_cos+0x150>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 fde2 	bl	8000298 <__aeabi_dsub>
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	f7f5 ff96 	bl	8000608 <__aeabi_dmul>
 800a6dc:	a338      	add	r3, pc, #224	; (adr r3, 800a7c0 <__kernel_cos+0x158>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 fddb 	bl	800029c <__adddf3>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	f7f5 ff8d 	bl	8000608 <__aeabi_dmul>
 800a6ee:	a336      	add	r3, pc, #216	; (adr r3, 800a7c8 <__kernel_cos+0x160>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	f7f5 ff84 	bl	8000608 <__aeabi_dmul>
 800a700:	a333      	add	r3, pc, #204	; (adr r3, 800a7d0 <__kernel_cos+0x168>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fdc9 	bl	800029c <__adddf3>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	f7f5 ff7b 	bl	8000608 <__aeabi_dmul>
 800a712:	4622      	mov	r2, r4
 800a714:	462b      	mov	r3, r5
 800a716:	f7f5 ff77 	bl	8000608 <__aeabi_dmul>
 800a71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
 800a722:	4630      	mov	r0, r6
 800a724:	4639      	mov	r1, r7
 800a726:	f7f5 ff6f 	bl	8000608 <__aeabi_dmul>
 800a72a:	460b      	mov	r3, r1
 800a72c:	4602      	mov	r2, r0
 800a72e:	4629      	mov	r1, r5
 800a730:	4620      	mov	r0, r4
 800a732:	f7f5 fdb1 	bl	8000298 <__aeabi_dsub>
 800a736:	4b2b      	ldr	r3, [pc, #172]	; (800a7e4 <__kernel_cos+0x17c>)
 800a738:	4598      	cmp	r8, r3
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	dc10      	bgt.n	800a762 <__kernel_cos+0xfa>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4650      	mov	r0, sl
 800a746:	4659      	mov	r1, fp
 800a748:	f7f5 fda6 	bl	8000298 <__aeabi_dsub>
 800a74c:	460b      	mov	r3, r1
 800a74e:	4926      	ldr	r1, [pc, #152]	; (800a7e8 <__kernel_cos+0x180>)
 800a750:	4602      	mov	r2, r0
 800a752:	2000      	movs	r0, #0
 800a754:	f7f5 fda0 	bl	8000298 <__aeabi_dsub>
 800a758:	ec41 0b10 	vmov	d0, r0, r1
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a762:	4b22      	ldr	r3, [pc, #136]	; (800a7ec <__kernel_cos+0x184>)
 800a764:	4920      	ldr	r1, [pc, #128]	; (800a7e8 <__kernel_cos+0x180>)
 800a766:	4598      	cmp	r8, r3
 800a768:	bfcc      	ite	gt
 800a76a:	4d21      	ldrgt	r5, [pc, #132]	; (800a7f0 <__kernel_cos+0x188>)
 800a76c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a770:	2400      	movs	r4, #0
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	2000      	movs	r0, #0
 800a778:	f7f5 fd8e 	bl	8000298 <__aeabi_dsub>
 800a77c:	4622      	mov	r2, r4
 800a77e:	4680      	mov	r8, r0
 800a780:	4689      	mov	r9, r1
 800a782:	462b      	mov	r3, r5
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f5 fd86 	bl	8000298 <__aeabi_dsub>
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	f7f5 fd82 	bl	8000298 <__aeabi_dsub>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4640      	mov	r0, r8
 800a79a:	4649      	mov	r1, r9
 800a79c:	e7da      	b.n	800a754 <__kernel_cos+0xec>
 800a79e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a7d8 <__kernel_cos+0x170>
 800a7a2:	e7db      	b.n	800a75c <__kernel_cos+0xf4>
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	be8838d4 	.word	0xbe8838d4
 800a7ac:	bda8fae9 	.word	0xbda8fae9
 800a7b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7b4:	3e21ee9e 	.word	0x3e21ee9e
 800a7b8:	809c52ad 	.word	0x809c52ad
 800a7bc:	3e927e4f 	.word	0x3e927e4f
 800a7c0:	19cb1590 	.word	0x19cb1590
 800a7c4:	3efa01a0 	.word	0x3efa01a0
 800a7c8:	16c15177 	.word	0x16c15177
 800a7cc:	3f56c16c 	.word	0x3f56c16c
 800a7d0:	5555554c 	.word	0x5555554c
 800a7d4:	3fa55555 	.word	0x3fa55555
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	3fe00000 	.word	0x3fe00000
 800a7e4:	3fd33332 	.word	0x3fd33332
 800a7e8:	3ff00000 	.word	0x3ff00000
 800a7ec:	3fe90000 	.word	0x3fe90000
 800a7f0:	3fd20000 	.word	0x3fd20000
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <__kernel_rem_pio2>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	ed2d 8b02 	vpush	{d8}
 800a800:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a804:	f112 0f14 	cmn.w	r2, #20
 800a808:	9308      	str	r3, [sp, #32]
 800a80a:	9101      	str	r1, [sp, #4]
 800a80c:	4bc4      	ldr	r3, [pc, #784]	; (800ab20 <__kernel_rem_pio2+0x328>)
 800a80e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a810:	900b      	str	r0, [sp, #44]	; 0x2c
 800a812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	9b08      	ldr	r3, [sp, #32]
 800a81a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a81e:	bfa8      	it	ge
 800a820:	1ed4      	subge	r4, r2, #3
 800a822:	9306      	str	r3, [sp, #24]
 800a824:	bfb2      	itee	lt
 800a826:	2400      	movlt	r4, #0
 800a828:	2318      	movge	r3, #24
 800a82a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a82e:	f06f 0317 	mvn.w	r3, #23
 800a832:	fb04 3303 	mla	r3, r4, r3, r3
 800a836:	eb03 0a02 	add.w	sl, r3, r2
 800a83a:	9b02      	ldr	r3, [sp, #8]
 800a83c:	9a06      	ldr	r2, [sp, #24]
 800a83e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ab10 <__kernel_rem_pio2+0x318>
 800a842:	eb03 0802 	add.w	r8, r3, r2
 800a846:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a848:	1aa7      	subs	r7, r4, r2
 800a84a:	ae22      	add	r6, sp, #136	; 0x88
 800a84c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a850:	2500      	movs	r5, #0
 800a852:	4545      	cmp	r5, r8
 800a854:	dd13      	ble.n	800a87e <__kernel_rem_pio2+0x86>
 800a856:	9b08      	ldr	r3, [sp, #32]
 800a858:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ab10 <__kernel_rem_pio2+0x318>
 800a85c:	aa22      	add	r2, sp, #136	; 0x88
 800a85e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a862:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a866:	f04f 0800 	mov.w	r8, #0
 800a86a:	9b02      	ldr	r3, [sp, #8]
 800a86c:	4598      	cmp	r8, r3
 800a86e:	dc2f      	bgt.n	800a8d0 <__kernel_rem_pio2+0xd8>
 800a870:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a874:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a878:	462f      	mov	r7, r5
 800a87a:	2600      	movs	r6, #0
 800a87c:	e01b      	b.n	800a8b6 <__kernel_rem_pio2+0xbe>
 800a87e:	42ef      	cmn	r7, r5
 800a880:	d407      	bmi.n	800a892 <__kernel_rem_pio2+0x9a>
 800a882:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a886:	f7f5 fe55 	bl	8000534 <__aeabi_i2d>
 800a88a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a88e:	3501      	adds	r5, #1
 800a890:	e7df      	b.n	800a852 <__kernel_rem_pio2+0x5a>
 800a892:	ec51 0b18 	vmov	r0, r1, d8
 800a896:	e7f8      	b.n	800a88a <__kernel_rem_pio2+0x92>
 800a898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a89c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a8a0:	f7f5 feb2 	bl	8000608 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ac:	f7f5 fcf6 	bl	800029c <__adddf3>
 800a8b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	429e      	cmp	r6, r3
 800a8ba:	f1a7 0708 	sub.w	r7, r7, #8
 800a8be:	ddeb      	ble.n	800a898 <__kernel_rem_pio2+0xa0>
 800a8c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a8c4:	f108 0801 	add.w	r8, r8, #1
 800a8c8:	ecab 7b02 	vstmia	fp!, {d7}
 800a8cc:	3508      	adds	r5, #8
 800a8ce:	e7cc      	b.n	800a86a <__kernel_rem_pio2+0x72>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	aa0e      	add	r2, sp, #56	; 0x38
 800a8d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8d8:	930d      	str	r3, [sp, #52]	; 0x34
 800a8da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a8dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a8e0:	9c02      	ldr	r4, [sp, #8]
 800a8e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8e4:	00e3      	lsls	r3, r4, #3
 800a8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e8:	ab9a      	add	r3, sp, #616	; 0x268
 800a8ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a8f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a8f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a8f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a8fc:	46c3      	mov	fp, r8
 800a8fe:	46a1      	mov	r9, r4
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	f1a5 0508 	sub.w	r5, r5, #8
 800a908:	dc77      	bgt.n	800a9fa <__kernel_rem_pio2+0x202>
 800a90a:	ec47 6b10 	vmov	d0, r6, r7
 800a90e:	4650      	mov	r0, sl
 800a910:	f000 fc0a 	bl	800b128 <scalbn>
 800a914:	ec57 6b10 	vmov	r6, r7, d0
 800a918:	2200      	movs	r2, #0
 800a91a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a91e:	ee10 0a10 	vmov	r0, s0
 800a922:	4639      	mov	r1, r7
 800a924:	f7f5 fe70 	bl	8000608 <__aeabi_dmul>
 800a928:	ec41 0b10 	vmov	d0, r0, r1
 800a92c:	f000 fb7c 	bl	800b028 <floor>
 800a930:	4b7c      	ldr	r3, [pc, #496]	; (800ab24 <__kernel_rem_pio2+0x32c>)
 800a932:	ec51 0b10 	vmov	r0, r1, d0
 800a936:	2200      	movs	r2, #0
 800a938:	f7f5 fe66 	bl	8000608 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f5 fca8 	bl	8000298 <__aeabi_dsub>
 800a948:	460f      	mov	r7, r1
 800a94a:	4606      	mov	r6, r0
 800a94c:	f7f6 f90c 	bl	8000b68 <__aeabi_d2iz>
 800a950:	9004      	str	r0, [sp, #16]
 800a952:	f7f5 fdef 	bl	8000534 <__aeabi_i2d>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4630      	mov	r0, r6
 800a95c:	4639      	mov	r1, r7
 800a95e:	f7f5 fc9b 	bl	8000298 <__aeabi_dsub>
 800a962:	f1ba 0f00 	cmp.w	sl, #0
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	dd6d      	ble.n	800aa48 <__kernel_rem_pio2+0x250>
 800a96c:	1e62      	subs	r2, r4, #1
 800a96e:	ab0e      	add	r3, sp, #56	; 0x38
 800a970:	9d04      	ldr	r5, [sp, #16]
 800a972:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a976:	f1ca 0118 	rsb	r1, sl, #24
 800a97a:	fa40 f301 	asr.w	r3, r0, r1
 800a97e:	441d      	add	r5, r3
 800a980:	408b      	lsls	r3, r1
 800a982:	1ac0      	subs	r0, r0, r3
 800a984:	ab0e      	add	r3, sp, #56	; 0x38
 800a986:	9504      	str	r5, [sp, #16]
 800a988:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a98c:	f1ca 0317 	rsb	r3, sl, #23
 800a990:	fa40 fb03 	asr.w	fp, r0, r3
 800a994:	f1bb 0f00 	cmp.w	fp, #0
 800a998:	dd65      	ble.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	2200      	movs	r2, #0
 800a99e:	3301      	adds	r3, #1
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	4615      	mov	r5, r2
 800a9a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a9a8:	4294      	cmp	r4, r2
 800a9aa:	f300 809c 	bgt.w	800aae6 <__kernel_rem_pio2+0x2ee>
 800a9ae:	f1ba 0f00 	cmp.w	sl, #0
 800a9b2:	dd07      	ble.n	800a9c4 <__kernel_rem_pio2+0x1cc>
 800a9b4:	f1ba 0f01 	cmp.w	sl, #1
 800a9b8:	f000 80c0 	beq.w	800ab3c <__kernel_rem_pio2+0x344>
 800a9bc:	f1ba 0f02 	cmp.w	sl, #2
 800a9c0:	f000 80c6 	beq.w	800ab50 <__kernel_rem_pio2+0x358>
 800a9c4:	f1bb 0f02 	cmp.w	fp, #2
 800a9c8:	d14d      	bne.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	4956      	ldr	r1, [pc, #344]	; (800ab28 <__kernel_rem_pio2+0x330>)
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f7f5 fc61 	bl	8000298 <__aeabi_dsub>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	d043      	beq.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a9de:	4650      	mov	r0, sl
 800a9e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ab18 <__kernel_rem_pio2+0x320>
 800a9e4:	f000 fba0 	bl	800b128 <scalbn>
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	ec53 2b10 	vmov	r2, r3, d0
 800a9f0:	f7f5 fc52 	bl	8000298 <__aeabi_dsub>
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	460f      	mov	r7, r1
 800a9f8:	e035      	b.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a9fa:	4b4c      	ldr	r3, [pc, #304]	; (800ab2c <__kernel_rem_pio2+0x334>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f5 fe01 	bl	8000608 <__aeabi_dmul>
 800aa06:	f7f6 f8af 	bl	8000b68 <__aeabi_d2iz>
 800aa0a:	f7f5 fd93 	bl	8000534 <__aeabi_i2d>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	ec43 2b18 	vmov	d8, r2, r3
 800aa16:	4b46      	ldr	r3, [pc, #280]	; (800ab30 <__kernel_rem_pio2+0x338>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f7f5 fdf5 	bl	8000608 <__aeabi_dmul>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f5 fc37 	bl	8000298 <__aeabi_dsub>
 800aa2a:	f7f6 f89d 	bl	8000b68 <__aeabi_d2iz>
 800aa2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa32:	f84b 0b04 	str.w	r0, [fp], #4
 800aa36:	ec51 0b18 	vmov	r0, r1, d8
 800aa3a:	f7f5 fc2f 	bl	800029c <__adddf3>
 800aa3e:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	e75b      	b.n	800a900 <__kernel_rem_pio2+0x108>
 800aa48:	d106      	bne.n	800aa58 <__kernel_rem_pio2+0x260>
 800aa4a:	1e63      	subs	r3, r4, #1
 800aa4c:	aa0e      	add	r2, sp, #56	; 0x38
 800aa4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa52:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800aa56:	e79d      	b.n	800a994 <__kernel_rem_pio2+0x19c>
 800aa58:	4b36      	ldr	r3, [pc, #216]	; (800ab34 <__kernel_rem_pio2+0x33c>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f7f6 f85a 	bl	8000b14 <__aeabi_dcmpge>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d13d      	bne.n	800aae0 <__kernel_rem_pio2+0x2e8>
 800aa64:	4683      	mov	fp, r0
 800aa66:	2200      	movs	r2, #0
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f6 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f000 80c0 	beq.w	800abf8 <__kernel_rem_pio2+0x400>
 800aa78:	1e65      	subs	r5, r4, #1
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	9902      	ldr	r1, [sp, #8]
 800aa80:	428b      	cmp	r3, r1
 800aa82:	da6c      	bge.n	800ab5e <__kernel_rem_pio2+0x366>
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	f000 8089 	beq.w	800ab9c <__kernel_rem_pio2+0x3a4>
 800aa8a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa8c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80ad 	beq.w	800abf4 <__kernel_rem_pio2+0x3fc>
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ab18 <__kernel_rem_pio2+0x320>
 800aaa0:	f000 fb42 	bl	800b128 <scalbn>
 800aaa4:	ab9a      	add	r3, sp, #616	; 0x268
 800aaa6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aaaa:	ec57 6b10 	vmov	r6, r7, d0
 800aaae:	00ec      	lsls	r4, r5, #3
 800aab0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aab4:	46aa      	mov	sl, r5
 800aab6:	f1ba 0f00 	cmp.w	sl, #0
 800aaba:	f280 80d6 	bge.w	800ac6a <__kernel_rem_pio2+0x472>
 800aabe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ab10 <__kernel_rem_pio2+0x318>
 800aac2:	462e      	mov	r6, r5
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	f2c0 8104 	blt.w	800acd2 <__kernel_rem_pio2+0x4da>
 800aaca:	ab72      	add	r3, sp, #456	; 0x1c8
 800aacc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aad0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ab38 <__kernel_rem_pio2+0x340>
 800aad4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aad8:	f04f 0800 	mov.w	r8, #0
 800aadc:	1baf      	subs	r7, r5, r6
 800aade:	e0ea      	b.n	800acb6 <__kernel_rem_pio2+0x4be>
 800aae0:	f04f 0b02 	mov.w	fp, #2
 800aae4:	e759      	b.n	800a99a <__kernel_rem_pio2+0x1a2>
 800aae6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaea:	b955      	cbnz	r5, 800ab02 <__kernel_rem_pio2+0x30a>
 800aaec:	b123      	cbz	r3, 800aaf8 <__kernel_rem_pio2+0x300>
 800aaee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aaf2:	f8c8 3000 	str.w	r3, [r8]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	3201      	adds	r2, #1
 800aafa:	f108 0804 	add.w	r8, r8, #4
 800aafe:	461d      	mov	r5, r3
 800ab00:	e752      	b.n	800a9a8 <__kernel_rem_pio2+0x1b0>
 800ab02:	1acb      	subs	r3, r1, r3
 800ab04:	f8c8 3000 	str.w	r3, [r8]
 800ab08:	462b      	mov	r3, r5
 800ab0a:	e7f5      	b.n	800aaf8 <__kernel_rem_pio2+0x300>
 800ab0c:	f3af 8000 	nop.w
	...
 800ab1c:	3ff00000 	.word	0x3ff00000
 800ab20:	0800b8e8 	.word	0x0800b8e8
 800ab24:	40200000 	.word	0x40200000
 800ab28:	3ff00000 	.word	0x3ff00000
 800ab2c:	3e700000 	.word	0x3e700000
 800ab30:	41700000 	.word	0x41700000
 800ab34:	3fe00000 	.word	0x3fe00000
 800ab38:	0800b8a8 	.word	0x0800b8a8
 800ab3c:	1e62      	subs	r2, r4, #1
 800ab3e:	ab0e      	add	r3, sp, #56	; 0x38
 800ab40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab48:	a90e      	add	r1, sp, #56	; 0x38
 800ab4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab4e:	e739      	b.n	800a9c4 <__kernel_rem_pio2+0x1cc>
 800ab50:	1e62      	subs	r2, r4, #1
 800ab52:	ab0e      	add	r3, sp, #56	; 0x38
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab5c:	e7f4      	b.n	800ab48 <__kernel_rem_pio2+0x350>
 800ab5e:	a90e      	add	r1, sp, #56	; 0x38
 800ab60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	430a      	orrs	r2, r1
 800ab68:	e789      	b.n	800aa7e <__kernel_rem_pio2+0x286>
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab70:	2900      	cmp	r1, #0
 800ab72:	d0fa      	beq.n	800ab6a <__kernel_rem_pio2+0x372>
 800ab74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ab7a:	446a      	add	r2, sp
 800ab7c:	3a98      	subs	r2, #152	; 0x98
 800ab7e:	920a      	str	r2, [sp, #40]	; 0x28
 800ab80:	9a08      	ldr	r2, [sp, #32]
 800ab82:	18e3      	adds	r3, r4, r3
 800ab84:	18a5      	adds	r5, r4, r2
 800ab86:	aa22      	add	r2, sp, #136	; 0x88
 800ab88:	f104 0801 	add.w	r8, r4, #1
 800ab8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	4543      	cmp	r3, r8
 800ab96:	da04      	bge.n	800aba2 <__kernel_rem_pio2+0x3aa>
 800ab98:	461c      	mov	r4, r3
 800ab9a:	e6a3      	b.n	800a8e4 <__kernel_rem_pio2+0xec>
 800ab9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7e4      	b.n	800ab6c <__kernel_rem_pio2+0x374>
 800aba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aba4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aba8:	f7f5 fcc4 	bl	8000534 <__aeabi_i2d>
 800abac:	e8e5 0102 	strd	r0, r1, [r5], #8
 800abb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb2:	46ab      	mov	fp, r5
 800abb4:	461c      	mov	r4, r3
 800abb6:	f04f 0900 	mov.w	r9, #0
 800abba:	2600      	movs	r6, #0
 800abbc:	2700      	movs	r7, #0
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	4599      	cmp	r9, r3
 800abc2:	dd06      	ble.n	800abd2 <__kernel_rem_pio2+0x3da>
 800abc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800abca:	f108 0801 	add.w	r8, r8, #1
 800abce:	930a      	str	r3, [sp, #40]	; 0x28
 800abd0:	e7df      	b.n	800ab92 <__kernel_rem_pio2+0x39a>
 800abd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800abd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800abda:	f7f5 fd15 	bl	8000608 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	f7f5 fb59 	bl	800029c <__adddf3>
 800abea:	f109 0901 	add.w	r9, r9, #1
 800abee:	4606      	mov	r6, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	e7e4      	b.n	800abbe <__kernel_rem_pio2+0x3c6>
 800abf4:	3d01      	subs	r5, #1
 800abf6:	e748      	b.n	800aa8a <__kernel_rem_pio2+0x292>
 800abf8:	ec47 6b10 	vmov	d0, r6, r7
 800abfc:	f1ca 0000 	rsb	r0, sl, #0
 800ac00:	f000 fa92 	bl	800b128 <scalbn>
 800ac04:	ec57 6b10 	vmov	r6, r7, d0
 800ac08:	4ba0      	ldr	r3, [pc, #640]	; (800ae8c <__kernel_rem_pio2+0x694>)
 800ac0a:	ee10 0a10 	vmov	r0, s0
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 ff7f 	bl	8000b14 <__aeabi_dcmpge>
 800ac16:	b1f8      	cbz	r0, 800ac58 <__kernel_rem_pio2+0x460>
 800ac18:	4b9d      	ldr	r3, [pc, #628]	; (800ae90 <__kernel_rem_pio2+0x698>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 fcf2 	bl	8000608 <__aeabi_dmul>
 800ac24:	f7f5 ffa0 	bl	8000b68 <__aeabi_d2iz>
 800ac28:	4680      	mov	r8, r0
 800ac2a:	f7f5 fc83 	bl	8000534 <__aeabi_i2d>
 800ac2e:	4b97      	ldr	r3, [pc, #604]	; (800ae8c <__kernel_rem_pio2+0x694>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	f7f5 fce9 	bl	8000608 <__aeabi_dmul>
 800ac36:	460b      	mov	r3, r1
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f7f5 fb2b 	bl	8000298 <__aeabi_dsub>
 800ac42:	f7f5 ff91 	bl	8000b68 <__aeabi_d2iz>
 800ac46:	1c65      	adds	r5, r4, #1
 800ac48:	ab0e      	add	r3, sp, #56	; 0x38
 800ac4a:	f10a 0a18 	add.w	sl, sl, #24
 800ac4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ac56:	e720      	b.n	800aa9a <__kernel_rem_pio2+0x2a2>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 ff84 	bl	8000b68 <__aeabi_d2iz>
 800ac60:	ab0e      	add	r3, sp, #56	; 0x38
 800ac62:	4625      	mov	r5, r4
 800ac64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac68:	e717      	b.n	800aa9a <__kernel_rem_pio2+0x2a2>
 800ac6a:	ab0e      	add	r3, sp, #56	; 0x38
 800ac6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac70:	f7f5 fc60 	bl	8000534 <__aeabi_i2d>
 800ac74:	4632      	mov	r2, r6
 800ac76:	463b      	mov	r3, r7
 800ac78:	f7f5 fcc6 	bl	8000608 <__aeabi_dmul>
 800ac7c:	4b84      	ldr	r3, [pc, #528]	; (800ae90 <__kernel_rem_pio2+0x698>)
 800ac7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ac82:	2200      	movs	r2, #0
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 fcbe 	bl	8000608 <__aeabi_dmul>
 800ac8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac90:	4606      	mov	r6, r0
 800ac92:	460f      	mov	r7, r1
 800ac94:	e70f      	b.n	800aab6 <__kernel_rem_pio2+0x2be>
 800ac96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ac9e:	f7f5 fcb3 	bl	8000608 <__aeabi_dmul>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acaa:	f7f5 faf7 	bl	800029c <__adddf3>
 800acae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acb2:	f108 0801 	add.w	r8, r8, #1
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	4598      	cmp	r8, r3
 800acba:	dc01      	bgt.n	800acc0 <__kernel_rem_pio2+0x4c8>
 800acbc:	45b8      	cmp	r8, r7
 800acbe:	ddea      	ble.n	800ac96 <__kernel_rem_pio2+0x49e>
 800acc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800acc4:	ab4a      	add	r3, sp, #296	; 0x128
 800acc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800acca:	ed87 7b00 	vstr	d7, [r7]
 800acce:	3e01      	subs	r6, #1
 800acd0:	e6f8      	b.n	800aac4 <__kernel_rem_pio2+0x2cc>
 800acd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	dc0b      	bgt.n	800acf0 <__kernel_rem_pio2+0x4f8>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dc35      	bgt.n	800ad48 <__kernel_rem_pio2+0x550>
 800acdc:	d059      	beq.n	800ad92 <__kernel_rem_pio2+0x59a>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	f003 0007 	and.w	r0, r3, #7
 800ace4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ace8:	ecbd 8b02 	vpop	{d8}
 800acec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d1f3      	bne.n	800acde <__kernel_rem_pio2+0x4e6>
 800acf6:	ab4a      	add	r3, sp, #296	; 0x128
 800acf8:	4423      	add	r3, r4
 800acfa:	9306      	str	r3, [sp, #24]
 800acfc:	461c      	mov	r4, r3
 800acfe:	469a      	mov	sl, r3
 800ad00:	9502      	str	r5, [sp, #8]
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f1aa 0a08 	sub.w	sl, sl, #8
 800ad0a:	dc6b      	bgt.n	800ade4 <__kernel_rem_pio2+0x5ec>
 800ad0c:	46aa      	mov	sl, r5
 800ad0e:	f1ba 0f01 	cmp.w	sl, #1
 800ad12:	f1a4 0408 	sub.w	r4, r4, #8
 800ad16:	f300 8085 	bgt.w	800ae24 <__kernel_rem_pio2+0x62c>
 800ad1a:	9c06      	ldr	r4, [sp, #24]
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	3408      	adds	r4, #8
 800ad20:	2100      	movs	r1, #0
 800ad22:	2d01      	cmp	r5, #1
 800ad24:	f300 809d 	bgt.w	800ae62 <__kernel_rem_pio2+0x66a>
 800ad28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ad2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ad30:	f1bb 0f00 	cmp.w	fp, #0
 800ad34:	f040 809b 	bne.w	800ae6e <__kernel_rem_pio2+0x676>
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	e9c3 5600 	strd	r5, r6, [r3]
 800ad3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ad42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ad46:	e7ca      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800ad48:	3408      	adds	r4, #8
 800ad4a:	ab4a      	add	r3, sp, #296	; 0x128
 800ad4c:	441c      	add	r4, r3
 800ad4e:	462e      	mov	r6, r5
 800ad50:	2000      	movs	r0, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	da36      	bge.n	800adc6 <__kernel_rem_pio2+0x5ce>
 800ad58:	f1bb 0f00 	cmp.w	fp, #0
 800ad5c:	d039      	beq.n	800add2 <__kernel_rem_pio2+0x5da>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad64:	9c01      	ldr	r4, [sp, #4]
 800ad66:	e9c4 2300 	strd	r2, r3, [r4]
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ad72:	f7f5 fa91 	bl	8000298 <__aeabi_dsub>
 800ad76:	ae4c      	add	r6, sp, #304	; 0x130
 800ad78:	2401      	movs	r4, #1
 800ad7a:	42a5      	cmp	r5, r4
 800ad7c:	da2c      	bge.n	800add8 <__kernel_rem_pio2+0x5e0>
 800ad7e:	f1bb 0f00 	cmp.w	fp, #0
 800ad82:	d002      	beq.n	800ad8a <__kernel_rem_pio2+0x592>
 800ad84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad88:	4619      	mov	r1, r3
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad90:	e7a5      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800ad92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ad96:	eb0d 0403 	add.w	r4, sp, r3
 800ad9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad9e:	2000      	movs	r0, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	2d00      	cmp	r5, #0
 800ada4:	da09      	bge.n	800adba <__kernel_rem_pio2+0x5c2>
 800ada6:	f1bb 0f00 	cmp.w	fp, #0
 800adaa:	d002      	beq.n	800adb2 <__kernel_rem_pio2+0x5ba>
 800adac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adb0:	4619      	mov	r1, r3
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	e9c3 0100 	strd	r0, r1, [r3]
 800adb8:	e791      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800adba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800adbe:	f7f5 fa6d 	bl	800029c <__adddf3>
 800adc2:	3d01      	subs	r5, #1
 800adc4:	e7ed      	b.n	800ada2 <__kernel_rem_pio2+0x5aa>
 800adc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800adca:	f7f5 fa67 	bl	800029c <__adddf3>
 800adce:	3e01      	subs	r6, #1
 800add0:	e7c0      	b.n	800ad54 <__kernel_rem_pio2+0x55c>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	e7c5      	b.n	800ad64 <__kernel_rem_pio2+0x56c>
 800add8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800addc:	f7f5 fa5e 	bl	800029c <__adddf3>
 800ade0:	3401      	adds	r4, #1
 800ade2:	e7ca      	b.n	800ad7a <__kernel_rem_pio2+0x582>
 800ade4:	e9da 8900 	ldrd	r8, r9, [sl]
 800ade8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	3b01      	subs	r3, #1
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	4632      	mov	r2, r6
 800adf4:	463b      	mov	r3, r7
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 fa4f 	bl	800029c <__adddf3>
 800adfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4640      	mov	r0, r8
 800ae08:	4649      	mov	r1, r9
 800ae0a:	f7f5 fa45 	bl	8000298 <__aeabi_dsub>
 800ae0e:	4632      	mov	r2, r6
 800ae10:	463b      	mov	r3, r7
 800ae12:	f7f5 fa43 	bl	800029c <__adddf3>
 800ae16:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ae1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae1e:	ed8a 7b00 	vstr	d7, [sl]
 800ae22:	e76e      	b.n	800ad02 <__kernel_rem_pio2+0x50a>
 800ae24:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4632      	mov	r2, r6
 800ae30:	463b      	mov	r3, r7
 800ae32:	4649      	mov	r1, r9
 800ae34:	f7f5 fa32 	bl	800029c <__adddf3>
 800ae38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 fa28 	bl	8000298 <__aeabi_dsub>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	f7f5 fa26 	bl	800029c <__adddf3>
 800ae50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae58:	ed84 7b00 	vstr	d7, [r4]
 800ae5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae60:	e755      	b.n	800ad0e <__kernel_rem_pio2+0x516>
 800ae62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae66:	f7f5 fa19 	bl	800029c <__adddf3>
 800ae6a:	3d01      	subs	r5, #1
 800ae6c:	e759      	b.n	800ad22 <__kernel_rem_pio2+0x52a>
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	9a01      	ldr	r2, [sp, #4]
 800ae72:	601d      	str	r5, [r3, #0]
 800ae74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ae78:	605c      	str	r4, [r3, #4]
 800ae7a:	609f      	str	r7, [r3, #8]
 800ae7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ae80:	60d3      	str	r3, [r2, #12]
 800ae82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae86:	6110      	str	r0, [r2, #16]
 800ae88:	6153      	str	r3, [r2, #20]
 800ae8a:	e728      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800ae8c:	41700000 	.word	0x41700000
 800ae90:	3e700000 	.word	0x3e700000
 800ae94:	00000000 	.word	0x00000000

0800ae98 <__kernel_sin>:
 800ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	ed2d 8b04 	vpush	{d8-d9}
 800aea0:	eeb0 8a41 	vmov.f32	s16, s2
 800aea4:	eef0 8a61 	vmov.f32	s17, s3
 800aea8:	ec55 4b10 	vmov	r4, r5, d0
 800aeac:	b083      	sub	sp, #12
 800aeae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aeb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aeb6:	9001      	str	r0, [sp, #4]
 800aeb8:	da06      	bge.n	800aec8 <__kernel_sin+0x30>
 800aeba:	ee10 0a10 	vmov	r0, s0
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 fe52 	bl	8000b68 <__aeabi_d2iz>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d051      	beq.n	800af6c <__kernel_sin+0xd4>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fb9a 	bl	8000608 <__aeabi_dmul>
 800aed4:	4682      	mov	sl, r0
 800aed6:	468b      	mov	fp, r1
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4620      	mov	r0, r4
 800aede:	4629      	mov	r1, r5
 800aee0:	f7f5 fb92 	bl	8000608 <__aeabi_dmul>
 800aee4:	a341      	add	r3, pc, #260	; (adr r3, 800afec <__kernel_sin+0x154>)
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	4680      	mov	r8, r0
 800aeec:	4689      	mov	r9, r1
 800aeee:	4650      	mov	r0, sl
 800aef0:	4659      	mov	r1, fp
 800aef2:	f7f5 fb89 	bl	8000608 <__aeabi_dmul>
 800aef6:	a33f      	add	r3, pc, #252	; (adr r3, 800aff4 <__kernel_sin+0x15c>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f7f5 f9cc 	bl	8000298 <__aeabi_dsub>
 800af00:	4652      	mov	r2, sl
 800af02:	465b      	mov	r3, fp
 800af04:	f7f5 fb80 	bl	8000608 <__aeabi_dmul>
 800af08:	a33c      	add	r3, pc, #240	; (adr r3, 800affc <__kernel_sin+0x164>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 f9c5 	bl	800029c <__adddf3>
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	f7f5 fb77 	bl	8000608 <__aeabi_dmul>
 800af1a:	a33a      	add	r3, pc, #232	; (adr r3, 800b004 <__kernel_sin+0x16c>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 f9ba 	bl	8000298 <__aeabi_dsub>
 800af24:	4652      	mov	r2, sl
 800af26:	465b      	mov	r3, fp
 800af28:	f7f5 fb6e 	bl	8000608 <__aeabi_dmul>
 800af2c:	a337      	add	r3, pc, #220	; (adr r3, 800b00c <__kernel_sin+0x174>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 f9b3 	bl	800029c <__adddf3>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	b9eb      	cbnz	r3, 800af7a <__kernel_sin+0xe2>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 fb5f 	bl	8000608 <__aeabi_dmul>
 800af4a:	a325      	add	r3, pc, #148	; (adr r3, 800afe0 <__kernel_sin+0x148>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f9a2 	bl	8000298 <__aeabi_dsub>
 800af54:	4642      	mov	r2, r8
 800af56:	464b      	mov	r3, r9
 800af58:	f7f5 fb56 	bl	8000608 <__aeabi_dmul>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 f99a 	bl	800029c <__adddf3>
 800af68:	4604      	mov	r4, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	ec45 4b10 	vmov	d0, r4, r5
 800af70:	b003      	add	sp, #12
 800af72:	ecbd 8b04 	vpop	{d8-d9}
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	4b1b      	ldr	r3, [pc, #108]	; (800afe8 <__kernel_sin+0x150>)
 800af7c:	ec51 0b18 	vmov	r0, r1, d8
 800af80:	2200      	movs	r2, #0
 800af82:	f7f5 fb41 	bl	8000608 <__aeabi_dmul>
 800af86:	4632      	mov	r2, r6
 800af88:	ec41 0b19 	vmov	d9, r0, r1
 800af8c:	463b      	mov	r3, r7
 800af8e:	4640      	mov	r0, r8
 800af90:	4649      	mov	r1, r9
 800af92:	f7f5 fb39 	bl	8000608 <__aeabi_dmul>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	ec51 0b19 	vmov	r0, r1, d9
 800af9e:	f7f5 f97b 	bl	8000298 <__aeabi_dsub>
 800afa2:	4652      	mov	r2, sl
 800afa4:	465b      	mov	r3, fp
 800afa6:	f7f5 fb2f 	bl	8000608 <__aeabi_dmul>
 800afaa:	ec53 2b18 	vmov	r2, r3, d8
 800afae:	f7f5 f973 	bl	8000298 <__aeabi_dsub>
 800afb2:	a30b      	add	r3, pc, #44	; (adr r3, 800afe0 <__kernel_sin+0x148>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	4606      	mov	r6, r0
 800afba:	460f      	mov	r7, r1
 800afbc:	4640      	mov	r0, r8
 800afbe:	4649      	mov	r1, r9
 800afc0:	f7f5 fb22 	bl	8000608 <__aeabi_dmul>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 f966 	bl	800029c <__adddf3>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4620      	mov	r0, r4
 800afd6:	4629      	mov	r1, r5
 800afd8:	f7f5 f95e 	bl	8000298 <__aeabi_dsub>
 800afdc:	e7c4      	b.n	800af68 <__kernel_sin+0xd0>
 800afde:	bf00      	nop
 800afe0:	55555549 	.word	0x55555549
 800afe4:	3fc55555 	.word	0x3fc55555
 800afe8:	3fe00000 	.word	0x3fe00000
 800afec:	5acfd57c 	.word	0x5acfd57c
 800aff0:	3de5d93a 	.word	0x3de5d93a
 800aff4:	8a2b9ceb 	.word	0x8a2b9ceb
 800aff8:	3e5ae5e6 	.word	0x3e5ae5e6
 800affc:	57b1fe7d 	.word	0x57b1fe7d
 800b000:	3ec71de3 	.word	0x3ec71de3
 800b004:	19c161d5 	.word	0x19c161d5
 800b008:	3f2a01a0 	.word	0x3f2a01a0
 800b00c:	1110f8a6 	.word	0x1110f8a6
 800b010:	3f811111 	.word	0x3f811111

0800b014 <fabs>:
 800b014:	ec51 0b10 	vmov	r0, r1, d0
 800b018:	ee10 2a10 	vmov	r2, s0
 800b01c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b020:	ec43 2b10 	vmov	d0, r2, r3
 800b024:	4770      	bx	lr
	...

0800b028 <floor>:
 800b028:	ec51 0b10 	vmov	r0, r1, d0
 800b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b030:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b034:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b038:	2e13      	cmp	r6, #19
 800b03a:	ee10 5a10 	vmov	r5, s0
 800b03e:	ee10 8a10 	vmov	r8, s0
 800b042:	460c      	mov	r4, r1
 800b044:	dc32      	bgt.n	800b0ac <floor+0x84>
 800b046:	2e00      	cmp	r6, #0
 800b048:	da14      	bge.n	800b074 <floor+0x4c>
 800b04a:	a333      	add	r3, pc, #204	; (adr r3, 800b118 <floor+0xf0>)
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	f7f5 f924 	bl	800029c <__adddf3>
 800b054:	2200      	movs	r2, #0
 800b056:	2300      	movs	r3, #0
 800b058:	f7f5 fd66 	bl	8000b28 <__aeabi_dcmpgt>
 800b05c:	b138      	cbz	r0, 800b06e <floor+0x46>
 800b05e:	2c00      	cmp	r4, #0
 800b060:	da57      	bge.n	800b112 <floor+0xea>
 800b062:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b066:	431d      	orrs	r5, r3
 800b068:	d001      	beq.n	800b06e <floor+0x46>
 800b06a:	4c2d      	ldr	r4, [pc, #180]	; (800b120 <floor+0xf8>)
 800b06c:	2500      	movs	r5, #0
 800b06e:	4621      	mov	r1, r4
 800b070:	4628      	mov	r0, r5
 800b072:	e025      	b.n	800b0c0 <floor+0x98>
 800b074:	4f2b      	ldr	r7, [pc, #172]	; (800b124 <floor+0xfc>)
 800b076:	4137      	asrs	r7, r6
 800b078:	ea01 0307 	and.w	r3, r1, r7
 800b07c:	4303      	orrs	r3, r0
 800b07e:	d01f      	beq.n	800b0c0 <floor+0x98>
 800b080:	a325      	add	r3, pc, #148	; (adr r3, 800b118 <floor+0xf0>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 f909 	bl	800029c <__adddf3>
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	f7f5 fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 800b092:	2800      	cmp	r0, #0
 800b094:	d0eb      	beq.n	800b06e <floor+0x46>
 800b096:	2c00      	cmp	r4, #0
 800b098:	bfbe      	ittt	lt
 800b09a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b09e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b0a2:	19a4      	addlt	r4, r4, r6
 800b0a4:	ea24 0407 	bic.w	r4, r4, r7
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	e7e0      	b.n	800b06e <floor+0x46>
 800b0ac:	2e33      	cmp	r6, #51	; 0x33
 800b0ae:	dd0b      	ble.n	800b0c8 <floor+0xa0>
 800b0b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b0b4:	d104      	bne.n	800b0c0 <floor+0x98>
 800b0b6:	ee10 2a10 	vmov	r2, s0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	f7f5 f8ee 	bl	800029c <__adddf3>
 800b0c0:	ec41 0b10 	vmov	d0, r0, r1
 800b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d0:	fa23 f707 	lsr.w	r7, r3, r7
 800b0d4:	4207      	tst	r7, r0
 800b0d6:	d0f3      	beq.n	800b0c0 <floor+0x98>
 800b0d8:	a30f      	add	r3, pc, #60	; (adr r3, 800b118 <floor+0xf0>)
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 f8dd 	bl	800029c <__adddf3>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f7f5 fd1f 	bl	8000b28 <__aeabi_dcmpgt>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d0bf      	beq.n	800b06e <floor+0x46>
 800b0ee:	2c00      	cmp	r4, #0
 800b0f0:	da02      	bge.n	800b0f8 <floor+0xd0>
 800b0f2:	2e14      	cmp	r6, #20
 800b0f4:	d103      	bne.n	800b0fe <floor+0xd6>
 800b0f6:	3401      	adds	r4, #1
 800b0f8:	ea25 0507 	bic.w	r5, r5, r7
 800b0fc:	e7b7      	b.n	800b06e <floor+0x46>
 800b0fe:	2301      	movs	r3, #1
 800b100:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b104:	fa03 f606 	lsl.w	r6, r3, r6
 800b108:	4435      	add	r5, r6
 800b10a:	4545      	cmp	r5, r8
 800b10c:	bf38      	it	cc
 800b10e:	18e4      	addcc	r4, r4, r3
 800b110:	e7f2      	b.n	800b0f8 <floor+0xd0>
 800b112:	2500      	movs	r5, #0
 800b114:	462c      	mov	r4, r5
 800b116:	e7aa      	b.n	800b06e <floor+0x46>
 800b118:	8800759c 	.word	0x8800759c
 800b11c:	7e37e43c 	.word	0x7e37e43c
 800b120:	bff00000 	.word	0xbff00000
 800b124:	000fffff 	.word	0x000fffff

0800b128 <scalbn>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	ec55 4b10 	vmov	r4, r5, d0
 800b12e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b132:	4606      	mov	r6, r0
 800b134:	462b      	mov	r3, r5
 800b136:	b99a      	cbnz	r2, 800b160 <scalbn+0x38>
 800b138:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b13c:	4323      	orrs	r3, r4
 800b13e:	d036      	beq.n	800b1ae <scalbn+0x86>
 800b140:	4b39      	ldr	r3, [pc, #228]	; (800b228 <scalbn+0x100>)
 800b142:	4629      	mov	r1, r5
 800b144:	ee10 0a10 	vmov	r0, s0
 800b148:	2200      	movs	r2, #0
 800b14a:	f7f5 fa5d 	bl	8000608 <__aeabi_dmul>
 800b14e:	4b37      	ldr	r3, [pc, #220]	; (800b22c <scalbn+0x104>)
 800b150:	429e      	cmp	r6, r3
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	da10      	bge.n	800b17a <scalbn+0x52>
 800b158:	a32b      	add	r3, pc, #172	; (adr r3, 800b208 <scalbn+0xe0>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	e03a      	b.n	800b1d6 <scalbn+0xae>
 800b160:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b164:	428a      	cmp	r2, r1
 800b166:	d10c      	bne.n	800b182 <scalbn+0x5a>
 800b168:	ee10 2a10 	vmov	r2, s0
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	f7f5 f894 	bl	800029c <__adddf3>
 800b174:	4604      	mov	r4, r0
 800b176:	460d      	mov	r5, r1
 800b178:	e019      	b.n	800b1ae <scalbn+0x86>
 800b17a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b17e:	460b      	mov	r3, r1
 800b180:	3a36      	subs	r2, #54	; 0x36
 800b182:	4432      	add	r2, r6
 800b184:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b188:	428a      	cmp	r2, r1
 800b18a:	dd08      	ble.n	800b19e <scalbn+0x76>
 800b18c:	2d00      	cmp	r5, #0
 800b18e:	a120      	add	r1, pc, #128	; (adr r1, 800b210 <scalbn+0xe8>)
 800b190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b194:	da1c      	bge.n	800b1d0 <scalbn+0xa8>
 800b196:	a120      	add	r1, pc, #128	; (adr r1, 800b218 <scalbn+0xf0>)
 800b198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19c:	e018      	b.n	800b1d0 <scalbn+0xa8>
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	dd08      	ble.n	800b1b4 <scalbn+0x8c>
 800b1a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b1a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b1aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b1ae:	ec45 4b10 	vmov	d0, r4, r5
 800b1b2:	bd70      	pop	{r4, r5, r6, pc}
 800b1b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b1b8:	da19      	bge.n	800b1ee <scalbn+0xc6>
 800b1ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b1be:	429e      	cmp	r6, r3
 800b1c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b1c4:	dd0a      	ble.n	800b1dc <scalbn+0xb4>
 800b1c6:	a112      	add	r1, pc, #72	; (adr r1, 800b210 <scalbn+0xe8>)
 800b1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e2      	bne.n	800b196 <scalbn+0x6e>
 800b1d0:	a30f      	add	r3, pc, #60	; (adr r3, 800b210 <scalbn+0xe8>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	f7f5 fa17 	bl	8000608 <__aeabi_dmul>
 800b1da:	e7cb      	b.n	800b174 <scalbn+0x4c>
 800b1dc:	a10a      	add	r1, pc, #40	; (adr r1, 800b208 <scalbn+0xe0>)
 800b1de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0b8      	beq.n	800b158 <scalbn+0x30>
 800b1e6:	a10e      	add	r1, pc, #56	; (adr r1, 800b220 <scalbn+0xf8>)
 800b1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ec:	e7b4      	b.n	800b158 <scalbn+0x30>
 800b1ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b1f2:	3236      	adds	r2, #54	; 0x36
 800b1f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b1f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	4b0c      	ldr	r3, [pc, #48]	; (800b230 <scalbn+0x108>)
 800b200:	2200      	movs	r2, #0
 800b202:	e7e8      	b.n	800b1d6 <scalbn+0xae>
 800b204:	f3af 8000 	nop.w
 800b208:	c2f8f359 	.word	0xc2f8f359
 800b20c:	01a56e1f 	.word	0x01a56e1f
 800b210:	8800759c 	.word	0x8800759c
 800b214:	7e37e43c 	.word	0x7e37e43c
 800b218:	8800759c 	.word	0x8800759c
 800b21c:	fe37e43c 	.word	0xfe37e43c
 800b220:	c2f8f359 	.word	0xc2f8f359
 800b224:	81a56e1f 	.word	0x81a56e1f
 800b228:	43500000 	.word	0x43500000
 800b22c:	ffff3cb0 	.word	0xffff3cb0
 800b230:	3c900000 	.word	0x3c900000

0800b234 <_init>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	bf00      	nop
 800b238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b23a:	bc08      	pop	{r3}
 800b23c:	469e      	mov	lr, r3
 800b23e:	4770      	bx	lr

0800b240 <_fini>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	bf00      	nop
 800b244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b246:	bc08      	pop	{r3}
 800b248:	469e      	mov	lr, r3
 800b24a:	4770      	bx	lr

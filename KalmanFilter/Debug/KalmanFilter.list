
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800a170  0800a170  0001a170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a644  0800a644  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a648  0800a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800a64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200002f8  0800a944  000202f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800a944  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131d7  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c19  00000000  00000000  000334ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00036ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017901  00000000  00000000  00037bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102a0  00000000  00000000  0004f4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913de  00000000  00000000  0005f751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000f0b2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de8  00000000  00000000  000f0bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001689  00000000  00000000  000f59dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a158 	.word	0x0800a158

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	0800a158 	.word	0x0800a158

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <SteadyStateKalmanFilter>:

volatile arm_status Calst;

float checkVal;

float SteadyStateKalmanFilter(float32_t Vin,float32_t Velocity){
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001012:	edc7 0a00 	vstr	s1, [r7]
	  arm_mat_init_f32(&Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8001016:	463b      	mov	r3, r7
 8001018:	2201      	movs	r2, #1
 800101a:	2101      	movs	r1, #1
 800101c:	4848      	ldr	r0, [pc, #288]	; (8001140 <SteadyStateKalmanFilter+0x138>)
 800101e:	f004 fb89 	bl	8005734 <arm_mat_init_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&B_matrix, Vin, &Bu_matrix); 		   				// Bu
 8001022:	4948      	ldr	r1, [pc, #288]	; (8001144 <SteadyStateKalmanFilter+0x13c>)
 8001024:	ed97 0a01 	vldr	s0, [r7, #4]
 8001028:	4847      	ldr	r0, [pc, #284]	; (8001148 <SteadyStateKalmanFilter+0x140>)
 800102a:	f004 f98b 	bl	8005344 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&A_matrix, &X_k_matrix, &Ax_matrix);  		   		// Ax
 800102e:	4a47      	ldr	r2, [pc, #284]	; (800114c <SteadyStateKalmanFilter+0x144>)
 8001030:	4947      	ldr	r1, [pc, #284]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 8001032:	4848      	ldr	r0, [pc, #288]	; (8001154 <SteadyStateKalmanFilter+0x14c>)
 8001034:	f004 f9d8 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&Ax_matrix, &Bu_matrix, &X_k_matrix); 		   		// Xk = Ax + Bu
 8001038:	4a45      	ldr	r2, [pc, #276]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 800103a:	4942      	ldr	r1, [pc, #264]	; (8001144 <SteadyStateKalmanFilter+0x13c>)
 800103c:	4843      	ldr	r0, [pc, #268]	; (800114c <SteadyStateKalmanFilter+0x144>)
 800103e:	f004 fb7d 	bl	800573c <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&A_matrix, &P_k_matrix, &P_k_matrix);  		   		// Pk = A * P_pk
 8001042:	4a45      	ldr	r2, [pc, #276]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001044:	4944      	ldr	r1, [pc, #272]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001046:	4843      	ldr	r0, [pc, #268]	; (8001154 <SteadyStateKalmanFilter+0x14c>)
 8001048:	f004 f9ce 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&P_k_matrix, &A_transpose_matrix, &P_k_matrix); 		// Pk = A * P_pk * A^T
 800104c:	4a42      	ldr	r2, [pc, #264]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 800104e:	4943      	ldr	r1, [pc, #268]	; (800115c <SteadyStateKalmanFilter+0x154>)
 8001050:	4841      	ldr	r0, [pc, #260]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001052:	f004 f9c9 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&G_matrix, &G_transpose_matrix, &GGT_matrix);        // G * G^T
 8001056:	4a42      	ldr	r2, [pc, #264]	; (8001160 <SteadyStateKalmanFilter+0x158>)
 8001058:	4942      	ldr	r1, [pc, #264]	; (8001164 <SteadyStateKalmanFilter+0x15c>)
 800105a:	4843      	ldr	r0, [pc, #268]	; (8001168 <SteadyStateKalmanFilter+0x160>)
 800105c:	f004 f9c4 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&GGT_matrix, Q, &GQGT_matrix); 				   	   	// G * Q
 8001060:	4b42      	ldr	r3, [pc, #264]	; (800116c <SteadyStateKalmanFilter+0x164>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	4942      	ldr	r1, [pc, #264]	; (8001170 <SteadyStateKalmanFilter+0x168>)
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	483c      	ldr	r0, [pc, #240]	; (8001160 <SteadyStateKalmanFilter+0x158>)
 800106e:	f004 f969 	bl	8005344 <arm_mat_scale_f32>
	  arm_mat_add_f32(&P_k_matrix, &GQGT_matrix, &P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8001072:	4a39      	ldr	r2, [pc, #228]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001074:	493e      	ldr	r1, [pc, #248]	; (8001170 <SteadyStateKalmanFilter+0x168>)
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001078:	f004 fb60 	bl	800573c <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&C_matrix, &P_k_matrix, &CP_matrix);			     // C * Pk
 800107c:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <SteadyStateKalmanFilter+0x16c>)
 800107e:	4936      	ldr	r1, [pc, #216]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 8001080:	483d      	ldr	r0, [pc, #244]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 8001082:	f004 f9b1 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&CP_matrix, &C_transpose_matrix, &CPCT_matrix);   // C * Pk * C^T
 8001086:	4a3d      	ldr	r2, [pc, #244]	; (800117c <SteadyStateKalmanFilter+0x174>)
 8001088:	493d      	ldr	r1, [pc, #244]	; (8001180 <SteadyStateKalmanFilter+0x178>)
 800108a:	483a      	ldr	r0, [pc, #232]	; (8001174 <SteadyStateKalmanFilter+0x16c>)
 800108c:	f004 f9ac 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&CPCT_matrix, &R_matrix, &CPCTR_matrix);			 // C * P_k * C^T + R
 8001090:	4a3c      	ldr	r2, [pc, #240]	; (8001184 <SteadyStateKalmanFilter+0x17c>)
 8001092:	493d      	ldr	r1, [pc, #244]	; (8001188 <SteadyStateKalmanFilter+0x180>)
 8001094:	4839      	ldr	r0, [pc, #228]	; (800117c <SteadyStateKalmanFilter+0x174>)
 8001096:	f004 fb51 	bl	800573c <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&CPCTR_matrix, &CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800109a:	493c      	ldr	r1, [pc, #240]	; (800118c <SteadyStateKalmanFilter+0x184>)
 800109c:	4839      	ldr	r0, [pc, #228]	; (8001184 <SteadyStateKalmanFilter+0x17c>)
 800109e:	f004 fa43 	bl	8005528 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&P_k_matrix, &C_transpose_matrix, &PCT_matrix); 		 // P_k * C^T
 80010a2:	4a3b      	ldr	r2, [pc, #236]	; (8001190 <SteadyStateKalmanFilter+0x188>)
 80010a4:	4936      	ldr	r1, [pc, #216]	; (8001180 <SteadyStateKalmanFilter+0x178>)
 80010a6:	482c      	ldr	r0, [pc, #176]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 80010a8:	f004 f99e 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&PCT_matrix, &CPCTRinv_matrix, &K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 80010ac:	4a39      	ldr	r2, [pc, #228]	; (8001194 <SteadyStateKalmanFilter+0x18c>)
 80010ae:	4937      	ldr	r1, [pc, #220]	; (800118c <SteadyStateKalmanFilter+0x184>)
 80010b0:	4837      	ldr	r0, [pc, #220]	; (8001190 <SteadyStateKalmanFilter+0x188>)
 80010b2:	f004 f999 	bl	80053e8 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Cx_matrix);				 // C * X_k
 80010b6:	4a38      	ldr	r2, [pc, #224]	; (8001198 <SteadyStateKalmanFilter+0x190>)
 80010b8:	4925      	ldr	r1, [pc, #148]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010ba:	482f      	ldr	r0, [pc, #188]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 80010bc:	f004 f994 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&Velocity_matrix,  &Cx_matrix, &yCx_matrix);			  // y - ( C * X_k )
 80010c0:	4a36      	ldr	r2, [pc, #216]	; (800119c <SteadyStateKalmanFilter+0x194>)
 80010c2:	4935      	ldr	r1, [pc, #212]	; (8001198 <SteadyStateKalmanFilter+0x190>)
 80010c4:	481e      	ldr	r0, [pc, #120]	; (8001140 <SteadyStateKalmanFilter+0x138>)
 80010c6:	f004 f8d3 	bl	8005270 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&K_matrix, &yCx_matrix, &KyCx_matrix);		     // K( y - ( C * X_k ) )
 80010ca:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <SteadyStateKalmanFilter+0x198>)
 80010cc:	4933      	ldr	r1, [pc, #204]	; (800119c <SteadyStateKalmanFilter+0x194>)
 80010ce:	4831      	ldr	r0, [pc, #196]	; (8001194 <SteadyStateKalmanFilter+0x18c>)
 80010d0:	f004 f98a 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&X_k_matrix, &KyCx_matrix, &X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010d6:	4932      	ldr	r1, [pc, #200]	; (80011a0 <SteadyStateKalmanFilter+0x198>)
 80010d8:	481d      	ldr	r0, [pc, #116]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010da:	f004 fb2f 	bl	800573c <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Output_matrix);
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <SteadyStateKalmanFilter+0x19c>)
 80010e0:	491b      	ldr	r1, [pc, #108]	; (8001150 <SteadyStateKalmanFilter+0x148>)
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 80010e4:	f004 f980 	bl	80053e8 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010f0:	2204      	movs	r2, #4
 80010f2:	2104      	movs	r1, #4
 80010f4:	f004 fb1e 	bl	8005734 <arm_mat_init_f32>

	  arm_mat_mult_f32(&K_matrix, &C_matrix, &temp_matrix4);				// K * C
 80010f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fc:	461a      	mov	r2, r3
 80010fe:	491e      	ldr	r1, [pc, #120]	; (8001178 <SteadyStateKalmanFilter+0x170>)
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <SteadyStateKalmanFilter+0x18c>)
 8001102:	f004 f971 	bl	80053e8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8001106:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800110a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110e:	4619      	mov	r1, r3
 8001110:	4825      	ldr	r0, [pc, #148]	; (80011a8 <SteadyStateKalmanFilter+0x1a0>)
 8001112:	f004 f8ad 	bl	8005270 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &P_k_matrix, &P_k_matrix);			// (I - (K * C)) * P_k
 8001116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111a:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 800111c:	490e      	ldr	r1, [pc, #56]	; (8001158 <SteadyStateKalmanFilter+0x150>)
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f962 	bl	80053e8 <arm_mat_mult_f32>
	  Kalman_Speed = X_k[1];
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <SteadyStateKalmanFilter+0x1a4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <SteadyStateKalmanFilter+0x1a8>)
 800112a:	6013      	str	r3, [r2, #0]
	  return  Kalman_Speed;
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <SteadyStateKalmanFilter+0x1a8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3750      	adds	r7, #80	; 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000534 	.word	0x20000534
 8001144:	20000454 	.word	0x20000454
 8001148:	20000390 	.word	0x20000390
 800114c:	2000046c 	.word	0x2000046c
 8001150:	20000328 	.word	0x20000328
 8001154:	20000378 	.word	0x20000378
 8001158:	20000370 	.word	0x20000370
 800115c:	20000380 	.word	0x20000380
 8001160:	200003c4 	.word	0x200003c4
 8001164:	200003b0 	.word	0x200003b0
 8001168:	200003a8 	.word	0x200003a8
 800116c:	20000110 	.word	0x20000110
 8001170:	2000040c 	.word	0x2000040c
 8001174:	20000484 	.word	0x20000484
 8001178:	20000398 	.word	0x20000398
 800117c:	2000049c 	.word	0x2000049c
 8001180:	200003a0 	.word	0x200003a0
 8001184:	200004a8 	.word	0x200004a8
 8001188:	20000520 	.word	0x20000520
 800118c:	200004e4 	.word	0x200004e4
 8001190:	200004cc 	.word	0x200004cc
 8001194:	200004b4 	.word	0x200004b4
 8001198:	200004f0 	.word	0x200004f0
 800119c:	200004fc 	.word	0x200004fc
 80011a0:	20000508 	.word	0x20000508
 80011a4:	200003bc 	.word	0x200003bc
 80011a8:	20000388 	.word	0x20000388
 80011ac:	20000318 	.word	0x20000318
 80011b0:	20000314 	.word	0x20000314

080011b4 <Kalman_Start>:

void Kalman_Start(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	arm_mat_init_f32(&X_k_matrix, 4, 1,(float32_t*) &X_k);
 80011b8:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <Kalman_Start+0x140>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	2104      	movs	r1, #4
 80011be:	484e      	ldr	r0, [pc, #312]	; (80012f8 <Kalman_Start+0x144>)
 80011c0:	f004 fab8 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&P_k_matrix, 4, 4,(float32_t*) &P_k);
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <Kalman_Start+0x148>)
 80011c6:	2204      	movs	r2, #4
 80011c8:	2104      	movs	r1, #4
 80011ca:	484d      	ldr	r0, [pc, #308]	; (8001300 <Kalman_Start+0x14c>)
 80011cc:	f004 fab2 	bl	8005734 <arm_mat_init_f32>

	arm_mat_init_f32(&A_matrix, 4, 4,(float32_t*) &A);
 80011d0:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <Kalman_Start+0x150>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	2104      	movs	r1, #4
 80011d6:	484c      	ldr	r0, [pc, #304]	; (8001308 <Kalman_Start+0x154>)
 80011d8:	f004 faac 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, 4, 1,(float32_t*) &B);
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <Kalman_Start+0x158>)
 80011de:	2201      	movs	r2, #1
 80011e0:	2104      	movs	r1, #4
 80011e2:	484b      	ldr	r0, [pc, #300]	; (8001310 <Kalman_Start+0x15c>)
 80011e4:	f004 faa6 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&C_matrix, 1, 4,(float32_t*) &C);
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <Kalman_Start+0x160>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	2101      	movs	r1, #1
 80011ee:	484a      	ldr	r0, [pc, #296]	; (8001318 <Kalman_Start+0x164>)
 80011f0:	f004 faa0 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&G_matrix, 4, 1,(float32_t*) &G);
 80011f4:	4b49      	ldr	r3, [pc, #292]	; (800131c <Kalman_Start+0x168>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	2104      	movs	r1, #4
 80011fa:	4849      	ldr	r0, [pc, #292]	; (8001320 <Kalman_Start+0x16c>)
 80011fc:	f004 fa9a 	bl	8005734 <arm_mat_init_f32>

	arm_mat_init_f32(&A_transpose_matrix, 4, 4,(float32_t*) &A_transpose);
 8001200:	4b48      	ldr	r3, [pc, #288]	; (8001324 <Kalman_Start+0x170>)
 8001202:	2204      	movs	r2, #4
 8001204:	2104      	movs	r1, #4
 8001206:	4848      	ldr	r0, [pc, #288]	; (8001328 <Kalman_Start+0x174>)
 8001208:	f004 fa94 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&C_transpose_matrix, 4, 1,(float32_t*) &C_transpose);
 800120c:	4b47      	ldr	r3, [pc, #284]	; (800132c <Kalman_Start+0x178>)
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	4847      	ldr	r0, [pc, #284]	; (8001330 <Kalman_Start+0x17c>)
 8001214:	f004 fa8e 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&G_transpose_matrix, 1, 4,(float32_t*) &G_transpose);
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <Kalman_Start+0x180>)
 800121a:	2204      	movs	r2, #4
 800121c:	2101      	movs	r1, #1
 800121e:	4846      	ldr	r0, [pc, #280]	; (8001338 <Kalman_Start+0x184>)
 8001220:	f004 fa88 	bl	8005734 <arm_mat_init_f32>

	arm_mat_init_f32(&GGT_matrix, 4, 4,(float32_t*) &GGT);
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <Kalman_Start+0x188>)
 8001226:	2204      	movs	r2, #4
 8001228:	2104      	movs	r1, #4
 800122a:	4845      	ldr	r0, [pc, #276]	; (8001340 <Kalman_Start+0x18c>)
 800122c:	f004 fa82 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&GQGT_matrix, 4, 4,(float32_t*) &GQGT);
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <Kalman_Start+0x190>)
 8001232:	2204      	movs	r2, #4
 8001234:	2104      	movs	r1, #4
 8001236:	4844      	ldr	r0, [pc, #272]	; (8001348 <Kalman_Start+0x194>)
 8001238:	f004 fa7c 	bl	8005734 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&Bu_matrix, 4, 1,(float32_t*) &Bu_data);
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <Kalman_Start+0x198>)
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	4843      	ldr	r0, [pc, #268]	; (8001350 <Kalman_Start+0x19c>)
 8001244:	f004 fa76 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&Ax_matrix, 4, 1,(float32_t*) &Ax_data);
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <Kalman_Start+0x1a0>)
 800124a:	2201      	movs	r2, #1
 800124c:	2104      	movs	r1, #4
 800124e:	4842      	ldr	r0, [pc, #264]	; (8001358 <Kalman_Start+0x1a4>)
 8001250:	f004 fa70 	bl	8005734 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&CP_matrix, 1, 4,(float32_t*) &CP);
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <Kalman_Start+0x1a8>)
 8001256:	2204      	movs	r2, #4
 8001258:	2101      	movs	r1, #1
 800125a:	4841      	ldr	r0, [pc, #260]	; (8001360 <Kalman_Start+0x1ac>)
 800125c:	f004 fa6a 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&CPCT_matrix, 1, 1,(float32_t*) &CPCT);
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <Kalman_Start+0x1b0>)
 8001262:	2201      	movs	r2, #1
 8001264:	2101      	movs	r1, #1
 8001266:	4840      	ldr	r0, [pc, #256]	; (8001368 <Kalman_Start+0x1b4>)
 8001268:	f004 fa64 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&CPCTR_matrix, 1, 1,(float32_t*) &CPCTR);
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <Kalman_Start+0x1b8>)
 800126e:	2201      	movs	r2, #1
 8001270:	2101      	movs	r1, #1
 8001272:	483f      	ldr	r0, [pc, #252]	; (8001370 <Kalman_Start+0x1bc>)
 8001274:	f004 fa5e 	bl	8005734 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&K_matrix, 4, 1,(float32_t*) &K);
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <Kalman_Start+0x1c0>)
 800127a:	2201      	movs	r2, #1
 800127c:	2104      	movs	r1, #4
 800127e:	483e      	ldr	r0, [pc, #248]	; (8001378 <Kalman_Start+0x1c4>)
 8001280:	f004 fa58 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&PCT_matrix, 4, 1,(float32_t*) &PCT);
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <Kalman_Start+0x1c8>)
 8001286:	2201      	movs	r2, #1
 8001288:	2104      	movs	r1, #4
 800128a:	483d      	ldr	r0, [pc, #244]	; (8001380 <Kalman_Start+0x1cc>)
 800128c:	f004 fa52 	bl	8005734 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&CPCTRinv_matrix, 1, 1,(float32_t*) &CPCTRinv);
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <Kalman_Start+0x1d0>)
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	483c      	ldr	r0, [pc, #240]	; (8001388 <Kalman_Start+0x1d4>)
 8001298:	f004 fa4c 	bl	8005734 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&Cx_matrix, 1, 1,(float32_t*) &Cx);
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <Kalman_Start+0x1d8>)
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	483b      	ldr	r0, [pc, #236]	; (8001390 <Kalman_Start+0x1dc>)
 80012a4:	f004 fa46 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&yCx_matrix, 1, 1,(float32_t*) &yCx);
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <Kalman_Start+0x1e0>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	2101      	movs	r1, #1
 80012ae:	483a      	ldr	r0, [pc, #232]	; (8001398 <Kalman_Start+0x1e4>)
 80012b0:	f004 fa40 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&KyCx_matrix, 4, 1,(float32_t*) &KyCx);
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <Kalman_Start+0x1e8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	2104      	movs	r1, #4
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <Kalman_Start+0x1ec>)
 80012bc:	f004 fa3a 	bl	8005734 <arm_mat_init_f32>

	arm_mat_init_f32(&Output_matrix, 1, 1,(float32_t*) &Es_velocity);
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <Kalman_Start+0x1f0>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	2101      	movs	r1, #1
 80012c6:	4838      	ldr	r0, [pc, #224]	; (80013a8 <Kalman_Start+0x1f4>)
 80012c8:	f004 fa34 	bl	8005734 <arm_mat_init_f32>

	arm_mat_init_f32(&eye_matrix, 4, 4,(float32_t*) &eye);
 80012cc:	4b37      	ldr	r3, [pc, #220]	; (80013ac <Kalman_Start+0x1f8>)
 80012ce:	2204      	movs	r2, #4
 80012d0:	2104      	movs	r1, #4
 80012d2:	4837      	ldr	r0, [pc, #220]	; (80013b0 <Kalman_Start+0x1fc>)
 80012d4:	f004 fa2e 	bl	8005734 <arm_mat_init_f32>

	arm_mat_init_f32(&R_matrix, 1, 1,(float32_t*) &R);
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <Kalman_Start+0x200>)
 80012da:	2201      	movs	r2, #1
 80012dc:	2101      	movs	r1, #1
 80012de:	4836      	ldr	r0, [pc, #216]	; (80013b8 <Kalman_Start+0x204>)
 80012e0:	f004 fa28 	bl	8005734 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_matrix, 1, 1,(float32_t*) &Z);
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <Kalman_Start+0x208>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	2101      	movs	r1, #1
 80012ea:	4835      	ldr	r0, [pc, #212]	; (80013c0 <Kalman_Start+0x20c>)
 80012ec:	f004 fa22 	bl	8005734 <arm_mat_init_f32>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000318 	.word	0x20000318
 80012f8:	20000328 	.word	0x20000328
 80012fc:	20000330 	.word	0x20000330
 8001300:	20000370 	.word	0x20000370
 8001304:	20000000 	.word	0x20000000
 8001308:	20000378 	.word	0x20000378
 800130c:	200000c0 	.word	0x200000c0
 8001310:	20000390 	.word	0x20000390
 8001314:	200000d0 	.word	0x200000d0
 8001318:	20000398 	.word	0x20000398
 800131c:	200000f0 	.word	0x200000f0
 8001320:	200003a8 	.word	0x200003a8
 8001324:	20000040 	.word	0x20000040
 8001328:	20000380 	.word	0x20000380
 800132c:	200000e0 	.word	0x200000e0
 8001330:	200003a0 	.word	0x200003a0
 8001334:	20000100 	.word	0x20000100
 8001338:	200003b0 	.word	0x200003b0
 800133c:	200003cc 	.word	0x200003cc
 8001340:	200003c4 	.word	0x200003c4
 8001344:	20000414 	.word	0x20000414
 8001348:	2000040c 	.word	0x2000040c
 800134c:	2000045c 	.word	0x2000045c
 8001350:	20000454 	.word	0x20000454
 8001354:	20000474 	.word	0x20000474
 8001358:	2000046c 	.word	0x2000046c
 800135c:	2000048c 	.word	0x2000048c
 8001360:	20000484 	.word	0x20000484
 8001364:	200004a4 	.word	0x200004a4
 8001368:	2000049c 	.word	0x2000049c
 800136c:	200004b0 	.word	0x200004b0
 8001370:	200004a8 	.word	0x200004a8
 8001374:	200004bc 	.word	0x200004bc
 8001378:	200004b4 	.word	0x200004b4
 800137c:	200004d4 	.word	0x200004d4
 8001380:	200004cc 	.word	0x200004cc
 8001384:	200004ec 	.word	0x200004ec
 8001388:	200004e4 	.word	0x200004e4
 800138c:	200004f8 	.word	0x200004f8
 8001390:	200004f0 	.word	0x200004f0
 8001394:	20000504 	.word	0x20000504
 8001398:	200004fc 	.word	0x200004fc
 800139c:	20000510 	.word	0x20000510
 80013a0:	20000508 	.word	0x20000508
 80013a4:	200003b8 	.word	0x200003b8
 80013a8:	200003bc 	.word	0x200003bc
 80013ac:	20000080 	.word	0x20000080
 80013b0:	20000388 	.word	0x20000388
 80013b4:	20000114 	.word	0x20000114
 80013b8:	20000520 	.word	0x20000520
 80013bc:	20000530 	.word	0x20000530
 80013c0:	20000528 	.word	0x20000528

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f000 fdf0 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f838 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f000 fa0a 	bl	80017e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d4:	f000 f9de 	bl	8001794 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013d8:	f000 f93a 	bl	8001650 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013dc:	f000 f898 	bl	8001510 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013e0:	f000 f98a 	bl	80016f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Kalman_Start();
 80013e4:	f7ff fee6 	bl	80011b4 <Kalman_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80013e8:	2104      	movs	r1, #4
 80013ea:	4810      	ldr	r0, [pc, #64]	; (800142c <main+0x68>)
 80013ec:	f002 f900 	bl	80035f0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Motor
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <main+0x6c>)
 80013f2:	f001 fe91 	bl	8003118 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <main+0x6c>)
 80013fa:	f001 ffa3 	bl	8003344 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3); //Timer Interrupt
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0x70>)
 8001400:	f001 fee4 	bl	80031cc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t timestamp = 0;
	  	  if(HAL_GetTick() >= timestamp)
 8001404:	f000 fe38 	bl	8002078 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <main+0x74>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3f8      	bcc.n	8001404 <main+0x40>
	  	  {
	  		timestamp = HAL_GetTick() + 500;
 8001412:	f000 fe31 	bl	8002078 <HAL_GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <main+0x74>)
 800141e:	6013      	str	r3, [r2, #0]
	  		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001420:	2120      	movs	r1, #32
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <main+0x78>)
 8001424:	f001 f975 	bl	8002712 <HAL_GPIO_TogglePin>
  {
 8001428:	e7ec      	b.n	8001404 <main+0x40>
 800142a:	bf00      	nop
 800142c:	20000584 	.word	0x20000584
 8001430:	2000053c 	.word	0x2000053c
 8001434:	200005cc 	.word	0x200005cc
 8001438:	200006ac 	.word	0x200006ac
 800143c:	40020000 	.word	0x40020000

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	; 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fa08 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <SystemClock_Config+0xc8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <SystemClock_Config+0xc8>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <SystemClock_Config+0xc8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <SystemClock_Config+0xcc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a20      	ldr	r2, [pc, #128]	; (800150c <SystemClock_Config+0xcc>)
 800148a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <SystemClock_Config+0xcc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 f93f 	bl	8002748 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 faf0 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2103      	movs	r1, #3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fba1 	bl	8002c38 <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014fc:	f000 fada 	bl	8001ab4 <Error_Handler>
  }
}
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	; 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b096      	sub	sp, #88	; 0x58
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2220      	movs	r2, #32
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f004 f98b 	bl	8005864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <MX_TIM1_Init+0x138>)
 8001550:	4a3e      	ldr	r2, [pc, #248]	; (800164c <MX_TIM1_Init+0x13c>)
 8001552:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <MX_TIM1_Init+0x138>)
 8001556:	2263      	movs	r2, #99	; 0x63
 8001558:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <MX_TIM1_Init+0x138>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <MX_TIM1_Init+0x138>)
 8001562:	2263      	movs	r2, #99	; 0x63
 8001564:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <MX_TIM1_Init+0x138>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <MX_TIM1_Init+0x138>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b35      	ldr	r3, [pc, #212]	; (8001648 <MX_TIM1_Init+0x138>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001578:	4833      	ldr	r0, [pc, #204]	; (8001648 <MX_TIM1_Init+0x138>)
 800157a:	f001 fd7d 	bl	8003078 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001584:	f000 fa96 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001592:	4619      	mov	r1, r3
 8001594:	482c      	ldr	r0, [pc, #176]	; (8001648 <MX_TIM1_Init+0x138>)
 8001596:	f002 fa83 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015a0:	f000 fa88 	bl	8001ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015a4:	4828      	ldr	r0, [pc, #160]	; (8001648 <MX_TIM1_Init+0x138>)
 80015a6:	f001 fe73 	bl	8003290 <HAL_TIM_PWM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015b0:	f000 fa80 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c0:	4619      	mov	r1, r3
 80015c2:	4821      	ldr	r0, [pc, #132]	; (8001648 <MX_TIM1_Init+0x138>)
 80015c4:	f002 fe28 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80015ce:	f000 fa71 	bl	8001ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4814      	ldr	r0, [pc, #80]	; (8001648 <MX_TIM1_Init+0x138>)
 80015f8:	f002 f990 	bl	800391c <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001602:	f000 fa57 	bl	8001ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM1_Init+0x138>)
 800162a:	f002 fe63 	bl	80042f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001634:	f000 fa3e 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM1_Init+0x138>)
 800163a:	f000 faed 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3758      	adds	r7, #88	; 0x58
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000053c 	.word	0x2000053c
 800164c:	40010000 	.word	0x40010000

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2224      	movs	r2, #36	; 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 f900 	bl	8005864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001682:	f04f 32ff 	mov.w	r2, #4294967295
 8001686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM2_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM2_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001694:	2303      	movs	r3, #3
 8001696:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	2301      	movs	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_TIM2_Init+0xa4>)
 80016c0:	f001 fef0 	bl	80034a4 <HAL_TIM_Encoder_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ca:	f000 f9f3 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM2_Init+0xa4>)
 80016dc:	f002 fd9c 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016e6:	f000 f9e5 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3730      	adds	r7, #48	; 0x30
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000584 	.word	0x20000584

080016f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM3_Init+0x94>)
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <MX_TIM3_Init+0x98>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_TIM3_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM3_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_TIM3_Init+0x94>)
 8001728:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800172c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM3_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173a:	4814      	ldr	r0, [pc, #80]	; (800178c <MX_TIM3_Init+0x94>)
 800173c:	f001 fc9c 	bl	8003078 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001746:	f000 f9b5 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM3_Init+0x94>)
 8001758:	f002 f9a2 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 f9a7 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM3_Init+0x94>)
 8001774:	f002 fd50 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800177e:	f000 f999 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200005cc 	.word	0x200005cc
 8001790:	40000400 	.word	0x40000400

08001794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_USART2_UART_Init+0x50>)
 800179c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART2_UART_Init+0x4c>)
 80017cc:	f002 fdf8 	bl	80043c0 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d6:	f000 f96d 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000614 	.word	0x20000614
 80017e4:	40004400 	.word	0x40004400

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MX_GPIO_Init+0xd0>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_GPIO_Init+0xd0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2130      	movs	r1, #48	; 0x30
 8001872:	4812      	ldr	r0, [pc, #72]	; (80018bc <MX_GPIO_Init+0xd4>)
 8001874:	f000 ff34 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_GPIO_Init+0xd8>)
 8001890:	f000 fda2 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001894:	2330      	movs	r3, #48	; 0x30
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_GPIO_Init+0xd4>)
 80018ac:	f000 fd94 	bl	80023d8 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020800 	.word	0x40020800

080018c4 <setMotor>:

/* USER CODE BEGIN 4 */
void setMotor(int PWM){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if(PWM >= 0){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db09      	blt.n	80018e6 <setMotor+0x22>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PWM);
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <setMotor+0x4c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2110      	movs	r1, #16
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <setMotor+0x50>)
 80018e0:	f000 fefe 	bl	80026e0 <HAL_GPIO_WritePin>
	}
	else if (PWM < 0){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}
 80018e4:	e00f      	b.n	8001906 <setMotor+0x42>
	else if (PWM < 0){
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0c      	bge.n	8001906 <setMotor+0x42>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <setMotor+0x4c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2110      	movs	r1, #16
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <setMotor+0x50>)
 8001902:	f000 feed 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000053c 	.word	0x2000053c
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001924:	4293      	cmp	r3, r2
 8001926:	f040 8099 	bne.w	8001a5c <HAL_TIM_PeriodElapsedCallback+0x144>
		 QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 800192a:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	461a      	mov	r2, r3
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001934:	601a      	str	r2, [r3, #0]
//		 RawSpeed = (QEIReadRaw - L_QEIReadRaw)*1000.0*2.0*M_PI/280.0;
		 L_QEIReadRaw = QEIReadRaw;
 8001936:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800193c:	6013      	str	r3, [r2, #0]
		 QEIAd = (QEIReadRaw*2.0*M_PI/280.0);
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdf6 	bl	8000534 <__aeabi_i2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f7fe fca6 	bl	800029c <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	a343      	add	r3, pc, #268	; (adr r3, 8001a68 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe53 	bl	8000608 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001970:	f7fe ff74 	bl	800085c <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f93c 	bl	8000bf8 <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	4a40      	ldr	r2, [pc, #256]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001984:	6013      	str	r3, [r2, #0]
		 RawSpeed = (QEIAd - L_QEIAd)*5000.0;
 8001986:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001a8c <HAL_TIM_PeriodElapsedCallback+0x174>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
//		 PWM = 100 * sin(HAL_GetTick()/1000.0);
		 setMotor(PWM);
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff8b 	bl	80018c4 <setMotor>
		 Voltage = 12.0*PWM/100.0;
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdbe 	bl	8000534 <__aeabi_i2d>
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80019be:	f7fe fe23 	bl	8000608 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80019d0:	f7fe ff44 	bl	800085c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f90c 	bl	8000bf8 <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a2f      	ldr	r2, [pc, #188]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80019e4:	6013      	str	r3, [r2, #0]
		 kalman = SteadyStateKalmanFilter(Voltage ,QEIAd);
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	eef0 0a47 	vmov.f32	s1, s14
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	f7ff fb05 	bl	8001008 <SteadyStateKalmanFilter>
 80019fe:	eef0 7a40 	vmov.f32	s15, s0
 8001a02:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a04:	edc3 7a00 	vstr	s15, [r3]
		if (huart2.gState == HAL_UART_STATE_READY)
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	d11f      	bne.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x13c>
		{
			sprintf(TxBuffer,"%.2f %.2f\r\n",kalman,RawSpeed);
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9d 	bl	8000558 <__aeabi_f2d>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	460d      	mov	r5, r1
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	e9cd 2300 	strd	r2, r3, [sp]
 8001a34:	4622      	mov	r2, r4
 8001a36:	462b      	mov	r3, r5
 8001a38:	491c      	ldr	r1, [pc, #112]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001a3c:	f004 fd9a 	bl	8006574 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)TxBuffer, strlen(TxBuffer));
 8001a40:	481b      	ldr	r0, [pc, #108]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001a42:	f7fe fbcd 	bl	80001e0 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4918      	ldr	r1, [pc, #96]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001a4e:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001a50:	f002 fd03 	bl	800445a <HAL_UART_Transmit_IT>
		}


	  	 L_QEIAd = QEIAd;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001a5a:	6013      	str	r3, [r2, #0]
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bdb0      	pop	{r4, r5, r7, pc}
 8001a64:	f3af 8000 	nop.w
 8001a68:	54442d18 	.word	0x54442d18
 8001a6c:	400921fb 	.word	0x400921fb
 8001a70:	200005cc 	.word	0x200005cc
 8001a74:	20000584 	.word	0x20000584
 8001a78:	2000068c 	.word	0x2000068c
 8001a7c:	20000690 	.word	0x20000690
 8001a80:	40718000 	.word	0x40718000
 8001a84:	200006a0 	.word	0x200006a0
 8001a88:	200006a4 	.word	0x200006a4
 8001a8c:	459c4000 	.word	0x459c4000
 8001a90:	20000694 	.word	0x20000694
 8001a94:	2000069c 	.word	0x2000069c
 8001a98:	40280000 	.word	0x40280000
 8001a9c:	40590000 	.word	0x40590000
 8001aa0:	20000698 	.word	0x20000698
 8001aa4:	200006a8 	.word	0x200006a8
 8001aa8:	20000614 	.word	0x20000614
 8001aac:	0800a170 	.word	0x0800a170
 8001ab0:	20000658 	.word	0x20000658

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_MspInit+0x4c>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_MspInit+0x4c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001afe:	2007      	movs	r0, #7
 8001b00:	f000 fb96 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_TIM_Base_MspInit+0x70>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3e:	e01a      	b.n	8001b76 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_TIM_Base_MspInit+0x78>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d115      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_TIM_Base_MspInit+0x74>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	201d      	movs	r0, #29
 8001b6c:	f000 fb6b 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b70:	201d      	movs	r0, #29
 8001b72:	f000 fb84 	bl	800227e <HAL_NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40010000 	.word	0x40010000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40000400 	.word	0x40000400

08001b8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d12b      	bne.n	8001c06 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be6:	2303      	movs	r3, #3
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c02:	f000 fbe9 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_TIM_MspPostInit+0x68>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11e      	bne.n	8001c78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_TIM_MspPostInit+0x6c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0x6c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_TIM_MspPostInit+0x6c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_TIM_MspPostInit+0x70>)
 8001c74:	f000 fbb0 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_UART_MspInit+0x94>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d133      	bne.n	8001d16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_UART_MspInit+0x98>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_UART_MspInit+0x9c>)
 8001d02:	f000 fb69 	bl	80023d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2026      	movs	r0, #38	; 0x26
 8001d0c:	f000 fa9b 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d10:	2026      	movs	r0, #38	; 0x26
 8001d12:	f000 fab4 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f000 f96a 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <TIM3_IRQHandler+0x10>)
 8001d86:	f001 fcc1 	bl	800370c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200005cc 	.word	0x200005cc

08001d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART2_IRQHandler+0x10>)
 8001d9a:	f002 fba3 	bl	80044e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000614 	.word	0x20000614

08001da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_kill>:

int _kill(int pid, int sig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc2:	f003 fd25 	bl	8005810 <__errno>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2216      	movs	r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
  return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_exit>:

void _exit (int status)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffe7 	bl	8001db8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dea:	e7fe      	b.n	8001dea <_exit+0x12>

08001dec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e00a      	b.n	8001e14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dfe:	f3af 8000 	nop.w
 8001e02:	4601      	mov	r1, r0
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	b2ca      	uxtb	r2, r1
 8001e0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf0      	blt.n	8001dfe <_read+0x12>
  }

  return len;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e009      	b.n	8001e4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	60ba      	str	r2, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf1      	blt.n	8001e38 <_write+0x12>
  }
  return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_close>:

int _close(int file)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e86:	605a      	str	r2, [r3, #4]
  return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_isatty>:

int _isatty(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <_sbrk+0x5c>)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <_sbrk+0x60>)
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <_sbrk+0x64>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <_sbrk+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef8:	f003 fc8a 	bl	8005810 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	220c      	movs	r2, #12
 8001f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e009      	b.n	8001f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <_sbrk+0x64>)
 8001f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20020000 	.word	0x20020000
 8001f28:	00000400 	.word	0x00000400
 8001f2c:	200006b0 	.word	0x200006b0
 8001f30:	200006c8 	.word	0x200006c8

08001f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <SystemInit+0x20>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <SystemInit+0x20>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack    		 /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5e:	490e      	ldr	r1, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f74:	4c0b      	ldr	r4, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f82:	f7ff ffd7 	bl	8001f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f86:	f003 fc49 	bl	800581c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8a:	f7ff fa1b 	bl	80013c4 <main>
  bx  lr    
 8001f8e:	4770      	bx	lr
ldr   sp, =_estack    		 /* set stack pointer */
 8001f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8001f9c:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 8001fa0:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8001fa4:	200006c8 	.word	0x200006c8

08001fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_Init+0x40>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_Init+0x40>)
 8001fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_Init+0x40>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f92b 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7ff fd6e 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f943 	bl	800229a <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 f90b 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000118 	.word	0x20000118
 8002048:	20000120 	.word	0x20000120
 800204c:	2000011c 	.word	0x2000011c

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000120 	.word	0x20000120
 8002074:	200006b4 	.word	0x200006b4

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200006b4 	.word	0x200006b4

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff feda 	bl	8002078 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e052      	b.n	800238a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0216 	bic.w	r2, r2, #22
 80022f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002302:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <HAL_DMA_Abort+0x62>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0208 	bic.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002334:	e013      	b.n	800235e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002336:	f7ff fe9f 	bl	8002078 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b05      	cmp	r3, #5
 8002342:	d90c      	bls.n	800235e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e015      	b.n	800238a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e4      	bne.n	8002336 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	223f      	movs	r2, #63	; 0x3f
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00c      	b.n	80023ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2205      	movs	r2, #5
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e159      	b.n	80026a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 8148 	bne.w	80026a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	2b02      	cmp	r3, #2
 8002428:	d130      	bne.n	800248c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0201 	and.w	r2, r3, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d017      	beq.n	80024c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a2 	beq.w	80026a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a56      	ldr	r2, [pc, #344]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <HAL_GPIO_Init+0x2e8>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_GPIO_Init+0x2ec>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_Init+0x2f0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x202>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2f4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x1fe>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a47      	ldr	r2, [pc, #284]	; (80026d0 <HAL_GPIO_Init+0x2f8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x1fa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <HAL_GPIO_Init+0x2fc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x1f6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <HAL_GPIO_Init+0x300>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x1f2>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x204>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x2ec>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_GPIO_Init+0x304>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <HAL_GPIO_Init+0x304>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_GPIO_Init+0x304>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_GPIO_Init+0x304>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <HAL_GPIO_Init+0x304>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f aea2 	bls.w	80023f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	041a      	lsls	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002724:	887a      	ldrh	r2, [r7, #2]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	041a      	lsls	r2, r3, #16
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43d9      	mvns	r1, r3
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	400b      	ands	r3, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e267      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d075      	beq.n	8002852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	4b88      	ldr	r3, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00c      	beq.n	800278c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002772:	4b85      	ldr	r3, [pc, #532]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277a:	2b08      	cmp	r3, #8
 800277c:	d112      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278a:	d10b      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	4b7e      	ldr	r3, [pc, #504]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d05b      	beq.n	8002850 <HAL_RCC_OscConfig+0x108>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d157      	bne.n	8002850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e242      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x74>
 80027ae:	4b76      	ldr	r3, [pc, #472]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a75      	ldr	r2, [pc, #468]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <HAL_RCC_OscConfig+0xb0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x98>
 80027c6:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6c      	ldr	r2, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0xb0>
 80027e0:	4b69      	ldr	r3, [pc, #420]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a68      	ldr	r2, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fc3a 	bl	8002078 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff fc36 	bl	8002078 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e207      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xc0>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fc26 	bl	8002078 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff fc22 	bl	8002078 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1f3      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	4b51      	ldr	r3, [pc, #324]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0xe8>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d063      	beq.n	8002926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285e:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002872:	2b08      	cmp	r3, #8
 8002874:	d11c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002876:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d116      	bne.n	80028b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_RCC_OscConfig+0x152>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e1c7      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4937      	ldr	r1, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	e03a      	b.n	8002926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCC_OscConfig+0x244>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7ff fbdb 	bl	8002078 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c6:	f7ff fbd7 	bl	8002078 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1a8      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4925      	ldr	r1, [pc, #148]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCC_OscConfig+0x244>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff fbba 	bl	8002078 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002908:	f7ff fbb6 	bl	8002078 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e187      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d036      	beq.n	80029a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_RCC_OscConfig+0x248>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7ff fb9a 	bl	8002078 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002948:	f7ff fb96 	bl	8002078 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e167      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x240>)
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x200>
 8002966:	e01b      	b.n	80029a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_OscConfig+0x248>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7ff fb83 	bl	8002078 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	e00e      	b.n	8002994 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002976:	f7ff fb7f 	bl	8002078 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d907      	bls.n	8002994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e150      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
 8002988:	40023800 	.word	0x40023800
 800298c:	42470000 	.word	0x42470000
 8002990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ea      	bne.n	8002976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8097 	beq.w	8002adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b7d      	ldr	r3, [pc, #500]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a7c      	ldr	r2, [pc, #496]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b7a      	ldr	r3, [pc, #488]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4b77      	ldr	r3, [pc, #476]	; (8002bbc <HAL_RCC_OscConfig+0x474>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d118      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ea:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <HAL_RCC_OscConfig+0x474>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x474>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7ff fb3f 	bl	8002078 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7ff fb3b 	bl	8002078 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e10c      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_OscConfig+0x474>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x2ea>
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a63      	ldr	r2, [pc, #396]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	e01c      	b.n	8002a6c <HAL_RCC_OscConfig+0x324>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x30c>
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	4a5e      	ldr	r2, [pc, #376]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	6713      	str	r3, [r2, #112]	; 0x70
 8002a46:	4b5c      	ldr	r3, [pc, #368]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a5b      	ldr	r2, [pc, #364]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0x324>
 8002a54:	4b58      	ldr	r3, [pc, #352]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a57      	ldr	r2, [pc, #348]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	4b55      	ldr	r3, [pc, #340]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a54      	ldr	r2, [pc, #336]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7ff fb00 	bl	8002078 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7ff fafc 	bl	8002078 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0cb      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ee      	beq.n	8002a7c <HAL_RCC_OscConfig+0x334>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7ff faea 	bl	8002078 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fae6 	bl	8002078 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0b5      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ee      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a1 	beq.w	8002c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d05c      	beq.n	8002bac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d141      	bne.n	8002b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCC_OscConfig+0x478>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff faba 	bl	8002078 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7ff fab6 	bl	8002078 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e087      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	019b      	lsls	r3, r3, #6
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	491b      	ldr	r1, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x478>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7ff fa8f 	bl	8002078 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7ff fa8b 	bl	8002078 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e05c      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x416>
 8002b7c:	e054      	b.n	8002c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x478>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7ff fa78 	bl	8002078 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7ff fa74 	bl	8002078 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e045      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x444>
 8002baa:	e03d      	b.n	8002c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e038      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x4ec>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d028      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d121      	bne.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11a      	bne.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d111      	bne.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0cc      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d90c      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0b8      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c8c:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca4:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a52      	ldr	r2, [pc, #328]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	494d      	ldr	r1, [pc, #308]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d044      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e07f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e067      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4934      	ldr	r1, [pc, #208]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d28:	f7ff f9a6 	bl	8002078 <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7ff f9a2 	bl	8002078 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e04f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d20c      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e032      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4916      	ldr	r1, [pc, #88]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	490e      	ldr	r1, [pc, #56]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dbe:	f000 f821 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	490a      	ldr	r1, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	5ccb      	ldrb	r3, [r1, r3]
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f906 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00
 8002df4:	40023800 	.word	0x40023800
 8002df8:	0800a17c 	.word	0x0800a17c
 8002dfc:	20000118 	.word	0x20000118
 8002e00:	2000011c 	.word	0x2000011c

08002e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e08:	b094      	sub	sp, #80	; 0x50
 8002e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e10:	2300      	movs	r3, #0
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e14:	2300      	movs	r3, #0
 8002e16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1c:	4b79      	ldr	r3, [pc, #484]	; (8003004 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d00d      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x40>
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	f200 80e1 	bhi.w	8002ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x34>
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e36:	e0db      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b73      	ldr	r3, [pc, #460]	; (8003008 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e3c:	e0db      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e42:	e0d8      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e44:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	; (8003004 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	2200      	movs	r2, #0
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6e:	2300      	movs	r3, #0
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
 8002e72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e76:	4622      	mov	r2, r4
 8002e78:	462b      	mov	r3, r5
 8002e7a:	f04f 0000 	mov.w	r0, #0
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	0159      	lsls	r1, r3, #5
 8002e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e88:	0150      	lsls	r0, r2, #5
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4621      	mov	r1, r4
 8002e90:	1a51      	subs	r1, r2, r1
 8002e92:	6139      	str	r1, [r7, #16]
 8002e94:	4629      	mov	r1, r5
 8002e96:	eb63 0301 	sbc.w	r3, r3, r1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	018b      	lsls	r3, r1, #6
 8002eac:	4651      	mov	r1, sl
 8002eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	018a      	lsls	r2, r1, #6
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	eb63 0901 	sbc.w	r9, r3, r1
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ed6:	4690      	mov	r8, r2
 8002ed8:	4699      	mov	r9, r3
 8002eda:	4623      	mov	r3, r4
 8002edc:	eb18 0303 	adds.w	r3, r8, r3
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	eb49 0303 	adc.w	r3, r9, r3
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	024b      	lsls	r3, r1, #9
 8002efa:	4621      	mov	r1, r4
 8002efc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f00:	4621      	mov	r1, r4
 8002f02:	024a      	lsls	r2, r1, #9
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f14:	f7fd fec0 	bl	8000c98 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	e058      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
 8002f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	f04f 0000 	mov.w	r0, #0
 8002f44:	f04f 0100 	mov.w	r1, #0
 8002f48:	0159      	lsls	r1, r3, #5
 8002f4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4e:	0150      	lsls	r0, r2, #5
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4641      	mov	r1, r8
 8002f56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f74:	ebb2 040a 	subs.w	r4, r2, sl
 8002f78:	eb63 050b 	sbc.w	r5, r3, fp
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	00eb      	lsls	r3, r5, #3
 8002f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f8a:	00e2      	lsls	r2, r4, #3
 8002f8c:	4614      	mov	r4, r2
 8002f8e:	461d      	mov	r5, r3
 8002f90:	4643      	mov	r3, r8
 8002f92:	18e3      	adds	r3, r4, r3
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	464b      	mov	r3, r9
 8002f98:	eb45 0303 	adc.w	r3, r5, r3
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002faa:	4629      	mov	r1, r5
 8002fac:	028b      	lsls	r3, r1, #10
 8002fae:	4621      	mov	r1, r4
 8002fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	028a      	lsls	r2, r1, #10
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	61fa      	str	r2, [r7, #28]
 8002fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc8:	f7fd fe66 	bl	8000c98 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fee:	e002      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3750      	adds	r7, #80	; 0x50
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	00f42400 	.word	0x00f42400
 800300c:	007a1200 	.word	0x007a1200

08003010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <HAL_RCC_GetHCLKFreq+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000118 	.word	0x20000118

08003028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800302c:	f7ff fff0 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	0a9b      	lsrs	r3, r3, #10
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK1Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	0800a18c 	.word	0x0800a18c

08003050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003054:	f7ff ffdc 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0b5b      	lsrs	r3, r3, #13
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	0800a18c 	.word	0x0800a18c

08003078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe fd36 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 fde2 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d001      	beq.n	8003130 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e03c      	b.n	80031aa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_TIM_Base_Start+0xa0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_TIM_Base_Start+0x5c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d013      	beq.n	8003174 <HAL_TIM_Base_Start+0x5c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <HAL_TIM_Base_Start+0xa4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_TIM_Base_Start+0x5c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_TIM_Base_Start+0xa8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_TIM_Base_Start+0x5c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <HAL_TIM_Base_Start+0xac>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_TIM_Base_Start+0x5c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_TIM_Base_Start+0xb0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b06      	cmp	r3, #6
 8003184:	d010      	beq.n	80031a8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	e007      	b.n	80031a8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40014000 	.word	0x40014000

080031cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e044      	b.n	800326e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start_IT+0xb0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d013      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_TIM_Base_Start_IT+0xb4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_TIM_Base_Start_IT+0xb8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_TIM_Base_Start_IT+0xbc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x6c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIM_Base_Start_IT+0xc0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40014000 	.word	0x40014000

08003290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e041      	b.n	8003326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f839 	bl	800332e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f000 fcd6 	bl	8003c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_TIM_PWM_Start+0x24>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e022      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d109      	bne.n	8003382 <HAL_TIM_PWM_Start+0x3e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	e015      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d109      	bne.n	800339c <HAL_TIM_PWM_Start+0x58>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e008      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e068      	b.n	8003488 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x82>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c4:	e013      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x92>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0xa2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	e003      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fee8 	bl	80041cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_TIM_PWM_Start+0x14c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d107      	bne.n	8003416 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_TIM_PWM_Start+0x14c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d013      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_TIM_PWM_Start+0x150>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_TIM_PWM_Start+0x154>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_TIM_PWM_Start+0x158>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_PWM_Start+0x10e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_TIM_PWM_Start+0x15c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40014000 	.word	0x40014000

080034a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e097      	b.n	80035e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fe fb5d 	bl	8001b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f000 fbc1 	bl	8003c80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4313      	orrs	r3, r2
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003544:	f023 030c 	bic.w	r3, r3, #12
 8003548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	4313      	orrs	r3, r2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	011a      	lsls	r2, r3, #4
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	4313      	orrs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	4313      	orrs	r3, r2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003600:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003608:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003610:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003618:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d110      	bne.n	8003642 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003626:	7b7b      	ldrb	r3, [r7, #13]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e069      	b.n	8003704 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003640:	e031      	b.n	80036a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d110      	bne.n	800366a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003648:	7bbb      	ldrb	r3, [r7, #14]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800364e:	7b3b      	ldrb	r3, [r7, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e055      	b.n	8003704 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003668:	e01d      	b.n	80036a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003676:	7b7b      	ldrb	r3, [r7, #13]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d102      	bne.n	8003682 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800367c:	7b3b      	ldrb	r3, [r7, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e03e      	b.n	8003704 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_TIM_Encoder_Start+0xc4>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d008      	beq.n	80036c4 <HAL_TIM_Encoder_Start+0xd4>
 80036b2:	e00f      	b.n	80036d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd85 	bl	80041cc <TIM_CCxChannelCmd>
      break;
 80036c2:	e016      	b.n	80036f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	2104      	movs	r1, #4
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd7d 	bl	80041cc <TIM_CCxChannelCmd>
      break;
 80036d2:	e00e      	b.n	80036f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2201      	movs	r2, #1
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fd75 	bl	80041cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2201      	movs	r2, #1
 80036e8:	2104      	movs	r1, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fd6e 	bl	80041cc <TIM_CCxChannelCmd>
      break;
 80036f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0202 	mvn.w	r2, #2
 8003738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa77 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa69 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa7a 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0204 	mvn.w	r2, #4
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa4d 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fa3f 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fa50 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0208 	mvn.w	r2, #8
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa23 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa15 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa26 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2208      	movs	r2, #8
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9f9 	bl	8003c42 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9eb 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9fc 	bl	8003c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0201 	mvn.w	r2, #1
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe f844 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fd78 	bl	80043ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d10e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d107      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9c1 	bl	8003c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b20      	cmp	r3, #32
 8003902:	d107      	bne.n	8003914 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0220 	mvn.w	r2, #32
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fd42 	bl	8004398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003936:	2302      	movs	r3, #2
 8003938:	e0ae      	b.n	8003a98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f200 809f 	bhi.w	8003a88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003985 	.word	0x08003985
 8003954:	08003a89 	.word	0x08003a89
 8003958:	08003a89 	.word	0x08003a89
 800395c:	08003a89 	.word	0x08003a89
 8003960:	080039c5 	.word	0x080039c5
 8003964:	08003a89 	.word	0x08003a89
 8003968:	08003a89 	.word	0x08003a89
 800396c:	08003a89 	.word	0x08003a89
 8003970:	08003a07 	.word	0x08003a07
 8003974:	08003a89 	.word	0x08003a89
 8003978:	08003a89 	.word	0x08003a89
 800397c:	08003a89 	.word	0x08003a89
 8003980:	08003a47 	.word	0x08003a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f9f8 	bl	8003d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	619a      	str	r2, [r3, #24]
      break;
 80039c2:	e064      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fa3e 	bl	8003e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6999      	ldr	r1, [r3, #24]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	619a      	str	r2, [r3, #24]
      break;
 8003a04:	e043      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa89 	bl	8003f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0208 	orr.w	r2, r2, #8
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0204 	bic.w	r2, r2, #4
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	61da      	str	r2, [r3, #28]
      break;
 8003a44:	e023      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fad3 	bl	8003ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	61da      	str	r2, [r3, #28]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0b4      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x186>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af4:	d03e      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0xd4>
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	f200 8087 	bhi.w	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	f000 8086 	beq.w	8003c12 <HAL_TIM_ConfigClockSource+0x172>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d87f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b70      	cmp	r3, #112	; 0x70
 8003b0e:	d01a      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0xa6>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d87b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d050      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x11a>
 8003b18:	2b60      	cmp	r3, #96	; 0x60
 8003b1a:	d877      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b50      	cmp	r3, #80	; 0x50
 8003b1e:	d03c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xfa>
 8003b20:	2b50      	cmp	r3, #80	; 0x50
 8003b22:	d873      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d058      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x13a>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d86f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d064      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d86b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d060      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d867      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05c      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d05a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	e062      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6899      	ldr	r1, [r3, #8]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f000 fb19 	bl	800418c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]
      break;
 8003b72:	e04f      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f000 fb02 	bl	800418c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b96:	609a      	str	r2, [r3, #8]
      break;
 8003b98:	e03c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 fa76 	bl	8004098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2150      	movs	r1, #80	; 0x50
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 facf 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e02c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fa95 	bl	80040f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2160      	movs	r1, #96	; 0x60
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fabf 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e01c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fa56 	bl	8004098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 faaf 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e00c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f000 faa6 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e003      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <TIM_Base_SetConfig+0xe4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a31      	ldr	r2, [pc, #196]	; (8003d68 <TIM_Base_SetConfig+0xe8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <TIM_Base_SetConfig+0xec>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a2f      	ldr	r2, [pc, #188]	; (8003d70 <TIM_Base_SetConfig+0xf0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d108      	bne.n	8003cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <TIM_Base_SetConfig+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <TIM_Base_SetConfig+0xe8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <TIM_Base_SetConfig+0xec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <TIM_Base_SetConfig+0xf0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <TIM_Base_SetConfig+0xf4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <TIM_Base_SetConfig+0xf8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <TIM_Base_SetConfig+0xfc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <TIM_Base_SetConfig+0xe4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d103      	bne.n	8003d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	615a      	str	r2, [r3, #20]
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800
 8003d70:	40000c00 	.word	0x40000c00
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800

08003d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f023 0302 	bic.w	r3, r3, #2
 8003dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <TIM_OC1_SetConfig+0xc8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d10c      	bne.n	8003df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0308 	bic.w	r3, r3, #8
 8003de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0304 	bic.w	r3, r3, #4
 8003df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <TIM_OC1_SetConfig+0xc8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d111      	bne.n	8003e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	621a      	str	r2, [r3, #32]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40010000 	.word	0x40010000

08003e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0210 	bic.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0320 	bic.w	r3, r3, #32
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <TIM_OC2_SetConfig+0xd4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10d      	bne.n	8003ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <TIM_OC2_SetConfig+0xd4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d113      	bne.n	8003ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000

08003f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <TIM_OC3_SetConfig+0xd0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10d      	bne.n	8003f9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <TIM_OC3_SetConfig+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d113      	bne.n	8003fce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40010000 	.word	0x40010000

08003ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <TIM_OC4_SetConfig+0x9c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d109      	bne.n	800406c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	019b      	lsls	r3, r3, #6
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000

08004098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 030a 	bic.w	r3, r3, #10
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	031b      	lsls	r3, r3, #12
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	f043 0307 	orr.w	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2201      	movs	r2, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	401a      	ands	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e050      	b.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d018      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d013      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a15      	ldr	r2, [pc, #84]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10c      	bne.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40014000 	.word	0x40014000

080042f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800430c:	2302      	movs	r3, #2
 800430e:	e03d      	b.n	800438c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e03f      	b.n	8004452 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fc50 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fcbf 	bl	8004d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	d130      	bne.n	80044d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_UART_Transmit_IT+0x26>
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e029      	b.n	80044d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_UART_Transmit_IT+0x38>
 800448e:	2302      	movs	r3, #2
 8004490:	e022      	b.n	80044d8 <HAL_UART_Transmit_IT+0x7e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b0ba      	sub	sp, #232	; 0xe8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_UART_IRQHandler+0x66>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb65 	bl	8004c12 <UART_Receive_IT>
      return;
 8004548:	e256      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800454a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80de 	beq.w	8004710 <HAL_UART_IRQHandler+0x22c>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80d1 	beq.w	8004710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_UART_IRQHandler+0xae>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
 800459e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_UART_IRQHandler+0xf6>
 80045c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_UART_IRQHandler+0x126>
 80045e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0208 	orr.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 81ed 	beq.w	80049ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x14e>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 faf0 	bl	8004c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_UART_IRQHandler+0x17a>
 8004656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04f      	beq.n	80046fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f9f8 	bl	8004a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d141      	bne.n	80046f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800468c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800469e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1d9      	bne.n	8004672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	4a7d      	ldr	r2, [pc, #500]	; (80048c0 <HAL_UART_IRQHandler+0x3dc>)
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fe5d 	bl	8002392 <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00e      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f99a 	bl	8004a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e00a      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f996 	bl	8004a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e006      	b.n	800470c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f992 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800470a:	e170      	b.n	80049ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	bf00      	nop
    return;
 800470e:	e16e      	b.n	80049ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 814a 	bne.w	80049ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8143 	beq.w	80049ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 813c 	beq.w	80049ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	f040 80b4 	bne.w	80048c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8140 	beq.w	80049f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477a:	429a      	cmp	r2, r3
 800477c:	f080 8139 	bcs.w	80049f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	f000 8088 	beq.w	80048a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1d9      	bne.n	8004796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800480e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e1      	bne.n	80047e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e3      	bne.n	800481e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004876:	f023 0310 	bic.w	r3, r3, #16
 800487a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004888:	65ba      	str	r2, [r7, #88]	; 0x58
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800488e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e3      	bne.n	8004864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd fd06 	bl	80022b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8c0 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048bc:	e099      	b.n	80049f2 <HAL_UART_IRQHandler+0x50e>
 80048be:	bf00      	nop
 80048c0:	08004b1b 	.word	0x08004b1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 808b 	beq.w	80049f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8086 	beq.w	80049f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800490e:	647a      	str	r2, [r7, #68]	; 0x44
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e3      	bne.n	80048ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	623b      	str	r3, [r7, #32]
   return(result);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004946:	633a      	str	r2, [r7, #48]	; 0x30
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e3      	bne.n	8004922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	60fb      	str	r3, [r7, #12]
   return(result);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0310 	bic.w	r3, r3, #16
 800497e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800498c:	61fa      	str	r2, [r7, #28]
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e3      	bne.n	8004968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f848 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ac:	e023      	b.n	80049f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_UART_IRQHandler+0x4ea>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8bb 	bl	8004b42 <UART_Transmit_IT>
    return;
 80049cc:	e014      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <HAL_UART_IRQHandler+0x514>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8fb 	bl	8004be2 <UART_EndTransmit_IT>
    return;
 80049ec:	e004      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
    return;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
      return;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_UART_IRQHandler+0x514>
      return;
 80049f6:	bf00      	nop
  }
}
 80049f8:	37e8      	adds	r7, #232	; 0xe8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop

08004a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b095      	sub	sp, #84	; 0x54
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d119      	bne.n	8004b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aec:	61ba      	str	r2, [r7, #24]
 8004aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b0e:	bf00      	nop
 8004b10:	3754      	adds	r7, #84	; 0x54
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff77 	bl	8004a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b21      	cmp	r3, #33	; 0x21
 8004b54:	d13e      	bne.n	8004bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5e:	d114      	bne.n	8004b8a <UART_Transmit_IT+0x48>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d110      	bne.n	8004b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	621a      	str	r2, [r3, #32]
 8004b88:	e008      	b.n	8004b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	1c59      	adds	r1, r3, #1
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6211      	str	r1, [r2, #32]
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fefc 	bl	8004a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b08c      	sub	sp, #48	; 0x30
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b22      	cmp	r3, #34	; 0x22
 8004c24:	f040 80ab 	bne.w	8004d7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d117      	bne.n	8004c62 <UART_Receive_IT+0x50>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d113      	bne.n	8004c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c60:	e026      	b.n	8004cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d007      	beq.n	8004c86 <UART_Receive_IT+0x74>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <UART_Receive_IT+0x82>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e008      	b.n	8004ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d15a      	bne.n	8004d7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0220 	bic.w	r2, r2, #32
 8004cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d135      	bne.n	8004d70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f023 0310 	bic.w	r3, r3, #16
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	623a      	str	r2, [r7, #32]
 8004d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d10a      	bne.n	8004d62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff fe67 	bl	8004a3c <HAL_UARTEx_RxEventCallback>
 8004d6e:	e002      	b.n	8004d76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fe4f 	bl	8004a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e002      	b.n	8004d80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3730      	adds	r7, #48	; 0x30
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b0c0      	sub	sp, #256	; 0x100
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	68d9      	ldr	r1, [r3, #12]
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	ea40 0301 	orr.w	r3, r0, r1
 8004db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004de0:	f021 010c 	bic.w	r1, r1, #12
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dee:	430b      	orrs	r3, r1
 8004df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	6999      	ldr	r1, [r3, #24]
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	ea40 0301 	orr.w	r3, r0, r1
 8004e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <UART_SetConfig+0x2cc>)
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d005      	beq.n	8004e28 <UART_SetConfig+0xa0>
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b8d      	ldr	r3, [pc, #564]	; (8005058 <UART_SetConfig+0x2d0>)
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d104      	bne.n	8004e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7fe f912 	bl	8003050 <HAL_RCC_GetPCLK2Freq>
 8004e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e30:	e003      	b.n	8004e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e32:	f7fe f8f9 	bl	8003028 <HAL_RCC_GetPCLK1Freq>
 8004e36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e44:	f040 810c 	bne.w	8005060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e62:	415b      	adcs	r3, r3
 8004e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	eb12 0801 	adds.w	r8, r2, r1
 8004e70:	4629      	mov	r1, r5
 8004e72:	eb43 0901 	adc.w	r9, r3, r1
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8a:	4690      	mov	r8, r2
 8004e8c:	4699      	mov	r9, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	eb18 0303 	adds.w	r3, r8, r3
 8004e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e98:	462b      	mov	r3, r5
 8004e9a:	eb49 0303 	adc.w	r3, r9, r3
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	18db      	adds	r3, r3, r3
 8004eba:	653b      	str	r3, [r7, #80]	; 0x50
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	eb42 0303 	adc.w	r3, r2, r3
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ecc:	f7fb fee4 	bl	8000c98 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <UART_SetConfig+0x2d4>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f00:	4641      	mov	r1, r8
 8004f02:	eb12 0a01 	adds.w	sl, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb43 0b01 	adc.w	fp, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f20:	4692      	mov	sl, r2
 8004f22:	469b      	mov	fp, r3
 8004f24:	4643      	mov	r3, r8
 8004f26:	eb1a 0303 	adds.w	r3, sl, r3
 8004f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	eb4b 0303 	adc.w	r3, fp, r3
 8004f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	643b      	str	r3, [r7, #64]	; 0x40
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f62:	f7fb fe99 	bl	8000c98 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4b3b      	ldr	r3, [pc, #236]	; (800505c <UART_SetConfig+0x2d4>)
 8004f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2264      	movs	r2, #100	; 0x64
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f82:	4b36      	ldr	r3, [pc, #216]	; (800505c <UART_SetConfig+0x2d4>)
 8004f84:	fba3 2302 	umull	r2, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f90:	441c      	add	r4, r3
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fac:	415b      	adcs	r3, r3
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	1851      	adds	r1, r2, r1
 8004fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fba:	4649      	mov	r1, r9
 8004fbc:	414b      	adcs	r3, r1
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fcc:	4659      	mov	r1, fp
 8004fce:	00cb      	lsls	r3, r1, #3
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	00ca      	lsls	r2, r1, #3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fe8:	464b      	mov	r3, r9
 8004fea:	460a      	mov	r2, r1
 8004fec:	eb42 0303 	adc.w	r3, r2, r3
 8004ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005000:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005008:	460b      	mov	r3, r1
 800500a:	18db      	adds	r3, r3, r3
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
 800500e:	4613      	mov	r3, r2
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800501a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800501e:	f7fb fe3b 	bl	8000c98 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <UART_SetConfig+0x2d4>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	; 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3332      	adds	r3, #50	; 0x32
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <UART_SetConfig+0x2d4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 0207 	and.w	r2, r3, #7
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4422      	add	r2, r4
 800504e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005050:	e105      	b.n	800525e <UART_SetConfig+0x4d6>
 8005052:	bf00      	nop
 8005054:	40011000 	.word	0x40011000
 8005058:	40011400 	.word	0x40011400
 800505c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005064:	2200      	movs	r2, #0
 8005066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800506a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800506e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005072:	4642      	mov	r2, r8
 8005074:	464b      	mov	r3, r9
 8005076:	1891      	adds	r1, r2, r2
 8005078:	6239      	str	r1, [r7, #32]
 800507a:	415b      	adcs	r3, r3
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005082:	4641      	mov	r1, r8
 8005084:	1854      	adds	r4, r2, r1
 8005086:	4649      	mov	r1, r9
 8005088:	eb43 0501 	adc.w	r5, r3, r1
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	00eb      	lsls	r3, r5, #3
 8005096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800509a:	00e2      	lsls	r2, r4, #3
 800509c:	4614      	mov	r4, r2
 800509e:	461d      	mov	r5, r3
 80050a0:	4643      	mov	r3, r8
 80050a2:	18e3      	adds	r3, r4, r3
 80050a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050a8:	464b      	mov	r3, r9
 80050aa:	eb45 0303 	adc.w	r3, r5, r3
 80050ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050ce:	4629      	mov	r1, r5
 80050d0:	008b      	lsls	r3, r1, #2
 80050d2:	4621      	mov	r1, r4
 80050d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d8:	4621      	mov	r1, r4
 80050da:	008a      	lsls	r2, r1, #2
 80050dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050e0:	f7fb fdda 	bl	8000c98 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4b60      	ldr	r3, [pc, #384]	; (800526c <UART_SetConfig+0x4e4>)
 80050ea:	fba3 2302 	umull	r2, r3, r3, r2
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	011c      	lsls	r4, r3, #4
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	61b9      	str	r1, [r7, #24]
 800510c:	415b      	adcs	r3, r3
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005114:	4641      	mov	r1, r8
 8005116:	1851      	adds	r1, r2, r1
 8005118:	6139      	str	r1, [r7, #16]
 800511a:	4649      	mov	r1, r9
 800511c:	414b      	adcs	r3, r1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800512c:	4659      	mov	r1, fp
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4651      	mov	r1, sl
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4651      	mov	r1, sl
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4642      	mov	r2, r8
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005148:	464b      	mov	r3, r9
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	67bb      	str	r3, [r7, #120]	; 0x78
 800515e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800516c:	4649      	mov	r1, r9
 800516e:	008b      	lsls	r3, r1, #2
 8005170:	4641      	mov	r1, r8
 8005172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005176:	4641      	mov	r1, r8
 8005178:	008a      	lsls	r2, r1, #2
 800517a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800517e:	f7fb fd8b 	bl	8000c98 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <UART_SetConfig+0x4e4>)
 8005188:	fba3 1302 	umull	r1, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	2164      	movs	r1, #100	; 0x64
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	3332      	adds	r3, #50	; 0x32
 800519a:	4a34      	ldr	r2, [pc, #208]	; (800526c <UART_SetConfig+0x4e4>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a6:	441c      	add	r4, r3
 80051a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ac:	2200      	movs	r2, #0
 80051ae:	673b      	str	r3, [r7, #112]	; 0x70
 80051b0:	677a      	str	r2, [r7, #116]	; 0x74
 80051b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	415b      	adcs	r3, r3
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c6:	4641      	mov	r1, r8
 80051c8:	1851      	adds	r1, r2, r1
 80051ca:	6039      	str	r1, [r7, #0]
 80051cc:	4649      	mov	r1, r9
 80051ce:	414b      	adcs	r3, r1
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051de:	4659      	mov	r1, fp
 80051e0:	00cb      	lsls	r3, r1, #3
 80051e2:	4651      	mov	r1, sl
 80051e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051e8:	4651      	mov	r1, sl
 80051ea:	00ca      	lsls	r2, r1, #3
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	4642      	mov	r2, r8
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051f8:	464b      	mov	r3, r9
 80051fa:	460a      	mov	r2, r1
 80051fc:	eb42 0303 	adc.w	r3, r2, r3
 8005200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	663b      	str	r3, [r7, #96]	; 0x60
 800520c:	667a      	str	r2, [r7, #100]	; 0x64
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800521a:	4649      	mov	r1, r9
 800521c:	008b      	lsls	r3, r1, #2
 800521e:	4641      	mov	r1, r8
 8005220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005224:	4641      	mov	r1, r8
 8005226:	008a      	lsls	r2, r1, #2
 8005228:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800522c:	f7fb fd34 	bl	8000c98 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <UART_SetConfig+0x4e4>)
 8005236:	fba3 1302 	umull	r1, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	2164      	movs	r1, #100	; 0x64
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	3332      	adds	r3, #50	; 0x32
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <UART_SetConfig+0x4e4>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4422      	add	r2, r4
 800525c:	609a      	str	r2, [r3, #8]
}
 800525e:	bf00      	nop
 8005260:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005264:	46bd      	mov	sp, r7
 8005266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526a:	bf00      	nop
 800526c:	51eb851f 	.word	0x51eb851f

08005270 <arm_mat_sub_f32>:
 8005270:	b4f0      	push	{r4, r5, r6, r7}
 8005272:	e9d1 4700 	ldrd	r4, r7, [r1]
 8005276:	6803      	ldr	r3, [r0, #0]
 8005278:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800527c:	6856      	ldr	r6, [r2, #4]
 800527e:	42a3      	cmp	r3, r4
 8005280:	d15d      	bne.n	800533e <arm_mat_sub_f32+0xce>
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4293      	cmp	r3, r2
 8005286:	d15a      	bne.n	800533e <arm_mat_sub_f32+0xce>
 8005288:	8803      	ldrh	r3, [r0, #0]
 800528a:	8844      	ldrh	r4, [r0, #2]
 800528c:	fb04 f403 	mul.w	r4, r4, r3
 8005290:	08a5      	lsrs	r5, r4, #2
 8005292:	d032      	beq.n	80052fa <arm_mat_sub_f32+0x8a>
 8005294:	f10c 0110 	add.w	r1, ip, #16
 8005298:	f107 0210 	add.w	r2, r7, #16
 800529c:	f106 0310 	add.w	r3, r6, #16
 80052a0:	4628      	mov	r0, r5
 80052a2:	ed12 7a04 	vldr	s14, [r2, #-16]
 80052a6:	ed51 7a04 	vldr	s15, [r1, #-16]
 80052aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052ae:	3801      	subs	r0, #1
 80052b0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80052b4:	ed12 7a03 	vldr	s14, [r2, #-12]
 80052b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80052bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052c0:	f101 0110 	add.w	r1, r1, #16
 80052c4:	ed43 7a03 	vstr	s15, [r3, #-12]
 80052c8:	ed12 7a02 	vldr	s14, [r2, #-8]
 80052cc:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80052d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052d4:	f102 0210 	add.w	r2, r2, #16
 80052d8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80052dc:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80052e0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80052e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052e8:	f103 0310 	add.w	r3, r3, #16
 80052ec:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80052f0:	d1d7      	bne.n	80052a2 <arm_mat_sub_f32+0x32>
 80052f2:	012b      	lsls	r3, r5, #4
 80052f4:	449c      	add	ip, r3
 80052f6:	441f      	add	r7, r3
 80052f8:	441e      	add	r6, r3
 80052fa:	f014 0403 	ands.w	r4, r4, #3
 80052fe:	d01b      	beq.n	8005338 <arm_mat_sub_f32+0xc8>
 8005300:	eddc 7a00 	vldr	s15, [ip]
 8005304:	ed97 7a00 	vldr	s14, [r7]
 8005308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800530c:	3c01      	subs	r4, #1
 800530e:	edc6 7a00 	vstr	s15, [r6]
 8005312:	d011      	beq.n	8005338 <arm_mat_sub_f32+0xc8>
 8005314:	eddc 7a01 	vldr	s15, [ip, #4]
 8005318:	ed97 7a01 	vldr	s14, [r7, #4]
 800531c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005320:	2c01      	cmp	r4, #1
 8005322:	edc6 7a01 	vstr	s15, [r6, #4]
 8005326:	d007      	beq.n	8005338 <arm_mat_sub_f32+0xc8>
 8005328:	eddc 7a02 	vldr	s15, [ip, #8]
 800532c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005334:	edc6 7a02 	vstr	s15, [r6, #8]
 8005338:	2000      	movs	r0, #0
 800533a:	bcf0      	pop	{r4, r5, r6, r7}
 800533c:	4770      	bx	lr
 800533e:	f06f 0002 	mvn.w	r0, #2
 8005342:	e7fa      	b.n	800533a <arm_mat_sub_f32+0xca>

08005344 <arm_mat_scale_f32>:
 8005344:	b470      	push	{r4, r5, r6}
 8005346:	e9d1 3500 	ldrd	r3, r5, [r1]
 800534a:	6802      	ldr	r2, [r0, #0]
 800534c:	6846      	ldr	r6, [r0, #4]
 800534e:	429a      	cmp	r2, r3
 8005350:	d147      	bne.n	80053e2 <arm_mat_scale_f32+0x9e>
 8005352:	8803      	ldrh	r3, [r0, #0]
 8005354:	8840      	ldrh	r0, [r0, #2]
 8005356:	fb00 f003 	mul.w	r0, r0, r3
 800535a:	0884      	lsrs	r4, r0, #2
 800535c:	d025      	beq.n	80053aa <arm_mat_scale_f32+0x66>
 800535e:	f106 0210 	add.w	r2, r6, #16
 8005362:	f105 0310 	add.w	r3, r5, #16
 8005366:	4621      	mov	r1, r4
 8005368:	ed52 7a04 	vldr	s15, [r2, #-16]
 800536c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005370:	3901      	subs	r1, #1
 8005372:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005376:	ed52 7a03 	vldr	s15, [r2, #-12]
 800537a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800537e:	f102 0210 	add.w	r2, r2, #16
 8005382:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005386:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
 800538a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800538e:	f103 0310 	add.w	r3, r3, #16
 8005392:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8005396:	ed52 7a05 	vldr	s15, [r2, #-20]	; 0xffffffec
 800539a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800539e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80053a2:	d1e1      	bne.n	8005368 <arm_mat_scale_f32+0x24>
 80053a4:	0124      	lsls	r4, r4, #4
 80053a6:	4426      	add	r6, r4
 80053a8:	4425      	add	r5, r4
 80053aa:	f010 0003 	ands.w	r0, r0, #3
 80053ae:	d015      	beq.n	80053dc <arm_mat_scale_f32+0x98>
 80053b0:	edd6 7a00 	vldr	s15, [r6]
 80053b4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053b8:	3801      	subs	r0, #1
 80053ba:	edc5 7a00 	vstr	s15, [r5]
 80053be:	d00d      	beq.n	80053dc <arm_mat_scale_f32+0x98>
 80053c0:	edd6 7a01 	vldr	s15, [r6, #4]
 80053c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053c8:	2801      	cmp	r0, #1
 80053ca:	edc5 7a01 	vstr	s15, [r5, #4]
 80053ce:	d005      	beq.n	80053dc <arm_mat_scale_f32+0x98>
 80053d0:	edd6 7a02 	vldr	s15, [r6, #8]
 80053d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80053d8:	ed85 0a02 	vstr	s0, [r5, #8]
 80053dc:	2000      	movs	r0, #0
 80053de:	bc70      	pop	{r4, r5, r6}
 80053e0:	4770      	bx	lr
 80053e2:	f06f 0002 	mvn.w	r0, #2
 80053e6:	e7fa      	b.n	80053de <arm_mat_scale_f32+0x9a>

080053e8 <arm_mat_mult_f32>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	8845      	ldrh	r5, [r0, #2]
 80053ee:	880b      	ldrh	r3, [r1, #0]
 80053f0:	8806      	ldrh	r6, [r0, #0]
 80053f2:	6847      	ldr	r7, [r0, #4]
 80053f4:	6854      	ldr	r4, [r2, #4]
 80053f6:	6848      	ldr	r0, [r1, #4]
 80053f8:	b08b      	sub	sp, #44	; 0x2c
 80053fa:	42ab      	cmp	r3, r5
 80053fc:	9109      	str	r1, [sp, #36]	; 0x24
 80053fe:	9604      	str	r6, [sp, #16]
 8005400:	8849      	ldrh	r1, [r1, #2]
 8005402:	f040 808a 	bne.w	800551a <arm_mat_mult_f32+0x132>
 8005406:	8815      	ldrh	r5, [r2, #0]
 8005408:	42b5      	cmp	r5, r6
 800540a:	f040 8086 	bne.w	800551a <arm_mat_mult_f32+0x132>
 800540e:	8852      	ldrh	r2, [r2, #2]
 8005410:	428a      	cmp	r2, r1
 8005412:	f040 8082 	bne.w	800551a <arm_mat_mult_f32+0x132>
 8005416:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800541a:	1d01      	adds	r1, r0, #4
 800541c:	0116      	lsls	r6, r2, #4
 800541e:	9108      	str	r1, [sp, #32]
 8005420:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8005424:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8005428:	9101      	str	r1, [sp, #4]
 800542a:	fb06 f108 	mul.w	r1, r6, r8
 800542e:	0095      	lsls	r5, r2, #2
 8005430:	9103      	str	r1, [sp, #12]
 8005432:	00d2      	lsls	r2, r2, #3
 8005434:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8005438:	f003 0903 	and.w	r9, r3, #3
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	f107 0b10 	add.w	fp, r7, #16
 8005442:	eb04 0a05 	add.w	sl, r4, r5
 8005446:	9107      	str	r1, [sp, #28]
 8005448:	9202      	str	r2, [sp, #8]
 800544a:	9306      	str	r3, [sp, #24]
 800544c:	f1ab 0310 	sub.w	r3, fp, #16
 8005450:	9305      	str	r3, [sp, #20]
 8005452:	9b07      	ldr	r3, [sp, #28]
 8005454:	f8dd e020 	ldr.w	lr, [sp, #32]
 8005458:	eb03 0c0a 	add.w	ip, r3, sl
 800545c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005524 <arm_mat_mult_f32+0x13c>
 8005460:	f1b8 0f00 	cmp.w	r8, #0
 8005464:	d053      	beq.n	800550e <arm_mat_mult_f32+0x126>
 8005466:	9b02      	ldr	r3, [sp, #8]
 8005468:	4644      	mov	r4, r8
 800546a:	18c1      	adds	r1, r0, r3
 800546c:	4602      	mov	r2, r0
 800546e:	465b      	mov	r3, fp
 8005470:	ed92 6a00 	vldr	s12, [r2]
 8005474:	ed13 7a04 	vldr	s14, [r3, #-16]
 8005478:	ed53 4a03 	vldr	s9, [r3, #-12]
 800547c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005480:	ed91 5a00 	vldr	s10, [r1]
 8005484:	ed53 5a01 	vldr	s11, [r3, #-4]
 8005488:	1957      	adds	r7, r2, r5
 800548a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800548e:	ed97 6a00 	vldr	s12, [r7]
 8005492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005496:	ee26 6a24 	vmul.f32	s12, s12, s9
 800549a:	194f      	adds	r7, r1, r5
 800549c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054a0:	ee26 7a85 	vmul.f32	s14, s13, s10
 80054a4:	edd7 7a00 	vldr	s15, [r7]
 80054a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80054b0:	3c01      	subs	r4, #1
 80054b2:	4432      	add	r2, r6
 80054b4:	4431      	add	r1, r6
 80054b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054ba:	f103 0310 	add.w	r3, r3, #16
 80054be:	d1d7      	bne.n	8005470 <arm_mat_mult_f32+0x88>
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	9a01      	ldr	r2, [sp, #4]
 80054c4:	4418      	add	r0, r3
 80054c6:	f1b9 0f00 	cmp.w	r9, #0
 80054ca:	d00b      	beq.n	80054e4 <arm_mat_mult_f32+0xfc>
 80054cc:	464b      	mov	r3, r9
 80054ce:	edd0 6a00 	vldr	s13, [r0]
 80054d2:	ecb2 7a01 	vldmia	r2!, {s14}
 80054d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054da:	3b01      	subs	r3, #1
 80054dc:	4428      	add	r0, r5
 80054de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e2:	d1f4      	bne.n	80054ce <arm_mat_mult_f32+0xe6>
 80054e4:	ecec 7a01 	vstmia	ip!, {s15}
 80054e8:	45d4      	cmp	ip, sl
 80054ea:	4670      	mov	r0, lr
 80054ec:	f10e 0e04 	add.w	lr, lr, #4
 80054f0:	d1b4      	bne.n	800545c <arm_mat_mult_f32+0x74>
 80054f2:	9a01      	ldr	r2, [sp, #4]
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	4611      	mov	r1, r2
 80054f8:	4419      	add	r1, r3
 80054fa:	449b      	add	fp, r3
 80054fc:	9b04      	ldr	r3, [sp, #16]
 80054fe:	9101      	str	r1, [sp, #4]
 8005500:	3b01      	subs	r3, #1
 8005502:	44aa      	add	sl, r5
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	d004      	beq.n	8005512 <arm_mat_mult_f32+0x12a>
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	6858      	ldr	r0, [r3, #4]
 800550c:	e79e      	b.n	800544c <arm_mat_mult_f32+0x64>
 800550e:	9a05      	ldr	r2, [sp, #20]
 8005510:	e7d9      	b.n	80054c6 <arm_mat_mult_f32+0xde>
 8005512:	4618      	mov	r0, r3
 8005514:	b00b      	add	sp, #44	; 0x2c
 8005516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551a:	f06f 0002 	mvn.w	r0, #2
 800551e:	b00b      	add	sp, #44	; 0x2c
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	00000000 	.word	0x00000000

08005528 <arm_mat_inverse_f32>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	8843      	ldrh	r3, [r0, #2]
 800552e:	8804      	ldrh	r4, [r0, #0]
 8005530:	684e      	ldr	r6, [r1, #4]
 8005532:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8005536:	b087      	sub	sp, #28
 8005538:	429c      	cmp	r4, r3
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	9603      	str	r6, [sp, #12]
 800553e:	f040 80ea 	bne.w	8005716 <arm_mat_inverse_f32+0x1ee>
 8005542:	880a      	ldrh	r2, [r1, #0]
 8005544:	884b      	ldrh	r3, [r1, #2]
 8005546:	4293      	cmp	r3, r2
 8005548:	f040 80e5 	bne.w	8005716 <arm_mat_inverse_f32+0x1ee>
 800554c:	429c      	cmp	r4, r3
 800554e:	f040 80e2 	bne.w	8005716 <arm_mat_inverse_f32+0x1ee>
 8005552:	9005      	str	r0, [sp, #20]
 8005554:	b30c      	cbz	r4, 800559a <arm_mat_inverse_f32+0x72>
 8005556:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800555a:	1e67      	subs	r7, r4, #1
 800555c:	f846 bb04 	str.w	fp, [r6], #4
 8005560:	d01b      	beq.n	800559a <arm_mat_inverse_f32+0x72>
 8005562:	f04f 0801 	mov.w	r8, #1
 8005566:	00ba      	lsls	r2, r7, #2
 8005568:	eb06 0a02 	add.w	sl, r6, r2
 800556c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8005570:	4630      	mov	r0, r6
 8005572:	2100      	movs	r1, #0
 8005574:	f000 f976 	bl	8005864 <memset>
 8005578:	eb0a 0605 	add.w	r6, sl, r5
 800557c:	462a      	mov	r2, r5
 800557e:	2100      	movs	r1, #0
 8005580:	4650      	mov	r0, sl
 8005582:	f1b8 0f00 	cmp.w	r8, #0
 8005586:	f000 80cb 	beq.w	8005720 <arm_mat_inverse_f32+0x1f8>
 800558a:	f000 f96b 	bl	8005864 <memset>
 800558e:	3f01      	subs	r7, #1
 8005590:	f108 0801 	add.w	r8, r8, #1
 8005594:	f846 bb04 	str.w	fp, [r6], #4
 8005598:	d1e5      	bne.n	8005566 <arm_mat_inverse_f32+0x3e>
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80b5 	beq.w	800570c <arm_mat_inverse_f32+0x1e4>
 80055a2:	009d      	lsls	r5, r3, #2
 80055a4:	eb09 0205 	add.w	r2, r9, r5
 80055a8:	46cc      	mov	ip, r9
 80055aa:	9202      	str	r2, [sp, #8]
 80055ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80055b0:	1d2a      	adds	r2, r5, #4
 80055b2:	9204      	str	r2, [sp, #16]
 80055b4:	462f      	mov	r7, r5
 80055b6:	469e      	mov	lr, r3
 80055b8:	2600      	movs	r6, #0
 80055ba:	9b02      	ldr	r3, [sp, #8]
 80055bc:	eddc 6a00 	vldr	s13, [ip]
 80055c0:	42b4      	cmp	r4, r6
 80055c2:	eba3 0b07 	sub.w	fp, r3, r7
 80055c6:	f000 80a1 	beq.w	800570c <arm_mat_inverse_f32+0x1e4>
 80055ca:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005730 <arm_mat_inverse_f32+0x208>
 80055ce:	4632      	mov	r2, r6
 80055d0:	4663      	mov	r3, ip
 80055d2:	e00b      	b.n	80055ec <arm_mat_inverse_f32+0xc4>
 80055d4:	eef4 7a47 	vcmp.f32	s15, s14
 80055d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055dc:	f102 0201 	add.w	r2, r2, #1
 80055e0:	bfc8      	it	gt
 80055e2:	eeb0 7a67 	vmovgt.f32	s14, s15
 80055e6:	42a2      	cmp	r2, r4
 80055e8:	442b      	add	r3, r5
 80055ea:	d014      	beq.n	8005616 <arm_mat_inverse_f32+0xee>
 80055ec:	edd3 7a00 	vldr	s15, [r3]
 80055f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	eeb1 6a67 	vneg.f32	s12, s15
 80055fc:	dcea      	bgt.n	80055d4 <arm_mat_inverse_f32+0xac>
 80055fe:	eeb4 6a47 	vcmp.f32	s12, s14
 8005602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005606:	f102 0201 	add.w	r2, r2, #1
 800560a:	bfc8      	it	gt
 800560c:	eeb0 7a46 	vmovgt.f32	s14, s12
 8005610:	42a2      	cmp	r2, r4
 8005612:	442b      	add	r3, r5
 8005614:	d1ea      	bne.n	80055ec <arm_mat_inverse_f32+0xc4>
 8005616:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	d075      	beq.n	800570c <arm_mat_inverse_f32+0x1e4>
 8005620:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005628:	d070      	beq.n	800570c <arm_mat_inverse_f32+0x1e4>
 800562a:	4672      	mov	r2, lr
 800562c:	4663      	mov	r3, ip
 800562e:	ed93 7a00 	vldr	s14, [r3]
 8005632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005636:	3a01      	subs	r2, #1
 8005638:	ece3 7a01 	vstmia	r3!, {s15}
 800563c:	d1f7      	bne.n	800562e <arm_mat_inverse_f32+0x106>
 800563e:	9901      	ldr	r1, [sp, #4]
 8005640:	464b      	mov	r3, r9
 8005642:	ed93 7a00 	vldr	s14, [r3]
 8005646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800564a:	3901      	subs	r1, #1
 800564c:	ece3 7a01 	vstmia	r3!, {s15}
 8005650:	d1f7      	bne.n	8005642 <arm_mat_inverse_f32+0x11a>
 8005652:	9803      	ldr	r0, [sp, #12]
 8005654:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8005658:	42b1      	cmp	r1, r6
 800565a:	d039      	beq.n	80056d0 <arm_mat_inverse_f32+0x1a8>
 800565c:	eddb 6a00 	vldr	s13, [fp]
 8005660:	465a      	mov	r2, fp
 8005662:	4673      	mov	r3, lr
 8005664:	46e2      	mov	sl, ip
 8005666:	ecba 7a01 	vldmia	sl!, {s14}
 800566a:	edd2 7a00 	vldr	s15, [r2]
 800566e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005672:	3b01      	subs	r3, #1
 8005674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005678:	ece2 7a01 	vstmia	r2!, {s15}
 800567c:	d1f3      	bne.n	8005666 <arm_mat_inverse_f32+0x13e>
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	44bb      	add	fp, r7
 8005682:	4602      	mov	r2, r0
 8005684:	46ca      	mov	sl, r9
 8005686:	ecba 7a01 	vldmia	sl!, {s14}
 800568a:	edd2 7a00 	vldr	s15, [r2]
 800568e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005692:	3b01      	subs	r3, #1
 8005694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005698:	ece2 7a01 	vstmia	r2!, {s15}
 800569c:	d1f3      	bne.n	8005686 <arm_mat_inverse_f32+0x15e>
 800569e:	4428      	add	r0, r5
 80056a0:	3101      	adds	r1, #1
 80056a2:	428c      	cmp	r4, r1
 80056a4:	44c3      	add	fp, r8
 80056a6:	d1d7      	bne.n	8005658 <arm_mat_inverse_f32+0x130>
 80056a8:	9b04      	ldr	r3, [sp, #16]
 80056aa:	f1be 0e01 	subs.w	lr, lr, #1
 80056ae:	f106 0601 	add.w	r6, r6, #1
 80056b2:	449c      	add	ip, r3
 80056b4:	f1a7 0704 	sub.w	r7, r7, #4
 80056b8:	44a9      	add	r9, r5
 80056ba:	f47f af7e 	bne.w	80055ba <arm_mat_inverse_f32+0x92>
 80056be:	eef5 6a40 	vcmp.f32	s13, #0.0
 80056c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c6:	d006      	beq.n	80056d6 <arm_mat_inverse_f32+0x1ae>
 80056c8:	2000      	movs	r0, #0
 80056ca:	b007      	add	sp, #28
 80056cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d0:	44bb      	add	fp, r7
 80056d2:	4428      	add	r0, r5
 80056d4:	e7e4      	b.n	80056a0 <arm_mat_inverse_f32+0x178>
 80056d6:	9b05      	ldr	r3, [sp, #20]
 80056d8:	9a01      	ldr	r2, [sp, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056e4:	fb02 f204 	mul.w	r2, r2, r4
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	4614      	mov	r4, r2
 80056ee:	bf08      	it	eq
 80056f0:	3304      	addeq	r3, #4
 80056f2:	d007      	beq.n	8005704 <arm_mat_inverse_f32+0x1dc>
 80056f4:	e7e8      	b.n	80056c8 <arm_mat_inverse_f32+0x1a0>
 80056f6:	ecf3 7a01 	vldmia	r3!, {s15}
 80056fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005702:	d1e1      	bne.n	80056c8 <arm_mat_inverse_f32+0x1a0>
 8005704:	f10e 0e01 	add.w	lr, lr, #1
 8005708:	4574      	cmp	r4, lr
 800570a:	d1f4      	bne.n	80056f6 <arm_mat_inverse_f32+0x1ce>
 800570c:	f06f 0004 	mvn.w	r0, #4
 8005710:	b007      	add	sp, #28
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	f06f 0002 	mvn.w	r0, #2
 800571a:	b007      	add	sp, #28
 800571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005720:	4656      	mov	r6, sl
 8005722:	3f01      	subs	r7, #1
 8005724:	f846 bb04 	str.w	fp, [r6], #4
 8005728:	f47f af1b 	bne.w	8005562 <arm_mat_inverse_f32+0x3a>
 800572c:	e735      	b.n	800559a <arm_mat_inverse_f32+0x72>
 800572e:	bf00      	nop
 8005730:	00000000 	.word	0x00000000

08005734 <arm_mat_init_f32>:
 8005734:	8001      	strh	r1, [r0, #0]
 8005736:	8042      	strh	r2, [r0, #2]
 8005738:	6043      	str	r3, [r0, #4]
 800573a:	4770      	bx	lr

0800573c <arm_mat_add_f32>:
 800573c:	b4f0      	push	{r4, r5, r6, r7}
 800573e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8005742:	6803      	ldr	r3, [r0, #0]
 8005744:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005748:	6856      	ldr	r6, [r2, #4]
 800574a:	42a3      	cmp	r3, r4
 800574c:	d15d      	bne.n	800580a <arm_mat_add_f32+0xce>
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	4293      	cmp	r3, r2
 8005752:	d15a      	bne.n	800580a <arm_mat_add_f32+0xce>
 8005754:	8803      	ldrh	r3, [r0, #0]
 8005756:	8844      	ldrh	r4, [r0, #2]
 8005758:	fb04 f403 	mul.w	r4, r4, r3
 800575c:	08a5      	lsrs	r5, r4, #2
 800575e:	d032      	beq.n	80057c6 <arm_mat_add_f32+0x8a>
 8005760:	f10c 0110 	add.w	r1, ip, #16
 8005764:	f107 0210 	add.w	r2, r7, #16
 8005768:	f106 0310 	add.w	r3, r6, #16
 800576c:	4628      	mov	r0, r5
 800576e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005772:	ed51 7a04 	vldr	s15, [r1, #-16]
 8005776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800577a:	3801      	subs	r0, #1
 800577c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005780:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005784:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800578c:	f101 0110 	add.w	r1, r1, #16
 8005790:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005794:	ed12 7a02 	vldr	s14, [r2, #-8]
 8005798:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800579c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057a0:	f102 0210 	add.w	r2, r2, #16
 80057a4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80057a8:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80057ac:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80057b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057b4:	f103 0310 	add.w	r3, r3, #16
 80057b8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80057bc:	d1d7      	bne.n	800576e <arm_mat_add_f32+0x32>
 80057be:	012b      	lsls	r3, r5, #4
 80057c0:	449c      	add	ip, r3
 80057c2:	441f      	add	r7, r3
 80057c4:	441e      	add	r6, r3
 80057c6:	f014 0403 	ands.w	r4, r4, #3
 80057ca:	d01b      	beq.n	8005804 <arm_mat_add_f32+0xc8>
 80057cc:	edd7 7a00 	vldr	s15, [r7]
 80057d0:	ed9c 7a00 	vldr	s14, [ip]
 80057d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d8:	3c01      	subs	r4, #1
 80057da:	edc6 7a00 	vstr	s15, [r6]
 80057de:	d011      	beq.n	8005804 <arm_mat_add_f32+0xc8>
 80057e0:	eddc 7a01 	vldr	s15, [ip, #4]
 80057e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80057e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057ec:	2c01      	cmp	r4, #1
 80057ee:	edc6 7a01 	vstr	s15, [r6, #4]
 80057f2:	d007      	beq.n	8005804 <arm_mat_add_f32+0xc8>
 80057f4:	eddc 7a02 	vldr	s15, [ip, #8]
 80057f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80057fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005800:	edc6 7a02 	vstr	s15, [r6, #8]
 8005804:	2000      	movs	r0, #0
 8005806:	bcf0      	pop	{r4, r5, r6, r7}
 8005808:	4770      	bx	lr
 800580a:	f06f 0002 	mvn.w	r0, #2
 800580e:	e7fa      	b.n	8005806 <arm_mat_add_f32+0xca>

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000124 	.word	0x20000124

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	4d0d      	ldr	r5, [pc, #52]	; (8005854 <__libc_init_array+0x38>)
 8005820:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005822:	1b64      	subs	r4, r4, r5
 8005824:	10a4      	asrs	r4, r4, #2
 8005826:	2600      	movs	r6, #0
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	4d0b      	ldr	r5, [pc, #44]	; (800585c <__libc_init_array+0x40>)
 800582e:	4c0c      	ldr	r4, [pc, #48]	; (8005860 <__libc_init_array+0x44>)
 8005830:	f004 fc92 	bl	800a158 <_init>
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	2600      	movs	r6, #0
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	0800a644 	.word	0x0800a644
 8005858:	0800a644 	.word	0x0800a644
 800585c:	0800a644 	.word	0x0800a644
 8005860:	0800a648 	.word	0x0800a648

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__cvt>:
 8005874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	ec55 4b10 	vmov	r4, r5, d0
 800587c:	2d00      	cmp	r5, #0
 800587e:	460e      	mov	r6, r1
 8005880:	4619      	mov	r1, r3
 8005882:	462b      	mov	r3, r5
 8005884:	bfbb      	ittet	lt
 8005886:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800588a:	461d      	movlt	r5, r3
 800588c:	2300      	movge	r3, #0
 800588e:	232d      	movlt	r3, #45	; 0x2d
 8005890:	700b      	strb	r3, [r1, #0]
 8005892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005898:	4691      	mov	r9, r2
 800589a:	f023 0820 	bic.w	r8, r3, #32
 800589e:	bfbc      	itt	lt
 80058a0:	4622      	movlt	r2, r4
 80058a2:	4614      	movlt	r4, r2
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058a8:	d005      	beq.n	80058b6 <__cvt+0x42>
 80058aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058ae:	d100      	bne.n	80058b2 <__cvt+0x3e>
 80058b0:	3601      	adds	r6, #1
 80058b2:	2102      	movs	r1, #2
 80058b4:	e000      	b.n	80058b8 <__cvt+0x44>
 80058b6:	2103      	movs	r1, #3
 80058b8:	ab03      	add	r3, sp, #12
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	ab02      	add	r3, sp, #8
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	ec45 4b10 	vmov	d0, r4, r5
 80058c4:	4653      	mov	r3, sl
 80058c6:	4632      	mov	r2, r6
 80058c8:	f001 fdae 	bl	8007428 <_dtoa_r>
 80058cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058d0:	4607      	mov	r7, r0
 80058d2:	d102      	bne.n	80058da <__cvt+0x66>
 80058d4:	f019 0f01 	tst.w	r9, #1
 80058d8:	d022      	beq.n	8005920 <__cvt+0xac>
 80058da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058de:	eb07 0906 	add.w	r9, r7, r6
 80058e2:	d110      	bne.n	8005906 <__cvt+0x92>
 80058e4:	783b      	ldrb	r3, [r7, #0]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d10a      	bne.n	8005900 <__cvt+0x8c>
 80058ea:	2200      	movs	r2, #0
 80058ec:	2300      	movs	r3, #0
 80058ee:	4620      	mov	r0, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fb f8f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80058f6:	b918      	cbnz	r0, 8005900 <__cvt+0x8c>
 80058f8:	f1c6 0601 	rsb	r6, r6, #1
 80058fc:	f8ca 6000 	str.w	r6, [sl]
 8005900:	f8da 3000 	ldr.w	r3, [sl]
 8005904:	4499      	add	r9, r3
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fb f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005912:	b108      	cbz	r0, 8005918 <__cvt+0xa4>
 8005914:	f8cd 900c 	str.w	r9, [sp, #12]
 8005918:	2230      	movs	r2, #48	; 0x30
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	454b      	cmp	r3, r9
 800591e:	d307      	bcc.n	8005930 <__cvt+0xbc>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005924:	1bdb      	subs	r3, r3, r7
 8005926:	4638      	mov	r0, r7
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	b004      	add	sp, #16
 800592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	9103      	str	r1, [sp, #12]
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e7f0      	b.n	800591a <__cvt+0xa6>

08005938 <__exponent>:
 8005938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593a:	4603      	mov	r3, r0
 800593c:	2900      	cmp	r1, #0
 800593e:	bfb8      	it	lt
 8005940:	4249      	neglt	r1, r1
 8005942:	f803 2b02 	strb.w	r2, [r3], #2
 8005946:	bfb4      	ite	lt
 8005948:	222d      	movlt	r2, #45	; 0x2d
 800594a:	222b      	movge	r2, #43	; 0x2b
 800594c:	2909      	cmp	r1, #9
 800594e:	7042      	strb	r2, [r0, #1]
 8005950:	dd2a      	ble.n	80059a8 <__exponent+0x70>
 8005952:	f10d 0407 	add.w	r4, sp, #7
 8005956:	46a4      	mov	ip, r4
 8005958:	270a      	movs	r7, #10
 800595a:	46a6      	mov	lr, r4
 800595c:	460a      	mov	r2, r1
 800595e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005962:	fb07 1516 	mls	r5, r7, r6, r1
 8005966:	3530      	adds	r5, #48	; 0x30
 8005968:	2a63      	cmp	r2, #99	; 0x63
 800596a:	f104 34ff 	add.w	r4, r4, #4294967295
 800596e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005972:	4631      	mov	r1, r6
 8005974:	dcf1      	bgt.n	800595a <__exponent+0x22>
 8005976:	3130      	adds	r1, #48	; 0x30
 8005978:	f1ae 0502 	sub.w	r5, lr, #2
 800597c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005980:	1c44      	adds	r4, r0, #1
 8005982:	4629      	mov	r1, r5
 8005984:	4561      	cmp	r1, ip
 8005986:	d30a      	bcc.n	800599e <__exponent+0x66>
 8005988:	f10d 0209 	add.w	r2, sp, #9
 800598c:	eba2 020e 	sub.w	r2, r2, lr
 8005990:	4565      	cmp	r5, ip
 8005992:	bf88      	it	hi
 8005994:	2200      	movhi	r2, #0
 8005996:	4413      	add	r3, r2
 8005998:	1a18      	subs	r0, r3, r0
 800599a:	b003      	add	sp, #12
 800599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059a6:	e7ed      	b.n	8005984 <__exponent+0x4c>
 80059a8:	2330      	movs	r3, #48	; 0x30
 80059aa:	3130      	adds	r1, #48	; 0x30
 80059ac:	7083      	strb	r3, [r0, #2]
 80059ae:	70c1      	strb	r1, [r0, #3]
 80059b0:	1d03      	adds	r3, r0, #4
 80059b2:	e7f1      	b.n	8005998 <__exponent+0x60>

080059b4 <_printf_float>:
 80059b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b8:	ed2d 8b02 	vpush	{d8}
 80059bc:	b08d      	sub	sp, #52	; 0x34
 80059be:	460c      	mov	r4, r1
 80059c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059c4:	4616      	mov	r6, r2
 80059c6:	461f      	mov	r7, r3
 80059c8:	4605      	mov	r5, r0
 80059ca:	f002 fe8b 	bl	80086e4 <_localeconv_r>
 80059ce:	f8d0 a000 	ldr.w	sl, [r0]
 80059d2:	4650      	mov	r0, sl
 80059d4:	f7fa fc04 	bl	80001e0 <strlen>
 80059d8:	2300      	movs	r3, #0
 80059da:	930a      	str	r3, [sp, #40]	; 0x28
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	f8d8 3000 	ldr.w	r3, [r8]
 80059e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059e8:	3307      	adds	r3, #7
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	f103 0208 	add.w	r2, r3, #8
 80059f2:	f8c8 2000 	str.w	r2, [r8]
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a06:	9307      	str	r3, [sp, #28]
 8005a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a0c:	ee08 0a10 	vmov	s16, r0
 8005a10:	4b9f      	ldr	r3, [pc, #636]	; (8005c90 <_printf_float+0x2dc>)
 8005a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1a:	f7fb f88f 	bl	8000b3c <__aeabi_dcmpun>
 8005a1e:	bb88      	cbnz	r0, 8005a84 <_printf_float+0xd0>
 8005a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a24:	4b9a      	ldr	r3, [pc, #616]	; (8005c90 <_printf_float+0x2dc>)
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	f7fb f869 	bl	8000b00 <__aeabi_dcmple>
 8005a2e:	bb48      	cbnz	r0, 8005a84 <_printf_float+0xd0>
 8005a30:	2200      	movs	r2, #0
 8005a32:	2300      	movs	r3, #0
 8005a34:	4640      	mov	r0, r8
 8005a36:	4649      	mov	r1, r9
 8005a38:	f7fb f858 	bl	8000aec <__aeabi_dcmplt>
 8005a3c:	b110      	cbz	r0, 8005a44 <_printf_float+0x90>
 8005a3e:	232d      	movs	r3, #45	; 0x2d
 8005a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a44:	4b93      	ldr	r3, [pc, #588]	; (8005c94 <_printf_float+0x2e0>)
 8005a46:	4894      	ldr	r0, [pc, #592]	; (8005c98 <_printf_float+0x2e4>)
 8005a48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a4c:	bf94      	ite	ls
 8005a4e:	4698      	movls	r8, r3
 8005a50:	4680      	movhi	r8, r0
 8005a52:	2303      	movs	r3, #3
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	f023 0204 	bic.w	r2, r3, #4
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	f04f 0900 	mov.w	r9, #0
 8005a62:	9700      	str	r7, [sp, #0]
 8005a64:	4633      	mov	r3, r6
 8005a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 f9d8 	bl	8005e20 <_printf_common>
 8005a70:	3001      	adds	r0, #1
 8005a72:	f040 8090 	bne.w	8005b96 <_printf_float+0x1e2>
 8005a76:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7a:	b00d      	add	sp, #52	; 0x34
 8005a7c:	ecbd 8b02 	vpop	{d8}
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	4640      	mov	r0, r8
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	f7fb f856 	bl	8000b3c <__aeabi_dcmpun>
 8005a90:	b140      	cbz	r0, 8005aa4 <_printf_float+0xf0>
 8005a92:	464b      	mov	r3, r9
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bfbc      	itt	lt
 8005a98:	232d      	movlt	r3, #45	; 0x2d
 8005a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a9e:	487f      	ldr	r0, [pc, #508]	; (8005c9c <_printf_float+0x2e8>)
 8005aa0:	4b7f      	ldr	r3, [pc, #508]	; (8005ca0 <_printf_float+0x2ec>)
 8005aa2:	e7d1      	b.n	8005a48 <_printf_float+0x94>
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005aaa:	9206      	str	r2, [sp, #24]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	d13f      	bne.n	8005b30 <_printf_float+0x17c>
 8005ab0:	2306      	movs	r3, #6
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	9b05      	ldr	r3, [sp, #20]
 8005ab6:	6861      	ldr	r1, [r4, #4]
 8005ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005abc:	2300      	movs	r3, #0
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ac6:	ab09      	add	r3, sp, #36	; 0x24
 8005ac8:	ec49 8b10 	vmov	d0, r8, r9
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6022      	str	r2, [r4, #0]
 8005ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f7ff fecd 	bl	8005874 <__cvt>
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ade:	2b47      	cmp	r3, #71	; 0x47
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	d108      	bne.n	8005af6 <_printf_float+0x142>
 8005ae4:	1cc8      	adds	r0, r1, #3
 8005ae6:	db02      	blt.n	8005aee <_printf_float+0x13a>
 8005ae8:	6863      	ldr	r3, [r4, #4]
 8005aea:	4299      	cmp	r1, r3
 8005aec:	dd41      	ble.n	8005b72 <_printf_float+0x1be>
 8005aee:	f1ab 0b02 	sub.w	fp, fp, #2
 8005af2:	fa5f fb8b 	uxtb.w	fp, fp
 8005af6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005afa:	d820      	bhi.n	8005b3e <_printf_float+0x18a>
 8005afc:	3901      	subs	r1, #1
 8005afe:	465a      	mov	r2, fp
 8005b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b04:	9109      	str	r1, [sp, #36]	; 0x24
 8005b06:	f7ff ff17 	bl	8005938 <__exponent>
 8005b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b0c:	1813      	adds	r3, r2, r0
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	4681      	mov	r9, r0
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	dc02      	bgt.n	8005b1c <_printf_float+0x168>
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	07d2      	lsls	r2, r2, #31
 8005b1a:	d501      	bpl.n	8005b20 <_printf_float+0x16c>
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d09c      	beq.n	8005a62 <_printf_float+0xae>
 8005b28:	232d      	movs	r3, #45	; 0x2d
 8005b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2e:	e798      	b.n	8005a62 <_printf_float+0xae>
 8005b30:	9a06      	ldr	r2, [sp, #24]
 8005b32:	2a47      	cmp	r2, #71	; 0x47
 8005b34:	d1be      	bne.n	8005ab4 <_printf_float+0x100>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1bc      	bne.n	8005ab4 <_printf_float+0x100>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7b9      	b.n	8005ab2 <_printf_float+0xfe>
 8005b3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b42:	d118      	bne.n	8005b76 <_printf_float+0x1c2>
 8005b44:	2900      	cmp	r1, #0
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	dd0b      	ble.n	8005b62 <_printf_float+0x1ae>
 8005b4a:	6121      	str	r1, [r4, #16]
 8005b4c:	b913      	cbnz	r3, 8005b54 <_printf_float+0x1a0>
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	07d0      	lsls	r0, r2, #31
 8005b52:	d502      	bpl.n	8005b5a <_printf_float+0x1a6>
 8005b54:	3301      	adds	r3, #1
 8005b56:	440b      	add	r3, r1
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b5c:	f04f 0900 	mov.w	r9, #0
 8005b60:	e7de      	b.n	8005b20 <_printf_float+0x16c>
 8005b62:	b913      	cbnz	r3, 8005b6a <_printf_float+0x1b6>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	07d2      	lsls	r2, r2, #31
 8005b68:	d501      	bpl.n	8005b6e <_printf_float+0x1ba>
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	e7f4      	b.n	8005b58 <_printf_float+0x1a4>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7f2      	b.n	8005b58 <_printf_float+0x1a4>
 8005b72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	db05      	blt.n	8005b88 <_printf_float+0x1d4>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	6121      	str	r1, [r4, #16]
 8005b80:	07d8      	lsls	r0, r3, #31
 8005b82:	d5ea      	bpl.n	8005b5a <_printf_float+0x1a6>
 8005b84:	1c4b      	adds	r3, r1, #1
 8005b86:	e7e7      	b.n	8005b58 <_printf_float+0x1a4>
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	bfd4      	ite	le
 8005b8c:	f1c1 0202 	rsble	r2, r1, #2
 8005b90:	2201      	movgt	r2, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	e7e0      	b.n	8005b58 <_printf_float+0x1a4>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	055a      	lsls	r2, r3, #21
 8005b9a:	d407      	bmi.n	8005bac <_printf_float+0x1f8>
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d12c      	bne.n	8005c04 <_printf_float+0x250>
 8005baa:	e764      	b.n	8005a76 <_printf_float+0xc2>
 8005bac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bb0:	f240 80e0 	bls.w	8005d74 <_printf_float+0x3c0>
 8005bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f7fa ff8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d034      	beq.n	8005c2e <_printf_float+0x27a>
 8005bc4:	4a37      	ldr	r2, [pc, #220]	; (8005ca4 <_printf_float+0x2f0>)
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f af51 	beq.w	8005a76 <_printf_float+0xc2>
 8005bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	db02      	blt.n	8005be2 <_printf_float+0x22e>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07d8      	lsls	r0, r3, #31
 8005be0:	d510      	bpl.n	8005c04 <_printf_float+0x250>
 8005be2:	ee18 3a10 	vmov	r3, s16
 8005be6:	4652      	mov	r2, sl
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f af41 	beq.w	8005a76 <_printf_float+0xc2>
 8005bf4:	f04f 0800 	mov.w	r8, #0
 8005bf8:	f104 091a 	add.w	r9, r4, #26
 8005bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4543      	cmp	r3, r8
 8005c02:	dc09      	bgt.n	8005c18 <_printf_float+0x264>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	079b      	lsls	r3, r3, #30
 8005c08:	f100 8105 	bmi.w	8005e16 <_printf_float+0x462>
 8005c0c:	68e0      	ldr	r0, [r4, #12]
 8005c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c10:	4298      	cmp	r0, r3
 8005c12:	bfb8      	it	lt
 8005c14:	4618      	movlt	r0, r3
 8005c16:	e730      	b.n	8005a7a <_printf_float+0xc6>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	464a      	mov	r2, r9
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f af27 	beq.w	8005a76 <_printf_float+0xc2>
 8005c28:	f108 0801 	add.w	r8, r8, #1
 8005c2c:	e7e6      	b.n	8005bfc <_printf_float+0x248>
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dc39      	bgt.n	8005ca8 <_printf_float+0x2f4>
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <_printf_float+0x2f0>)
 8005c36:	2301      	movs	r3, #1
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f af19 	beq.w	8005a76 <_printf_float+0xc2>
 8005c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	d102      	bne.n	8005c52 <_printf_float+0x29e>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	07d9      	lsls	r1, r3, #31
 8005c50:	d5d8      	bpl.n	8005c04 <_printf_float+0x250>
 8005c52:	ee18 3a10 	vmov	r3, s16
 8005c56:	4652      	mov	r2, sl
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f af09 	beq.w	8005a76 <_printf_float+0xc2>
 8005c64:	f04f 0900 	mov.w	r9, #0
 8005c68:	f104 0a1a 	add.w	sl, r4, #26
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	425b      	negs	r3, r3
 8005c70:	454b      	cmp	r3, r9
 8005c72:	dc01      	bgt.n	8005c78 <_printf_float+0x2c4>
 8005c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c76:	e792      	b.n	8005b9e <_printf_float+0x1ea>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f aef7 	beq.w	8005a76 <_printf_float+0xc2>
 8005c88:	f109 0901 	add.w	r9, r9, #1
 8005c8c:	e7ee      	b.n	8005c6c <_printf_float+0x2b8>
 8005c8e:	bf00      	nop
 8005c90:	7fefffff 	.word	0x7fefffff
 8005c94:	0800a198 	.word	0x0800a198
 8005c98:	0800a19c 	.word	0x0800a19c
 8005c9c:	0800a1a4 	.word	0x0800a1a4
 8005ca0:	0800a1a0 	.word	0x0800a1a0
 8005ca4:	0800a1a8 	.word	0x0800a1a8
 8005ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bfa8      	it	ge
 8005cb0:	461a      	movge	r2, r3
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	4691      	mov	r9, r2
 8005cb6:	dc37      	bgt.n	8005d28 <_printf_float+0x374>
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cc0:	f104 021a 	add.w	r2, r4, #26
 8005cc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cc6:	9305      	str	r3, [sp, #20]
 8005cc8:	eba3 0309 	sub.w	r3, r3, r9
 8005ccc:	455b      	cmp	r3, fp
 8005cce:	dc33      	bgt.n	8005d38 <_printf_float+0x384>
 8005cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	db3b      	blt.n	8005d50 <_printf_float+0x39c>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	d438      	bmi.n	8005d50 <_printf_float+0x39c>
 8005cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce0:	9a05      	ldr	r2, [sp, #20]
 8005ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ce4:	1a9a      	subs	r2, r3, r2
 8005ce6:	eba3 0901 	sub.w	r9, r3, r1
 8005cea:	4591      	cmp	r9, r2
 8005cec:	bfa8      	it	ge
 8005cee:	4691      	movge	r9, r2
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	dc35      	bgt.n	8005d62 <_printf_float+0x3ae>
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cfe:	f104 0a1a 	add.w	sl, r4, #26
 8005d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	eba3 0309 	sub.w	r3, r3, r9
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	f77f af79 	ble.w	8005c04 <_printf_float+0x250>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b8      	blx	r7
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f43f aeaa 	beq.w	8005a76 <_printf_float+0xc2>
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	e7ec      	b.n	8005d02 <_printf_float+0x34e>
 8005d28:	4613      	mov	r3, r2
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	d1c0      	bne.n	8005cb8 <_printf_float+0x304>
 8005d36:	e69e      	b.n	8005a76 <_printf_float+0xc2>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	9205      	str	r2, [sp, #20]
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f ae97 	beq.w	8005a76 <_printf_float+0xc2>
 8005d48:	9a05      	ldr	r2, [sp, #20]
 8005d4a:	f10b 0b01 	add.w	fp, fp, #1
 8005d4e:	e7b9      	b.n	8005cc4 <_printf_float+0x310>
 8005d50:	ee18 3a10 	vmov	r3, s16
 8005d54:	4652      	mov	r2, sl
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1be      	bne.n	8005cde <_printf_float+0x32a>
 8005d60:	e689      	b.n	8005a76 <_printf_float+0xc2>
 8005d62:	9a05      	ldr	r2, [sp, #20]
 8005d64:	464b      	mov	r3, r9
 8005d66:	4442      	add	r2, r8
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d1c1      	bne.n	8005cf6 <_printf_float+0x342>
 8005d72:	e680      	b.n	8005a76 <_printf_float+0xc2>
 8005d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d76:	2a01      	cmp	r2, #1
 8005d78:	dc01      	bgt.n	8005d7e <_printf_float+0x3ca>
 8005d7a:	07db      	lsls	r3, r3, #31
 8005d7c:	d538      	bpl.n	8005df0 <_printf_float+0x43c>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4642      	mov	r2, r8
 8005d82:	4631      	mov	r1, r6
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b8      	blx	r7
 8005d88:	3001      	adds	r0, #1
 8005d8a:	f43f ae74 	beq.w	8005a76 <_printf_float+0xc2>
 8005d8e:	ee18 3a10 	vmov	r3, s16
 8005d92:	4652      	mov	r2, sl
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f ae6b 	beq.w	8005a76 <_printf_float+0xc2>
 8005da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	f7fa fe96 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dac:	b9d8      	cbnz	r0, 8005de6 <_printf_float+0x432>
 8005dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db0:	f108 0201 	add.w	r2, r8, #1
 8005db4:	3b01      	subs	r3, #1
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d10e      	bne.n	8005dde <_printf_float+0x42a>
 8005dc0:	e659      	b.n	8005a76 <_printf_float+0xc2>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f ae52 	beq.w	8005a76 <_printf_float+0xc2>
 8005dd2:	f108 0801 	add.w	r8, r8, #1
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4543      	cmp	r3, r8
 8005ddc:	dcf1      	bgt.n	8005dc2 <_printf_float+0x40e>
 8005dde:	464b      	mov	r3, r9
 8005de0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005de4:	e6dc      	b.n	8005ba0 <_printf_float+0x1ec>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	f104 0a1a 	add.w	sl, r4, #26
 8005dee:	e7f2      	b.n	8005dd6 <_printf_float+0x422>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4642      	mov	r2, r8
 8005df4:	e7df      	b.n	8005db6 <_printf_float+0x402>
 8005df6:	2301      	movs	r3, #1
 8005df8:	464a      	mov	r2, r9
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae38 	beq.w	8005a76 <_printf_float+0xc2>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	4543      	cmp	r3, r8
 8005e12:	dcf0      	bgt.n	8005df6 <_printf_float+0x442>
 8005e14:	e6fa      	b.n	8005c0c <_printf_float+0x258>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	f104 0919 	add.w	r9, r4, #25
 8005e1e:	e7f4      	b.n	8005e0a <_printf_float+0x456>

08005e20 <_printf_common>:
 8005e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e24:	4616      	mov	r6, r2
 8005e26:	4699      	mov	r9, r3
 8005e28:	688a      	ldr	r2, [r1, #8]
 8005e2a:	690b      	ldr	r3, [r1, #16]
 8005e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bfb8      	it	lt
 8005e34:	4613      	movlt	r3, r2
 8005e36:	6033      	str	r3, [r6, #0]
 8005e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b10a      	cbz	r2, 8005e46 <_printf_common+0x26>
 8005e42:	3301      	adds	r3, #1
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	0699      	lsls	r1, r3, #26
 8005e4a:	bf42      	ittt	mi
 8005e4c:	6833      	ldrmi	r3, [r6, #0]
 8005e4e:	3302      	addmi	r3, #2
 8005e50:	6033      	strmi	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	f015 0506 	ands.w	r5, r5, #6
 8005e58:	d106      	bne.n	8005e68 <_printf_common+0x48>
 8005e5a:	f104 0a19 	add.w	sl, r4, #25
 8005e5e:	68e3      	ldr	r3, [r4, #12]
 8005e60:	6832      	ldr	r2, [r6, #0]
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	42ab      	cmp	r3, r5
 8005e66:	dc26      	bgt.n	8005eb6 <_printf_common+0x96>
 8005e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e6c:	1e13      	subs	r3, r2, #0
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	bf18      	it	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	0692      	lsls	r2, r2, #26
 8005e76:	d42b      	bmi.n	8005ed0 <_printf_common+0xb0>
 8005e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	3001      	adds	r0, #1
 8005e84:	d01e      	beq.n	8005ec4 <_printf_common+0xa4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	68e5      	ldr	r5, [r4, #12]
 8005e8a:	6832      	ldr	r2, [r6, #0]
 8005e8c:	f003 0306 	and.w	r3, r3, #6
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	bf08      	it	eq
 8005e94:	1aad      	subeq	r5, r5, r2
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	6922      	ldr	r2, [r4, #16]
 8005e9a:	bf0c      	ite	eq
 8005e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea0:	2500      	movne	r5, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfc4      	itt	gt
 8005ea6:	1a9b      	subgt	r3, r3, r2
 8005ea8:	18ed      	addgt	r5, r5, r3
 8005eaa:	2600      	movs	r6, #0
 8005eac:	341a      	adds	r4, #26
 8005eae:	42b5      	cmp	r5, r6
 8005eb0:	d11a      	bne.n	8005ee8 <_printf_common+0xc8>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e008      	b.n	8005ec8 <_printf_common+0xa8>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4652      	mov	r2, sl
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	47c0      	blx	r8
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d103      	bne.n	8005ecc <_printf_common+0xac>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7c6      	b.n	8005e5e <_printf_common+0x3e>
 8005ed0:	18e1      	adds	r1, r4, r3
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	2030      	movs	r0, #48	; 0x30
 8005ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eda:	4422      	add	r2, r4
 8005edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	e7c7      	b.n	8005e78 <_printf_common+0x58>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4622      	mov	r2, r4
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0e6      	beq.n	8005ec4 <_printf_common+0xa4>
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7d9      	b.n	8005eae <_printf_common+0x8e>
	...

08005efc <_printf_i>:
 8005efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	7e0f      	ldrb	r7, [r1, #24]
 8005f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f04:	2f78      	cmp	r7, #120	; 0x78
 8005f06:	4691      	mov	r9, r2
 8005f08:	4680      	mov	r8, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	469a      	mov	sl, r3
 8005f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f12:	d807      	bhi.n	8005f24 <_printf_i+0x28>
 8005f14:	2f62      	cmp	r7, #98	; 0x62
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x32>
 8005f18:	2f00      	cmp	r7, #0
 8005f1a:	f000 80d8 	beq.w	80060ce <_printf_i+0x1d2>
 8005f1e:	2f58      	cmp	r7, #88	; 0x58
 8005f20:	f000 80a3 	beq.w	800606a <_printf_i+0x16e>
 8005f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f2c:	e03a      	b.n	8005fa4 <_printf_i+0xa8>
 8005f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f32:	2b15      	cmp	r3, #21
 8005f34:	d8f6      	bhi.n	8005f24 <_printf_i+0x28>
 8005f36:	a101      	add	r1, pc, #4	; (adr r1, 8005f3c <_printf_i+0x40>)
 8005f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fa9 	.word	0x08005fa9
 8005f44:	08005f25 	.word	0x08005f25
 8005f48:	08005f25 	.word	0x08005f25
 8005f4c:	08005f25 	.word	0x08005f25
 8005f50:	08005f25 	.word	0x08005f25
 8005f54:	08005fa9 	.word	0x08005fa9
 8005f58:	08005f25 	.word	0x08005f25
 8005f5c:	08005f25 	.word	0x08005f25
 8005f60:	08005f25 	.word	0x08005f25
 8005f64:	08005f25 	.word	0x08005f25
 8005f68:	080060b5 	.word	0x080060b5
 8005f6c:	08005fd9 	.word	0x08005fd9
 8005f70:	08006097 	.word	0x08006097
 8005f74:	08005f25 	.word	0x08005f25
 8005f78:	08005f25 	.word	0x08005f25
 8005f7c:	080060d7 	.word	0x080060d7
 8005f80:	08005f25 	.word	0x08005f25
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005f25 	.word	0x08005f25
 8005f8c:	08005f25 	.word	0x08005f25
 8005f90:	0800609f 	.word	0x0800609f
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	1d1a      	adds	r2, r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	602a      	str	r2, [r5, #0]
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0a3      	b.n	80060f0 <_printf_i+0x1f4>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	6829      	ldr	r1, [r5, #0]
 8005fac:	0606      	lsls	r6, r0, #24
 8005fae:	f101 0304 	add.w	r3, r1, #4
 8005fb2:	d50a      	bpl.n	8005fca <_printf_i+0xce>
 8005fb4:	680e      	ldr	r6, [r1, #0]
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	2e00      	cmp	r6, #0
 8005fba:	da03      	bge.n	8005fc4 <_printf_i+0xc8>
 8005fbc:	232d      	movs	r3, #45	; 0x2d
 8005fbe:	4276      	negs	r6, r6
 8005fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fc4:	485e      	ldr	r0, [pc, #376]	; (8006140 <_printf_i+0x244>)
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e019      	b.n	8005ffe <_printf_i+0x102>
 8005fca:	680e      	ldr	r6, [r1, #0]
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fd2:	bf18      	it	ne
 8005fd4:	b236      	sxthne	r6, r6
 8005fd6:	e7ef      	b.n	8005fb8 <_printf_i+0xbc>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	6029      	str	r1, [r5, #0]
 8005fe0:	0601      	lsls	r1, r0, #24
 8005fe2:	d501      	bpl.n	8005fe8 <_printf_i+0xec>
 8005fe4:	681e      	ldr	r6, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <_printf_i+0xf2>
 8005fe8:	0646      	lsls	r6, r0, #25
 8005fea:	d5fb      	bpl.n	8005fe4 <_printf_i+0xe8>
 8005fec:	881e      	ldrh	r6, [r3, #0]
 8005fee:	4854      	ldr	r0, [pc, #336]	; (8006140 <_printf_i+0x244>)
 8005ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ff2:	bf0c      	ite	eq
 8005ff4:	2308      	moveq	r3, #8
 8005ff6:	230a      	movne	r3, #10
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ffe:	6865      	ldr	r5, [r4, #4]
 8006000:	60a5      	str	r5, [r4, #8]
 8006002:	2d00      	cmp	r5, #0
 8006004:	bfa2      	ittt	ge
 8006006:	6821      	ldrge	r1, [r4, #0]
 8006008:	f021 0104 	bicge.w	r1, r1, #4
 800600c:	6021      	strge	r1, [r4, #0]
 800600e:	b90e      	cbnz	r6, 8006014 <_printf_i+0x118>
 8006010:	2d00      	cmp	r5, #0
 8006012:	d04d      	beq.n	80060b0 <_printf_i+0x1b4>
 8006014:	4615      	mov	r5, r2
 8006016:	fbb6 f1f3 	udiv	r1, r6, r3
 800601a:	fb03 6711 	mls	r7, r3, r1, r6
 800601e:	5dc7      	ldrb	r7, [r0, r7]
 8006020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006024:	4637      	mov	r7, r6
 8006026:	42bb      	cmp	r3, r7
 8006028:	460e      	mov	r6, r1
 800602a:	d9f4      	bls.n	8006016 <_printf_i+0x11a>
 800602c:	2b08      	cmp	r3, #8
 800602e:	d10b      	bne.n	8006048 <_printf_i+0x14c>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	07de      	lsls	r6, r3, #31
 8006034:	d508      	bpl.n	8006048 <_printf_i+0x14c>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	6861      	ldr	r1, [r4, #4]
 800603a:	4299      	cmp	r1, r3
 800603c:	bfde      	ittt	le
 800603e:	2330      	movle	r3, #48	; 0x30
 8006040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006048:	1b52      	subs	r2, r2, r5
 800604a:	6122      	str	r2, [r4, #16]
 800604c:	f8cd a000 	str.w	sl, [sp]
 8006050:	464b      	mov	r3, r9
 8006052:	aa03      	add	r2, sp, #12
 8006054:	4621      	mov	r1, r4
 8006056:	4640      	mov	r0, r8
 8006058:	f7ff fee2 	bl	8005e20 <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	d14c      	bne.n	80060fa <_printf_i+0x1fe>
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	b004      	add	sp, #16
 8006066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606a:	4835      	ldr	r0, [pc, #212]	; (8006140 <_printf_i+0x244>)
 800606c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006070:	6829      	ldr	r1, [r5, #0]
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f851 6b04 	ldr.w	r6, [r1], #4
 8006078:	6029      	str	r1, [r5, #0]
 800607a:	061d      	lsls	r5, r3, #24
 800607c:	d514      	bpl.n	80060a8 <_printf_i+0x1ac>
 800607e:	07df      	lsls	r7, r3, #31
 8006080:	bf44      	itt	mi
 8006082:	f043 0320 	orrmi.w	r3, r3, #32
 8006086:	6023      	strmi	r3, [r4, #0]
 8006088:	b91e      	cbnz	r6, 8006092 <_printf_i+0x196>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f023 0320 	bic.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	2310      	movs	r3, #16
 8006094:	e7b0      	b.n	8005ff8 <_printf_i+0xfc>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f043 0320 	orr.w	r3, r3, #32
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	2378      	movs	r3, #120	; 0x78
 80060a0:	4828      	ldr	r0, [pc, #160]	; (8006144 <_printf_i+0x248>)
 80060a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a6:	e7e3      	b.n	8006070 <_printf_i+0x174>
 80060a8:	0659      	lsls	r1, r3, #25
 80060aa:	bf48      	it	mi
 80060ac:	b2b6      	uxthmi	r6, r6
 80060ae:	e7e6      	b.n	800607e <_printf_i+0x182>
 80060b0:	4615      	mov	r5, r2
 80060b2:	e7bb      	b.n	800602c <_printf_i+0x130>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	6826      	ldr	r6, [r4, #0]
 80060b8:	6961      	ldr	r1, [r4, #20]
 80060ba:	1d18      	adds	r0, r3, #4
 80060bc:	6028      	str	r0, [r5, #0]
 80060be:	0635      	lsls	r5, r6, #24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0x1cc>
 80060c4:	6019      	str	r1, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0x1d2>
 80060c8:	0670      	lsls	r0, r6, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0x1c8>
 80060cc:	8019      	strh	r1, [r3, #0]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	4615      	mov	r5, r2
 80060d4:	e7ba      	b.n	800604c <_printf_i+0x150>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	602a      	str	r2, [r5, #0]
 80060dc:	681d      	ldr	r5, [r3, #0]
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	2100      	movs	r1, #0
 80060e2:	4628      	mov	r0, r5
 80060e4:	f7fa f884 	bl	80001f0 <memchr>
 80060e8:	b108      	cbz	r0, 80060ee <_printf_i+0x1f2>
 80060ea:	1b40      	subs	r0, r0, r5
 80060ec:	6060      	str	r0, [r4, #4]
 80060ee:	6863      	ldr	r3, [r4, #4]
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	2300      	movs	r3, #0
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f8:	e7a8      	b.n	800604c <_printf_i+0x150>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	462a      	mov	r2, r5
 80060fe:	4649      	mov	r1, r9
 8006100:	4640      	mov	r0, r8
 8006102:	47d0      	blx	sl
 8006104:	3001      	adds	r0, #1
 8006106:	d0ab      	beq.n	8006060 <_printf_i+0x164>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	079b      	lsls	r3, r3, #30
 800610c:	d413      	bmi.n	8006136 <_printf_i+0x23a>
 800610e:	68e0      	ldr	r0, [r4, #12]
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	4298      	cmp	r0, r3
 8006114:	bfb8      	it	lt
 8006116:	4618      	movlt	r0, r3
 8006118:	e7a4      	b.n	8006064 <_printf_i+0x168>
 800611a:	2301      	movs	r3, #1
 800611c:	4632      	mov	r2, r6
 800611e:	4649      	mov	r1, r9
 8006120:	4640      	mov	r0, r8
 8006122:	47d0      	blx	sl
 8006124:	3001      	adds	r0, #1
 8006126:	d09b      	beq.n	8006060 <_printf_i+0x164>
 8006128:	3501      	adds	r5, #1
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	9903      	ldr	r1, [sp, #12]
 800612e:	1a5b      	subs	r3, r3, r1
 8006130:	42ab      	cmp	r3, r5
 8006132:	dcf2      	bgt.n	800611a <_printf_i+0x21e>
 8006134:	e7eb      	b.n	800610e <_printf_i+0x212>
 8006136:	2500      	movs	r5, #0
 8006138:	f104 0619 	add.w	r6, r4, #25
 800613c:	e7f5      	b.n	800612a <_printf_i+0x22e>
 800613e:	bf00      	nop
 8006140:	0800a1aa 	.word	0x0800a1aa
 8006144:	0800a1bb 	.word	0x0800a1bb

08006148 <_scanf_float>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	b087      	sub	sp, #28
 800614e:	4617      	mov	r7, r2
 8006150:	9303      	str	r3, [sp, #12]
 8006152:	688b      	ldr	r3, [r1, #8]
 8006154:	1e5a      	subs	r2, r3, #1
 8006156:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800615a:	bf83      	ittte	hi
 800615c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006160:	195b      	addhi	r3, r3, r5
 8006162:	9302      	strhi	r3, [sp, #8]
 8006164:	2300      	movls	r3, #0
 8006166:	bf86      	itte	hi
 8006168:	f240 135d 	movwhi	r3, #349	; 0x15d
 800616c:	608b      	strhi	r3, [r1, #8]
 800616e:	9302      	strls	r3, [sp, #8]
 8006170:	680b      	ldr	r3, [r1, #0]
 8006172:	468b      	mov	fp, r1
 8006174:	2500      	movs	r5, #0
 8006176:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800617a:	f84b 3b1c 	str.w	r3, [fp], #28
 800617e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006182:	4680      	mov	r8, r0
 8006184:	460c      	mov	r4, r1
 8006186:	465e      	mov	r6, fp
 8006188:	46aa      	mov	sl, r5
 800618a:	46a9      	mov	r9, r5
 800618c:	9501      	str	r5, [sp, #4]
 800618e:	68a2      	ldr	r2, [r4, #8]
 8006190:	b152      	cbz	r2, 80061a8 <_scanf_float+0x60>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b4e      	cmp	r3, #78	; 0x4e
 8006198:	d864      	bhi.n	8006264 <_scanf_float+0x11c>
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d83c      	bhi.n	8006218 <_scanf_float+0xd0>
 800619e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80061a2:	b2c8      	uxtb	r0, r1
 80061a4:	280e      	cmp	r0, #14
 80061a6:	d93a      	bls.n	800621e <_scanf_float+0xd6>
 80061a8:	f1b9 0f00 	cmp.w	r9, #0
 80061ac:	d003      	beq.n	80061b6 <_scanf_float+0x6e>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061ba:	f1ba 0f01 	cmp.w	sl, #1
 80061be:	f200 8113 	bhi.w	80063e8 <_scanf_float+0x2a0>
 80061c2:	455e      	cmp	r6, fp
 80061c4:	f200 8105 	bhi.w	80063d2 <_scanf_float+0x28a>
 80061c8:	2501      	movs	r5, #1
 80061ca:	4628      	mov	r0, r5
 80061cc:	b007      	add	sp, #28
 80061ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061d6:	2a0d      	cmp	r2, #13
 80061d8:	d8e6      	bhi.n	80061a8 <_scanf_float+0x60>
 80061da:	a101      	add	r1, pc, #4	; (adr r1, 80061e0 <_scanf_float+0x98>)
 80061dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061e0:	0800631f 	.word	0x0800631f
 80061e4:	080061a9 	.word	0x080061a9
 80061e8:	080061a9 	.word	0x080061a9
 80061ec:	080061a9 	.word	0x080061a9
 80061f0:	0800637f 	.word	0x0800637f
 80061f4:	08006357 	.word	0x08006357
 80061f8:	080061a9 	.word	0x080061a9
 80061fc:	080061a9 	.word	0x080061a9
 8006200:	0800632d 	.word	0x0800632d
 8006204:	080061a9 	.word	0x080061a9
 8006208:	080061a9 	.word	0x080061a9
 800620c:	080061a9 	.word	0x080061a9
 8006210:	080061a9 	.word	0x080061a9
 8006214:	080062e5 	.word	0x080062e5
 8006218:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800621c:	e7db      	b.n	80061d6 <_scanf_float+0x8e>
 800621e:	290e      	cmp	r1, #14
 8006220:	d8c2      	bhi.n	80061a8 <_scanf_float+0x60>
 8006222:	a001      	add	r0, pc, #4	; (adr r0, 8006228 <_scanf_float+0xe0>)
 8006224:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006228:	080062d7 	.word	0x080062d7
 800622c:	080061a9 	.word	0x080061a9
 8006230:	080062d7 	.word	0x080062d7
 8006234:	0800636b 	.word	0x0800636b
 8006238:	080061a9 	.word	0x080061a9
 800623c:	08006285 	.word	0x08006285
 8006240:	080062c1 	.word	0x080062c1
 8006244:	080062c1 	.word	0x080062c1
 8006248:	080062c1 	.word	0x080062c1
 800624c:	080062c1 	.word	0x080062c1
 8006250:	080062c1 	.word	0x080062c1
 8006254:	080062c1 	.word	0x080062c1
 8006258:	080062c1 	.word	0x080062c1
 800625c:	080062c1 	.word	0x080062c1
 8006260:	080062c1 	.word	0x080062c1
 8006264:	2b6e      	cmp	r3, #110	; 0x6e
 8006266:	d809      	bhi.n	800627c <_scanf_float+0x134>
 8006268:	2b60      	cmp	r3, #96	; 0x60
 800626a:	d8b2      	bhi.n	80061d2 <_scanf_float+0x8a>
 800626c:	2b54      	cmp	r3, #84	; 0x54
 800626e:	d077      	beq.n	8006360 <_scanf_float+0x218>
 8006270:	2b59      	cmp	r3, #89	; 0x59
 8006272:	d199      	bne.n	80061a8 <_scanf_float+0x60>
 8006274:	2d07      	cmp	r5, #7
 8006276:	d197      	bne.n	80061a8 <_scanf_float+0x60>
 8006278:	2508      	movs	r5, #8
 800627a:	e029      	b.n	80062d0 <_scanf_float+0x188>
 800627c:	2b74      	cmp	r3, #116	; 0x74
 800627e:	d06f      	beq.n	8006360 <_scanf_float+0x218>
 8006280:	2b79      	cmp	r3, #121	; 0x79
 8006282:	e7f6      	b.n	8006272 <_scanf_float+0x12a>
 8006284:	6821      	ldr	r1, [r4, #0]
 8006286:	05c8      	lsls	r0, r1, #23
 8006288:	d51a      	bpl.n	80062c0 <_scanf_float+0x178>
 800628a:	9b02      	ldr	r3, [sp, #8]
 800628c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006290:	6021      	str	r1, [r4, #0]
 8006292:	f109 0901 	add.w	r9, r9, #1
 8006296:	b11b      	cbz	r3, 80062a0 <_scanf_float+0x158>
 8006298:	3b01      	subs	r3, #1
 800629a:	3201      	adds	r2, #1
 800629c:	9302      	str	r3, [sp, #8]
 800629e:	60a2      	str	r2, [r4, #8]
 80062a0:	68a3      	ldr	r3, [r4, #8]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	60a3      	str	r3, [r4, #8]
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	3301      	adds	r3, #1
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	f340 8084 	ble.w	80063c0 <_scanf_float+0x278>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	e766      	b.n	800618e <_scanf_float+0x46>
 80062c0:	eb1a 0f05 	cmn.w	sl, r5
 80062c4:	f47f af70 	bne.w	80061a8 <_scanf_float+0x60>
 80062c8:	6822      	ldr	r2, [r4, #0]
 80062ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062ce:	6022      	str	r2, [r4, #0]
 80062d0:	f806 3b01 	strb.w	r3, [r6], #1
 80062d4:	e7e4      	b.n	80062a0 <_scanf_float+0x158>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	0610      	lsls	r0, r2, #24
 80062da:	f57f af65 	bpl.w	80061a8 <_scanf_float+0x60>
 80062de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e2:	e7f4      	b.n	80062ce <_scanf_float+0x186>
 80062e4:	f1ba 0f00 	cmp.w	sl, #0
 80062e8:	d10e      	bne.n	8006308 <_scanf_float+0x1c0>
 80062ea:	f1b9 0f00 	cmp.w	r9, #0
 80062ee:	d10e      	bne.n	800630e <_scanf_float+0x1c6>
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062fa:	d108      	bne.n	800630e <_scanf_float+0x1c6>
 80062fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	f04f 0a01 	mov.w	sl, #1
 8006306:	e7e3      	b.n	80062d0 <_scanf_float+0x188>
 8006308:	f1ba 0f02 	cmp.w	sl, #2
 800630c:	d055      	beq.n	80063ba <_scanf_float+0x272>
 800630e:	2d01      	cmp	r5, #1
 8006310:	d002      	beq.n	8006318 <_scanf_float+0x1d0>
 8006312:	2d04      	cmp	r5, #4
 8006314:	f47f af48 	bne.w	80061a8 <_scanf_float+0x60>
 8006318:	3501      	adds	r5, #1
 800631a:	b2ed      	uxtb	r5, r5
 800631c:	e7d8      	b.n	80062d0 <_scanf_float+0x188>
 800631e:	f1ba 0f01 	cmp.w	sl, #1
 8006322:	f47f af41 	bne.w	80061a8 <_scanf_float+0x60>
 8006326:	f04f 0a02 	mov.w	sl, #2
 800632a:	e7d1      	b.n	80062d0 <_scanf_float+0x188>
 800632c:	b97d      	cbnz	r5, 800634e <_scanf_float+0x206>
 800632e:	f1b9 0f00 	cmp.w	r9, #0
 8006332:	f47f af3c 	bne.w	80061ae <_scanf_float+0x66>
 8006336:	6822      	ldr	r2, [r4, #0]
 8006338:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800633c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006340:	f47f af39 	bne.w	80061b6 <_scanf_float+0x6e>
 8006344:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006348:	6022      	str	r2, [r4, #0]
 800634a:	2501      	movs	r5, #1
 800634c:	e7c0      	b.n	80062d0 <_scanf_float+0x188>
 800634e:	2d03      	cmp	r5, #3
 8006350:	d0e2      	beq.n	8006318 <_scanf_float+0x1d0>
 8006352:	2d05      	cmp	r5, #5
 8006354:	e7de      	b.n	8006314 <_scanf_float+0x1cc>
 8006356:	2d02      	cmp	r5, #2
 8006358:	f47f af26 	bne.w	80061a8 <_scanf_float+0x60>
 800635c:	2503      	movs	r5, #3
 800635e:	e7b7      	b.n	80062d0 <_scanf_float+0x188>
 8006360:	2d06      	cmp	r5, #6
 8006362:	f47f af21 	bne.w	80061a8 <_scanf_float+0x60>
 8006366:	2507      	movs	r5, #7
 8006368:	e7b2      	b.n	80062d0 <_scanf_float+0x188>
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	0591      	lsls	r1, r2, #22
 800636e:	f57f af1b 	bpl.w	80061a8 <_scanf_float+0x60>
 8006372:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	f8cd 9004 	str.w	r9, [sp, #4]
 800637c:	e7a8      	b.n	80062d0 <_scanf_float+0x188>
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006384:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006388:	d006      	beq.n	8006398 <_scanf_float+0x250>
 800638a:	0550      	lsls	r0, r2, #21
 800638c:	f57f af0c 	bpl.w	80061a8 <_scanf_float+0x60>
 8006390:	f1b9 0f00 	cmp.w	r9, #0
 8006394:	f43f af0f 	beq.w	80061b6 <_scanf_float+0x6e>
 8006398:	0591      	lsls	r1, r2, #22
 800639a:	bf58      	it	pl
 800639c:	9901      	ldrpl	r1, [sp, #4]
 800639e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063a2:	bf58      	it	pl
 80063a4:	eba9 0101 	subpl.w	r1, r9, r1
 80063a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80063ac:	bf58      	it	pl
 80063ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	f04f 0900 	mov.w	r9, #0
 80063b8:	e78a      	b.n	80062d0 <_scanf_float+0x188>
 80063ba:	f04f 0a03 	mov.w	sl, #3
 80063be:	e787      	b.n	80062d0 <_scanf_float+0x188>
 80063c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063c4:	4639      	mov	r1, r7
 80063c6:	4640      	mov	r0, r8
 80063c8:	4798      	blx	r3
 80063ca:	2800      	cmp	r0, #0
 80063cc:	f43f aedf 	beq.w	800618e <_scanf_float+0x46>
 80063d0:	e6ea      	b.n	80061a8 <_scanf_float+0x60>
 80063d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063da:	463a      	mov	r2, r7
 80063dc:	4640      	mov	r0, r8
 80063de:	4798      	blx	r3
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	6123      	str	r3, [r4, #16]
 80063e6:	e6ec      	b.n	80061c2 <_scanf_float+0x7a>
 80063e8:	1e6b      	subs	r3, r5, #1
 80063ea:	2b06      	cmp	r3, #6
 80063ec:	d825      	bhi.n	800643a <_scanf_float+0x2f2>
 80063ee:	2d02      	cmp	r5, #2
 80063f0:	d836      	bhi.n	8006460 <_scanf_float+0x318>
 80063f2:	455e      	cmp	r6, fp
 80063f4:	f67f aee8 	bls.w	80061c8 <_scanf_float+0x80>
 80063f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006400:	463a      	mov	r2, r7
 8006402:	4640      	mov	r0, r8
 8006404:	4798      	blx	r3
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	3b01      	subs	r3, #1
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	e7f1      	b.n	80063f2 <_scanf_float+0x2aa>
 800640e:	9802      	ldr	r0, [sp, #8]
 8006410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006414:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006418:	9002      	str	r0, [sp, #8]
 800641a:	463a      	mov	r2, r7
 800641c:	4640      	mov	r0, r8
 800641e:	4798      	blx	r3
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	3b01      	subs	r3, #1
 8006424:	6123      	str	r3, [r4, #16]
 8006426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800642a:	fa5f fa8a 	uxtb.w	sl, sl
 800642e:	f1ba 0f02 	cmp.w	sl, #2
 8006432:	d1ec      	bne.n	800640e <_scanf_float+0x2c6>
 8006434:	3d03      	subs	r5, #3
 8006436:	b2ed      	uxtb	r5, r5
 8006438:	1b76      	subs	r6, r6, r5
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	05da      	lsls	r2, r3, #23
 800643e:	d52f      	bpl.n	80064a0 <_scanf_float+0x358>
 8006440:	055b      	lsls	r3, r3, #21
 8006442:	d510      	bpl.n	8006466 <_scanf_float+0x31e>
 8006444:	455e      	cmp	r6, fp
 8006446:	f67f aebf 	bls.w	80061c8 <_scanf_float+0x80>
 800644a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800644e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006452:	463a      	mov	r2, r7
 8006454:	4640      	mov	r0, r8
 8006456:	4798      	blx	r3
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	3b01      	subs	r3, #1
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	e7f1      	b.n	8006444 <_scanf_float+0x2fc>
 8006460:	46aa      	mov	sl, r5
 8006462:	9602      	str	r6, [sp, #8]
 8006464:	e7df      	b.n	8006426 <_scanf_float+0x2de>
 8006466:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	2965      	cmp	r1, #101	; 0x65
 800646e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006472:	f106 35ff 	add.w	r5, r6, #4294967295
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	d00c      	beq.n	8006494 <_scanf_float+0x34c>
 800647a:	2945      	cmp	r1, #69	; 0x45
 800647c:	d00a      	beq.n	8006494 <_scanf_float+0x34c>
 800647e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006482:	463a      	mov	r2, r7
 8006484:	4640      	mov	r0, r8
 8006486:	4798      	blx	r3
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800648e:	3b01      	subs	r3, #1
 8006490:	1eb5      	subs	r5, r6, #2
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006498:	463a      	mov	r2, r7
 800649a:	4640      	mov	r0, r8
 800649c:	4798      	blx	r3
 800649e:	462e      	mov	r6, r5
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	f015 0510 	ands.w	r5, r5, #16
 80064a6:	d159      	bne.n	800655c <_scanf_float+0x414>
 80064a8:	7035      	strb	r5, [r6, #0]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b4:	d11b      	bne.n	80064ee <_scanf_float+0x3a6>
 80064b6:	9b01      	ldr	r3, [sp, #4]
 80064b8:	454b      	cmp	r3, r9
 80064ba:	eba3 0209 	sub.w	r2, r3, r9
 80064be:	d123      	bne.n	8006508 <_scanf_float+0x3c0>
 80064c0:	2200      	movs	r2, #0
 80064c2:	4659      	mov	r1, fp
 80064c4:	4640      	mov	r0, r8
 80064c6:	f000 fe99 	bl	80071fc <_strtod_r>
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	f012 0f02 	tst.w	r2, #2
 80064d2:	ec57 6b10 	vmov	r6, r7, d0
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	d021      	beq.n	800651e <_scanf_float+0x3d6>
 80064da:	9903      	ldr	r1, [sp, #12]
 80064dc:	1d1a      	adds	r2, r3, #4
 80064de:	600a      	str	r2, [r1, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	e9c3 6700 	strd	r6, r7, [r3]
 80064e6:	68e3      	ldr	r3, [r4, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60e3      	str	r3, [r4, #12]
 80064ec:	e66d      	b.n	80061ca <_scanf_float+0x82>
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0e5      	beq.n	80064c0 <_scanf_float+0x378>
 80064f4:	9905      	ldr	r1, [sp, #20]
 80064f6:	230a      	movs	r3, #10
 80064f8:	462a      	mov	r2, r5
 80064fa:	3101      	adds	r1, #1
 80064fc:	4640      	mov	r0, r8
 80064fe:	f000 ff05 	bl	800730c <_strtol_r>
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	9e05      	ldr	r6, [sp, #20]
 8006506:	1ac2      	subs	r2, r0, r3
 8006508:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800650c:	429e      	cmp	r6, r3
 800650e:	bf28      	it	cs
 8006510:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006514:	4912      	ldr	r1, [pc, #72]	; (8006560 <_scanf_float+0x418>)
 8006516:	4630      	mov	r0, r6
 8006518:	f000 f82c 	bl	8006574 <siprintf>
 800651c:	e7d0      	b.n	80064c0 <_scanf_float+0x378>
 800651e:	9903      	ldr	r1, [sp, #12]
 8006520:	f012 0f04 	tst.w	r2, #4
 8006524:	f103 0204 	add.w	r2, r3, #4
 8006528:	600a      	str	r2, [r1, #0]
 800652a:	d1d9      	bne.n	80064e0 <_scanf_float+0x398>
 800652c:	f8d3 8000 	ldr.w	r8, [r3]
 8006530:	ee10 2a10 	vmov	r2, s0
 8006534:	ee10 0a10 	vmov	r0, s0
 8006538:	463b      	mov	r3, r7
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa fafe 	bl	8000b3c <__aeabi_dcmpun>
 8006540:	b128      	cbz	r0, 800654e <_scanf_float+0x406>
 8006542:	4808      	ldr	r0, [pc, #32]	; (8006564 <_scanf_float+0x41c>)
 8006544:	f000 f810 	bl	8006568 <nanf>
 8006548:	ed88 0a00 	vstr	s0, [r8]
 800654c:	e7cb      	b.n	80064e6 <_scanf_float+0x39e>
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7fa fb51 	bl	8000bf8 <__aeabi_d2f>
 8006556:	f8c8 0000 	str.w	r0, [r8]
 800655a:	e7c4      	b.n	80064e6 <_scanf_float+0x39e>
 800655c:	2500      	movs	r5, #0
 800655e:	e634      	b.n	80061ca <_scanf_float+0x82>
 8006560:	0800a1cc 	.word	0x0800a1cc
 8006564:	0800a5d8 	.word	0x0800a5d8

08006568 <nanf>:
 8006568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006570 <nanf+0x8>
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	7fc00000 	.word	0x7fc00000

08006574 <siprintf>:
 8006574:	b40e      	push	{r1, r2, r3}
 8006576:	b500      	push	{lr}
 8006578:	b09c      	sub	sp, #112	; 0x70
 800657a:	ab1d      	add	r3, sp, #116	; 0x74
 800657c:	9002      	str	r0, [sp, #8]
 800657e:	9006      	str	r0, [sp, #24]
 8006580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006584:	4809      	ldr	r0, [pc, #36]	; (80065ac <siprintf+0x38>)
 8006586:	9107      	str	r1, [sp, #28]
 8006588:	9104      	str	r1, [sp, #16]
 800658a:	4909      	ldr	r1, [pc, #36]	; (80065b0 <siprintf+0x3c>)
 800658c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006590:	9105      	str	r1, [sp, #20]
 8006592:	6800      	ldr	r0, [r0, #0]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	a902      	add	r1, sp, #8
 8006598:	f002 fee4 	bl	8009364 <_svfiprintf_r>
 800659c:	9b02      	ldr	r3, [sp, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	b01c      	add	sp, #112	; 0x70
 80065a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a8:	b003      	add	sp, #12
 80065aa:	4770      	bx	lr
 80065ac:	20000124 	.word	0x20000124
 80065b0:	ffff0208 	.word	0xffff0208

080065b4 <sulp>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4604      	mov	r4, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	ec45 4b10 	vmov	d0, r4, r5
 80065be:	4616      	mov	r6, r2
 80065c0:	f002 fc2e 	bl	8008e20 <__ulp>
 80065c4:	ec51 0b10 	vmov	r0, r1, d0
 80065c8:	b17e      	cbz	r6, 80065ea <sulp+0x36>
 80065ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80065ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	dd09      	ble.n	80065ea <sulp+0x36>
 80065d6:	051b      	lsls	r3, r3, #20
 80065d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065dc:	2400      	movs	r4, #0
 80065de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	0000      	movs	r0, r0
	...

080065f0 <_strtod_l>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	ed2d 8b02 	vpush	{d8}
 80065f8:	b09d      	sub	sp, #116	; 0x74
 80065fa:	461f      	mov	r7, r3
 80065fc:	2300      	movs	r3, #0
 80065fe:	9318      	str	r3, [sp, #96]	; 0x60
 8006600:	4ba2      	ldr	r3, [pc, #648]	; (800688c <_strtod_l+0x29c>)
 8006602:	9213      	str	r2, [sp, #76]	; 0x4c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	4604      	mov	r4, r0
 800660a:	4618      	mov	r0, r3
 800660c:	4688      	mov	r8, r1
 800660e:	f7f9 fde7 	bl	80001e0 <strlen>
 8006612:	f04f 0a00 	mov.w	sl, #0
 8006616:	4605      	mov	r5, r0
 8006618:	f04f 0b00 	mov.w	fp, #0
 800661c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	2a2b      	cmp	r2, #43	; 0x2b
 8006626:	d04e      	beq.n	80066c6 <_strtod_l+0xd6>
 8006628:	d83b      	bhi.n	80066a2 <_strtod_l+0xb2>
 800662a:	2a0d      	cmp	r2, #13
 800662c:	d834      	bhi.n	8006698 <_strtod_l+0xa8>
 800662e:	2a08      	cmp	r2, #8
 8006630:	d834      	bhi.n	800669c <_strtod_l+0xac>
 8006632:	2a00      	cmp	r2, #0
 8006634:	d03e      	beq.n	80066b4 <_strtod_l+0xc4>
 8006636:	2300      	movs	r3, #0
 8006638:	930a      	str	r3, [sp, #40]	; 0x28
 800663a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800663c:	7833      	ldrb	r3, [r6, #0]
 800663e:	2b30      	cmp	r3, #48	; 0x30
 8006640:	f040 80b0 	bne.w	80067a4 <_strtod_l+0x1b4>
 8006644:	7873      	ldrb	r3, [r6, #1]
 8006646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800664a:	2b58      	cmp	r3, #88	; 0x58
 800664c:	d168      	bne.n	8006720 <_strtod_l+0x130>
 800664e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	ab18      	add	r3, sp, #96	; 0x60
 8006654:	9702      	str	r7, [sp, #8]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	4a8d      	ldr	r2, [pc, #564]	; (8006890 <_strtod_l+0x2a0>)
 800665a:	ab19      	add	r3, sp, #100	; 0x64
 800665c:	a917      	add	r1, sp, #92	; 0x5c
 800665e:	4620      	mov	r0, r4
 8006660:	f001 fd38 	bl	80080d4 <__gethex>
 8006664:	f010 0707 	ands.w	r7, r0, #7
 8006668:	4605      	mov	r5, r0
 800666a:	d005      	beq.n	8006678 <_strtod_l+0x88>
 800666c:	2f06      	cmp	r7, #6
 800666e:	d12c      	bne.n	80066ca <_strtod_l+0xda>
 8006670:	3601      	adds	r6, #1
 8006672:	2300      	movs	r3, #0
 8006674:	9617      	str	r6, [sp, #92]	; 0x5c
 8006676:	930a      	str	r3, [sp, #40]	; 0x28
 8006678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 8590 	bne.w	80071a0 <_strtod_l+0xbb0>
 8006680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006682:	b1eb      	cbz	r3, 80066c0 <_strtod_l+0xd0>
 8006684:	4652      	mov	r2, sl
 8006686:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800668a:	ec43 2b10 	vmov	d0, r2, r3
 800668e:	b01d      	add	sp, #116	; 0x74
 8006690:	ecbd 8b02 	vpop	{d8}
 8006694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006698:	2a20      	cmp	r2, #32
 800669a:	d1cc      	bne.n	8006636 <_strtod_l+0x46>
 800669c:	3301      	adds	r3, #1
 800669e:	9317      	str	r3, [sp, #92]	; 0x5c
 80066a0:	e7be      	b.n	8006620 <_strtod_l+0x30>
 80066a2:	2a2d      	cmp	r2, #45	; 0x2d
 80066a4:	d1c7      	bne.n	8006636 <_strtod_l+0x46>
 80066a6:	2201      	movs	r2, #1
 80066a8:	920a      	str	r2, [sp, #40]	; 0x28
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1c2      	bne.n	800663a <_strtod_l+0x4a>
 80066b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 856e 	bne.w	800719c <_strtod_l+0xbac>
 80066c0:	4652      	mov	r2, sl
 80066c2:	465b      	mov	r3, fp
 80066c4:	e7e1      	b.n	800668a <_strtod_l+0x9a>
 80066c6:	2200      	movs	r2, #0
 80066c8:	e7ee      	b.n	80066a8 <_strtod_l+0xb8>
 80066ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066cc:	b13a      	cbz	r2, 80066de <_strtod_l+0xee>
 80066ce:	2135      	movs	r1, #53	; 0x35
 80066d0:	a81a      	add	r0, sp, #104	; 0x68
 80066d2:	f002 fcb0 	bl	8009036 <__copybits>
 80066d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066d8:	4620      	mov	r0, r4
 80066da:	f002 f86f 	bl	80087bc <_Bfree>
 80066de:	3f01      	subs	r7, #1
 80066e0:	2f04      	cmp	r7, #4
 80066e2:	d806      	bhi.n	80066f2 <_strtod_l+0x102>
 80066e4:	e8df f007 	tbb	[pc, r7]
 80066e8:	1714030a 	.word	0x1714030a
 80066ec:	0a          	.byte	0x0a
 80066ed:	00          	.byte	0x00
 80066ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80066f2:	0728      	lsls	r0, r5, #28
 80066f4:	d5c0      	bpl.n	8006678 <_strtod_l+0x88>
 80066f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80066fa:	e7bd      	b.n	8006678 <_strtod_l+0x88>
 80066fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006700:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800670a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800670e:	e7f0      	b.n	80066f2 <_strtod_l+0x102>
 8006710:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006894 <_strtod_l+0x2a4>
 8006714:	e7ed      	b.n	80066f2 <_strtod_l+0x102>
 8006716:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800671a:	f04f 3aff 	mov.w	sl, #4294967295
 800671e:	e7e8      	b.n	80066f2 <_strtod_l+0x102>
 8006720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	9217      	str	r2, [sp, #92]	; 0x5c
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b30      	cmp	r3, #48	; 0x30
 800672a:	d0f9      	beq.n	8006720 <_strtod_l+0x130>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0a3      	beq.n	8006678 <_strtod_l+0x88>
 8006730:	2301      	movs	r3, #1
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800673a:	9308      	str	r3, [sp, #32]
 800673c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006740:	464f      	mov	r7, r9
 8006742:	220a      	movs	r2, #10
 8006744:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006746:	7806      	ldrb	r6, [r0, #0]
 8006748:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800674c:	b2d9      	uxtb	r1, r3
 800674e:	2909      	cmp	r1, #9
 8006750:	d92a      	bls.n	80067a8 <_strtod_l+0x1b8>
 8006752:	9905      	ldr	r1, [sp, #20]
 8006754:	462a      	mov	r2, r5
 8006756:	f002 ff1f 	bl	8009598 <strncmp>
 800675a:	b398      	cbz	r0, 80067c4 <_strtod_l+0x1d4>
 800675c:	2000      	movs	r0, #0
 800675e:	4632      	mov	r2, r6
 8006760:	463d      	mov	r5, r7
 8006762:	9005      	str	r0, [sp, #20]
 8006764:	4603      	mov	r3, r0
 8006766:	2a65      	cmp	r2, #101	; 0x65
 8006768:	d001      	beq.n	800676e <_strtod_l+0x17e>
 800676a:	2a45      	cmp	r2, #69	; 0x45
 800676c:	d118      	bne.n	80067a0 <_strtod_l+0x1b0>
 800676e:	b91d      	cbnz	r5, 8006778 <_strtod_l+0x188>
 8006770:	9a04      	ldr	r2, [sp, #16]
 8006772:	4302      	orrs	r2, r0
 8006774:	d09e      	beq.n	80066b4 <_strtod_l+0xc4>
 8006776:	2500      	movs	r5, #0
 8006778:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800677c:	f108 0201 	add.w	r2, r8, #1
 8006780:	9217      	str	r2, [sp, #92]	; 0x5c
 8006782:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006786:	2a2b      	cmp	r2, #43	; 0x2b
 8006788:	d075      	beq.n	8006876 <_strtod_l+0x286>
 800678a:	2a2d      	cmp	r2, #45	; 0x2d
 800678c:	d07b      	beq.n	8006886 <_strtod_l+0x296>
 800678e:	f04f 0c00 	mov.w	ip, #0
 8006792:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006796:	2909      	cmp	r1, #9
 8006798:	f240 8082 	bls.w	80068a0 <_strtod_l+0x2b0>
 800679c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80067a0:	2600      	movs	r6, #0
 80067a2:	e09d      	b.n	80068e0 <_strtod_l+0x2f0>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e7c4      	b.n	8006732 <_strtod_l+0x142>
 80067a8:	2f08      	cmp	r7, #8
 80067aa:	bfd8      	it	le
 80067ac:	9907      	ldrle	r1, [sp, #28]
 80067ae:	f100 0001 	add.w	r0, r0, #1
 80067b2:	bfda      	itte	le
 80067b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80067b8:	9307      	strle	r3, [sp, #28]
 80067ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80067be:	3701      	adds	r7, #1
 80067c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80067c2:	e7bf      	b.n	8006744 <_strtod_l+0x154>
 80067c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067c6:	195a      	adds	r2, r3, r5
 80067c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067ca:	5d5a      	ldrb	r2, [r3, r5]
 80067cc:	2f00      	cmp	r7, #0
 80067ce:	d037      	beq.n	8006840 <_strtod_l+0x250>
 80067d0:	9005      	str	r0, [sp, #20]
 80067d2:	463d      	mov	r5, r7
 80067d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80067d8:	2b09      	cmp	r3, #9
 80067da:	d912      	bls.n	8006802 <_strtod_l+0x212>
 80067dc:	2301      	movs	r3, #1
 80067de:	e7c2      	b.n	8006766 <_strtod_l+0x176>
 80067e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80067e6:	785a      	ldrb	r2, [r3, #1]
 80067e8:	3001      	adds	r0, #1
 80067ea:	2a30      	cmp	r2, #48	; 0x30
 80067ec:	d0f8      	beq.n	80067e0 <_strtod_l+0x1f0>
 80067ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	f200 84d9 	bhi.w	80071aa <_strtod_l+0xbba>
 80067f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067fa:	9005      	str	r0, [sp, #20]
 80067fc:	2000      	movs	r0, #0
 80067fe:	9308      	str	r3, [sp, #32]
 8006800:	4605      	mov	r5, r0
 8006802:	3a30      	subs	r2, #48	; 0x30
 8006804:	f100 0301 	add.w	r3, r0, #1
 8006808:	d014      	beq.n	8006834 <_strtod_l+0x244>
 800680a:	9905      	ldr	r1, [sp, #20]
 800680c:	4419      	add	r1, r3
 800680e:	9105      	str	r1, [sp, #20]
 8006810:	462b      	mov	r3, r5
 8006812:	eb00 0e05 	add.w	lr, r0, r5
 8006816:	210a      	movs	r1, #10
 8006818:	4573      	cmp	r3, lr
 800681a:	d113      	bne.n	8006844 <_strtod_l+0x254>
 800681c:	182b      	adds	r3, r5, r0
 800681e:	2b08      	cmp	r3, #8
 8006820:	f105 0501 	add.w	r5, r5, #1
 8006824:	4405      	add	r5, r0
 8006826:	dc1c      	bgt.n	8006862 <_strtod_l+0x272>
 8006828:	9907      	ldr	r1, [sp, #28]
 800682a:	230a      	movs	r3, #10
 800682c:	fb03 2301 	mla	r3, r3, r1, r2
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	2300      	movs	r3, #0
 8006834:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006836:	1c51      	adds	r1, r2, #1
 8006838:	9117      	str	r1, [sp, #92]	; 0x5c
 800683a:	7852      	ldrb	r2, [r2, #1]
 800683c:	4618      	mov	r0, r3
 800683e:	e7c9      	b.n	80067d4 <_strtod_l+0x1e4>
 8006840:	4638      	mov	r0, r7
 8006842:	e7d2      	b.n	80067ea <_strtod_l+0x1fa>
 8006844:	2b08      	cmp	r3, #8
 8006846:	dc04      	bgt.n	8006852 <_strtod_l+0x262>
 8006848:	9e07      	ldr	r6, [sp, #28]
 800684a:	434e      	muls	r6, r1
 800684c:	9607      	str	r6, [sp, #28]
 800684e:	3301      	adds	r3, #1
 8006850:	e7e2      	b.n	8006818 <_strtod_l+0x228>
 8006852:	f103 0c01 	add.w	ip, r3, #1
 8006856:	f1bc 0f10 	cmp.w	ip, #16
 800685a:	bfd8      	it	le
 800685c:	fb01 f909 	mulle.w	r9, r1, r9
 8006860:	e7f5      	b.n	800684e <_strtod_l+0x25e>
 8006862:	2d10      	cmp	r5, #16
 8006864:	bfdc      	itt	le
 8006866:	230a      	movle	r3, #10
 8006868:	fb03 2909 	mlale	r9, r3, r9, r2
 800686c:	e7e1      	b.n	8006832 <_strtod_l+0x242>
 800686e:	2300      	movs	r3, #0
 8006870:	9305      	str	r3, [sp, #20]
 8006872:	2301      	movs	r3, #1
 8006874:	e77c      	b.n	8006770 <_strtod_l+0x180>
 8006876:	f04f 0c00 	mov.w	ip, #0
 800687a:	f108 0202 	add.w	r2, r8, #2
 800687e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006880:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006884:	e785      	b.n	8006792 <_strtod_l+0x1a2>
 8006886:	f04f 0c01 	mov.w	ip, #1
 800688a:	e7f6      	b.n	800687a <_strtod_l+0x28a>
 800688c:	0800a420 	.word	0x0800a420
 8006890:	0800a1d4 	.word	0x0800a1d4
 8006894:	7ff00000 	.word	0x7ff00000
 8006898:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800689a:	1c51      	adds	r1, r2, #1
 800689c:	9117      	str	r1, [sp, #92]	; 0x5c
 800689e:	7852      	ldrb	r2, [r2, #1]
 80068a0:	2a30      	cmp	r2, #48	; 0x30
 80068a2:	d0f9      	beq.n	8006898 <_strtod_l+0x2a8>
 80068a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80068a8:	2908      	cmp	r1, #8
 80068aa:	f63f af79 	bhi.w	80067a0 <_strtod_l+0x1b0>
 80068ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068b4:	9206      	str	r2, [sp, #24]
 80068b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068b8:	1c51      	adds	r1, r2, #1
 80068ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80068bc:	7852      	ldrb	r2, [r2, #1]
 80068be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80068c2:	2e09      	cmp	r6, #9
 80068c4:	d937      	bls.n	8006936 <_strtod_l+0x346>
 80068c6:	9e06      	ldr	r6, [sp, #24]
 80068c8:	1b89      	subs	r1, r1, r6
 80068ca:	2908      	cmp	r1, #8
 80068cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80068d0:	dc02      	bgt.n	80068d8 <_strtod_l+0x2e8>
 80068d2:	4576      	cmp	r6, lr
 80068d4:	bfa8      	it	ge
 80068d6:	4676      	movge	r6, lr
 80068d8:	f1bc 0f00 	cmp.w	ip, #0
 80068dc:	d000      	beq.n	80068e0 <_strtod_l+0x2f0>
 80068de:	4276      	negs	r6, r6
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	d14d      	bne.n	8006980 <_strtod_l+0x390>
 80068e4:	9904      	ldr	r1, [sp, #16]
 80068e6:	4301      	orrs	r1, r0
 80068e8:	f47f aec6 	bne.w	8006678 <_strtod_l+0x88>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f aee1 	bne.w	80066b4 <_strtod_l+0xc4>
 80068f2:	2a69      	cmp	r2, #105	; 0x69
 80068f4:	d027      	beq.n	8006946 <_strtod_l+0x356>
 80068f6:	dc24      	bgt.n	8006942 <_strtod_l+0x352>
 80068f8:	2a49      	cmp	r2, #73	; 0x49
 80068fa:	d024      	beq.n	8006946 <_strtod_l+0x356>
 80068fc:	2a4e      	cmp	r2, #78	; 0x4e
 80068fe:	f47f aed9 	bne.w	80066b4 <_strtod_l+0xc4>
 8006902:	499f      	ldr	r1, [pc, #636]	; (8006b80 <_strtod_l+0x590>)
 8006904:	a817      	add	r0, sp, #92	; 0x5c
 8006906:	f001 fe3d 	bl	8008584 <__match>
 800690a:	2800      	cmp	r0, #0
 800690c:	f43f aed2 	beq.w	80066b4 <_strtod_l+0xc4>
 8006910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b28      	cmp	r3, #40	; 0x28
 8006916:	d12d      	bne.n	8006974 <_strtod_l+0x384>
 8006918:	499a      	ldr	r1, [pc, #616]	; (8006b84 <_strtod_l+0x594>)
 800691a:	aa1a      	add	r2, sp, #104	; 0x68
 800691c:	a817      	add	r0, sp, #92	; 0x5c
 800691e:	f001 fe45 	bl	80085ac <__hexnan>
 8006922:	2805      	cmp	r0, #5
 8006924:	d126      	bne.n	8006974 <_strtod_l+0x384>
 8006926:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006928:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800692c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006930:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006934:	e6a0      	b.n	8006678 <_strtod_l+0x88>
 8006936:	210a      	movs	r1, #10
 8006938:	fb01 2e0e 	mla	lr, r1, lr, r2
 800693c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006940:	e7b9      	b.n	80068b6 <_strtod_l+0x2c6>
 8006942:	2a6e      	cmp	r2, #110	; 0x6e
 8006944:	e7db      	b.n	80068fe <_strtod_l+0x30e>
 8006946:	4990      	ldr	r1, [pc, #576]	; (8006b88 <_strtod_l+0x598>)
 8006948:	a817      	add	r0, sp, #92	; 0x5c
 800694a:	f001 fe1b 	bl	8008584 <__match>
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f aeb0 	beq.w	80066b4 <_strtod_l+0xc4>
 8006954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006956:	498d      	ldr	r1, [pc, #564]	; (8006b8c <_strtod_l+0x59c>)
 8006958:	3b01      	subs	r3, #1
 800695a:	a817      	add	r0, sp, #92	; 0x5c
 800695c:	9317      	str	r3, [sp, #92]	; 0x5c
 800695e:	f001 fe11 	bl	8008584 <__match>
 8006962:	b910      	cbnz	r0, 800696a <_strtod_l+0x37a>
 8006964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006966:	3301      	adds	r3, #1
 8006968:	9317      	str	r3, [sp, #92]	; 0x5c
 800696a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006b9c <_strtod_l+0x5ac>
 800696e:	f04f 0a00 	mov.w	sl, #0
 8006972:	e681      	b.n	8006678 <_strtod_l+0x88>
 8006974:	4886      	ldr	r0, [pc, #536]	; (8006b90 <_strtod_l+0x5a0>)
 8006976:	f002 fdf7 	bl	8009568 <nan>
 800697a:	ec5b ab10 	vmov	sl, fp, d0
 800697e:	e67b      	b.n	8006678 <_strtod_l+0x88>
 8006980:	9b05      	ldr	r3, [sp, #20]
 8006982:	9807      	ldr	r0, [sp, #28]
 8006984:	1af3      	subs	r3, r6, r3
 8006986:	2f00      	cmp	r7, #0
 8006988:	bf08      	it	eq
 800698a:	462f      	moveq	r7, r5
 800698c:	2d10      	cmp	r5, #16
 800698e:	9306      	str	r3, [sp, #24]
 8006990:	46a8      	mov	r8, r5
 8006992:	bfa8      	it	ge
 8006994:	f04f 0810 	movge.w	r8, #16
 8006998:	f7f9 fdbc 	bl	8000514 <__aeabi_ui2d>
 800699c:	2d09      	cmp	r5, #9
 800699e:	4682      	mov	sl, r0
 80069a0:	468b      	mov	fp, r1
 80069a2:	dd13      	ble.n	80069cc <_strtod_l+0x3dc>
 80069a4:	4b7b      	ldr	r3, [pc, #492]	; (8006b94 <_strtod_l+0x5a4>)
 80069a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069ae:	f7f9 fe2b 	bl	8000608 <__aeabi_dmul>
 80069b2:	4682      	mov	sl, r0
 80069b4:	4648      	mov	r0, r9
 80069b6:	468b      	mov	fp, r1
 80069b8:	f7f9 fdac 	bl	8000514 <__aeabi_ui2d>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4650      	mov	r0, sl
 80069c2:	4659      	mov	r1, fp
 80069c4:	f7f9 fc6a 	bl	800029c <__adddf3>
 80069c8:	4682      	mov	sl, r0
 80069ca:	468b      	mov	fp, r1
 80069cc:	2d0f      	cmp	r5, #15
 80069ce:	dc38      	bgt.n	8006a42 <_strtod_l+0x452>
 80069d0:	9b06      	ldr	r3, [sp, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f43f ae50 	beq.w	8006678 <_strtod_l+0x88>
 80069d8:	dd24      	ble.n	8006a24 <_strtod_l+0x434>
 80069da:	2b16      	cmp	r3, #22
 80069dc:	dc0b      	bgt.n	80069f6 <_strtod_l+0x406>
 80069de:	496d      	ldr	r1, [pc, #436]	; (8006b94 <_strtod_l+0x5a4>)
 80069e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e8:	4652      	mov	r2, sl
 80069ea:	465b      	mov	r3, fp
 80069ec:	f7f9 fe0c 	bl	8000608 <__aeabi_dmul>
 80069f0:	4682      	mov	sl, r0
 80069f2:	468b      	mov	fp, r1
 80069f4:	e640      	b.n	8006678 <_strtod_l+0x88>
 80069f6:	9a06      	ldr	r2, [sp, #24]
 80069f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80069fc:	4293      	cmp	r3, r2
 80069fe:	db20      	blt.n	8006a42 <_strtod_l+0x452>
 8006a00:	4c64      	ldr	r4, [pc, #400]	; (8006b94 <_strtod_l+0x5a4>)
 8006a02:	f1c5 050f 	rsb	r5, r5, #15
 8006a06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a12:	f7f9 fdf9 	bl	8000608 <__aeabi_dmul>
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	1b5d      	subs	r5, r3, r5
 8006a1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a22:	e7e3      	b.n	80069ec <_strtod_l+0x3fc>
 8006a24:	9b06      	ldr	r3, [sp, #24]
 8006a26:	3316      	adds	r3, #22
 8006a28:	db0b      	blt.n	8006a42 <_strtod_l+0x452>
 8006a2a:	9b05      	ldr	r3, [sp, #20]
 8006a2c:	1b9e      	subs	r6, r3, r6
 8006a2e:	4b59      	ldr	r3, [pc, #356]	; (8006b94 <_strtod_l+0x5a4>)
 8006a30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	f7f9 ff0e 	bl	800085c <__aeabi_ddiv>
 8006a40:	e7d6      	b.n	80069f0 <_strtod_l+0x400>
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	eba5 0808 	sub.w	r8, r5, r8
 8006a48:	4498      	add	r8, r3
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	dd74      	ble.n	8006b3a <_strtod_l+0x54a>
 8006a50:	f018 030f 	ands.w	r3, r8, #15
 8006a54:	d00a      	beq.n	8006a6c <_strtod_l+0x47c>
 8006a56:	494f      	ldr	r1, [pc, #316]	; (8006b94 <_strtod_l+0x5a4>)
 8006a58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	465b      	mov	r3, fp
 8006a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a64:	f7f9 fdd0 	bl	8000608 <__aeabi_dmul>
 8006a68:	4682      	mov	sl, r0
 8006a6a:	468b      	mov	fp, r1
 8006a6c:	f038 080f 	bics.w	r8, r8, #15
 8006a70:	d04f      	beq.n	8006b12 <_strtod_l+0x522>
 8006a72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006a76:	dd22      	ble.n	8006abe <_strtod_l+0x4ce>
 8006a78:	2500      	movs	r5, #0
 8006a7a:	462e      	mov	r6, r5
 8006a7c:	9507      	str	r5, [sp, #28]
 8006a7e:	9505      	str	r5, [sp, #20]
 8006a80:	2322      	movs	r3, #34	; 0x22
 8006a82:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006b9c <_strtod_l+0x5ac>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	f04f 0a00 	mov.w	sl, #0
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f43f adf2 	beq.w	8006678 <_strtod_l+0x88>
 8006a94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a96:	4620      	mov	r0, r4
 8006a98:	f001 fe90 	bl	80087bc <_Bfree>
 8006a9c:	9905      	ldr	r1, [sp, #20]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 fe8c 	bl	80087bc <_Bfree>
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f001 fe88 	bl	80087bc <_Bfree>
 8006aac:	9907      	ldr	r1, [sp, #28]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f001 fe84 	bl	80087bc <_Bfree>
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f001 fe80 	bl	80087bc <_Bfree>
 8006abc:	e5dc      	b.n	8006678 <_strtod_l+0x88>
 8006abe:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <_strtod_l+0x5a8>)
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006ac8:	4650      	mov	r0, sl
 8006aca:	4659      	mov	r1, fp
 8006acc:	4699      	mov	r9, r3
 8006ace:	f1b8 0f01 	cmp.w	r8, #1
 8006ad2:	dc21      	bgt.n	8006b18 <_strtod_l+0x528>
 8006ad4:	b10b      	cbz	r3, 8006ada <_strtod_l+0x4ea>
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	468b      	mov	fp, r1
 8006ada:	4b2f      	ldr	r3, [pc, #188]	; (8006b98 <_strtod_l+0x5a8>)
 8006adc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006ae0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006aec:	f7f9 fd8c 	bl	8000608 <__aeabi_dmul>
 8006af0:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <_strtod_l+0x5ac>)
 8006af2:	460a      	mov	r2, r1
 8006af4:	400b      	ands	r3, r1
 8006af6:	492a      	ldr	r1, [pc, #168]	; (8006ba0 <_strtod_l+0x5b0>)
 8006af8:	428b      	cmp	r3, r1
 8006afa:	4682      	mov	sl, r0
 8006afc:	d8bc      	bhi.n	8006a78 <_strtod_l+0x488>
 8006afe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b02:	428b      	cmp	r3, r1
 8006b04:	bf86      	itte	hi
 8006b06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006ba4 <_strtod_l+0x5b4>
 8006b0a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006b12:	2300      	movs	r3, #0
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	e084      	b.n	8006c22 <_strtod_l+0x632>
 8006b18:	f018 0f01 	tst.w	r8, #1
 8006b1c:	d005      	beq.n	8006b2a <_strtod_l+0x53a>
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fd70 	bl	8000608 <__aeabi_dmul>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	9a04      	ldr	r2, [sp, #16]
 8006b2c:	3208      	adds	r2, #8
 8006b2e:	f109 0901 	add.w	r9, r9, #1
 8006b32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b36:	9204      	str	r2, [sp, #16]
 8006b38:	e7c9      	b.n	8006ace <_strtod_l+0x4de>
 8006b3a:	d0ea      	beq.n	8006b12 <_strtod_l+0x522>
 8006b3c:	f1c8 0800 	rsb	r8, r8, #0
 8006b40:	f018 020f 	ands.w	r2, r8, #15
 8006b44:	d00a      	beq.n	8006b5c <_strtod_l+0x56c>
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <_strtod_l+0x5a4>)
 8006b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	4659      	mov	r1, fp
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f7f9 fe82 	bl	800085c <__aeabi_ddiv>
 8006b58:	4682      	mov	sl, r0
 8006b5a:	468b      	mov	fp, r1
 8006b5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b60:	d0d7      	beq.n	8006b12 <_strtod_l+0x522>
 8006b62:	f1b8 0f1f 	cmp.w	r8, #31
 8006b66:	dd1f      	ble.n	8006ba8 <_strtod_l+0x5b8>
 8006b68:	2500      	movs	r5, #0
 8006b6a:	462e      	mov	r6, r5
 8006b6c:	9507      	str	r5, [sp, #28]
 8006b6e:	9505      	str	r5, [sp, #20]
 8006b70:	2322      	movs	r3, #34	; 0x22
 8006b72:	f04f 0a00 	mov.w	sl, #0
 8006b76:	f04f 0b00 	mov.w	fp, #0
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	e786      	b.n	8006a8c <_strtod_l+0x49c>
 8006b7e:	bf00      	nop
 8006b80:	0800a1a5 	.word	0x0800a1a5
 8006b84:	0800a1e8 	.word	0x0800a1e8
 8006b88:	0800a19d 	.word	0x0800a19d
 8006b8c:	0800a32c 	.word	0x0800a32c
 8006b90:	0800a5d8 	.word	0x0800a5d8
 8006b94:	0800a4b8 	.word	0x0800a4b8
 8006b98:	0800a490 	.word	0x0800a490
 8006b9c:	7ff00000 	.word	0x7ff00000
 8006ba0:	7ca00000 	.word	0x7ca00000
 8006ba4:	7fefffff 	.word	0x7fefffff
 8006ba8:	f018 0310 	ands.w	r3, r8, #16
 8006bac:	bf18      	it	ne
 8006bae:	236a      	movne	r3, #106	; 0x6a
 8006bb0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006f60 <_strtod_l+0x970>
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	4659      	mov	r1, fp
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f018 0f01 	tst.w	r8, #1
 8006bc0:	d004      	beq.n	8006bcc <_strtod_l+0x5dc>
 8006bc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bc6:	f7f9 fd1f 	bl	8000608 <__aeabi_dmul>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006bd0:	f109 0908 	add.w	r9, r9, #8
 8006bd4:	d1f2      	bne.n	8006bbc <_strtod_l+0x5cc>
 8006bd6:	b10b      	cbz	r3, 8006bdc <_strtod_l+0x5ec>
 8006bd8:	4682      	mov	sl, r0
 8006bda:	468b      	mov	fp, r1
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	b1c3      	cbz	r3, 8006c12 <_strtod_l+0x622>
 8006be0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006be4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	4659      	mov	r1, fp
 8006bec:	dd11      	ble.n	8006c12 <_strtod_l+0x622>
 8006bee:	2b1f      	cmp	r3, #31
 8006bf0:	f340 8124 	ble.w	8006e3c <_strtod_l+0x84c>
 8006bf4:	2b34      	cmp	r3, #52	; 0x34
 8006bf6:	bfde      	ittt	le
 8006bf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8006c00:	fa03 f202 	lslle.w	r2, r3, r2
 8006c04:	f04f 0a00 	mov.w	sl, #0
 8006c08:	bfcc      	ite	gt
 8006c0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006c0e:	ea02 0b01 	andle.w	fp, r2, r1
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4650      	mov	r0, sl
 8006c18:	4659      	mov	r1, fp
 8006c1a:	f7f9 ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d1a2      	bne.n	8006b68 <_strtod_l+0x578>
 8006c22:	9b07      	ldr	r3, [sp, #28]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	9908      	ldr	r1, [sp, #32]
 8006c28:	462b      	mov	r3, r5
 8006c2a:	463a      	mov	r2, r7
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f001 fe2d 	bl	800888c <__s2b>
 8006c32:	9007      	str	r0, [sp, #28]
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f43f af1f 	beq.w	8006a78 <_strtod_l+0x488>
 8006c3a:	9b05      	ldr	r3, [sp, #20]
 8006c3c:	1b9e      	subs	r6, r3, r6
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfb4      	ite	lt
 8006c44:	4633      	movlt	r3, r6
 8006c46:	2300      	movge	r3, #0
 8006c48:	930c      	str	r3, [sp, #48]	; 0x30
 8006c4a:	9b06      	ldr	r3, [sp, #24]
 8006c4c:	2500      	movs	r5, #0
 8006c4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c52:	9312      	str	r3, [sp, #72]	; 0x48
 8006c54:	462e      	mov	r6, r5
 8006c56:	9b07      	ldr	r3, [sp, #28]
 8006c58:	4620      	mov	r0, r4
 8006c5a:	6859      	ldr	r1, [r3, #4]
 8006c5c:	f001 fd6e 	bl	800873c <_Balloc>
 8006c60:	9005      	str	r0, [sp, #20]
 8006c62:	2800      	cmp	r0, #0
 8006c64:	f43f af0c 	beq.w	8006a80 <_strtod_l+0x490>
 8006c68:	9b07      	ldr	r3, [sp, #28]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	3202      	adds	r2, #2
 8006c6e:	f103 010c 	add.w	r1, r3, #12
 8006c72:	0092      	lsls	r2, r2, #2
 8006c74:	300c      	adds	r0, #12
 8006c76:	f001 fd53 	bl	8008720 <memcpy>
 8006c7a:	ec4b ab10 	vmov	d0, sl, fp
 8006c7e:	aa1a      	add	r2, sp, #104	; 0x68
 8006c80:	a919      	add	r1, sp, #100	; 0x64
 8006c82:	4620      	mov	r0, r4
 8006c84:	f002 f948 	bl	8008f18 <__d2b>
 8006c88:	ec4b ab18 	vmov	d8, sl, fp
 8006c8c:	9018      	str	r0, [sp, #96]	; 0x60
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f43f aef6 	beq.w	8006a80 <_strtod_l+0x490>
 8006c94:	2101      	movs	r1, #1
 8006c96:	4620      	mov	r0, r4
 8006c98:	f001 fe92 	bl	80089c0 <__i2b>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f43f aeee 	beq.w	8006a80 <_strtod_l+0x490>
 8006ca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ca6:	9904      	ldr	r1, [sp, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bfab      	itete	ge
 8006cac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006cae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006cb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006cb2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006cb6:	bfac      	ite	ge
 8006cb8:	eb03 0902 	addge.w	r9, r3, r2
 8006cbc:	1ad7      	sublt	r7, r2, r3
 8006cbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cc0:	eba3 0801 	sub.w	r8, r3, r1
 8006cc4:	4490      	add	r8, r2
 8006cc6:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <_strtod_l+0x95c>)
 8006cc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ccc:	4598      	cmp	r8, r3
 8006cce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006cd2:	f280 80c7 	bge.w	8006e64 <_strtod_l+0x874>
 8006cd6:	eba3 0308 	sub.w	r3, r3, r8
 8006cda:	2b1f      	cmp	r3, #31
 8006cdc:	eba2 0203 	sub.w	r2, r2, r3
 8006ce0:	f04f 0101 	mov.w	r1, #1
 8006ce4:	f300 80b1 	bgt.w	8006e4a <_strtod_l+0x85a>
 8006ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cec:	930d      	str	r3, [sp, #52]	; 0x34
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9308      	str	r3, [sp, #32]
 8006cf2:	eb09 0802 	add.w	r8, r9, r2
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	45c1      	cmp	r9, r8
 8006cfa:	4417      	add	r7, r2
 8006cfc:	441f      	add	r7, r3
 8006cfe:	464b      	mov	r3, r9
 8006d00:	bfa8      	it	ge
 8006d02:	4643      	movge	r3, r8
 8006d04:	42bb      	cmp	r3, r7
 8006d06:	bfa8      	it	ge
 8006d08:	463b      	movge	r3, r7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfc2      	ittt	gt
 8006d0e:	eba8 0803 	subgt.w	r8, r8, r3
 8006d12:	1aff      	subgt	r7, r7, r3
 8006d14:	eba9 0903 	subgt.w	r9, r9, r3
 8006d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dd17      	ble.n	8006d4e <_strtod_l+0x75e>
 8006d1e:	4631      	mov	r1, r6
 8006d20:	461a      	mov	r2, r3
 8006d22:	4620      	mov	r0, r4
 8006d24:	f001 ff0c 	bl	8008b40 <__pow5mult>
 8006d28:	4606      	mov	r6, r0
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	f43f aea8 	beq.w	8006a80 <_strtod_l+0x490>
 8006d30:	4601      	mov	r1, r0
 8006d32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d34:	4620      	mov	r0, r4
 8006d36:	f001 fe59 	bl	80089ec <__multiply>
 8006d3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f43f ae9f 	beq.w	8006a80 <_strtod_l+0x490>
 8006d42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d44:	4620      	mov	r0, r4
 8006d46:	f001 fd39 	bl	80087bc <_Bfree>
 8006d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d4c:	9318      	str	r3, [sp, #96]	; 0x60
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	f300 808c 	bgt.w	8006e6e <_strtod_l+0x87e>
 8006d56:	9b06      	ldr	r3, [sp, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dd08      	ble.n	8006d6e <_strtod_l+0x77e>
 8006d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d5e:	9905      	ldr	r1, [sp, #20]
 8006d60:	4620      	mov	r0, r4
 8006d62:	f001 feed 	bl	8008b40 <__pow5mult>
 8006d66:	9005      	str	r0, [sp, #20]
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f43f ae89 	beq.w	8006a80 <_strtod_l+0x490>
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	dd08      	ble.n	8006d84 <_strtod_l+0x794>
 8006d72:	9905      	ldr	r1, [sp, #20]
 8006d74:	463a      	mov	r2, r7
 8006d76:	4620      	mov	r0, r4
 8006d78:	f001 ff3c 	bl	8008bf4 <__lshift>
 8006d7c:	9005      	str	r0, [sp, #20]
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f43f ae7e 	beq.w	8006a80 <_strtod_l+0x490>
 8006d84:	f1b9 0f00 	cmp.w	r9, #0
 8006d88:	dd08      	ble.n	8006d9c <_strtod_l+0x7ac>
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	464a      	mov	r2, r9
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f001 ff30 	bl	8008bf4 <__lshift>
 8006d94:	4606      	mov	r6, r0
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f43f ae72 	beq.w	8006a80 <_strtod_l+0x490>
 8006d9c:	9a05      	ldr	r2, [sp, #20]
 8006d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 ffb3 	bl	8008d0c <__mdiff>
 8006da6:	4605      	mov	r5, r0
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f43f ae69 	beq.w	8006a80 <_strtod_l+0x490>
 8006dae:	68c3      	ldr	r3, [r0, #12]
 8006db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db2:	2300      	movs	r3, #0
 8006db4:	60c3      	str	r3, [r0, #12]
 8006db6:	4631      	mov	r1, r6
 8006db8:	f001 ff8c 	bl	8008cd4 <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	da60      	bge.n	8006e82 <_strtod_l+0x892>
 8006dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc2:	ea53 030a 	orrs.w	r3, r3, sl
 8006dc6:	f040 8082 	bne.w	8006ece <_strtod_l+0x8de>
 8006dca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d17d      	bne.n	8006ece <_strtod_l+0x8de>
 8006dd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dd6:	0d1b      	lsrs	r3, r3, #20
 8006dd8:	051b      	lsls	r3, r3, #20
 8006dda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006dde:	d976      	bls.n	8006ece <_strtod_l+0x8de>
 8006de0:	696b      	ldr	r3, [r5, #20]
 8006de2:	b913      	cbnz	r3, 8006dea <_strtod_l+0x7fa>
 8006de4:	692b      	ldr	r3, [r5, #16]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	dd71      	ble.n	8006ece <_strtod_l+0x8de>
 8006dea:	4629      	mov	r1, r5
 8006dec:	2201      	movs	r2, #1
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 ff00 	bl	8008bf4 <__lshift>
 8006df4:	4631      	mov	r1, r6
 8006df6:	4605      	mov	r5, r0
 8006df8:	f001 ff6c 	bl	8008cd4 <__mcmp>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	dd66      	ble.n	8006ece <_strtod_l+0x8de>
 8006e00:	9904      	ldr	r1, [sp, #16]
 8006e02:	4a53      	ldr	r2, [pc, #332]	; (8006f50 <_strtod_l+0x960>)
 8006e04:	465b      	mov	r3, fp
 8006e06:	2900      	cmp	r1, #0
 8006e08:	f000 8081 	beq.w	8006f0e <_strtod_l+0x91e>
 8006e0c:	ea02 010b 	and.w	r1, r2, fp
 8006e10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e14:	dc7b      	bgt.n	8006f0e <_strtod_l+0x91e>
 8006e16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e1a:	f77f aea9 	ble.w	8006b70 <_strtod_l+0x580>
 8006e1e:	4b4d      	ldr	r3, [pc, #308]	; (8006f54 <_strtod_l+0x964>)
 8006e20:	4650      	mov	r0, sl
 8006e22:	4659      	mov	r1, fp
 8006e24:	2200      	movs	r2, #0
 8006e26:	f7f9 fbef 	bl	8000608 <__aeabi_dmul>
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4303      	orrs	r3, r0
 8006e2e:	bf08      	it	eq
 8006e30:	2322      	moveq	r3, #34	; 0x22
 8006e32:	4682      	mov	sl, r0
 8006e34:	468b      	mov	fp, r1
 8006e36:	bf08      	it	eq
 8006e38:	6023      	streq	r3, [r4, #0]
 8006e3a:	e62b      	b.n	8006a94 <_strtod_l+0x4a4>
 8006e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	ea03 0a0a 	and.w	sl, r3, sl
 8006e48:	e6e3      	b.n	8006c12 <_strtod_l+0x622>
 8006e4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006e4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006e52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006e56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006e5a:	fa01 f308 	lsl.w	r3, r1, r8
 8006e5e:	9308      	str	r3, [sp, #32]
 8006e60:	910d      	str	r1, [sp, #52]	; 0x34
 8006e62:	e746      	b.n	8006cf2 <_strtod_l+0x702>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9308      	str	r3, [sp, #32]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e6c:	e741      	b.n	8006cf2 <_strtod_l+0x702>
 8006e6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e70:	4642      	mov	r2, r8
 8006e72:	4620      	mov	r0, r4
 8006e74:	f001 febe 	bl	8008bf4 <__lshift>
 8006e78:	9018      	str	r0, [sp, #96]	; 0x60
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f47f af6b 	bne.w	8006d56 <_strtod_l+0x766>
 8006e80:	e5fe      	b.n	8006a80 <_strtod_l+0x490>
 8006e82:	465f      	mov	r7, fp
 8006e84:	d16e      	bne.n	8006f64 <_strtod_l+0x974>
 8006e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e8c:	b342      	cbz	r2, 8006ee0 <_strtod_l+0x8f0>
 8006e8e:	4a32      	ldr	r2, [pc, #200]	; (8006f58 <_strtod_l+0x968>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d128      	bne.n	8006ee6 <_strtod_l+0x8f6>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	4651      	mov	r1, sl
 8006e98:	b1eb      	cbz	r3, 8006ed6 <_strtod_l+0x8e6>
 8006e9a:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <_strtod_l+0x960>)
 8006e9c:	403b      	ands	r3, r7
 8006e9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	d819      	bhi.n	8006edc <_strtod_l+0x8ec>
 8006ea8:	0d1b      	lsrs	r3, r3, #20
 8006eaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	4299      	cmp	r1, r3
 8006eb4:	d117      	bne.n	8006ee6 <_strtod_l+0x8f6>
 8006eb6:	4b29      	ldr	r3, [pc, #164]	; (8006f5c <_strtod_l+0x96c>)
 8006eb8:	429f      	cmp	r7, r3
 8006eba:	d102      	bne.n	8006ec2 <_strtod_l+0x8d2>
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	f43f addf 	beq.w	8006a80 <_strtod_l+0x490>
 8006ec2:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <_strtod_l+0x960>)
 8006ec4:	403b      	ands	r3, r7
 8006ec6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006eca:	f04f 0a00 	mov.w	sl, #0
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1a4      	bne.n	8006e1e <_strtod_l+0x82e>
 8006ed4:	e5de      	b.n	8006a94 <_strtod_l+0x4a4>
 8006ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eda:	e7ea      	b.n	8006eb2 <_strtod_l+0x8c2>
 8006edc:	4613      	mov	r3, r2
 8006ede:	e7e8      	b.n	8006eb2 <_strtod_l+0x8c2>
 8006ee0:	ea53 030a 	orrs.w	r3, r3, sl
 8006ee4:	d08c      	beq.n	8006e00 <_strtod_l+0x810>
 8006ee6:	9b08      	ldr	r3, [sp, #32]
 8006ee8:	b1db      	cbz	r3, 8006f22 <_strtod_l+0x932>
 8006eea:	423b      	tst	r3, r7
 8006eec:	d0ef      	beq.n	8006ece <_strtod_l+0x8de>
 8006eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef0:	9a04      	ldr	r2, [sp, #16]
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	b1c3      	cbz	r3, 8006f2a <_strtod_l+0x93a>
 8006ef8:	f7ff fb5c 	bl	80065b4 <sulp>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	ec51 0b18 	vmov	r0, r1, d8
 8006f04:	f7f9 f9ca 	bl	800029c <__adddf3>
 8006f08:	4682      	mov	sl, r0
 8006f0a:	468b      	mov	fp, r1
 8006f0c:	e7df      	b.n	8006ece <_strtod_l+0x8de>
 8006f0e:	4013      	ands	r3, r2
 8006f10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f1c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f20:	e7d5      	b.n	8006ece <_strtod_l+0x8de>
 8006f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f24:	ea13 0f0a 	tst.w	r3, sl
 8006f28:	e7e0      	b.n	8006eec <_strtod_l+0x8fc>
 8006f2a:	f7ff fb43 	bl	80065b4 <sulp>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	ec51 0b18 	vmov	r0, r1, d8
 8006f36:	f7f9 f9af 	bl	8000298 <__aeabi_dsub>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4682      	mov	sl, r0
 8006f40:	468b      	mov	fp, r1
 8006f42:	f7f9 fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d0c1      	beq.n	8006ece <_strtod_l+0x8de>
 8006f4a:	e611      	b.n	8006b70 <_strtod_l+0x580>
 8006f4c:	fffffc02 	.word	0xfffffc02
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	39500000 	.word	0x39500000
 8006f58:	000fffff 	.word	0x000fffff
 8006f5c:	7fefffff 	.word	0x7fefffff
 8006f60:	0800a200 	.word	0x0800a200
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	f002 f832 	bl	8008fd0 <__ratio>
 8006f6c:	ec59 8b10 	vmov	r8, r9, d0
 8006f70:	ee10 0a10 	vmov	r0, s0
 8006f74:	2200      	movs	r2, #0
 8006f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	f7f9 fdc0 	bl	8000b00 <__aeabi_dcmple>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d07a      	beq.n	800707a <_strtod_l+0xa8a>
 8006f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04a      	beq.n	8007020 <_strtod_l+0xa30>
 8006f8a:	4b95      	ldr	r3, [pc, #596]	; (80071e0 <_strtod_l+0xbf0>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80071e0 <_strtod_l+0xbf0>
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	4b92      	ldr	r3, [pc, #584]	; (80071e4 <_strtod_l+0xbf4>)
 8006f9c:	403b      	ands	r3, r7
 8006f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8006fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fa2:	4b91      	ldr	r3, [pc, #580]	; (80071e8 <_strtod_l+0xbf8>)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	f040 80b0 	bne.w	800710a <_strtod_l+0xb1a>
 8006faa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006fb2:	ec4b ab10 	vmov	d0, sl, fp
 8006fb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fba:	f001 ff31 	bl	8008e20 <__ulp>
 8006fbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fc2:	ec53 2b10 	vmov	r2, r3, d0
 8006fc6:	f7f9 fb1f 	bl	8000608 <__aeabi_dmul>
 8006fca:	4652      	mov	r2, sl
 8006fcc:	465b      	mov	r3, fp
 8006fce:	f7f9 f965 	bl	800029c <__adddf3>
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4983      	ldr	r1, [pc, #524]	; (80071e4 <_strtod_l+0xbf4>)
 8006fd6:	4a85      	ldr	r2, [pc, #532]	; (80071ec <_strtod_l+0xbfc>)
 8006fd8:	4019      	ands	r1, r3
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	4682      	mov	sl, r0
 8006fde:	d960      	bls.n	80070a2 <_strtod_l+0xab2>
 8006fe0:	ee18 3a90 	vmov	r3, s17
 8006fe4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d104      	bne.n	8006ff6 <_strtod_l+0xa06>
 8006fec:	ee18 3a10 	vmov	r3, s16
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	f43f ad45 	beq.w	8006a80 <_strtod_l+0x490>
 8006ff6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80071f8 <_strtod_l+0xc08>
 8006ffa:	f04f 3aff 	mov.w	sl, #4294967295
 8006ffe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007000:	4620      	mov	r0, r4
 8007002:	f001 fbdb 	bl	80087bc <_Bfree>
 8007006:	9905      	ldr	r1, [sp, #20]
 8007008:	4620      	mov	r0, r4
 800700a:	f001 fbd7 	bl	80087bc <_Bfree>
 800700e:	4631      	mov	r1, r6
 8007010:	4620      	mov	r0, r4
 8007012:	f001 fbd3 	bl	80087bc <_Bfree>
 8007016:	4629      	mov	r1, r5
 8007018:	4620      	mov	r0, r4
 800701a:	f001 fbcf 	bl	80087bc <_Bfree>
 800701e:	e61a      	b.n	8006c56 <_strtod_l+0x666>
 8007020:	f1ba 0f00 	cmp.w	sl, #0
 8007024:	d11b      	bne.n	800705e <_strtod_l+0xa6e>
 8007026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800702a:	b9f3      	cbnz	r3, 800706a <_strtod_l+0xa7a>
 800702c:	4b6c      	ldr	r3, [pc, #432]	; (80071e0 <_strtod_l+0xbf0>)
 800702e:	2200      	movs	r2, #0
 8007030:	4640      	mov	r0, r8
 8007032:	4649      	mov	r1, r9
 8007034:	f7f9 fd5a 	bl	8000aec <__aeabi_dcmplt>
 8007038:	b9d0      	cbnz	r0, 8007070 <_strtod_l+0xa80>
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	4b6c      	ldr	r3, [pc, #432]	; (80071f0 <_strtod_l+0xc00>)
 8007040:	2200      	movs	r2, #0
 8007042:	f7f9 fae1 	bl	8000608 <__aeabi_dmul>
 8007046:	4680      	mov	r8, r0
 8007048:	4689      	mov	r9, r1
 800704a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800704e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007052:	9315      	str	r3, [sp, #84]	; 0x54
 8007054:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007058:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800705c:	e79d      	b.n	8006f9a <_strtod_l+0x9aa>
 800705e:	f1ba 0f01 	cmp.w	sl, #1
 8007062:	d102      	bne.n	800706a <_strtod_l+0xa7a>
 8007064:	2f00      	cmp	r7, #0
 8007066:	f43f ad83 	beq.w	8006b70 <_strtod_l+0x580>
 800706a:	4b62      	ldr	r3, [pc, #392]	; (80071f4 <_strtod_l+0xc04>)
 800706c:	2200      	movs	r2, #0
 800706e:	e78e      	b.n	8006f8e <_strtod_l+0x99e>
 8007070:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80071f0 <_strtod_l+0xc00>
 8007074:	f04f 0800 	mov.w	r8, #0
 8007078:	e7e7      	b.n	800704a <_strtod_l+0xa5a>
 800707a:	4b5d      	ldr	r3, [pc, #372]	; (80071f0 <_strtod_l+0xc00>)
 800707c:	4640      	mov	r0, r8
 800707e:	4649      	mov	r1, r9
 8007080:	2200      	movs	r2, #0
 8007082:	f7f9 fac1 	bl	8000608 <__aeabi_dmul>
 8007086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007088:	4680      	mov	r8, r0
 800708a:	4689      	mov	r9, r1
 800708c:	b933      	cbnz	r3, 800709c <_strtod_l+0xaac>
 800708e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007092:	900e      	str	r0, [sp, #56]	; 0x38
 8007094:	930f      	str	r3, [sp, #60]	; 0x3c
 8007096:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800709a:	e7dd      	b.n	8007058 <_strtod_l+0xa68>
 800709c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80070a0:	e7f9      	b.n	8007096 <_strtod_l+0xaa6>
 80070a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1a8      	bne.n	8006ffe <_strtod_l+0xa0e>
 80070ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070b2:	0d1b      	lsrs	r3, r3, #20
 80070b4:	051b      	lsls	r3, r3, #20
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d1a1      	bne.n	8006ffe <_strtod_l+0xa0e>
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 fe03 	bl	8000cc8 <__aeabi_d2lz>
 80070c2:	f7f9 fa73 	bl	80005ac <__aeabi_l2d>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4640      	mov	r0, r8
 80070cc:	4649      	mov	r1, r9
 80070ce:	f7f9 f8e3 	bl	8000298 <__aeabi_dsub>
 80070d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070d8:	ea43 030a 	orr.w	r3, r3, sl
 80070dc:	4313      	orrs	r3, r2
 80070de:	4680      	mov	r8, r0
 80070e0:	4689      	mov	r9, r1
 80070e2:	d055      	beq.n	8007190 <_strtod_l+0xba0>
 80070e4:	a336      	add	r3, pc, #216	; (adr r3, 80071c0 <_strtod_l+0xbd0>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 fcff 	bl	8000aec <__aeabi_dcmplt>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f47f acd0 	bne.w	8006a94 <_strtod_l+0x4a4>
 80070f4:	a334      	add	r3, pc, #208	; (adr r3, 80071c8 <_strtod_l+0xbd8>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fd13 	bl	8000b28 <__aeabi_dcmpgt>
 8007102:	2800      	cmp	r0, #0
 8007104:	f43f af7b 	beq.w	8006ffe <_strtod_l+0xa0e>
 8007108:	e4c4      	b.n	8006a94 <_strtod_l+0x4a4>
 800710a:	9b04      	ldr	r3, [sp, #16]
 800710c:	b333      	cbz	r3, 800715c <_strtod_l+0xb6c>
 800710e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007110:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007114:	d822      	bhi.n	800715c <_strtod_l+0xb6c>
 8007116:	a32e      	add	r3, pc, #184	; (adr r3, 80071d0 <_strtod_l+0xbe0>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fcee 	bl	8000b00 <__aeabi_dcmple>
 8007124:	b1a0      	cbz	r0, 8007150 <_strtod_l+0xb60>
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	f7f9 fd45 	bl	8000bb8 <__aeabi_d2uiz>
 800712e:	2801      	cmp	r0, #1
 8007130:	bf38      	it	cc
 8007132:	2001      	movcc	r0, #1
 8007134:	f7f9 f9ee 	bl	8000514 <__aeabi_ui2d>
 8007138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800713a:	4680      	mov	r8, r0
 800713c:	4689      	mov	r9, r1
 800713e:	bb23      	cbnz	r3, 800718a <_strtod_l+0xb9a>
 8007140:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007144:	9010      	str	r0, [sp, #64]	; 0x40
 8007146:	9311      	str	r3, [sp, #68]	; 0x44
 8007148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800714c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007154:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	9309      	str	r3, [sp, #36]	; 0x24
 800715c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007160:	eeb0 0a48 	vmov.f32	s0, s16
 8007164:	eef0 0a68 	vmov.f32	s1, s17
 8007168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800716c:	f001 fe58 	bl	8008e20 <__ulp>
 8007170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007174:	ec53 2b10 	vmov	r2, r3, d0
 8007178:	f7f9 fa46 	bl	8000608 <__aeabi_dmul>
 800717c:	ec53 2b18 	vmov	r2, r3, d8
 8007180:	f7f9 f88c 	bl	800029c <__adddf3>
 8007184:	4682      	mov	sl, r0
 8007186:	468b      	mov	fp, r1
 8007188:	e78d      	b.n	80070a6 <_strtod_l+0xab6>
 800718a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800718e:	e7db      	b.n	8007148 <_strtod_l+0xb58>
 8007190:	a311      	add	r3, pc, #68	; (adr r3, 80071d8 <_strtod_l+0xbe8>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f7f9 fca9 	bl	8000aec <__aeabi_dcmplt>
 800719a:	e7b2      	b.n	8007102 <_strtod_l+0xb12>
 800719c:	2300      	movs	r3, #0
 800719e:	930a      	str	r3, [sp, #40]	; 0x28
 80071a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	f7ff ba6b 	b.w	8006680 <_strtod_l+0x90>
 80071aa:	2a65      	cmp	r2, #101	; 0x65
 80071ac:	f43f ab5f 	beq.w	800686e <_strtod_l+0x27e>
 80071b0:	2a45      	cmp	r2, #69	; 0x45
 80071b2:	f43f ab5c 	beq.w	800686e <_strtod_l+0x27e>
 80071b6:	2301      	movs	r3, #1
 80071b8:	f7ff bb94 	b.w	80068e4 <_strtod_l+0x2f4>
 80071bc:	f3af 8000 	nop.w
 80071c0:	94a03595 	.word	0x94a03595
 80071c4:	3fdfffff 	.word	0x3fdfffff
 80071c8:	35afe535 	.word	0x35afe535
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	ffc00000 	.word	0xffc00000
 80071d4:	41dfffff 	.word	0x41dfffff
 80071d8:	94a03595 	.word	0x94a03595
 80071dc:	3fcfffff 	.word	0x3fcfffff
 80071e0:	3ff00000 	.word	0x3ff00000
 80071e4:	7ff00000 	.word	0x7ff00000
 80071e8:	7fe00000 	.word	0x7fe00000
 80071ec:	7c9fffff 	.word	0x7c9fffff
 80071f0:	3fe00000 	.word	0x3fe00000
 80071f4:	bff00000 	.word	0xbff00000
 80071f8:	7fefffff 	.word	0x7fefffff

080071fc <_strtod_r>:
 80071fc:	4b01      	ldr	r3, [pc, #4]	; (8007204 <_strtod_r+0x8>)
 80071fe:	f7ff b9f7 	b.w	80065f0 <_strtod_l>
 8007202:	bf00      	nop
 8007204:	2000018c 	.word	0x2000018c

08007208 <_strtol_l.constprop.0>:
 8007208:	2b01      	cmp	r3, #1
 800720a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720e:	d001      	beq.n	8007214 <_strtol_l.constprop.0+0xc>
 8007210:	2b24      	cmp	r3, #36	; 0x24
 8007212:	d906      	bls.n	8007222 <_strtol_l.constprop.0+0x1a>
 8007214:	f7fe fafc 	bl	8005810 <__errno>
 8007218:	2316      	movs	r3, #22
 800721a:	6003      	str	r3, [r0, #0]
 800721c:	2000      	movs	r0, #0
 800721e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007222:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007308 <_strtol_l.constprop.0+0x100>
 8007226:	460d      	mov	r5, r1
 8007228:	462e      	mov	r6, r5
 800722a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800722e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007232:	f017 0708 	ands.w	r7, r7, #8
 8007236:	d1f7      	bne.n	8007228 <_strtol_l.constprop.0+0x20>
 8007238:	2c2d      	cmp	r4, #45	; 0x2d
 800723a:	d132      	bne.n	80072a2 <_strtol_l.constprop.0+0x9a>
 800723c:	782c      	ldrb	r4, [r5, #0]
 800723e:	2701      	movs	r7, #1
 8007240:	1cb5      	adds	r5, r6, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d05b      	beq.n	80072fe <_strtol_l.constprop.0+0xf6>
 8007246:	2b10      	cmp	r3, #16
 8007248:	d109      	bne.n	800725e <_strtol_l.constprop.0+0x56>
 800724a:	2c30      	cmp	r4, #48	; 0x30
 800724c:	d107      	bne.n	800725e <_strtol_l.constprop.0+0x56>
 800724e:	782c      	ldrb	r4, [r5, #0]
 8007250:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007254:	2c58      	cmp	r4, #88	; 0x58
 8007256:	d14d      	bne.n	80072f4 <_strtol_l.constprop.0+0xec>
 8007258:	786c      	ldrb	r4, [r5, #1]
 800725a:	2310      	movs	r3, #16
 800725c:	3502      	adds	r5, #2
 800725e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007262:	f108 38ff 	add.w	r8, r8, #4294967295
 8007266:	f04f 0c00 	mov.w	ip, #0
 800726a:	fbb8 f9f3 	udiv	r9, r8, r3
 800726e:	4666      	mov	r6, ip
 8007270:	fb03 8a19 	mls	sl, r3, r9, r8
 8007274:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007278:	f1be 0f09 	cmp.w	lr, #9
 800727c:	d816      	bhi.n	80072ac <_strtol_l.constprop.0+0xa4>
 800727e:	4674      	mov	r4, lr
 8007280:	42a3      	cmp	r3, r4
 8007282:	dd24      	ble.n	80072ce <_strtol_l.constprop.0+0xc6>
 8007284:	f1bc 0f00 	cmp.w	ip, #0
 8007288:	db1e      	blt.n	80072c8 <_strtol_l.constprop.0+0xc0>
 800728a:	45b1      	cmp	r9, r6
 800728c:	d31c      	bcc.n	80072c8 <_strtol_l.constprop.0+0xc0>
 800728e:	d101      	bne.n	8007294 <_strtol_l.constprop.0+0x8c>
 8007290:	45a2      	cmp	sl, r4
 8007292:	db19      	blt.n	80072c8 <_strtol_l.constprop.0+0xc0>
 8007294:	fb06 4603 	mla	r6, r6, r3, r4
 8007298:	f04f 0c01 	mov.w	ip, #1
 800729c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072a0:	e7e8      	b.n	8007274 <_strtol_l.constprop.0+0x6c>
 80072a2:	2c2b      	cmp	r4, #43	; 0x2b
 80072a4:	bf04      	itt	eq
 80072a6:	782c      	ldrbeq	r4, [r5, #0]
 80072a8:	1cb5      	addeq	r5, r6, #2
 80072aa:	e7ca      	b.n	8007242 <_strtol_l.constprop.0+0x3a>
 80072ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80072b0:	f1be 0f19 	cmp.w	lr, #25
 80072b4:	d801      	bhi.n	80072ba <_strtol_l.constprop.0+0xb2>
 80072b6:	3c37      	subs	r4, #55	; 0x37
 80072b8:	e7e2      	b.n	8007280 <_strtol_l.constprop.0+0x78>
 80072ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80072be:	f1be 0f19 	cmp.w	lr, #25
 80072c2:	d804      	bhi.n	80072ce <_strtol_l.constprop.0+0xc6>
 80072c4:	3c57      	subs	r4, #87	; 0x57
 80072c6:	e7db      	b.n	8007280 <_strtol_l.constprop.0+0x78>
 80072c8:	f04f 3cff 	mov.w	ip, #4294967295
 80072cc:	e7e6      	b.n	800729c <_strtol_l.constprop.0+0x94>
 80072ce:	f1bc 0f00 	cmp.w	ip, #0
 80072d2:	da05      	bge.n	80072e0 <_strtol_l.constprop.0+0xd8>
 80072d4:	2322      	movs	r3, #34	; 0x22
 80072d6:	6003      	str	r3, [r0, #0]
 80072d8:	4646      	mov	r6, r8
 80072da:	b942      	cbnz	r2, 80072ee <_strtol_l.constprop.0+0xe6>
 80072dc:	4630      	mov	r0, r6
 80072de:	e79e      	b.n	800721e <_strtol_l.constprop.0+0x16>
 80072e0:	b107      	cbz	r7, 80072e4 <_strtol_l.constprop.0+0xdc>
 80072e2:	4276      	negs	r6, r6
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	d0f9      	beq.n	80072dc <_strtol_l.constprop.0+0xd4>
 80072e8:	f1bc 0f00 	cmp.w	ip, #0
 80072ec:	d000      	beq.n	80072f0 <_strtol_l.constprop.0+0xe8>
 80072ee:	1e69      	subs	r1, r5, #1
 80072f0:	6011      	str	r1, [r2, #0]
 80072f2:	e7f3      	b.n	80072dc <_strtol_l.constprop.0+0xd4>
 80072f4:	2430      	movs	r4, #48	; 0x30
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1b1      	bne.n	800725e <_strtol_l.constprop.0+0x56>
 80072fa:	2308      	movs	r3, #8
 80072fc:	e7af      	b.n	800725e <_strtol_l.constprop.0+0x56>
 80072fe:	2c30      	cmp	r4, #48	; 0x30
 8007300:	d0a5      	beq.n	800724e <_strtol_l.constprop.0+0x46>
 8007302:	230a      	movs	r3, #10
 8007304:	e7ab      	b.n	800725e <_strtol_l.constprop.0+0x56>
 8007306:	bf00      	nop
 8007308:	0800a229 	.word	0x0800a229

0800730c <_strtol_r>:
 800730c:	f7ff bf7c 	b.w	8007208 <_strtol_l.constprop.0>

08007310 <quorem>:
 8007310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	6903      	ldr	r3, [r0, #16]
 8007316:	690c      	ldr	r4, [r1, #16]
 8007318:	42a3      	cmp	r3, r4
 800731a:	4607      	mov	r7, r0
 800731c:	f2c0 8081 	blt.w	8007422 <quorem+0x112>
 8007320:	3c01      	subs	r4, #1
 8007322:	f101 0814 	add.w	r8, r1, #20
 8007326:	f100 0514 	add.w	r5, r0, #20
 800732a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007338:	3301      	adds	r3, #1
 800733a:	429a      	cmp	r2, r3
 800733c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007340:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007344:	fbb2 f6f3 	udiv	r6, r2, r3
 8007348:	d331      	bcc.n	80073ae <quorem+0x9e>
 800734a:	f04f 0e00 	mov.w	lr, #0
 800734e:	4640      	mov	r0, r8
 8007350:	46ac      	mov	ip, r5
 8007352:	46f2      	mov	sl, lr
 8007354:	f850 2b04 	ldr.w	r2, [r0], #4
 8007358:	b293      	uxth	r3, r2
 800735a:	fb06 e303 	mla	r3, r6, r3, lr
 800735e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007362:	b29b      	uxth	r3, r3
 8007364:	ebaa 0303 	sub.w	r3, sl, r3
 8007368:	f8dc a000 	ldr.w	sl, [ip]
 800736c:	0c12      	lsrs	r2, r2, #16
 800736e:	fa13 f38a 	uxtah	r3, r3, sl
 8007372:	fb06 e202 	mla	r2, r6, r2, lr
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	9b00      	ldr	r3, [sp, #0]
 800737a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800737e:	b292      	uxth	r2, r2
 8007380:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007388:	f8bd 3000 	ldrh.w	r3, [sp]
 800738c:	4581      	cmp	r9, r0
 800738e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007392:	f84c 3b04 	str.w	r3, [ip], #4
 8007396:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800739a:	d2db      	bcs.n	8007354 <quorem+0x44>
 800739c:	f855 300b 	ldr.w	r3, [r5, fp]
 80073a0:	b92b      	cbnz	r3, 80073ae <quorem+0x9e>
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	3b04      	subs	r3, #4
 80073a6:	429d      	cmp	r5, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	d32e      	bcc.n	800740a <quorem+0xfa>
 80073ac:	613c      	str	r4, [r7, #16]
 80073ae:	4638      	mov	r0, r7
 80073b0:	f001 fc90 	bl	8008cd4 <__mcmp>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	db24      	blt.n	8007402 <quorem+0xf2>
 80073b8:	3601      	adds	r6, #1
 80073ba:	4628      	mov	r0, r5
 80073bc:	f04f 0c00 	mov.w	ip, #0
 80073c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80073c4:	f8d0 e000 	ldr.w	lr, [r0]
 80073c8:	b293      	uxth	r3, r2
 80073ca:	ebac 0303 	sub.w	r3, ip, r3
 80073ce:	0c12      	lsrs	r2, r2, #16
 80073d0:	fa13 f38e 	uxtah	r3, r3, lr
 80073d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073dc:	b29b      	uxth	r3, r3
 80073de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073e2:	45c1      	cmp	r9, r8
 80073e4:	f840 3b04 	str.w	r3, [r0], #4
 80073e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073ec:	d2e8      	bcs.n	80073c0 <quorem+0xb0>
 80073ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073f6:	b922      	cbnz	r2, 8007402 <quorem+0xf2>
 80073f8:	3b04      	subs	r3, #4
 80073fa:	429d      	cmp	r5, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	d30a      	bcc.n	8007416 <quorem+0x106>
 8007400:	613c      	str	r4, [r7, #16]
 8007402:	4630      	mov	r0, r6
 8007404:	b003      	add	sp, #12
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	3b04      	subs	r3, #4
 800740e:	2a00      	cmp	r2, #0
 8007410:	d1cc      	bne.n	80073ac <quorem+0x9c>
 8007412:	3c01      	subs	r4, #1
 8007414:	e7c7      	b.n	80073a6 <quorem+0x96>
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	3b04      	subs	r3, #4
 800741a:	2a00      	cmp	r2, #0
 800741c:	d1f0      	bne.n	8007400 <quorem+0xf0>
 800741e:	3c01      	subs	r4, #1
 8007420:	e7eb      	b.n	80073fa <quorem+0xea>
 8007422:	2000      	movs	r0, #0
 8007424:	e7ee      	b.n	8007404 <quorem+0xf4>
	...

08007428 <_dtoa_r>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	ed2d 8b04 	vpush	{d8-d9}
 8007430:	ec57 6b10 	vmov	r6, r7, d0
 8007434:	b093      	sub	sp, #76	; 0x4c
 8007436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007438:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800743c:	9106      	str	r1, [sp, #24]
 800743e:	ee10 aa10 	vmov	sl, s0
 8007442:	4604      	mov	r4, r0
 8007444:	9209      	str	r2, [sp, #36]	; 0x24
 8007446:	930c      	str	r3, [sp, #48]	; 0x30
 8007448:	46bb      	mov	fp, r7
 800744a:	b975      	cbnz	r5, 800746a <_dtoa_r+0x42>
 800744c:	2010      	movs	r0, #16
 800744e:	f001 f94d 	bl	80086ec <malloc>
 8007452:	4602      	mov	r2, r0
 8007454:	6260      	str	r0, [r4, #36]	; 0x24
 8007456:	b920      	cbnz	r0, 8007462 <_dtoa_r+0x3a>
 8007458:	4ba7      	ldr	r3, [pc, #668]	; (80076f8 <_dtoa_r+0x2d0>)
 800745a:	21ea      	movs	r1, #234	; 0xea
 800745c:	48a7      	ldr	r0, [pc, #668]	; (80076fc <_dtoa_r+0x2d4>)
 800745e:	f002 f8bd 	bl	80095dc <__assert_func>
 8007462:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007466:	6005      	str	r5, [r0, #0]
 8007468:	60c5      	str	r5, [r0, #12]
 800746a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800746c:	6819      	ldr	r1, [r3, #0]
 800746e:	b151      	cbz	r1, 8007486 <_dtoa_r+0x5e>
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	604a      	str	r2, [r1, #4]
 8007474:	2301      	movs	r3, #1
 8007476:	4093      	lsls	r3, r2
 8007478:	608b      	str	r3, [r1, #8]
 800747a:	4620      	mov	r0, r4
 800747c:	f001 f99e 	bl	80087bc <_Bfree>
 8007480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	1e3b      	subs	r3, r7, #0
 8007488:	bfaa      	itet	ge
 800748a:	2300      	movge	r3, #0
 800748c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007490:	f8c8 3000 	strge.w	r3, [r8]
 8007494:	4b9a      	ldr	r3, [pc, #616]	; (8007700 <_dtoa_r+0x2d8>)
 8007496:	bfbc      	itt	lt
 8007498:	2201      	movlt	r2, #1
 800749a:	f8c8 2000 	strlt.w	r2, [r8]
 800749e:	ea33 030b 	bics.w	r3, r3, fp
 80074a2:	d11b      	bne.n	80074dc <_dtoa_r+0xb4>
 80074a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b0:	4333      	orrs	r3, r6
 80074b2:	f000 8592 	beq.w	8007fda <_dtoa_r+0xbb2>
 80074b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074b8:	b963      	cbnz	r3, 80074d4 <_dtoa_r+0xac>
 80074ba:	4b92      	ldr	r3, [pc, #584]	; (8007704 <_dtoa_r+0x2dc>)
 80074bc:	e022      	b.n	8007504 <_dtoa_r+0xdc>
 80074be:	4b92      	ldr	r3, [pc, #584]	; (8007708 <_dtoa_r+0x2e0>)
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	3308      	adds	r3, #8
 80074c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	9801      	ldr	r0, [sp, #4]
 80074ca:	b013      	add	sp, #76	; 0x4c
 80074cc:	ecbd 8b04 	vpop	{d8-d9}
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4b8b      	ldr	r3, [pc, #556]	; (8007704 <_dtoa_r+0x2dc>)
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	3303      	adds	r3, #3
 80074da:	e7f3      	b.n	80074c4 <_dtoa_r+0x9c>
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	4650      	mov	r0, sl
 80074e2:	4659      	mov	r1, fp
 80074e4:	f7f9 faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80074e8:	ec4b ab19 	vmov	d9, sl, fp
 80074ec:	4680      	mov	r8, r0
 80074ee:	b158      	cbz	r0, 8007508 <_dtoa_r+0xe0>
 80074f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074f2:	2301      	movs	r3, #1
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 856b 	beq.w	8007fd4 <_dtoa_r+0xbac>
 80074fe:	4883      	ldr	r0, [pc, #524]	; (800770c <_dtoa_r+0x2e4>)
 8007500:	6018      	str	r0, [r3, #0]
 8007502:	1e43      	subs	r3, r0, #1
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	e7df      	b.n	80074c8 <_dtoa_r+0xa0>
 8007508:	ec4b ab10 	vmov	d0, sl, fp
 800750c:	aa10      	add	r2, sp, #64	; 0x40
 800750e:	a911      	add	r1, sp, #68	; 0x44
 8007510:	4620      	mov	r0, r4
 8007512:	f001 fd01 	bl	8008f18 <__d2b>
 8007516:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800751a:	ee08 0a10 	vmov	s16, r0
 800751e:	2d00      	cmp	r5, #0
 8007520:	f000 8084 	beq.w	800762c <_dtoa_r+0x204>
 8007524:	ee19 3a90 	vmov	r3, s19
 8007528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800752c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007530:	4656      	mov	r6, sl
 8007532:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800753a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800753e:	4b74      	ldr	r3, [pc, #464]	; (8007710 <_dtoa_r+0x2e8>)
 8007540:	2200      	movs	r2, #0
 8007542:	4630      	mov	r0, r6
 8007544:	4639      	mov	r1, r7
 8007546:	f7f8 fea7 	bl	8000298 <__aeabi_dsub>
 800754a:	a365      	add	r3, pc, #404	; (adr r3, 80076e0 <_dtoa_r+0x2b8>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f7f9 f85a 	bl	8000608 <__aeabi_dmul>
 8007554:	a364      	add	r3, pc, #400	; (adr r3, 80076e8 <_dtoa_r+0x2c0>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f8 fe9f 	bl	800029c <__adddf3>
 800755e:	4606      	mov	r6, r0
 8007560:	4628      	mov	r0, r5
 8007562:	460f      	mov	r7, r1
 8007564:	f7f8 ffe6 	bl	8000534 <__aeabi_i2d>
 8007568:	a361      	add	r3, pc, #388	; (adr r3, 80076f0 <_dtoa_r+0x2c8>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f8 fe8f 	bl	800029c <__adddf3>
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	f7f9 faf1 	bl	8000b68 <__aeabi_d2iz>
 8007586:	2200      	movs	r2, #0
 8007588:	9000      	str	r0, [sp, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f9 faac 	bl	8000aec <__aeabi_dcmplt>
 8007594:	b150      	cbz	r0, 80075ac <_dtoa_r+0x184>
 8007596:	9800      	ldr	r0, [sp, #0]
 8007598:	f7f8 ffcc 	bl	8000534 <__aeabi_i2d>
 800759c:	4632      	mov	r2, r6
 800759e:	463b      	mov	r3, r7
 80075a0:	f7f9 fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80075a4:	b910      	cbnz	r0, 80075ac <_dtoa_r+0x184>
 80075a6:	9b00      	ldr	r3, [sp, #0]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	2b16      	cmp	r3, #22
 80075b0:	d85a      	bhi.n	8007668 <_dtoa_r+0x240>
 80075b2:	9a00      	ldr	r2, [sp, #0]
 80075b4:	4b57      	ldr	r3, [pc, #348]	; (8007714 <_dtoa_r+0x2ec>)
 80075b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	ec51 0b19 	vmov	r0, r1, d9
 80075c2:	f7f9 fa93 	bl	8000aec <__aeabi_dcmplt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d050      	beq.n	800766c <_dtoa_r+0x244>
 80075ca:	9b00      	ldr	r3, [sp, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	2300      	movs	r3, #0
 80075d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075d6:	1b5d      	subs	r5, r3, r5
 80075d8:	1e6b      	subs	r3, r5, #1
 80075da:	9305      	str	r3, [sp, #20]
 80075dc:	bf45      	ittet	mi
 80075de:	f1c5 0301 	rsbmi	r3, r5, #1
 80075e2:	9304      	strmi	r3, [sp, #16]
 80075e4:	2300      	movpl	r3, #0
 80075e6:	2300      	movmi	r3, #0
 80075e8:	bf4c      	ite	mi
 80075ea:	9305      	strmi	r3, [sp, #20]
 80075ec:	9304      	strpl	r3, [sp, #16]
 80075ee:	9b00      	ldr	r3, [sp, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db3d      	blt.n	8007670 <_dtoa_r+0x248>
 80075f4:	9b05      	ldr	r3, [sp, #20]
 80075f6:	9a00      	ldr	r2, [sp, #0]
 80075f8:	920a      	str	r2, [sp, #40]	; 0x28
 80075fa:	4413      	add	r3, r2
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	2300      	movs	r3, #0
 8007600:	9307      	str	r3, [sp, #28]
 8007602:	9b06      	ldr	r3, [sp, #24]
 8007604:	2b09      	cmp	r3, #9
 8007606:	f200 8089 	bhi.w	800771c <_dtoa_r+0x2f4>
 800760a:	2b05      	cmp	r3, #5
 800760c:	bfc4      	itt	gt
 800760e:	3b04      	subgt	r3, #4
 8007610:	9306      	strgt	r3, [sp, #24]
 8007612:	9b06      	ldr	r3, [sp, #24]
 8007614:	f1a3 0302 	sub.w	r3, r3, #2
 8007618:	bfcc      	ite	gt
 800761a:	2500      	movgt	r5, #0
 800761c:	2501      	movle	r5, #1
 800761e:	2b03      	cmp	r3, #3
 8007620:	f200 8087 	bhi.w	8007732 <_dtoa_r+0x30a>
 8007624:	e8df f003 	tbb	[pc, r3]
 8007628:	59383a2d 	.word	0x59383a2d
 800762c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007630:	441d      	add	r5, r3
 8007632:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007636:	2b20      	cmp	r3, #32
 8007638:	bfc1      	itttt	gt
 800763a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800763e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007642:	fa0b f303 	lslgt.w	r3, fp, r3
 8007646:	fa26 f000 	lsrgt.w	r0, r6, r0
 800764a:	bfda      	itte	le
 800764c:	f1c3 0320 	rsble	r3, r3, #32
 8007650:	fa06 f003 	lslle.w	r0, r6, r3
 8007654:	4318      	orrgt	r0, r3
 8007656:	f7f8 ff5d 	bl	8000514 <__aeabi_ui2d>
 800765a:	2301      	movs	r3, #1
 800765c:	4606      	mov	r6, r0
 800765e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007662:	3d01      	subs	r5, #1
 8007664:	930e      	str	r3, [sp, #56]	; 0x38
 8007666:	e76a      	b.n	800753e <_dtoa_r+0x116>
 8007668:	2301      	movs	r3, #1
 800766a:	e7b2      	b.n	80075d2 <_dtoa_r+0x1aa>
 800766c:	900b      	str	r0, [sp, #44]	; 0x2c
 800766e:	e7b1      	b.n	80075d4 <_dtoa_r+0x1ac>
 8007670:	9b04      	ldr	r3, [sp, #16]
 8007672:	9a00      	ldr	r2, [sp, #0]
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	4253      	negs	r3, r2
 800767a:	9307      	str	r3, [sp, #28]
 800767c:	2300      	movs	r3, #0
 800767e:	930a      	str	r3, [sp, #40]	; 0x28
 8007680:	e7bf      	b.n	8007602 <_dtoa_r+0x1da>
 8007682:	2300      	movs	r3, #0
 8007684:	9308      	str	r3, [sp, #32]
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	dc55      	bgt.n	8007738 <_dtoa_r+0x310>
 800768c:	2301      	movs	r3, #1
 800768e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007692:	461a      	mov	r2, r3
 8007694:	9209      	str	r2, [sp, #36]	; 0x24
 8007696:	e00c      	b.n	80076b2 <_dtoa_r+0x28a>
 8007698:	2301      	movs	r3, #1
 800769a:	e7f3      	b.n	8007684 <_dtoa_r+0x25c>
 800769c:	2300      	movs	r3, #0
 800769e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	9b00      	ldr	r3, [sp, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	9302      	str	r3, [sp, #8]
 80076a8:	3301      	adds	r3, #1
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	bfb8      	it	lt
 80076b0:	2301      	movlt	r3, #1
 80076b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076b4:	2200      	movs	r2, #0
 80076b6:	6042      	str	r2, [r0, #4]
 80076b8:	2204      	movs	r2, #4
 80076ba:	f102 0614 	add.w	r6, r2, #20
 80076be:	429e      	cmp	r6, r3
 80076c0:	6841      	ldr	r1, [r0, #4]
 80076c2:	d93d      	bls.n	8007740 <_dtoa_r+0x318>
 80076c4:	4620      	mov	r0, r4
 80076c6:	f001 f839 	bl	800873c <_Balloc>
 80076ca:	9001      	str	r0, [sp, #4]
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d13b      	bne.n	8007748 <_dtoa_r+0x320>
 80076d0:	4b11      	ldr	r3, [pc, #68]	; (8007718 <_dtoa_r+0x2f0>)
 80076d2:	4602      	mov	r2, r0
 80076d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076d8:	e6c0      	b.n	800745c <_dtoa_r+0x34>
 80076da:	2301      	movs	r3, #1
 80076dc:	e7df      	b.n	800769e <_dtoa_r+0x276>
 80076de:	bf00      	nop
 80076e0:	636f4361 	.word	0x636f4361
 80076e4:	3fd287a7 	.word	0x3fd287a7
 80076e8:	8b60c8b3 	.word	0x8b60c8b3
 80076ec:	3fc68a28 	.word	0x3fc68a28
 80076f0:	509f79fb 	.word	0x509f79fb
 80076f4:	3fd34413 	.word	0x3fd34413
 80076f8:	0800a336 	.word	0x0800a336
 80076fc:	0800a34d 	.word	0x0800a34d
 8007700:	7ff00000 	.word	0x7ff00000
 8007704:	0800a332 	.word	0x0800a332
 8007708:	0800a329 	.word	0x0800a329
 800770c:	0800a1a9 	.word	0x0800a1a9
 8007710:	3ff80000 	.word	0x3ff80000
 8007714:	0800a4b8 	.word	0x0800a4b8
 8007718:	0800a3a8 	.word	0x0800a3a8
 800771c:	2501      	movs	r5, #1
 800771e:	2300      	movs	r3, #0
 8007720:	9306      	str	r3, [sp, #24]
 8007722:	9508      	str	r5, [sp, #32]
 8007724:	f04f 33ff 	mov.w	r3, #4294967295
 8007728:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	2312      	movs	r3, #18
 8007730:	e7b0      	b.n	8007694 <_dtoa_r+0x26c>
 8007732:	2301      	movs	r3, #1
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	e7f5      	b.n	8007724 <_dtoa_r+0x2fc>
 8007738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800773e:	e7b8      	b.n	80076b2 <_dtoa_r+0x28a>
 8007740:	3101      	adds	r1, #1
 8007742:	6041      	str	r1, [r0, #4]
 8007744:	0052      	lsls	r2, r2, #1
 8007746:	e7b8      	b.n	80076ba <_dtoa_r+0x292>
 8007748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774a:	9a01      	ldr	r2, [sp, #4]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	9b03      	ldr	r3, [sp, #12]
 8007750:	2b0e      	cmp	r3, #14
 8007752:	f200 809d 	bhi.w	8007890 <_dtoa_r+0x468>
 8007756:	2d00      	cmp	r5, #0
 8007758:	f000 809a 	beq.w	8007890 <_dtoa_r+0x468>
 800775c:	9b00      	ldr	r3, [sp, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dd32      	ble.n	80077c8 <_dtoa_r+0x3a0>
 8007762:	4ab7      	ldr	r2, [pc, #732]	; (8007a40 <_dtoa_r+0x618>)
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800776c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007770:	9b00      	ldr	r3, [sp, #0]
 8007772:	05d8      	lsls	r0, r3, #23
 8007774:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007778:	d516      	bpl.n	80077a8 <_dtoa_r+0x380>
 800777a:	4bb2      	ldr	r3, [pc, #712]	; (8007a44 <_dtoa_r+0x61c>)
 800777c:	ec51 0b19 	vmov	r0, r1, d9
 8007780:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007784:	f7f9 f86a 	bl	800085c <__aeabi_ddiv>
 8007788:	f007 070f 	and.w	r7, r7, #15
 800778c:	4682      	mov	sl, r0
 800778e:	468b      	mov	fp, r1
 8007790:	2503      	movs	r5, #3
 8007792:	4eac      	ldr	r6, [pc, #688]	; (8007a44 <_dtoa_r+0x61c>)
 8007794:	b957      	cbnz	r7, 80077ac <_dtoa_r+0x384>
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	4650      	mov	r0, sl
 800779c:	4659      	mov	r1, fp
 800779e:	f7f9 f85d 	bl	800085c <__aeabi_ddiv>
 80077a2:	4682      	mov	sl, r0
 80077a4:	468b      	mov	fp, r1
 80077a6:	e028      	b.n	80077fa <_dtoa_r+0x3d2>
 80077a8:	2502      	movs	r5, #2
 80077aa:	e7f2      	b.n	8007792 <_dtoa_r+0x36a>
 80077ac:	07f9      	lsls	r1, r7, #31
 80077ae:	d508      	bpl.n	80077c2 <_dtoa_r+0x39a>
 80077b0:	4640      	mov	r0, r8
 80077b2:	4649      	mov	r1, r9
 80077b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077b8:	f7f8 ff26 	bl	8000608 <__aeabi_dmul>
 80077bc:	3501      	adds	r5, #1
 80077be:	4680      	mov	r8, r0
 80077c0:	4689      	mov	r9, r1
 80077c2:	107f      	asrs	r7, r7, #1
 80077c4:	3608      	adds	r6, #8
 80077c6:	e7e5      	b.n	8007794 <_dtoa_r+0x36c>
 80077c8:	f000 809b 	beq.w	8007902 <_dtoa_r+0x4da>
 80077cc:	9b00      	ldr	r3, [sp, #0]
 80077ce:	4f9d      	ldr	r7, [pc, #628]	; (8007a44 <_dtoa_r+0x61c>)
 80077d0:	425e      	negs	r6, r3
 80077d2:	4b9b      	ldr	r3, [pc, #620]	; (8007a40 <_dtoa_r+0x618>)
 80077d4:	f006 020f 	and.w	r2, r6, #15
 80077d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	ec51 0b19 	vmov	r0, r1, d9
 80077e4:	f7f8 ff10 	bl	8000608 <__aeabi_dmul>
 80077e8:	1136      	asrs	r6, r6, #4
 80077ea:	4682      	mov	sl, r0
 80077ec:	468b      	mov	fp, r1
 80077ee:	2300      	movs	r3, #0
 80077f0:	2502      	movs	r5, #2
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	d17a      	bne.n	80078ec <_dtoa_r+0x4c4>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d3      	bne.n	80077a2 <_dtoa_r+0x37a>
 80077fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8082 	beq.w	8007906 <_dtoa_r+0x4de>
 8007802:	4b91      	ldr	r3, [pc, #580]	; (8007a48 <_dtoa_r+0x620>)
 8007804:	2200      	movs	r2, #0
 8007806:	4650      	mov	r0, sl
 8007808:	4659      	mov	r1, fp
 800780a:	f7f9 f96f 	bl	8000aec <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	d079      	beq.n	8007906 <_dtoa_r+0x4de>
 8007812:	9b03      	ldr	r3, [sp, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d076      	beq.n	8007906 <_dtoa_r+0x4de>
 8007818:	9b02      	ldr	r3, [sp, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd36      	ble.n	800788c <_dtoa_r+0x464>
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	4650      	mov	r0, sl
 8007822:	4659      	mov	r1, fp
 8007824:	1e5f      	subs	r7, r3, #1
 8007826:	2200      	movs	r2, #0
 8007828:	4b88      	ldr	r3, [pc, #544]	; (8007a4c <_dtoa_r+0x624>)
 800782a:	f7f8 feed 	bl	8000608 <__aeabi_dmul>
 800782e:	9e02      	ldr	r6, [sp, #8]
 8007830:	4682      	mov	sl, r0
 8007832:	468b      	mov	fp, r1
 8007834:	3501      	adds	r5, #1
 8007836:	4628      	mov	r0, r5
 8007838:	f7f8 fe7c 	bl	8000534 <__aeabi_i2d>
 800783c:	4652      	mov	r2, sl
 800783e:	465b      	mov	r3, fp
 8007840:	f7f8 fee2 	bl	8000608 <__aeabi_dmul>
 8007844:	4b82      	ldr	r3, [pc, #520]	; (8007a50 <_dtoa_r+0x628>)
 8007846:	2200      	movs	r2, #0
 8007848:	f7f8 fd28 	bl	800029c <__adddf3>
 800784c:	46d0      	mov	r8, sl
 800784e:	46d9      	mov	r9, fp
 8007850:	4682      	mov	sl, r0
 8007852:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007856:	2e00      	cmp	r6, #0
 8007858:	d158      	bne.n	800790c <_dtoa_r+0x4e4>
 800785a:	4b7e      	ldr	r3, [pc, #504]	; (8007a54 <_dtoa_r+0x62c>)
 800785c:	2200      	movs	r2, #0
 800785e:	4640      	mov	r0, r8
 8007860:	4649      	mov	r1, r9
 8007862:	f7f8 fd19 	bl	8000298 <__aeabi_dsub>
 8007866:	4652      	mov	r2, sl
 8007868:	465b      	mov	r3, fp
 800786a:	4680      	mov	r8, r0
 800786c:	4689      	mov	r9, r1
 800786e:	f7f9 f95b 	bl	8000b28 <__aeabi_dcmpgt>
 8007872:	2800      	cmp	r0, #0
 8007874:	f040 8295 	bne.w	8007da2 <_dtoa_r+0x97a>
 8007878:	4652      	mov	r2, sl
 800787a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7f9 f933 	bl	8000aec <__aeabi_dcmplt>
 8007886:	2800      	cmp	r0, #0
 8007888:	f040 8289 	bne.w	8007d9e <_dtoa_r+0x976>
 800788c:	ec5b ab19 	vmov	sl, fp, d9
 8007890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007892:	2b00      	cmp	r3, #0
 8007894:	f2c0 8148 	blt.w	8007b28 <_dtoa_r+0x700>
 8007898:	9a00      	ldr	r2, [sp, #0]
 800789a:	2a0e      	cmp	r2, #14
 800789c:	f300 8144 	bgt.w	8007b28 <_dtoa_r+0x700>
 80078a0:	4b67      	ldr	r3, [pc, #412]	; (8007a40 <_dtoa_r+0x618>)
 80078a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f280 80d5 	bge.w	8007a5c <_dtoa_r+0x634>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f300 80d1 	bgt.w	8007a5c <_dtoa_r+0x634>
 80078ba:	f040 826f 	bne.w	8007d9c <_dtoa_r+0x974>
 80078be:	4b65      	ldr	r3, [pc, #404]	; (8007a54 <_dtoa_r+0x62c>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f8 fe9f 	bl	8000608 <__aeabi_dmul>
 80078ca:	4652      	mov	r2, sl
 80078cc:	465b      	mov	r3, fp
 80078ce:	f7f9 f921 	bl	8000b14 <__aeabi_dcmpge>
 80078d2:	9e03      	ldr	r6, [sp, #12]
 80078d4:	4637      	mov	r7, r6
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f040 8245 	bne.w	8007d66 <_dtoa_r+0x93e>
 80078dc:	9d01      	ldr	r5, [sp, #4]
 80078de:	2331      	movs	r3, #49	; 0x31
 80078e0:	f805 3b01 	strb.w	r3, [r5], #1
 80078e4:	9b00      	ldr	r3, [sp, #0]
 80078e6:	3301      	adds	r3, #1
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	e240      	b.n	8007d6e <_dtoa_r+0x946>
 80078ec:	07f2      	lsls	r2, r6, #31
 80078ee:	d505      	bpl.n	80078fc <_dtoa_r+0x4d4>
 80078f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f4:	f7f8 fe88 	bl	8000608 <__aeabi_dmul>
 80078f8:	3501      	adds	r5, #1
 80078fa:	2301      	movs	r3, #1
 80078fc:	1076      	asrs	r6, r6, #1
 80078fe:	3708      	adds	r7, #8
 8007900:	e777      	b.n	80077f2 <_dtoa_r+0x3ca>
 8007902:	2502      	movs	r5, #2
 8007904:	e779      	b.n	80077fa <_dtoa_r+0x3d2>
 8007906:	9f00      	ldr	r7, [sp, #0]
 8007908:	9e03      	ldr	r6, [sp, #12]
 800790a:	e794      	b.n	8007836 <_dtoa_r+0x40e>
 800790c:	9901      	ldr	r1, [sp, #4]
 800790e:	4b4c      	ldr	r3, [pc, #304]	; (8007a40 <_dtoa_r+0x618>)
 8007910:	4431      	add	r1, r6
 8007912:	910d      	str	r1, [sp, #52]	; 0x34
 8007914:	9908      	ldr	r1, [sp, #32]
 8007916:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800791a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800791e:	2900      	cmp	r1, #0
 8007920:	d043      	beq.n	80079aa <_dtoa_r+0x582>
 8007922:	494d      	ldr	r1, [pc, #308]	; (8007a58 <_dtoa_r+0x630>)
 8007924:	2000      	movs	r0, #0
 8007926:	f7f8 ff99 	bl	800085c <__aeabi_ddiv>
 800792a:	4652      	mov	r2, sl
 800792c:	465b      	mov	r3, fp
 800792e:	f7f8 fcb3 	bl	8000298 <__aeabi_dsub>
 8007932:	9d01      	ldr	r5, [sp, #4]
 8007934:	4682      	mov	sl, r0
 8007936:	468b      	mov	fp, r1
 8007938:	4649      	mov	r1, r9
 800793a:	4640      	mov	r0, r8
 800793c:	f7f9 f914 	bl	8000b68 <__aeabi_d2iz>
 8007940:	4606      	mov	r6, r0
 8007942:	f7f8 fdf7 	bl	8000534 <__aeabi_i2d>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f8 fca3 	bl	8000298 <__aeabi_dsub>
 8007952:	3630      	adds	r6, #48	; 0x30
 8007954:	f805 6b01 	strb.w	r6, [r5], #1
 8007958:	4652      	mov	r2, sl
 800795a:	465b      	mov	r3, fp
 800795c:	4680      	mov	r8, r0
 800795e:	4689      	mov	r9, r1
 8007960:	f7f9 f8c4 	bl	8000aec <__aeabi_dcmplt>
 8007964:	2800      	cmp	r0, #0
 8007966:	d163      	bne.n	8007a30 <_dtoa_r+0x608>
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4936      	ldr	r1, [pc, #216]	; (8007a48 <_dtoa_r+0x620>)
 800796e:	2000      	movs	r0, #0
 8007970:	f7f8 fc92 	bl	8000298 <__aeabi_dsub>
 8007974:	4652      	mov	r2, sl
 8007976:	465b      	mov	r3, fp
 8007978:	f7f9 f8b8 	bl	8000aec <__aeabi_dcmplt>
 800797c:	2800      	cmp	r0, #0
 800797e:	f040 80b5 	bne.w	8007aec <_dtoa_r+0x6c4>
 8007982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007984:	429d      	cmp	r5, r3
 8007986:	d081      	beq.n	800788c <_dtoa_r+0x464>
 8007988:	4b30      	ldr	r3, [pc, #192]	; (8007a4c <_dtoa_r+0x624>)
 800798a:	2200      	movs	r2, #0
 800798c:	4650      	mov	r0, sl
 800798e:	4659      	mov	r1, fp
 8007990:	f7f8 fe3a 	bl	8000608 <__aeabi_dmul>
 8007994:	4b2d      	ldr	r3, [pc, #180]	; (8007a4c <_dtoa_r+0x624>)
 8007996:	4682      	mov	sl, r0
 8007998:	468b      	mov	fp, r1
 800799a:	4640      	mov	r0, r8
 800799c:	4649      	mov	r1, r9
 800799e:	2200      	movs	r2, #0
 80079a0:	f7f8 fe32 	bl	8000608 <__aeabi_dmul>
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	e7c6      	b.n	8007938 <_dtoa_r+0x510>
 80079aa:	4650      	mov	r0, sl
 80079ac:	4659      	mov	r1, fp
 80079ae:	f7f8 fe2b 	bl	8000608 <__aeabi_dmul>
 80079b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079b4:	9d01      	ldr	r5, [sp, #4]
 80079b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079b8:	4682      	mov	sl, r0
 80079ba:	468b      	mov	fp, r1
 80079bc:	4649      	mov	r1, r9
 80079be:	4640      	mov	r0, r8
 80079c0:	f7f9 f8d2 	bl	8000b68 <__aeabi_d2iz>
 80079c4:	4606      	mov	r6, r0
 80079c6:	f7f8 fdb5 	bl	8000534 <__aeabi_i2d>
 80079ca:	3630      	adds	r6, #48	; 0x30
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f8 fc60 	bl	8000298 <__aeabi_dsub>
 80079d8:	f805 6b01 	strb.w	r6, [r5], #1
 80079dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079de:	429d      	cmp	r5, r3
 80079e0:	4680      	mov	r8, r0
 80079e2:	4689      	mov	r9, r1
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	d124      	bne.n	8007a34 <_dtoa_r+0x60c>
 80079ea:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <_dtoa_r+0x630>)
 80079ec:	4650      	mov	r0, sl
 80079ee:	4659      	mov	r1, fp
 80079f0:	f7f8 fc54 	bl	800029c <__adddf3>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4640      	mov	r0, r8
 80079fa:	4649      	mov	r1, r9
 80079fc:	f7f9 f894 	bl	8000b28 <__aeabi_dcmpgt>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d173      	bne.n	8007aec <_dtoa_r+0x6c4>
 8007a04:	4652      	mov	r2, sl
 8007a06:	465b      	mov	r3, fp
 8007a08:	4913      	ldr	r1, [pc, #76]	; (8007a58 <_dtoa_r+0x630>)
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	f7f8 fc44 	bl	8000298 <__aeabi_dsub>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4640      	mov	r0, r8
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f9 f868 	bl	8000aec <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f43f af35 	beq.w	800788c <_dtoa_r+0x464>
 8007a22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a24:	1e6b      	subs	r3, r5, #1
 8007a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a2c:	2b30      	cmp	r3, #48	; 0x30
 8007a2e:	d0f8      	beq.n	8007a22 <_dtoa_r+0x5fa>
 8007a30:	9700      	str	r7, [sp, #0]
 8007a32:	e049      	b.n	8007ac8 <_dtoa_r+0x6a0>
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <_dtoa_r+0x624>)
 8007a36:	f7f8 fde7 	bl	8000608 <__aeabi_dmul>
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	4689      	mov	r9, r1
 8007a3e:	e7bd      	b.n	80079bc <_dtoa_r+0x594>
 8007a40:	0800a4b8 	.word	0x0800a4b8
 8007a44:	0800a490 	.word	0x0800a490
 8007a48:	3ff00000 	.word	0x3ff00000
 8007a4c:	40240000 	.word	0x40240000
 8007a50:	401c0000 	.word	0x401c0000
 8007a54:	40140000 	.word	0x40140000
 8007a58:	3fe00000 	.word	0x3fe00000
 8007a5c:	9d01      	ldr	r5, [sp, #4]
 8007a5e:	4656      	mov	r6, sl
 8007a60:	465f      	mov	r7, fp
 8007a62:	4642      	mov	r2, r8
 8007a64:	464b      	mov	r3, r9
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	f7f8 fef7 	bl	800085c <__aeabi_ddiv>
 8007a6e:	f7f9 f87b 	bl	8000b68 <__aeabi_d2iz>
 8007a72:	4682      	mov	sl, r0
 8007a74:	f7f8 fd5e 	bl	8000534 <__aeabi_i2d>
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	f7f8 fdc4 	bl	8000608 <__aeabi_dmul>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a8c:	f7f8 fc04 	bl	8000298 <__aeabi_dsub>
 8007a90:	f805 6b01 	strb.w	r6, [r5], #1
 8007a94:	9e01      	ldr	r6, [sp, #4]
 8007a96:	9f03      	ldr	r7, [sp, #12]
 8007a98:	1bae      	subs	r6, r5, r6
 8007a9a:	42b7      	cmp	r7, r6
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	d135      	bne.n	8007b0e <_dtoa_r+0x6e6>
 8007aa2:	f7f8 fbfb 	bl	800029c <__adddf3>
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	f7f9 f83b 	bl	8000b28 <__aeabi_dcmpgt>
 8007ab2:	b9d0      	cbnz	r0, 8007aea <_dtoa_r+0x6c2>
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f9 f80c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ac0:	b110      	cbz	r0, 8007ac8 <_dtoa_r+0x6a0>
 8007ac2:	f01a 0f01 	tst.w	sl, #1
 8007ac6:	d110      	bne.n	8007aea <_dtoa_r+0x6c2>
 8007ac8:	4620      	mov	r0, r4
 8007aca:	ee18 1a10 	vmov	r1, s16
 8007ace:	f000 fe75 	bl	80087bc <_Bfree>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9800      	ldr	r0, [sp, #0]
 8007ad6:	702b      	strb	r3, [r5, #0]
 8007ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ada:	3001      	adds	r0, #1
 8007adc:	6018      	str	r0, [r3, #0]
 8007ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f43f acf1 	beq.w	80074c8 <_dtoa_r+0xa0>
 8007ae6:	601d      	str	r5, [r3, #0]
 8007ae8:	e4ee      	b.n	80074c8 <_dtoa_r+0xa0>
 8007aea:	9f00      	ldr	r7, [sp, #0]
 8007aec:	462b      	mov	r3, r5
 8007aee:	461d      	mov	r5, r3
 8007af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007af4:	2a39      	cmp	r2, #57	; 0x39
 8007af6:	d106      	bne.n	8007b06 <_dtoa_r+0x6de>
 8007af8:	9a01      	ldr	r2, [sp, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d1f7      	bne.n	8007aee <_dtoa_r+0x6c6>
 8007afe:	9901      	ldr	r1, [sp, #4]
 8007b00:	2230      	movs	r2, #48	; 0x30
 8007b02:	3701      	adds	r7, #1
 8007b04:	700a      	strb	r2, [r1, #0]
 8007b06:	781a      	ldrb	r2, [r3, #0]
 8007b08:	3201      	adds	r2, #1
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e790      	b.n	8007a30 <_dtoa_r+0x608>
 8007b0e:	4ba6      	ldr	r3, [pc, #664]	; (8007da8 <_dtoa_r+0x980>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	f7f8 fd79 	bl	8000608 <__aeabi_dmul>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460f      	mov	r7, r1
 8007b1e:	f7f8 ffdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d09d      	beq.n	8007a62 <_dtoa_r+0x63a>
 8007b26:	e7cf      	b.n	8007ac8 <_dtoa_r+0x6a0>
 8007b28:	9a08      	ldr	r2, [sp, #32]
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	f000 80d7 	beq.w	8007cde <_dtoa_r+0x8b6>
 8007b30:	9a06      	ldr	r2, [sp, #24]
 8007b32:	2a01      	cmp	r2, #1
 8007b34:	f300 80ba 	bgt.w	8007cac <_dtoa_r+0x884>
 8007b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	f000 80b2 	beq.w	8007ca4 <_dtoa_r+0x87c>
 8007b40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b44:	9e07      	ldr	r6, [sp, #28]
 8007b46:	9d04      	ldr	r5, [sp, #16]
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	441a      	add	r2, r3
 8007b4c:	9204      	str	r2, [sp, #16]
 8007b4e:	9a05      	ldr	r2, [sp, #20]
 8007b50:	2101      	movs	r1, #1
 8007b52:	441a      	add	r2, r3
 8007b54:	4620      	mov	r0, r4
 8007b56:	9205      	str	r2, [sp, #20]
 8007b58:	f000 ff32 	bl	80089c0 <__i2b>
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	dd0c      	ble.n	8007b7c <_dtoa_r+0x754>
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd09      	ble.n	8007b7c <_dtoa_r+0x754>
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	9a04      	ldr	r2, [sp, #16]
 8007b6c:	bfa8      	it	ge
 8007b6e:	462b      	movge	r3, r5
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	9204      	str	r2, [sp, #16]
 8007b74:	9a05      	ldr	r2, [sp, #20]
 8007b76:	1aed      	subs	r5, r5, r3
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	b31b      	cbz	r3, 8007bc8 <_dtoa_r+0x7a0>
 8007b80:	9b08      	ldr	r3, [sp, #32]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80af 	beq.w	8007ce6 <_dtoa_r+0x8be>
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	dd13      	ble.n	8007bb4 <_dtoa_r+0x78c>
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 ffd5 	bl	8008b40 <__pow5mult>
 8007b96:	ee18 2a10 	vmov	r2, s16
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 ff24 	bl	80089ec <__multiply>
 8007ba4:	ee18 1a10 	vmov	r1, s16
 8007ba8:	4680      	mov	r8, r0
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 fe06 	bl	80087bc <_Bfree>
 8007bb0:	ee08 8a10 	vmov	s16, r8
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	1b9a      	subs	r2, r3, r6
 8007bb8:	d006      	beq.n	8007bc8 <_dtoa_r+0x7a0>
 8007bba:	ee18 1a10 	vmov	r1, s16
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 ffbe 	bl	8008b40 <__pow5mult>
 8007bc4:	ee08 0a10 	vmov	s16, r0
 8007bc8:	2101      	movs	r1, #1
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fef8 	bl	80089c0 <__i2b>
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	f340 8088 	ble.w	8007cea <_dtoa_r+0x8c2>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4601      	mov	r1, r0
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 ffae 	bl	8008b40 <__pow5mult>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	4606      	mov	r6, r0
 8007bea:	f340 8081 	ble.w	8007cf0 <_dtoa_r+0x8c8>
 8007bee:	f04f 0800 	mov.w	r8, #0
 8007bf2:	6933      	ldr	r3, [r6, #16]
 8007bf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bf8:	6918      	ldr	r0, [r3, #16]
 8007bfa:	f000 fe91 	bl	8008920 <__hi0bits>
 8007bfe:	f1c0 0020 	rsb	r0, r0, #32
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	4418      	add	r0, r3
 8007c06:	f010 001f 	ands.w	r0, r0, #31
 8007c0a:	f000 8092 	beq.w	8007d32 <_dtoa_r+0x90a>
 8007c0e:	f1c0 0320 	rsb	r3, r0, #32
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	f340 808a 	ble.w	8007d2c <_dtoa_r+0x904>
 8007c18:	f1c0 001c 	rsb	r0, r0, #28
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	4403      	add	r3, r0
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	4403      	add	r3, r0
 8007c26:	4405      	add	r5, r0
 8007c28:	9305      	str	r3, [sp, #20]
 8007c2a:	9b04      	ldr	r3, [sp, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dd07      	ble.n	8007c40 <_dtoa_r+0x818>
 8007c30:	ee18 1a10 	vmov	r1, s16
 8007c34:	461a      	mov	r2, r3
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 ffdc 	bl	8008bf4 <__lshift>
 8007c3c:	ee08 0a10 	vmov	s16, r0
 8007c40:	9b05      	ldr	r3, [sp, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dd05      	ble.n	8007c52 <_dtoa_r+0x82a>
 8007c46:	4631      	mov	r1, r6
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 ffd2 	bl	8008bf4 <__lshift>
 8007c50:	4606      	mov	r6, r0
 8007c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d06e      	beq.n	8007d36 <_dtoa_r+0x90e>
 8007c58:	ee18 0a10 	vmov	r0, s16
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	f001 f839 	bl	8008cd4 <__mcmp>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	da67      	bge.n	8007d36 <_dtoa_r+0x90e>
 8007c66:	9b00      	ldr	r3, [sp, #0]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	ee18 1a10 	vmov	r1, s16
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	220a      	movs	r2, #10
 8007c72:	2300      	movs	r3, #0
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 fdc3 	bl	8008800 <__multadd>
 8007c7a:	9b08      	ldr	r3, [sp, #32]
 8007c7c:	ee08 0a10 	vmov	s16, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 81b1 	beq.w	8007fe8 <_dtoa_r+0xbc0>
 8007c86:	2300      	movs	r3, #0
 8007c88:	4639      	mov	r1, r7
 8007c8a:	220a      	movs	r2, #10
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fdb7 	bl	8008800 <__multadd>
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	4607      	mov	r7, r0
 8007c98:	f300 808e 	bgt.w	8007db8 <_dtoa_r+0x990>
 8007c9c:	9b06      	ldr	r3, [sp, #24]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	dc51      	bgt.n	8007d46 <_dtoa_r+0x91e>
 8007ca2:	e089      	b.n	8007db8 <_dtoa_r+0x990>
 8007ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007caa:	e74b      	b.n	8007b44 <_dtoa_r+0x71c>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	1e5e      	subs	r6, r3, #1
 8007cb0:	9b07      	ldr	r3, [sp, #28]
 8007cb2:	42b3      	cmp	r3, r6
 8007cb4:	bfbf      	itttt	lt
 8007cb6:	9b07      	ldrlt	r3, [sp, #28]
 8007cb8:	9607      	strlt	r6, [sp, #28]
 8007cba:	1af2      	sublt	r2, r6, r3
 8007cbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cbe:	bfb6      	itet	lt
 8007cc0:	189b      	addlt	r3, r3, r2
 8007cc2:	1b9e      	subge	r6, r3, r6
 8007cc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	bfb8      	it	lt
 8007cca:	2600      	movlt	r6, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bfb7      	itett	lt
 8007cd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007cd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007cd8:	1a9d      	sublt	r5, r3, r2
 8007cda:	2300      	movlt	r3, #0
 8007cdc:	e734      	b.n	8007b48 <_dtoa_r+0x720>
 8007cde:	9e07      	ldr	r6, [sp, #28]
 8007ce0:	9d04      	ldr	r5, [sp, #16]
 8007ce2:	9f08      	ldr	r7, [sp, #32]
 8007ce4:	e73b      	b.n	8007b5e <_dtoa_r+0x736>
 8007ce6:	9a07      	ldr	r2, [sp, #28]
 8007ce8:	e767      	b.n	8007bba <_dtoa_r+0x792>
 8007cea:	9b06      	ldr	r3, [sp, #24]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	dc18      	bgt.n	8007d22 <_dtoa_r+0x8fa>
 8007cf0:	f1ba 0f00 	cmp.w	sl, #0
 8007cf4:	d115      	bne.n	8007d22 <_dtoa_r+0x8fa>
 8007cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cfa:	b993      	cbnz	r3, 8007d22 <_dtoa_r+0x8fa>
 8007cfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d00:	0d1b      	lsrs	r3, r3, #20
 8007d02:	051b      	lsls	r3, r3, #20
 8007d04:	b183      	cbz	r3, 8007d28 <_dtoa_r+0x900>
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	9304      	str	r3, [sp, #16]
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	f04f 0801 	mov.w	r8, #1
 8007d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f47f af6a 	bne.w	8007bf2 <_dtoa_r+0x7ca>
 8007d1e:	2001      	movs	r0, #1
 8007d20:	e76f      	b.n	8007c02 <_dtoa_r+0x7da>
 8007d22:	f04f 0800 	mov.w	r8, #0
 8007d26:	e7f6      	b.n	8007d16 <_dtoa_r+0x8ee>
 8007d28:	4698      	mov	r8, r3
 8007d2a:	e7f4      	b.n	8007d16 <_dtoa_r+0x8ee>
 8007d2c:	f43f af7d 	beq.w	8007c2a <_dtoa_r+0x802>
 8007d30:	4618      	mov	r0, r3
 8007d32:	301c      	adds	r0, #28
 8007d34:	e772      	b.n	8007c1c <_dtoa_r+0x7f4>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc37      	bgt.n	8007dac <_dtoa_r+0x984>
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	dd34      	ble.n	8007dac <_dtoa_r+0x984>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	9302      	str	r3, [sp, #8]
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	b96b      	cbnz	r3, 8007d66 <_dtoa_r+0x93e>
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	2205      	movs	r2, #5
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fd56 	bl	8008800 <__multadd>
 8007d54:	4601      	mov	r1, r0
 8007d56:	4606      	mov	r6, r0
 8007d58:	ee18 0a10 	vmov	r0, s16
 8007d5c:	f000 ffba 	bl	8008cd4 <__mcmp>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	f73f adbb 	bgt.w	80078dc <_dtoa_r+0x4b4>
 8007d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d68:	9d01      	ldr	r5, [sp, #4]
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	4631      	mov	r1, r6
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fd21 	bl	80087bc <_Bfree>
 8007d7a:	2f00      	cmp	r7, #0
 8007d7c:	f43f aea4 	beq.w	8007ac8 <_dtoa_r+0x6a0>
 8007d80:	f1b8 0f00 	cmp.w	r8, #0
 8007d84:	d005      	beq.n	8007d92 <_dtoa_r+0x96a>
 8007d86:	45b8      	cmp	r8, r7
 8007d88:	d003      	beq.n	8007d92 <_dtoa_r+0x96a>
 8007d8a:	4641      	mov	r1, r8
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 fd15 	bl	80087bc <_Bfree>
 8007d92:	4639      	mov	r1, r7
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fd11 	bl	80087bc <_Bfree>
 8007d9a:	e695      	b.n	8007ac8 <_dtoa_r+0x6a0>
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	4637      	mov	r7, r6
 8007da0:	e7e1      	b.n	8007d66 <_dtoa_r+0x93e>
 8007da2:	9700      	str	r7, [sp, #0]
 8007da4:	4637      	mov	r7, r6
 8007da6:	e599      	b.n	80078dc <_dtoa_r+0x4b4>
 8007da8:	40240000 	.word	0x40240000
 8007dac:	9b08      	ldr	r3, [sp, #32]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 80ca 	beq.w	8007f48 <_dtoa_r+0xb20>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	dd05      	ble.n	8007dc8 <_dtoa_r+0x9a0>
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 ff17 	bl	8008bf4 <__lshift>
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	f1b8 0f00 	cmp.w	r8, #0
 8007dcc:	d05b      	beq.n	8007e86 <_dtoa_r+0xa5e>
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 fcb3 	bl	800873c <_Balloc>
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	b928      	cbnz	r0, 8007de6 <_dtoa_r+0x9be>
 8007dda:	4b87      	ldr	r3, [pc, #540]	; (8007ff8 <_dtoa_r+0xbd0>)
 8007ddc:	4602      	mov	r2, r0
 8007dde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007de2:	f7ff bb3b 	b.w	800745c <_dtoa_r+0x34>
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	3202      	adds	r2, #2
 8007dea:	0092      	lsls	r2, r2, #2
 8007dec:	f107 010c 	add.w	r1, r7, #12
 8007df0:	300c      	adds	r0, #12
 8007df2:	f000 fc95 	bl	8008720 <memcpy>
 8007df6:	2201      	movs	r2, #1
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fefa 	bl	8008bf4 <__lshift>
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	f103 0901 	add.w	r9, r3, #1
 8007e06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	f00a 0301 	and.w	r3, sl, #1
 8007e12:	46b8      	mov	r8, r7
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	4607      	mov	r7, r0
 8007e18:	4631      	mov	r1, r6
 8007e1a:	ee18 0a10 	vmov	r0, s16
 8007e1e:	f7ff fa77 	bl	8007310 <quorem>
 8007e22:	4641      	mov	r1, r8
 8007e24:	9002      	str	r0, [sp, #8]
 8007e26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e2a:	ee18 0a10 	vmov	r0, s16
 8007e2e:	f000 ff51 	bl	8008cd4 <__mcmp>
 8007e32:	463a      	mov	r2, r7
 8007e34:	9003      	str	r0, [sp, #12]
 8007e36:	4631      	mov	r1, r6
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 ff67 	bl	8008d0c <__mdiff>
 8007e3e:	68c2      	ldr	r2, [r0, #12]
 8007e40:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e44:	4605      	mov	r5, r0
 8007e46:	bb02      	cbnz	r2, 8007e8a <_dtoa_r+0xa62>
 8007e48:	4601      	mov	r1, r0
 8007e4a:	ee18 0a10 	vmov	r0, s16
 8007e4e:	f000 ff41 	bl	8008cd4 <__mcmp>
 8007e52:	4602      	mov	r2, r0
 8007e54:	4629      	mov	r1, r5
 8007e56:	4620      	mov	r0, r4
 8007e58:	9207      	str	r2, [sp, #28]
 8007e5a:	f000 fcaf 	bl	80087bc <_Bfree>
 8007e5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e62:	ea43 0102 	orr.w	r1, r3, r2
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	464d      	mov	r5, r9
 8007e6c:	d10f      	bne.n	8007e8e <_dtoa_r+0xa66>
 8007e6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e72:	d02a      	beq.n	8007eca <_dtoa_r+0xaa2>
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dd02      	ble.n	8007e80 <_dtoa_r+0xa58>
 8007e7a:	9b02      	ldr	r3, [sp, #8]
 8007e7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e80:	f88b a000 	strb.w	sl, [fp]
 8007e84:	e775      	b.n	8007d72 <_dtoa_r+0x94a>
 8007e86:	4638      	mov	r0, r7
 8007e88:	e7ba      	b.n	8007e00 <_dtoa_r+0x9d8>
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	e7e2      	b.n	8007e54 <_dtoa_r+0xa2c>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db04      	blt.n	8007e9e <_dtoa_r+0xa76>
 8007e94:	9906      	ldr	r1, [sp, #24]
 8007e96:	430b      	orrs	r3, r1
 8007e98:	9904      	ldr	r1, [sp, #16]
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	d122      	bne.n	8007ee4 <_dtoa_r+0xabc>
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	ddee      	ble.n	8007e80 <_dtoa_r+0xa58>
 8007ea2:	ee18 1a10 	vmov	r1, s16
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fea3 	bl	8008bf4 <__lshift>
 8007eae:	4631      	mov	r1, r6
 8007eb0:	ee08 0a10 	vmov	s16, r0
 8007eb4:	f000 ff0e 	bl	8008cd4 <__mcmp>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	dc03      	bgt.n	8007ec4 <_dtoa_r+0xa9c>
 8007ebc:	d1e0      	bne.n	8007e80 <_dtoa_r+0xa58>
 8007ebe:	f01a 0f01 	tst.w	sl, #1
 8007ec2:	d0dd      	beq.n	8007e80 <_dtoa_r+0xa58>
 8007ec4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ec8:	d1d7      	bne.n	8007e7a <_dtoa_r+0xa52>
 8007eca:	2339      	movs	r3, #57	; 0x39
 8007ecc:	f88b 3000 	strb.w	r3, [fp]
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	461d      	mov	r5, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eda:	2a39      	cmp	r2, #57	; 0x39
 8007edc:	d071      	beq.n	8007fc2 <_dtoa_r+0xb9a>
 8007ede:	3201      	adds	r2, #1
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	e746      	b.n	8007d72 <_dtoa_r+0x94a>
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	dd07      	ble.n	8007ef8 <_dtoa_r+0xad0>
 8007ee8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007eec:	d0ed      	beq.n	8007eca <_dtoa_r+0xaa2>
 8007eee:	f10a 0301 	add.w	r3, sl, #1
 8007ef2:	f88b 3000 	strb.w	r3, [fp]
 8007ef6:	e73c      	b.n	8007d72 <_dtoa_r+0x94a>
 8007ef8:	9b05      	ldr	r3, [sp, #20]
 8007efa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007efe:	4599      	cmp	r9, r3
 8007f00:	d047      	beq.n	8007f92 <_dtoa_r+0xb6a>
 8007f02:	ee18 1a10 	vmov	r1, s16
 8007f06:	2300      	movs	r3, #0
 8007f08:	220a      	movs	r2, #10
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fc78 	bl	8008800 <__multadd>
 8007f10:	45b8      	cmp	r8, r7
 8007f12:	ee08 0a10 	vmov	s16, r0
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	f04f 020a 	mov.w	r2, #10
 8007f1e:	4641      	mov	r1, r8
 8007f20:	4620      	mov	r0, r4
 8007f22:	d106      	bne.n	8007f32 <_dtoa_r+0xb0a>
 8007f24:	f000 fc6c 	bl	8008800 <__multadd>
 8007f28:	4680      	mov	r8, r0
 8007f2a:	4607      	mov	r7, r0
 8007f2c:	f109 0901 	add.w	r9, r9, #1
 8007f30:	e772      	b.n	8007e18 <_dtoa_r+0x9f0>
 8007f32:	f000 fc65 	bl	8008800 <__multadd>
 8007f36:	4639      	mov	r1, r7
 8007f38:	4680      	mov	r8, r0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fc5e 	bl	8008800 <__multadd>
 8007f44:	4607      	mov	r7, r0
 8007f46:	e7f1      	b.n	8007f2c <_dtoa_r+0xb04>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	9d01      	ldr	r5, [sp, #4]
 8007f4e:	ee18 0a10 	vmov	r0, s16
 8007f52:	4631      	mov	r1, r6
 8007f54:	f7ff f9dc 	bl	8007310 <quorem>
 8007f58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f5c:	9b01      	ldr	r3, [sp, #4]
 8007f5e:	f805 ab01 	strb.w	sl, [r5], #1
 8007f62:	1aea      	subs	r2, r5, r3
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	4293      	cmp	r3, r2
 8007f68:	dd09      	ble.n	8007f7e <_dtoa_r+0xb56>
 8007f6a:	ee18 1a10 	vmov	r1, s16
 8007f6e:	2300      	movs	r3, #0
 8007f70:	220a      	movs	r2, #10
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fc44 	bl	8008800 <__multadd>
 8007f78:	ee08 0a10 	vmov	s16, r0
 8007f7c:	e7e7      	b.n	8007f4e <_dtoa_r+0xb26>
 8007f7e:	9b02      	ldr	r3, [sp, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bfc8      	it	gt
 8007f84:	461d      	movgt	r5, r3
 8007f86:	9b01      	ldr	r3, [sp, #4]
 8007f88:	bfd8      	it	le
 8007f8a:	2501      	movle	r5, #1
 8007f8c:	441d      	add	r5, r3
 8007f8e:	f04f 0800 	mov.w	r8, #0
 8007f92:	ee18 1a10 	vmov	r1, s16
 8007f96:	2201      	movs	r2, #1
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fe2b 	bl	8008bf4 <__lshift>
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	ee08 0a10 	vmov	s16, r0
 8007fa4:	f000 fe96 	bl	8008cd4 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	dc91      	bgt.n	8007ed0 <_dtoa_r+0xaa8>
 8007fac:	d102      	bne.n	8007fb4 <_dtoa_r+0xb8c>
 8007fae:	f01a 0f01 	tst.w	sl, #1
 8007fb2:	d18d      	bne.n	8007ed0 <_dtoa_r+0xaa8>
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fbc:	2a30      	cmp	r2, #48	; 0x30
 8007fbe:	d0fa      	beq.n	8007fb6 <_dtoa_r+0xb8e>
 8007fc0:	e6d7      	b.n	8007d72 <_dtoa_r+0x94a>
 8007fc2:	9a01      	ldr	r2, [sp, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d184      	bne.n	8007ed2 <_dtoa_r+0xaaa>
 8007fc8:	9b00      	ldr	r3, [sp, #0]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	2331      	movs	r3, #49	; 0x31
 8007fd0:	7013      	strb	r3, [r2, #0]
 8007fd2:	e6ce      	b.n	8007d72 <_dtoa_r+0x94a>
 8007fd4:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <_dtoa_r+0xbd4>)
 8007fd6:	f7ff ba95 	b.w	8007504 <_dtoa_r+0xdc>
 8007fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f aa6e 	bne.w	80074be <_dtoa_r+0x96>
 8007fe2:	4b07      	ldr	r3, [pc, #28]	; (8008000 <_dtoa_r+0xbd8>)
 8007fe4:	f7ff ba8e 	b.w	8007504 <_dtoa_r+0xdc>
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dcae      	bgt.n	8007f4c <_dtoa_r+0xb24>
 8007fee:	9b06      	ldr	r3, [sp, #24]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	f73f aea8 	bgt.w	8007d46 <_dtoa_r+0x91e>
 8007ff6:	e7a9      	b.n	8007f4c <_dtoa_r+0xb24>
 8007ff8:	0800a3a8 	.word	0x0800a3a8
 8007ffc:	0800a1a8 	.word	0x0800a1a8
 8008000:	0800a329 	.word	0x0800a329

08008004 <rshift>:
 8008004:	6903      	ldr	r3, [r0, #16]
 8008006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800800a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800800e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008012:	f100 0414 	add.w	r4, r0, #20
 8008016:	dd45      	ble.n	80080a4 <rshift+0xa0>
 8008018:	f011 011f 	ands.w	r1, r1, #31
 800801c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008020:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008024:	d10c      	bne.n	8008040 <rshift+0x3c>
 8008026:	f100 0710 	add.w	r7, r0, #16
 800802a:	4629      	mov	r1, r5
 800802c:	42b1      	cmp	r1, r6
 800802e:	d334      	bcc.n	800809a <rshift+0x96>
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	1eea      	subs	r2, r5, #3
 8008036:	4296      	cmp	r6, r2
 8008038:	bf38      	it	cc
 800803a:	2300      	movcc	r3, #0
 800803c:	4423      	add	r3, r4
 800803e:	e015      	b.n	800806c <rshift+0x68>
 8008040:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008044:	f1c1 0820 	rsb	r8, r1, #32
 8008048:	40cf      	lsrs	r7, r1
 800804a:	f105 0e04 	add.w	lr, r5, #4
 800804e:	46a1      	mov	r9, r4
 8008050:	4576      	cmp	r6, lr
 8008052:	46f4      	mov	ip, lr
 8008054:	d815      	bhi.n	8008082 <rshift+0x7e>
 8008056:	1a9a      	subs	r2, r3, r2
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	3a04      	subs	r2, #4
 800805c:	3501      	adds	r5, #1
 800805e:	42ae      	cmp	r6, r5
 8008060:	bf38      	it	cc
 8008062:	2200      	movcc	r2, #0
 8008064:	18a3      	adds	r3, r4, r2
 8008066:	50a7      	str	r7, [r4, r2]
 8008068:	b107      	cbz	r7, 800806c <rshift+0x68>
 800806a:	3304      	adds	r3, #4
 800806c:	1b1a      	subs	r2, r3, r4
 800806e:	42a3      	cmp	r3, r4
 8008070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008074:	bf08      	it	eq
 8008076:	2300      	moveq	r3, #0
 8008078:	6102      	str	r2, [r0, #16]
 800807a:	bf08      	it	eq
 800807c:	6143      	streq	r3, [r0, #20]
 800807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008082:	f8dc c000 	ldr.w	ip, [ip]
 8008086:	fa0c fc08 	lsl.w	ip, ip, r8
 800808a:	ea4c 0707 	orr.w	r7, ip, r7
 800808e:	f849 7b04 	str.w	r7, [r9], #4
 8008092:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008096:	40cf      	lsrs	r7, r1
 8008098:	e7da      	b.n	8008050 <rshift+0x4c>
 800809a:	f851 cb04 	ldr.w	ip, [r1], #4
 800809e:	f847 cf04 	str.w	ip, [r7, #4]!
 80080a2:	e7c3      	b.n	800802c <rshift+0x28>
 80080a4:	4623      	mov	r3, r4
 80080a6:	e7e1      	b.n	800806c <rshift+0x68>

080080a8 <__hexdig_fun>:
 80080a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d802      	bhi.n	80080b6 <__hexdig_fun+0xe>
 80080b0:	3820      	subs	r0, #32
 80080b2:	b2c0      	uxtb	r0, r0
 80080b4:	4770      	bx	lr
 80080b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d801      	bhi.n	80080c2 <__hexdig_fun+0x1a>
 80080be:	3847      	subs	r0, #71	; 0x47
 80080c0:	e7f7      	b.n	80080b2 <__hexdig_fun+0xa>
 80080c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d801      	bhi.n	80080ce <__hexdig_fun+0x26>
 80080ca:	3827      	subs	r0, #39	; 0x27
 80080cc:	e7f1      	b.n	80080b2 <__hexdig_fun+0xa>
 80080ce:	2000      	movs	r0, #0
 80080d0:	4770      	bx	lr
	...

080080d4 <__gethex>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	ed2d 8b02 	vpush	{d8}
 80080dc:	b089      	sub	sp, #36	; 0x24
 80080de:	ee08 0a10 	vmov	s16, r0
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	4bb4      	ldr	r3, [pc, #720]	; (80083b8 <__gethex+0x2e4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	4618      	mov	r0, r3
 80080ec:	468b      	mov	fp, r1
 80080ee:	4690      	mov	r8, r2
 80080f0:	f7f8 f876 	bl	80001e0 <strlen>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	f8db 2000 	ldr.w	r2, [fp]
 80080fa:	4403      	add	r3, r0
 80080fc:	4682      	mov	sl, r0
 80080fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	1c93      	adds	r3, r2, #2
 8008106:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800810a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800810e:	32fe      	adds	r2, #254	; 0xfe
 8008110:	18d1      	adds	r1, r2, r3
 8008112:	461f      	mov	r7, r3
 8008114:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008118:	9100      	str	r1, [sp, #0]
 800811a:	2830      	cmp	r0, #48	; 0x30
 800811c:	d0f8      	beq.n	8008110 <__gethex+0x3c>
 800811e:	f7ff ffc3 	bl	80080a8 <__hexdig_fun>
 8008122:	4604      	mov	r4, r0
 8008124:	2800      	cmp	r0, #0
 8008126:	d13a      	bne.n	800819e <__gethex+0xca>
 8008128:	9901      	ldr	r1, [sp, #4]
 800812a:	4652      	mov	r2, sl
 800812c:	4638      	mov	r0, r7
 800812e:	f001 fa33 	bl	8009598 <strncmp>
 8008132:	4605      	mov	r5, r0
 8008134:	2800      	cmp	r0, #0
 8008136:	d168      	bne.n	800820a <__gethex+0x136>
 8008138:	f817 000a 	ldrb.w	r0, [r7, sl]
 800813c:	eb07 060a 	add.w	r6, r7, sl
 8008140:	f7ff ffb2 	bl	80080a8 <__hexdig_fun>
 8008144:	2800      	cmp	r0, #0
 8008146:	d062      	beq.n	800820e <__gethex+0x13a>
 8008148:	4633      	mov	r3, r6
 800814a:	7818      	ldrb	r0, [r3, #0]
 800814c:	2830      	cmp	r0, #48	; 0x30
 800814e:	461f      	mov	r7, r3
 8008150:	f103 0301 	add.w	r3, r3, #1
 8008154:	d0f9      	beq.n	800814a <__gethex+0x76>
 8008156:	f7ff ffa7 	bl	80080a8 <__hexdig_fun>
 800815a:	2301      	movs	r3, #1
 800815c:	fab0 f480 	clz	r4, r0
 8008160:	0964      	lsrs	r4, r4, #5
 8008162:	4635      	mov	r5, r6
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	463a      	mov	r2, r7
 8008168:	4616      	mov	r6, r2
 800816a:	3201      	adds	r2, #1
 800816c:	7830      	ldrb	r0, [r6, #0]
 800816e:	f7ff ff9b 	bl	80080a8 <__hexdig_fun>
 8008172:	2800      	cmp	r0, #0
 8008174:	d1f8      	bne.n	8008168 <__gethex+0x94>
 8008176:	9901      	ldr	r1, [sp, #4]
 8008178:	4652      	mov	r2, sl
 800817a:	4630      	mov	r0, r6
 800817c:	f001 fa0c 	bl	8009598 <strncmp>
 8008180:	b980      	cbnz	r0, 80081a4 <__gethex+0xd0>
 8008182:	b94d      	cbnz	r5, 8008198 <__gethex+0xc4>
 8008184:	eb06 050a 	add.w	r5, r6, sl
 8008188:	462a      	mov	r2, r5
 800818a:	4616      	mov	r6, r2
 800818c:	3201      	adds	r2, #1
 800818e:	7830      	ldrb	r0, [r6, #0]
 8008190:	f7ff ff8a 	bl	80080a8 <__hexdig_fun>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1f8      	bne.n	800818a <__gethex+0xb6>
 8008198:	1bad      	subs	r5, r5, r6
 800819a:	00ad      	lsls	r5, r5, #2
 800819c:	e004      	b.n	80081a8 <__gethex+0xd4>
 800819e:	2400      	movs	r4, #0
 80081a0:	4625      	mov	r5, r4
 80081a2:	e7e0      	b.n	8008166 <__gethex+0x92>
 80081a4:	2d00      	cmp	r5, #0
 80081a6:	d1f7      	bne.n	8008198 <__gethex+0xc4>
 80081a8:	7833      	ldrb	r3, [r6, #0]
 80081aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081ae:	2b50      	cmp	r3, #80	; 0x50
 80081b0:	d13b      	bne.n	800822a <__gethex+0x156>
 80081b2:	7873      	ldrb	r3, [r6, #1]
 80081b4:	2b2b      	cmp	r3, #43	; 0x2b
 80081b6:	d02c      	beq.n	8008212 <__gethex+0x13e>
 80081b8:	2b2d      	cmp	r3, #45	; 0x2d
 80081ba:	d02e      	beq.n	800821a <__gethex+0x146>
 80081bc:	1c71      	adds	r1, r6, #1
 80081be:	f04f 0900 	mov.w	r9, #0
 80081c2:	7808      	ldrb	r0, [r1, #0]
 80081c4:	f7ff ff70 	bl	80080a8 <__hexdig_fun>
 80081c8:	1e43      	subs	r3, r0, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b18      	cmp	r3, #24
 80081ce:	d82c      	bhi.n	800822a <__gethex+0x156>
 80081d0:	f1a0 0210 	sub.w	r2, r0, #16
 80081d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081d8:	f7ff ff66 	bl	80080a8 <__hexdig_fun>
 80081dc:	1e43      	subs	r3, r0, #1
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b18      	cmp	r3, #24
 80081e2:	d91d      	bls.n	8008220 <__gethex+0x14c>
 80081e4:	f1b9 0f00 	cmp.w	r9, #0
 80081e8:	d000      	beq.n	80081ec <__gethex+0x118>
 80081ea:	4252      	negs	r2, r2
 80081ec:	4415      	add	r5, r2
 80081ee:	f8cb 1000 	str.w	r1, [fp]
 80081f2:	b1e4      	cbz	r4, 800822e <__gethex+0x15a>
 80081f4:	9b00      	ldr	r3, [sp, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bf14      	ite	ne
 80081fa:	2700      	movne	r7, #0
 80081fc:	2706      	moveq	r7, #6
 80081fe:	4638      	mov	r0, r7
 8008200:	b009      	add	sp, #36	; 0x24
 8008202:	ecbd 8b02 	vpop	{d8}
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	463e      	mov	r6, r7
 800820c:	4625      	mov	r5, r4
 800820e:	2401      	movs	r4, #1
 8008210:	e7ca      	b.n	80081a8 <__gethex+0xd4>
 8008212:	f04f 0900 	mov.w	r9, #0
 8008216:	1cb1      	adds	r1, r6, #2
 8008218:	e7d3      	b.n	80081c2 <__gethex+0xee>
 800821a:	f04f 0901 	mov.w	r9, #1
 800821e:	e7fa      	b.n	8008216 <__gethex+0x142>
 8008220:	230a      	movs	r3, #10
 8008222:	fb03 0202 	mla	r2, r3, r2, r0
 8008226:	3a10      	subs	r2, #16
 8008228:	e7d4      	b.n	80081d4 <__gethex+0x100>
 800822a:	4631      	mov	r1, r6
 800822c:	e7df      	b.n	80081ee <__gethex+0x11a>
 800822e:	1bf3      	subs	r3, r6, r7
 8008230:	3b01      	subs	r3, #1
 8008232:	4621      	mov	r1, r4
 8008234:	2b07      	cmp	r3, #7
 8008236:	dc0b      	bgt.n	8008250 <__gethex+0x17c>
 8008238:	ee18 0a10 	vmov	r0, s16
 800823c:	f000 fa7e 	bl	800873c <_Balloc>
 8008240:	4604      	mov	r4, r0
 8008242:	b940      	cbnz	r0, 8008256 <__gethex+0x182>
 8008244:	4b5d      	ldr	r3, [pc, #372]	; (80083bc <__gethex+0x2e8>)
 8008246:	4602      	mov	r2, r0
 8008248:	21de      	movs	r1, #222	; 0xde
 800824a:	485d      	ldr	r0, [pc, #372]	; (80083c0 <__gethex+0x2ec>)
 800824c:	f001 f9c6 	bl	80095dc <__assert_func>
 8008250:	3101      	adds	r1, #1
 8008252:	105b      	asrs	r3, r3, #1
 8008254:	e7ee      	b.n	8008234 <__gethex+0x160>
 8008256:	f100 0914 	add.w	r9, r0, #20
 800825a:	f04f 0b00 	mov.w	fp, #0
 800825e:	f1ca 0301 	rsb	r3, sl, #1
 8008262:	f8cd 9008 	str.w	r9, [sp, #8]
 8008266:	f8cd b000 	str.w	fp, [sp]
 800826a:	9306      	str	r3, [sp, #24]
 800826c:	42b7      	cmp	r7, r6
 800826e:	d340      	bcc.n	80082f2 <__gethex+0x21e>
 8008270:	9802      	ldr	r0, [sp, #8]
 8008272:	9b00      	ldr	r3, [sp, #0]
 8008274:	f840 3b04 	str.w	r3, [r0], #4
 8008278:	eba0 0009 	sub.w	r0, r0, r9
 800827c:	1080      	asrs	r0, r0, #2
 800827e:	0146      	lsls	r6, r0, #5
 8008280:	6120      	str	r0, [r4, #16]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fb4c 	bl	8008920 <__hi0bits>
 8008288:	1a30      	subs	r0, r6, r0
 800828a:	f8d8 6000 	ldr.w	r6, [r8]
 800828e:	42b0      	cmp	r0, r6
 8008290:	dd63      	ble.n	800835a <__gethex+0x286>
 8008292:	1b87      	subs	r7, r0, r6
 8008294:	4639      	mov	r1, r7
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fef0 	bl	800907c <__any_on>
 800829c:	4682      	mov	sl, r0
 800829e:	b1a8      	cbz	r0, 80082cc <__gethex+0x1f8>
 80082a0:	1e7b      	subs	r3, r7, #1
 80082a2:	1159      	asrs	r1, r3, #5
 80082a4:	f003 021f 	and.w	r2, r3, #31
 80082a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80082ac:	f04f 0a01 	mov.w	sl, #1
 80082b0:	fa0a f202 	lsl.w	r2, sl, r2
 80082b4:	420a      	tst	r2, r1
 80082b6:	d009      	beq.n	80082cc <__gethex+0x1f8>
 80082b8:	4553      	cmp	r3, sl
 80082ba:	dd05      	ble.n	80082c8 <__gethex+0x1f4>
 80082bc:	1eb9      	subs	r1, r7, #2
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 fedc 	bl	800907c <__any_on>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d145      	bne.n	8008354 <__gethex+0x280>
 80082c8:	f04f 0a02 	mov.w	sl, #2
 80082cc:	4639      	mov	r1, r7
 80082ce:	4620      	mov	r0, r4
 80082d0:	f7ff fe98 	bl	8008004 <rshift>
 80082d4:	443d      	add	r5, r7
 80082d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082da:	42ab      	cmp	r3, r5
 80082dc:	da4c      	bge.n	8008378 <__gethex+0x2a4>
 80082de:	ee18 0a10 	vmov	r0, s16
 80082e2:	4621      	mov	r1, r4
 80082e4:	f000 fa6a 	bl	80087bc <_Bfree>
 80082e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082ea:	2300      	movs	r3, #0
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	27a3      	movs	r7, #163	; 0xa3
 80082f0:	e785      	b.n	80081fe <__gethex+0x12a>
 80082f2:	1e73      	subs	r3, r6, #1
 80082f4:	9a05      	ldr	r2, [sp, #20]
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d019      	beq.n	8008334 <__gethex+0x260>
 8008300:	f1bb 0f20 	cmp.w	fp, #32
 8008304:	d107      	bne.n	8008316 <__gethex+0x242>
 8008306:	9b02      	ldr	r3, [sp, #8]
 8008308:	9a00      	ldr	r2, [sp, #0]
 800830a:	f843 2b04 	str.w	r2, [r3], #4
 800830e:	9302      	str	r3, [sp, #8]
 8008310:	2300      	movs	r3, #0
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	469b      	mov	fp, r3
 8008316:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800831a:	f7ff fec5 	bl	80080a8 <__hexdig_fun>
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	f000 000f 	and.w	r0, r0, #15
 8008324:	fa00 f00b 	lsl.w	r0, r0, fp
 8008328:	4303      	orrs	r3, r0
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	f10b 0b04 	add.w	fp, fp, #4
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	e00d      	b.n	8008350 <__gethex+0x27c>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	9a06      	ldr	r2, [sp, #24]
 8008338:	4413      	add	r3, r2
 800833a:	42bb      	cmp	r3, r7
 800833c:	d3e0      	bcc.n	8008300 <__gethex+0x22c>
 800833e:	4618      	mov	r0, r3
 8008340:	9901      	ldr	r1, [sp, #4]
 8008342:	9307      	str	r3, [sp, #28]
 8008344:	4652      	mov	r2, sl
 8008346:	f001 f927 	bl	8009598 <strncmp>
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2800      	cmp	r0, #0
 800834e:	d1d7      	bne.n	8008300 <__gethex+0x22c>
 8008350:	461e      	mov	r6, r3
 8008352:	e78b      	b.n	800826c <__gethex+0x198>
 8008354:	f04f 0a03 	mov.w	sl, #3
 8008358:	e7b8      	b.n	80082cc <__gethex+0x1f8>
 800835a:	da0a      	bge.n	8008372 <__gethex+0x29e>
 800835c:	1a37      	subs	r7, r6, r0
 800835e:	4621      	mov	r1, r4
 8008360:	ee18 0a10 	vmov	r0, s16
 8008364:	463a      	mov	r2, r7
 8008366:	f000 fc45 	bl	8008bf4 <__lshift>
 800836a:	1bed      	subs	r5, r5, r7
 800836c:	4604      	mov	r4, r0
 800836e:	f100 0914 	add.w	r9, r0, #20
 8008372:	f04f 0a00 	mov.w	sl, #0
 8008376:	e7ae      	b.n	80082d6 <__gethex+0x202>
 8008378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800837c:	42a8      	cmp	r0, r5
 800837e:	dd72      	ble.n	8008466 <__gethex+0x392>
 8008380:	1b45      	subs	r5, r0, r5
 8008382:	42ae      	cmp	r6, r5
 8008384:	dc36      	bgt.n	80083f4 <__gethex+0x320>
 8008386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d02a      	beq.n	80083e4 <__gethex+0x310>
 800838e:	2b03      	cmp	r3, #3
 8008390:	d02c      	beq.n	80083ec <__gethex+0x318>
 8008392:	2b01      	cmp	r3, #1
 8008394:	d11c      	bne.n	80083d0 <__gethex+0x2fc>
 8008396:	42ae      	cmp	r6, r5
 8008398:	d11a      	bne.n	80083d0 <__gethex+0x2fc>
 800839a:	2e01      	cmp	r6, #1
 800839c:	d112      	bne.n	80083c4 <__gethex+0x2f0>
 800839e:	9a04      	ldr	r2, [sp, #16]
 80083a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	2301      	movs	r3, #1
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	f8c9 3000 	str.w	r3, [r9]
 80083ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083b0:	2762      	movs	r7, #98	; 0x62
 80083b2:	601c      	str	r4, [r3, #0]
 80083b4:	e723      	b.n	80081fe <__gethex+0x12a>
 80083b6:	bf00      	nop
 80083b8:	0800a420 	.word	0x0800a420
 80083bc:	0800a3a8 	.word	0x0800a3a8
 80083c0:	0800a3b9 	.word	0x0800a3b9
 80083c4:	1e71      	subs	r1, r6, #1
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 fe58 	bl	800907c <__any_on>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d1e6      	bne.n	800839e <__gethex+0x2ca>
 80083d0:	ee18 0a10 	vmov	r0, s16
 80083d4:	4621      	mov	r1, r4
 80083d6:	f000 f9f1 	bl	80087bc <_Bfree>
 80083da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083dc:	2300      	movs	r3, #0
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	2750      	movs	r7, #80	; 0x50
 80083e2:	e70c      	b.n	80081fe <__gethex+0x12a>
 80083e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f2      	bne.n	80083d0 <__gethex+0x2fc>
 80083ea:	e7d8      	b.n	800839e <__gethex+0x2ca>
 80083ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1d5      	bne.n	800839e <__gethex+0x2ca>
 80083f2:	e7ed      	b.n	80083d0 <__gethex+0x2fc>
 80083f4:	1e6f      	subs	r7, r5, #1
 80083f6:	f1ba 0f00 	cmp.w	sl, #0
 80083fa:	d131      	bne.n	8008460 <__gethex+0x38c>
 80083fc:	b127      	cbz	r7, 8008408 <__gethex+0x334>
 80083fe:	4639      	mov	r1, r7
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fe3b 	bl	800907c <__any_on>
 8008406:	4682      	mov	sl, r0
 8008408:	117b      	asrs	r3, r7, #5
 800840a:	2101      	movs	r1, #1
 800840c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008410:	f007 071f 	and.w	r7, r7, #31
 8008414:	fa01 f707 	lsl.w	r7, r1, r7
 8008418:	421f      	tst	r7, r3
 800841a:	4629      	mov	r1, r5
 800841c:	4620      	mov	r0, r4
 800841e:	bf18      	it	ne
 8008420:	f04a 0a02 	orrne.w	sl, sl, #2
 8008424:	1b76      	subs	r6, r6, r5
 8008426:	f7ff fded 	bl	8008004 <rshift>
 800842a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800842e:	2702      	movs	r7, #2
 8008430:	f1ba 0f00 	cmp.w	sl, #0
 8008434:	d048      	beq.n	80084c8 <__gethex+0x3f4>
 8008436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d015      	beq.n	800846a <__gethex+0x396>
 800843e:	2b03      	cmp	r3, #3
 8008440:	d017      	beq.n	8008472 <__gethex+0x39e>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d109      	bne.n	800845a <__gethex+0x386>
 8008446:	f01a 0f02 	tst.w	sl, #2
 800844a:	d006      	beq.n	800845a <__gethex+0x386>
 800844c:	f8d9 0000 	ldr.w	r0, [r9]
 8008450:	ea4a 0a00 	orr.w	sl, sl, r0
 8008454:	f01a 0f01 	tst.w	sl, #1
 8008458:	d10e      	bne.n	8008478 <__gethex+0x3a4>
 800845a:	f047 0710 	orr.w	r7, r7, #16
 800845e:	e033      	b.n	80084c8 <__gethex+0x3f4>
 8008460:	f04f 0a01 	mov.w	sl, #1
 8008464:	e7d0      	b.n	8008408 <__gethex+0x334>
 8008466:	2701      	movs	r7, #1
 8008468:	e7e2      	b.n	8008430 <__gethex+0x35c>
 800846a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800846c:	f1c3 0301 	rsb	r3, r3, #1
 8008470:	9315      	str	r3, [sp, #84]	; 0x54
 8008472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <__gethex+0x386>
 8008478:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800847c:	f104 0314 	add.w	r3, r4, #20
 8008480:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008484:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008488:	f04f 0c00 	mov.w	ip, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008492:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008496:	d01c      	beq.n	80084d2 <__gethex+0x3fe>
 8008498:	3201      	adds	r2, #1
 800849a:	6002      	str	r2, [r0, #0]
 800849c:	2f02      	cmp	r7, #2
 800849e:	f104 0314 	add.w	r3, r4, #20
 80084a2:	d13f      	bne.n	8008524 <__gethex+0x450>
 80084a4:	f8d8 2000 	ldr.w	r2, [r8]
 80084a8:	3a01      	subs	r2, #1
 80084aa:	42b2      	cmp	r2, r6
 80084ac:	d10a      	bne.n	80084c4 <__gethex+0x3f0>
 80084ae:	1171      	asrs	r1, r6, #5
 80084b0:	2201      	movs	r2, #1
 80084b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084b6:	f006 061f 	and.w	r6, r6, #31
 80084ba:	fa02 f606 	lsl.w	r6, r2, r6
 80084be:	421e      	tst	r6, r3
 80084c0:	bf18      	it	ne
 80084c2:	4617      	movne	r7, r2
 80084c4:	f047 0720 	orr.w	r7, r7, #32
 80084c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084ca:	601c      	str	r4, [r3, #0]
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	601d      	str	r5, [r3, #0]
 80084d0:	e695      	b.n	80081fe <__gethex+0x12a>
 80084d2:	4299      	cmp	r1, r3
 80084d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80084d8:	d8d8      	bhi.n	800848c <__gethex+0x3b8>
 80084da:	68a3      	ldr	r3, [r4, #8]
 80084dc:	459b      	cmp	fp, r3
 80084de:	db19      	blt.n	8008514 <__gethex+0x440>
 80084e0:	6861      	ldr	r1, [r4, #4]
 80084e2:	ee18 0a10 	vmov	r0, s16
 80084e6:	3101      	adds	r1, #1
 80084e8:	f000 f928 	bl	800873c <_Balloc>
 80084ec:	4681      	mov	r9, r0
 80084ee:	b918      	cbnz	r0, 80084f8 <__gethex+0x424>
 80084f0:	4b1a      	ldr	r3, [pc, #104]	; (800855c <__gethex+0x488>)
 80084f2:	4602      	mov	r2, r0
 80084f4:	2184      	movs	r1, #132	; 0x84
 80084f6:	e6a8      	b.n	800824a <__gethex+0x176>
 80084f8:	6922      	ldr	r2, [r4, #16]
 80084fa:	3202      	adds	r2, #2
 80084fc:	f104 010c 	add.w	r1, r4, #12
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	300c      	adds	r0, #12
 8008504:	f000 f90c 	bl	8008720 <memcpy>
 8008508:	4621      	mov	r1, r4
 800850a:	ee18 0a10 	vmov	r0, s16
 800850e:	f000 f955 	bl	80087bc <_Bfree>
 8008512:	464c      	mov	r4, r9
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800851c:	6122      	str	r2, [r4, #16]
 800851e:	2201      	movs	r2, #1
 8008520:	615a      	str	r2, [r3, #20]
 8008522:	e7bb      	b.n	800849c <__gethex+0x3c8>
 8008524:	6922      	ldr	r2, [r4, #16]
 8008526:	455a      	cmp	r2, fp
 8008528:	dd0b      	ble.n	8008542 <__gethex+0x46e>
 800852a:	2101      	movs	r1, #1
 800852c:	4620      	mov	r0, r4
 800852e:	f7ff fd69 	bl	8008004 <rshift>
 8008532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008536:	3501      	adds	r5, #1
 8008538:	42ab      	cmp	r3, r5
 800853a:	f6ff aed0 	blt.w	80082de <__gethex+0x20a>
 800853e:	2701      	movs	r7, #1
 8008540:	e7c0      	b.n	80084c4 <__gethex+0x3f0>
 8008542:	f016 061f 	ands.w	r6, r6, #31
 8008546:	d0fa      	beq.n	800853e <__gethex+0x46a>
 8008548:	4453      	add	r3, sl
 800854a:	f1c6 0620 	rsb	r6, r6, #32
 800854e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008552:	f000 f9e5 	bl	8008920 <__hi0bits>
 8008556:	42b0      	cmp	r0, r6
 8008558:	dbe7      	blt.n	800852a <__gethex+0x456>
 800855a:	e7f0      	b.n	800853e <__gethex+0x46a>
 800855c:	0800a3a8 	.word	0x0800a3a8

08008560 <L_shift>:
 8008560:	f1c2 0208 	rsb	r2, r2, #8
 8008564:	0092      	lsls	r2, r2, #2
 8008566:	b570      	push	{r4, r5, r6, lr}
 8008568:	f1c2 0620 	rsb	r6, r2, #32
 800856c:	6843      	ldr	r3, [r0, #4]
 800856e:	6804      	ldr	r4, [r0, #0]
 8008570:	fa03 f506 	lsl.w	r5, r3, r6
 8008574:	432c      	orrs	r4, r5
 8008576:	40d3      	lsrs	r3, r2
 8008578:	6004      	str	r4, [r0, #0]
 800857a:	f840 3f04 	str.w	r3, [r0, #4]!
 800857e:	4288      	cmp	r0, r1
 8008580:	d3f4      	bcc.n	800856c <L_shift+0xc>
 8008582:	bd70      	pop	{r4, r5, r6, pc}

08008584 <__match>:
 8008584:	b530      	push	{r4, r5, lr}
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	3301      	adds	r3, #1
 800858a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800858e:	b914      	cbnz	r4, 8008596 <__match+0x12>
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	2001      	movs	r0, #1
 8008594:	bd30      	pop	{r4, r5, pc}
 8008596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800859a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800859e:	2d19      	cmp	r5, #25
 80085a0:	bf98      	it	ls
 80085a2:	3220      	addls	r2, #32
 80085a4:	42a2      	cmp	r2, r4
 80085a6:	d0f0      	beq.n	800858a <__match+0x6>
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7f3      	b.n	8008594 <__match+0x10>

080085ac <__hexnan>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	680b      	ldr	r3, [r1, #0]
 80085b2:	115e      	asrs	r6, r3, #5
 80085b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085b8:	f013 031f 	ands.w	r3, r3, #31
 80085bc:	b087      	sub	sp, #28
 80085be:	bf18      	it	ne
 80085c0:	3604      	addne	r6, #4
 80085c2:	2500      	movs	r5, #0
 80085c4:	1f37      	subs	r7, r6, #4
 80085c6:	4690      	mov	r8, r2
 80085c8:	6802      	ldr	r2, [r0, #0]
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	4682      	mov	sl, r0
 80085ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80085d2:	46b9      	mov	r9, r7
 80085d4:	463c      	mov	r4, r7
 80085d6:	9502      	str	r5, [sp, #8]
 80085d8:	46ab      	mov	fp, r5
 80085da:	7851      	ldrb	r1, [r2, #1]
 80085dc:	1c53      	adds	r3, r2, #1
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	b341      	cbz	r1, 8008634 <__hexnan+0x88>
 80085e2:	4608      	mov	r0, r1
 80085e4:	9205      	str	r2, [sp, #20]
 80085e6:	9104      	str	r1, [sp, #16]
 80085e8:	f7ff fd5e 	bl	80080a8 <__hexdig_fun>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d14f      	bne.n	8008690 <__hexnan+0xe4>
 80085f0:	9904      	ldr	r1, [sp, #16]
 80085f2:	9a05      	ldr	r2, [sp, #20]
 80085f4:	2920      	cmp	r1, #32
 80085f6:	d818      	bhi.n	800862a <__hexnan+0x7e>
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	459b      	cmp	fp, r3
 80085fc:	dd13      	ble.n	8008626 <__hexnan+0x7a>
 80085fe:	454c      	cmp	r4, r9
 8008600:	d206      	bcs.n	8008610 <__hexnan+0x64>
 8008602:	2d07      	cmp	r5, #7
 8008604:	dc04      	bgt.n	8008610 <__hexnan+0x64>
 8008606:	462a      	mov	r2, r5
 8008608:	4649      	mov	r1, r9
 800860a:	4620      	mov	r0, r4
 800860c:	f7ff ffa8 	bl	8008560 <L_shift>
 8008610:	4544      	cmp	r4, r8
 8008612:	d950      	bls.n	80086b6 <__hexnan+0x10a>
 8008614:	2300      	movs	r3, #0
 8008616:	f1a4 0904 	sub.w	r9, r4, #4
 800861a:	f844 3c04 	str.w	r3, [r4, #-4]
 800861e:	f8cd b008 	str.w	fp, [sp, #8]
 8008622:	464c      	mov	r4, r9
 8008624:	461d      	mov	r5, r3
 8008626:	9a03      	ldr	r2, [sp, #12]
 8008628:	e7d7      	b.n	80085da <__hexnan+0x2e>
 800862a:	2929      	cmp	r1, #41	; 0x29
 800862c:	d156      	bne.n	80086dc <__hexnan+0x130>
 800862e:	3202      	adds	r2, #2
 8008630:	f8ca 2000 	str.w	r2, [sl]
 8008634:	f1bb 0f00 	cmp.w	fp, #0
 8008638:	d050      	beq.n	80086dc <__hexnan+0x130>
 800863a:	454c      	cmp	r4, r9
 800863c:	d206      	bcs.n	800864c <__hexnan+0xa0>
 800863e:	2d07      	cmp	r5, #7
 8008640:	dc04      	bgt.n	800864c <__hexnan+0xa0>
 8008642:	462a      	mov	r2, r5
 8008644:	4649      	mov	r1, r9
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff ff8a 	bl	8008560 <L_shift>
 800864c:	4544      	cmp	r4, r8
 800864e:	d934      	bls.n	80086ba <__hexnan+0x10e>
 8008650:	f1a8 0204 	sub.w	r2, r8, #4
 8008654:	4623      	mov	r3, r4
 8008656:	f853 1b04 	ldr.w	r1, [r3], #4
 800865a:	f842 1f04 	str.w	r1, [r2, #4]!
 800865e:	429f      	cmp	r7, r3
 8008660:	d2f9      	bcs.n	8008656 <__hexnan+0xaa>
 8008662:	1b3b      	subs	r3, r7, r4
 8008664:	f023 0303 	bic.w	r3, r3, #3
 8008668:	3304      	adds	r3, #4
 800866a:	3401      	adds	r4, #1
 800866c:	3e03      	subs	r6, #3
 800866e:	42b4      	cmp	r4, r6
 8008670:	bf88      	it	hi
 8008672:	2304      	movhi	r3, #4
 8008674:	4443      	add	r3, r8
 8008676:	2200      	movs	r2, #0
 8008678:	f843 2b04 	str.w	r2, [r3], #4
 800867c:	429f      	cmp	r7, r3
 800867e:	d2fb      	bcs.n	8008678 <__hexnan+0xcc>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	b91b      	cbnz	r3, 800868c <__hexnan+0xe0>
 8008684:	4547      	cmp	r7, r8
 8008686:	d127      	bne.n	80086d8 <__hexnan+0x12c>
 8008688:	2301      	movs	r3, #1
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	2005      	movs	r0, #5
 800868e:	e026      	b.n	80086de <__hexnan+0x132>
 8008690:	3501      	adds	r5, #1
 8008692:	2d08      	cmp	r5, #8
 8008694:	f10b 0b01 	add.w	fp, fp, #1
 8008698:	dd06      	ble.n	80086a8 <__hexnan+0xfc>
 800869a:	4544      	cmp	r4, r8
 800869c:	d9c3      	bls.n	8008626 <__hexnan+0x7a>
 800869e:	2300      	movs	r3, #0
 80086a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80086a4:	2501      	movs	r5, #1
 80086a6:	3c04      	subs	r4, #4
 80086a8:	6822      	ldr	r2, [r4, #0]
 80086aa:	f000 000f 	and.w	r0, r0, #15
 80086ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80086b2:	6022      	str	r2, [r4, #0]
 80086b4:	e7b7      	b.n	8008626 <__hexnan+0x7a>
 80086b6:	2508      	movs	r5, #8
 80086b8:	e7b5      	b.n	8008626 <__hexnan+0x7a>
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0df      	beq.n	8008680 <__hexnan+0xd4>
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	f1c3 0320 	rsb	r3, r3, #32
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
 80086cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086d0:	401a      	ands	r2, r3
 80086d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80086d6:	e7d3      	b.n	8008680 <__hexnan+0xd4>
 80086d8:	3f04      	subs	r7, #4
 80086da:	e7d1      	b.n	8008680 <__hexnan+0xd4>
 80086dc:	2004      	movs	r0, #4
 80086de:	b007      	add	sp, #28
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086e4 <_localeconv_r>:
 80086e4:	4800      	ldr	r0, [pc, #0]	; (80086e8 <_localeconv_r+0x4>)
 80086e6:	4770      	bx	lr
 80086e8:	2000027c 	.word	0x2000027c

080086ec <malloc>:
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <malloc+0xc>)
 80086ee:	4601      	mov	r1, r0
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	f000 bd67 	b.w	80091c4 <_malloc_r>
 80086f6:	bf00      	nop
 80086f8:	20000124 	.word	0x20000124

080086fc <__ascii_mbtowc>:
 80086fc:	b082      	sub	sp, #8
 80086fe:	b901      	cbnz	r1, 8008702 <__ascii_mbtowc+0x6>
 8008700:	a901      	add	r1, sp, #4
 8008702:	b142      	cbz	r2, 8008716 <__ascii_mbtowc+0x1a>
 8008704:	b14b      	cbz	r3, 800871a <__ascii_mbtowc+0x1e>
 8008706:	7813      	ldrb	r3, [r2, #0]
 8008708:	600b      	str	r3, [r1, #0]
 800870a:	7812      	ldrb	r2, [r2, #0]
 800870c:	1e10      	subs	r0, r2, #0
 800870e:	bf18      	it	ne
 8008710:	2001      	movne	r0, #1
 8008712:	b002      	add	sp, #8
 8008714:	4770      	bx	lr
 8008716:	4610      	mov	r0, r2
 8008718:	e7fb      	b.n	8008712 <__ascii_mbtowc+0x16>
 800871a:	f06f 0001 	mvn.w	r0, #1
 800871e:	e7f8      	b.n	8008712 <__ascii_mbtowc+0x16>

08008720 <memcpy>:
 8008720:	440a      	add	r2, r1
 8008722:	4291      	cmp	r1, r2
 8008724:	f100 33ff 	add.w	r3, r0, #4294967295
 8008728:	d100      	bne.n	800872c <memcpy+0xc>
 800872a:	4770      	bx	lr
 800872c:	b510      	push	{r4, lr}
 800872e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008736:	4291      	cmp	r1, r2
 8008738:	d1f9      	bne.n	800872e <memcpy+0xe>
 800873a:	bd10      	pop	{r4, pc}

0800873c <_Balloc>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	b976      	cbnz	r6, 8008764 <_Balloc+0x28>
 8008746:	2010      	movs	r0, #16
 8008748:	f7ff ffd0 	bl	80086ec <malloc>
 800874c:	4602      	mov	r2, r0
 800874e:	6260      	str	r0, [r4, #36]	; 0x24
 8008750:	b920      	cbnz	r0, 800875c <_Balloc+0x20>
 8008752:	4b18      	ldr	r3, [pc, #96]	; (80087b4 <_Balloc+0x78>)
 8008754:	4818      	ldr	r0, [pc, #96]	; (80087b8 <_Balloc+0x7c>)
 8008756:	2166      	movs	r1, #102	; 0x66
 8008758:	f000 ff40 	bl	80095dc <__assert_func>
 800875c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008760:	6006      	str	r6, [r0, #0]
 8008762:	60c6      	str	r6, [r0, #12]
 8008764:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008766:	68f3      	ldr	r3, [r6, #12]
 8008768:	b183      	cbz	r3, 800878c <_Balloc+0x50>
 800876a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008772:	b9b8      	cbnz	r0, 80087a4 <_Balloc+0x68>
 8008774:	2101      	movs	r1, #1
 8008776:	fa01 f605 	lsl.w	r6, r1, r5
 800877a:	1d72      	adds	r2, r6, #5
 800877c:	0092      	lsls	r2, r2, #2
 800877e:	4620      	mov	r0, r4
 8008780:	f000 fc9d 	bl	80090be <_calloc_r>
 8008784:	b160      	cbz	r0, 80087a0 <_Balloc+0x64>
 8008786:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800878a:	e00e      	b.n	80087aa <_Balloc+0x6e>
 800878c:	2221      	movs	r2, #33	; 0x21
 800878e:	2104      	movs	r1, #4
 8008790:	4620      	mov	r0, r4
 8008792:	f000 fc94 	bl	80090be <_calloc_r>
 8008796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008798:	60f0      	str	r0, [r6, #12]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e4      	bne.n	800876a <_Balloc+0x2e>
 80087a0:	2000      	movs	r0, #0
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	6802      	ldr	r2, [r0, #0]
 80087a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087aa:	2300      	movs	r3, #0
 80087ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087b0:	e7f7      	b.n	80087a2 <_Balloc+0x66>
 80087b2:	bf00      	nop
 80087b4:	0800a336 	.word	0x0800a336
 80087b8:	0800a434 	.word	0x0800a434

080087bc <_Bfree>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087c0:	4605      	mov	r5, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	b976      	cbnz	r6, 80087e4 <_Bfree+0x28>
 80087c6:	2010      	movs	r0, #16
 80087c8:	f7ff ff90 	bl	80086ec <malloc>
 80087cc:	4602      	mov	r2, r0
 80087ce:	6268      	str	r0, [r5, #36]	; 0x24
 80087d0:	b920      	cbnz	r0, 80087dc <_Bfree+0x20>
 80087d2:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <_Bfree+0x3c>)
 80087d4:	4809      	ldr	r0, [pc, #36]	; (80087fc <_Bfree+0x40>)
 80087d6:	218a      	movs	r1, #138	; 0x8a
 80087d8:	f000 ff00 	bl	80095dc <__assert_func>
 80087dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e0:	6006      	str	r6, [r0, #0]
 80087e2:	60c6      	str	r6, [r0, #12]
 80087e4:	b13c      	cbz	r4, 80087f6 <_Bfree+0x3a>
 80087e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087f0:	6021      	str	r1, [r4, #0]
 80087f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	0800a336 	.word	0x0800a336
 80087fc:	0800a434 	.word	0x0800a434

08008800 <__multadd>:
 8008800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008804:	690d      	ldr	r5, [r1, #16]
 8008806:	4607      	mov	r7, r0
 8008808:	460c      	mov	r4, r1
 800880a:	461e      	mov	r6, r3
 800880c:	f101 0c14 	add.w	ip, r1, #20
 8008810:	2000      	movs	r0, #0
 8008812:	f8dc 3000 	ldr.w	r3, [ip]
 8008816:	b299      	uxth	r1, r3
 8008818:	fb02 6101 	mla	r1, r2, r1, r6
 800881c:	0c1e      	lsrs	r6, r3, #16
 800881e:	0c0b      	lsrs	r3, r1, #16
 8008820:	fb02 3306 	mla	r3, r2, r6, r3
 8008824:	b289      	uxth	r1, r1
 8008826:	3001      	adds	r0, #1
 8008828:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800882c:	4285      	cmp	r5, r0
 800882e:	f84c 1b04 	str.w	r1, [ip], #4
 8008832:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008836:	dcec      	bgt.n	8008812 <__multadd+0x12>
 8008838:	b30e      	cbz	r6, 800887e <__multadd+0x7e>
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	42ab      	cmp	r3, r5
 800883e:	dc19      	bgt.n	8008874 <__multadd+0x74>
 8008840:	6861      	ldr	r1, [r4, #4]
 8008842:	4638      	mov	r0, r7
 8008844:	3101      	adds	r1, #1
 8008846:	f7ff ff79 	bl	800873c <_Balloc>
 800884a:	4680      	mov	r8, r0
 800884c:	b928      	cbnz	r0, 800885a <__multadd+0x5a>
 800884e:	4602      	mov	r2, r0
 8008850:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <__multadd+0x84>)
 8008852:	480d      	ldr	r0, [pc, #52]	; (8008888 <__multadd+0x88>)
 8008854:	21b5      	movs	r1, #181	; 0xb5
 8008856:	f000 fec1 	bl	80095dc <__assert_func>
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	3202      	adds	r2, #2
 800885e:	f104 010c 	add.w	r1, r4, #12
 8008862:	0092      	lsls	r2, r2, #2
 8008864:	300c      	adds	r0, #12
 8008866:	f7ff ff5b 	bl	8008720 <memcpy>
 800886a:	4621      	mov	r1, r4
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff ffa5 	bl	80087bc <_Bfree>
 8008872:	4644      	mov	r4, r8
 8008874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008878:	3501      	adds	r5, #1
 800887a:	615e      	str	r6, [r3, #20]
 800887c:	6125      	str	r5, [r4, #16]
 800887e:	4620      	mov	r0, r4
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	0800a3a8 	.word	0x0800a3a8
 8008888:	0800a434 	.word	0x0800a434

0800888c <__s2b>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	460c      	mov	r4, r1
 8008892:	4615      	mov	r5, r2
 8008894:	461f      	mov	r7, r3
 8008896:	2209      	movs	r2, #9
 8008898:	3308      	adds	r3, #8
 800889a:	4606      	mov	r6, r0
 800889c:	fb93 f3f2 	sdiv	r3, r3, r2
 80088a0:	2100      	movs	r1, #0
 80088a2:	2201      	movs	r2, #1
 80088a4:	429a      	cmp	r2, r3
 80088a6:	db09      	blt.n	80088bc <__s2b+0x30>
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff ff47 	bl	800873c <_Balloc>
 80088ae:	b940      	cbnz	r0, 80088c2 <__s2b+0x36>
 80088b0:	4602      	mov	r2, r0
 80088b2:	4b19      	ldr	r3, [pc, #100]	; (8008918 <__s2b+0x8c>)
 80088b4:	4819      	ldr	r0, [pc, #100]	; (800891c <__s2b+0x90>)
 80088b6:	21ce      	movs	r1, #206	; 0xce
 80088b8:	f000 fe90 	bl	80095dc <__assert_func>
 80088bc:	0052      	lsls	r2, r2, #1
 80088be:	3101      	adds	r1, #1
 80088c0:	e7f0      	b.n	80088a4 <__s2b+0x18>
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	6143      	str	r3, [r0, #20]
 80088c6:	2d09      	cmp	r5, #9
 80088c8:	f04f 0301 	mov.w	r3, #1
 80088cc:	6103      	str	r3, [r0, #16]
 80088ce:	dd16      	ble.n	80088fe <__s2b+0x72>
 80088d0:	f104 0909 	add.w	r9, r4, #9
 80088d4:	46c8      	mov	r8, r9
 80088d6:	442c      	add	r4, r5
 80088d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088dc:	4601      	mov	r1, r0
 80088de:	3b30      	subs	r3, #48	; 0x30
 80088e0:	220a      	movs	r2, #10
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7ff ff8c 	bl	8008800 <__multadd>
 80088e8:	45a0      	cmp	r8, r4
 80088ea:	d1f5      	bne.n	80088d8 <__s2b+0x4c>
 80088ec:	f1a5 0408 	sub.w	r4, r5, #8
 80088f0:	444c      	add	r4, r9
 80088f2:	1b2d      	subs	r5, r5, r4
 80088f4:	1963      	adds	r3, r4, r5
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	db04      	blt.n	8008904 <__s2b+0x78>
 80088fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fe:	340a      	adds	r4, #10
 8008900:	2509      	movs	r5, #9
 8008902:	e7f6      	b.n	80088f2 <__s2b+0x66>
 8008904:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008908:	4601      	mov	r1, r0
 800890a:	3b30      	subs	r3, #48	; 0x30
 800890c:	220a      	movs	r2, #10
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff ff76 	bl	8008800 <__multadd>
 8008914:	e7ee      	b.n	80088f4 <__s2b+0x68>
 8008916:	bf00      	nop
 8008918:	0800a3a8 	.word	0x0800a3a8
 800891c:	0800a434 	.word	0x0800a434

08008920 <__hi0bits>:
 8008920:	0c03      	lsrs	r3, r0, #16
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	b9d3      	cbnz	r3, 800895c <__hi0bits+0x3c>
 8008926:	0400      	lsls	r0, r0, #16
 8008928:	2310      	movs	r3, #16
 800892a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800892e:	bf04      	itt	eq
 8008930:	0200      	lsleq	r0, r0, #8
 8008932:	3308      	addeq	r3, #8
 8008934:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008938:	bf04      	itt	eq
 800893a:	0100      	lsleq	r0, r0, #4
 800893c:	3304      	addeq	r3, #4
 800893e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008942:	bf04      	itt	eq
 8008944:	0080      	lsleq	r0, r0, #2
 8008946:	3302      	addeq	r3, #2
 8008948:	2800      	cmp	r0, #0
 800894a:	db05      	blt.n	8008958 <__hi0bits+0x38>
 800894c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008950:	f103 0301 	add.w	r3, r3, #1
 8008954:	bf08      	it	eq
 8008956:	2320      	moveq	r3, #32
 8008958:	4618      	mov	r0, r3
 800895a:	4770      	bx	lr
 800895c:	2300      	movs	r3, #0
 800895e:	e7e4      	b.n	800892a <__hi0bits+0xa>

08008960 <__lo0bits>:
 8008960:	6803      	ldr	r3, [r0, #0]
 8008962:	f013 0207 	ands.w	r2, r3, #7
 8008966:	4601      	mov	r1, r0
 8008968:	d00b      	beq.n	8008982 <__lo0bits+0x22>
 800896a:	07da      	lsls	r2, r3, #31
 800896c:	d423      	bmi.n	80089b6 <__lo0bits+0x56>
 800896e:	0798      	lsls	r0, r3, #30
 8008970:	bf49      	itett	mi
 8008972:	085b      	lsrmi	r3, r3, #1
 8008974:	089b      	lsrpl	r3, r3, #2
 8008976:	2001      	movmi	r0, #1
 8008978:	600b      	strmi	r3, [r1, #0]
 800897a:	bf5c      	itt	pl
 800897c:	600b      	strpl	r3, [r1, #0]
 800897e:	2002      	movpl	r0, #2
 8008980:	4770      	bx	lr
 8008982:	b298      	uxth	r0, r3
 8008984:	b9a8      	cbnz	r0, 80089b2 <__lo0bits+0x52>
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	2010      	movs	r0, #16
 800898a:	b2da      	uxtb	r2, r3
 800898c:	b90a      	cbnz	r2, 8008992 <__lo0bits+0x32>
 800898e:	3008      	adds	r0, #8
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	071a      	lsls	r2, r3, #28
 8008994:	bf04      	itt	eq
 8008996:	091b      	lsreq	r3, r3, #4
 8008998:	3004      	addeq	r0, #4
 800899a:	079a      	lsls	r2, r3, #30
 800899c:	bf04      	itt	eq
 800899e:	089b      	lsreq	r3, r3, #2
 80089a0:	3002      	addeq	r0, #2
 80089a2:	07da      	lsls	r2, r3, #31
 80089a4:	d403      	bmi.n	80089ae <__lo0bits+0x4e>
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	f100 0001 	add.w	r0, r0, #1
 80089ac:	d005      	beq.n	80089ba <__lo0bits+0x5a>
 80089ae:	600b      	str	r3, [r1, #0]
 80089b0:	4770      	bx	lr
 80089b2:	4610      	mov	r0, r2
 80089b4:	e7e9      	b.n	800898a <__lo0bits+0x2a>
 80089b6:	2000      	movs	r0, #0
 80089b8:	4770      	bx	lr
 80089ba:	2020      	movs	r0, #32
 80089bc:	4770      	bx	lr
	...

080089c0 <__i2b>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	2101      	movs	r1, #1
 80089c6:	f7ff feb9 	bl	800873c <_Balloc>
 80089ca:	4602      	mov	r2, r0
 80089cc:	b928      	cbnz	r0, 80089da <__i2b+0x1a>
 80089ce:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <__i2b+0x24>)
 80089d0:	4805      	ldr	r0, [pc, #20]	; (80089e8 <__i2b+0x28>)
 80089d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089d6:	f000 fe01 	bl	80095dc <__assert_func>
 80089da:	2301      	movs	r3, #1
 80089dc:	6144      	str	r4, [r0, #20]
 80089de:	6103      	str	r3, [r0, #16]
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	bf00      	nop
 80089e4:	0800a3a8 	.word	0x0800a3a8
 80089e8:	0800a434 	.word	0x0800a434

080089ec <__multiply>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	4691      	mov	r9, r2
 80089f2:	690a      	ldr	r2, [r1, #16]
 80089f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	bfb8      	it	lt
 80089fc:	460b      	movlt	r3, r1
 80089fe:	460c      	mov	r4, r1
 8008a00:	bfbc      	itt	lt
 8008a02:	464c      	movlt	r4, r9
 8008a04:	4699      	movlt	r9, r3
 8008a06:	6927      	ldr	r7, [r4, #16]
 8008a08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	6861      	ldr	r1, [r4, #4]
 8008a10:	eb07 060a 	add.w	r6, r7, sl
 8008a14:	42b3      	cmp	r3, r6
 8008a16:	b085      	sub	sp, #20
 8008a18:	bfb8      	it	lt
 8008a1a:	3101      	addlt	r1, #1
 8008a1c:	f7ff fe8e 	bl	800873c <_Balloc>
 8008a20:	b930      	cbnz	r0, 8008a30 <__multiply+0x44>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b44      	ldr	r3, [pc, #272]	; (8008b38 <__multiply+0x14c>)
 8008a26:	4845      	ldr	r0, [pc, #276]	; (8008b3c <__multiply+0x150>)
 8008a28:	f240 115d 	movw	r1, #349	; 0x15d
 8008a2c:	f000 fdd6 	bl	80095dc <__assert_func>
 8008a30:	f100 0514 	add.w	r5, r0, #20
 8008a34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a38:	462b      	mov	r3, r5
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4543      	cmp	r3, r8
 8008a3e:	d321      	bcc.n	8008a84 <__multiply+0x98>
 8008a40:	f104 0314 	add.w	r3, r4, #20
 8008a44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a48:	f109 0314 	add.w	r3, r9, #20
 8008a4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a50:	9202      	str	r2, [sp, #8]
 8008a52:	1b3a      	subs	r2, r7, r4
 8008a54:	3a15      	subs	r2, #21
 8008a56:	f022 0203 	bic.w	r2, r2, #3
 8008a5a:	3204      	adds	r2, #4
 8008a5c:	f104 0115 	add.w	r1, r4, #21
 8008a60:	428f      	cmp	r7, r1
 8008a62:	bf38      	it	cc
 8008a64:	2204      	movcc	r2, #4
 8008a66:	9201      	str	r2, [sp, #4]
 8008a68:	9a02      	ldr	r2, [sp, #8]
 8008a6a:	9303      	str	r3, [sp, #12]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d80c      	bhi.n	8008a8a <__multiply+0x9e>
 8008a70:	2e00      	cmp	r6, #0
 8008a72:	dd03      	ble.n	8008a7c <__multiply+0x90>
 8008a74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d05a      	beq.n	8008b32 <__multiply+0x146>
 8008a7c:	6106      	str	r6, [r0, #16]
 8008a7e:	b005      	add	sp, #20
 8008a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a84:	f843 2b04 	str.w	r2, [r3], #4
 8008a88:	e7d8      	b.n	8008a3c <__multiply+0x50>
 8008a8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a8e:	f1ba 0f00 	cmp.w	sl, #0
 8008a92:	d024      	beq.n	8008ade <__multiply+0xf2>
 8008a94:	f104 0e14 	add.w	lr, r4, #20
 8008a98:	46a9      	mov	r9, r5
 8008a9a:	f04f 0c00 	mov.w	ip, #0
 8008a9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008aa2:	f8d9 1000 	ldr.w	r1, [r9]
 8008aa6:	fa1f fb82 	uxth.w	fp, r2
 8008aaa:	b289      	uxth	r1, r1
 8008aac:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ab0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ab8:	4461      	add	r1, ip
 8008aba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008abe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ac2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ac6:	b289      	uxth	r1, r1
 8008ac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008acc:	4577      	cmp	r7, lr
 8008ace:	f849 1b04 	str.w	r1, [r9], #4
 8008ad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ad6:	d8e2      	bhi.n	8008a9e <__multiply+0xb2>
 8008ad8:	9a01      	ldr	r2, [sp, #4]
 8008ada:	f845 c002 	str.w	ip, [r5, r2]
 8008ade:	9a03      	ldr	r2, [sp, #12]
 8008ae0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	f1b9 0f00 	cmp.w	r9, #0
 8008aea:	d020      	beq.n	8008b2e <__multiply+0x142>
 8008aec:	6829      	ldr	r1, [r5, #0]
 8008aee:	f104 0c14 	add.w	ip, r4, #20
 8008af2:	46ae      	mov	lr, r5
 8008af4:	f04f 0a00 	mov.w	sl, #0
 8008af8:	f8bc b000 	ldrh.w	fp, [ip]
 8008afc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b00:	fb09 220b 	mla	r2, r9, fp, r2
 8008b04:	4492      	add	sl, r2
 8008b06:	b289      	uxth	r1, r1
 8008b08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b0c:	f84e 1b04 	str.w	r1, [lr], #4
 8008b10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b14:	f8be 1000 	ldrh.w	r1, [lr]
 8008b18:	0c12      	lsrs	r2, r2, #16
 8008b1a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b22:	4567      	cmp	r7, ip
 8008b24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b28:	d8e6      	bhi.n	8008af8 <__multiply+0x10c>
 8008b2a:	9a01      	ldr	r2, [sp, #4]
 8008b2c:	50a9      	str	r1, [r5, r2]
 8008b2e:	3504      	adds	r5, #4
 8008b30:	e79a      	b.n	8008a68 <__multiply+0x7c>
 8008b32:	3e01      	subs	r6, #1
 8008b34:	e79c      	b.n	8008a70 <__multiply+0x84>
 8008b36:	bf00      	nop
 8008b38:	0800a3a8 	.word	0x0800a3a8
 8008b3c:	0800a434 	.word	0x0800a434

08008b40 <__pow5mult>:
 8008b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b44:	4615      	mov	r5, r2
 8008b46:	f012 0203 	ands.w	r2, r2, #3
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	d007      	beq.n	8008b60 <__pow5mult+0x20>
 8008b50:	4c25      	ldr	r4, [pc, #148]	; (8008be8 <__pow5mult+0xa8>)
 8008b52:	3a01      	subs	r2, #1
 8008b54:	2300      	movs	r3, #0
 8008b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b5a:	f7ff fe51 	bl	8008800 <__multadd>
 8008b5e:	4607      	mov	r7, r0
 8008b60:	10ad      	asrs	r5, r5, #2
 8008b62:	d03d      	beq.n	8008be0 <__pow5mult+0xa0>
 8008b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b66:	b97c      	cbnz	r4, 8008b88 <__pow5mult+0x48>
 8008b68:	2010      	movs	r0, #16
 8008b6a:	f7ff fdbf 	bl	80086ec <malloc>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	6270      	str	r0, [r6, #36]	; 0x24
 8008b72:	b928      	cbnz	r0, 8008b80 <__pow5mult+0x40>
 8008b74:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <__pow5mult+0xac>)
 8008b76:	481e      	ldr	r0, [pc, #120]	; (8008bf0 <__pow5mult+0xb0>)
 8008b78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b7c:	f000 fd2e 	bl	80095dc <__assert_func>
 8008b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b84:	6004      	str	r4, [r0, #0]
 8008b86:	60c4      	str	r4, [r0, #12]
 8008b88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b90:	b94c      	cbnz	r4, 8008ba6 <__pow5mult+0x66>
 8008b92:	f240 2171 	movw	r1, #625	; 0x271
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ff12 	bl	80089c0 <__i2b>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	f04f 0900 	mov.w	r9, #0
 8008baa:	07eb      	lsls	r3, r5, #31
 8008bac:	d50a      	bpl.n	8008bc4 <__pow5mult+0x84>
 8008bae:	4639      	mov	r1, r7
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7ff ff1a 	bl	80089ec <__multiply>
 8008bb8:	4639      	mov	r1, r7
 8008bba:	4680      	mov	r8, r0
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff fdfd 	bl	80087bc <_Bfree>
 8008bc2:	4647      	mov	r7, r8
 8008bc4:	106d      	asrs	r5, r5, #1
 8008bc6:	d00b      	beq.n	8008be0 <__pow5mult+0xa0>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	b938      	cbnz	r0, 8008bdc <__pow5mult+0x9c>
 8008bcc:	4622      	mov	r2, r4
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f7ff ff0b 	bl	80089ec <__multiply>
 8008bd6:	6020      	str	r0, [r4, #0]
 8008bd8:	f8c0 9000 	str.w	r9, [r0]
 8008bdc:	4604      	mov	r4, r0
 8008bde:	e7e4      	b.n	8008baa <__pow5mult+0x6a>
 8008be0:	4638      	mov	r0, r7
 8008be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be6:	bf00      	nop
 8008be8:	0800a580 	.word	0x0800a580
 8008bec:	0800a336 	.word	0x0800a336
 8008bf0:	0800a434 	.word	0x0800a434

08008bf4 <__lshift>:
 8008bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	6849      	ldr	r1, [r1, #4]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	4607      	mov	r7, r0
 8008c06:	4691      	mov	r9, r2
 8008c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c0c:	f108 0601 	add.w	r6, r8, #1
 8008c10:	42b3      	cmp	r3, r6
 8008c12:	db0b      	blt.n	8008c2c <__lshift+0x38>
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff fd91 	bl	800873c <_Balloc>
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	b948      	cbnz	r0, 8008c32 <__lshift+0x3e>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <__lshift+0xd8>)
 8008c22:	482b      	ldr	r0, [pc, #172]	; (8008cd0 <__lshift+0xdc>)
 8008c24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c28:	f000 fcd8 	bl	80095dc <__assert_func>
 8008c2c:	3101      	adds	r1, #1
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	e7ee      	b.n	8008c10 <__lshift+0x1c>
 8008c32:	2300      	movs	r3, #0
 8008c34:	f100 0114 	add.w	r1, r0, #20
 8008c38:	f100 0210 	add.w	r2, r0, #16
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	4553      	cmp	r3, sl
 8008c40:	db37      	blt.n	8008cb2 <__lshift+0xbe>
 8008c42:	6920      	ldr	r0, [r4, #16]
 8008c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c48:	f104 0314 	add.w	r3, r4, #20
 8008c4c:	f019 091f 	ands.w	r9, r9, #31
 8008c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c58:	d02f      	beq.n	8008cba <__lshift+0xc6>
 8008c5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c5e:	468a      	mov	sl, r1
 8008c60:	f04f 0c00 	mov.w	ip, #0
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	fa02 f209 	lsl.w	r2, r2, r9
 8008c6a:	ea42 020c 	orr.w	r2, r2, ip
 8008c6e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c76:	4298      	cmp	r0, r3
 8008c78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c7c:	d8f2      	bhi.n	8008c64 <__lshift+0x70>
 8008c7e:	1b03      	subs	r3, r0, r4
 8008c80:	3b15      	subs	r3, #21
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	3304      	adds	r3, #4
 8008c88:	f104 0215 	add.w	r2, r4, #21
 8008c8c:	4290      	cmp	r0, r2
 8008c8e:	bf38      	it	cc
 8008c90:	2304      	movcc	r3, #4
 8008c92:	f841 c003 	str.w	ip, [r1, r3]
 8008c96:	f1bc 0f00 	cmp.w	ip, #0
 8008c9a:	d001      	beq.n	8008ca0 <__lshift+0xac>
 8008c9c:	f108 0602 	add.w	r6, r8, #2
 8008ca0:	3e01      	subs	r6, #1
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	612e      	str	r6, [r5, #16]
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	f7ff fd88 	bl	80087bc <_Bfree>
 8008cac:	4628      	mov	r0, r5
 8008cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	e7c1      	b.n	8008c3e <__lshift+0x4a>
 8008cba:	3904      	subs	r1, #4
 8008cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cc4:	4298      	cmp	r0, r3
 8008cc6:	d8f9      	bhi.n	8008cbc <__lshift+0xc8>
 8008cc8:	e7ea      	b.n	8008ca0 <__lshift+0xac>
 8008cca:	bf00      	nop
 8008ccc:	0800a3a8 	.word	0x0800a3a8
 8008cd0:	0800a434 	.word	0x0800a434

08008cd4 <__mcmp>:
 8008cd4:	b530      	push	{r4, r5, lr}
 8008cd6:	6902      	ldr	r2, [r0, #16]
 8008cd8:	690c      	ldr	r4, [r1, #16]
 8008cda:	1b12      	subs	r2, r2, r4
 8008cdc:	d10e      	bne.n	8008cfc <__mcmp+0x28>
 8008cde:	f100 0314 	add.w	r3, r0, #20
 8008ce2:	3114      	adds	r1, #20
 8008ce4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ce8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cf4:	42a5      	cmp	r5, r4
 8008cf6:	d003      	beq.n	8008d00 <__mcmp+0x2c>
 8008cf8:	d305      	bcc.n	8008d06 <__mcmp+0x32>
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	bd30      	pop	{r4, r5, pc}
 8008d00:	4283      	cmp	r3, r0
 8008d02:	d3f3      	bcc.n	8008cec <__mcmp+0x18>
 8008d04:	e7fa      	b.n	8008cfc <__mcmp+0x28>
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	e7f7      	b.n	8008cfc <__mcmp+0x28>

08008d0c <__mdiff>:
 8008d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	4606      	mov	r6, r0
 8008d14:	4611      	mov	r1, r2
 8008d16:	4620      	mov	r0, r4
 8008d18:	4690      	mov	r8, r2
 8008d1a:	f7ff ffdb 	bl	8008cd4 <__mcmp>
 8008d1e:	1e05      	subs	r5, r0, #0
 8008d20:	d110      	bne.n	8008d44 <__mdiff+0x38>
 8008d22:	4629      	mov	r1, r5
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff fd09 	bl	800873c <_Balloc>
 8008d2a:	b930      	cbnz	r0, 8008d3a <__mdiff+0x2e>
 8008d2c:	4b3a      	ldr	r3, [pc, #232]	; (8008e18 <__mdiff+0x10c>)
 8008d2e:	4602      	mov	r2, r0
 8008d30:	f240 2132 	movw	r1, #562	; 0x232
 8008d34:	4839      	ldr	r0, [pc, #228]	; (8008e1c <__mdiff+0x110>)
 8008d36:	f000 fc51 	bl	80095dc <__assert_func>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d44:	bfa4      	itt	ge
 8008d46:	4643      	movge	r3, r8
 8008d48:	46a0      	movge	r8, r4
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d50:	bfa6      	itte	ge
 8008d52:	461c      	movge	r4, r3
 8008d54:	2500      	movge	r5, #0
 8008d56:	2501      	movlt	r5, #1
 8008d58:	f7ff fcf0 	bl	800873c <_Balloc>
 8008d5c:	b920      	cbnz	r0, 8008d68 <__mdiff+0x5c>
 8008d5e:	4b2e      	ldr	r3, [pc, #184]	; (8008e18 <__mdiff+0x10c>)
 8008d60:	4602      	mov	r2, r0
 8008d62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d66:	e7e5      	b.n	8008d34 <__mdiff+0x28>
 8008d68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d6c:	6926      	ldr	r6, [r4, #16]
 8008d6e:	60c5      	str	r5, [r0, #12]
 8008d70:	f104 0914 	add.w	r9, r4, #20
 8008d74:	f108 0514 	add.w	r5, r8, #20
 8008d78:	f100 0e14 	add.w	lr, r0, #20
 8008d7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d84:	f108 0210 	add.w	r2, r8, #16
 8008d88:	46f2      	mov	sl, lr
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d94:	fa1f f883 	uxth.w	r8, r3
 8008d98:	fa11 f18b 	uxtah	r1, r1, fp
 8008d9c:	0c1b      	lsrs	r3, r3, #16
 8008d9e:	eba1 0808 	sub.w	r8, r1, r8
 8008da2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008da6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008daa:	fa1f f888 	uxth.w	r8, r8
 8008dae:	1419      	asrs	r1, r3, #16
 8008db0:	454e      	cmp	r6, r9
 8008db2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008db6:	f84a 3b04 	str.w	r3, [sl], #4
 8008dba:	d8e7      	bhi.n	8008d8c <__mdiff+0x80>
 8008dbc:	1b33      	subs	r3, r6, r4
 8008dbe:	3b15      	subs	r3, #21
 8008dc0:	f023 0303 	bic.w	r3, r3, #3
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	3415      	adds	r4, #21
 8008dc8:	42a6      	cmp	r6, r4
 8008dca:	bf38      	it	cc
 8008dcc:	2304      	movcc	r3, #4
 8008dce:	441d      	add	r5, r3
 8008dd0:	4473      	add	r3, lr
 8008dd2:	469e      	mov	lr, r3
 8008dd4:	462e      	mov	r6, r5
 8008dd6:	4566      	cmp	r6, ip
 8008dd8:	d30e      	bcc.n	8008df8 <__mdiff+0xec>
 8008dda:	f10c 0203 	add.w	r2, ip, #3
 8008dde:	1b52      	subs	r2, r2, r5
 8008de0:	f022 0203 	bic.w	r2, r2, #3
 8008de4:	3d03      	subs	r5, #3
 8008de6:	45ac      	cmp	ip, r5
 8008de8:	bf38      	it	cc
 8008dea:	2200      	movcc	r2, #0
 8008dec:	441a      	add	r2, r3
 8008dee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008df2:	b17b      	cbz	r3, 8008e14 <__mdiff+0x108>
 8008df4:	6107      	str	r7, [r0, #16]
 8008df6:	e7a3      	b.n	8008d40 <__mdiff+0x34>
 8008df8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dfc:	fa11 f288 	uxtah	r2, r1, r8
 8008e00:	1414      	asrs	r4, r2, #16
 8008e02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e06:	b292      	uxth	r2, r2
 8008e08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e0c:	f84e 2b04 	str.w	r2, [lr], #4
 8008e10:	1421      	asrs	r1, r4, #16
 8008e12:	e7e0      	b.n	8008dd6 <__mdiff+0xca>
 8008e14:	3f01      	subs	r7, #1
 8008e16:	e7ea      	b.n	8008dee <__mdiff+0xe2>
 8008e18:	0800a3a8 	.word	0x0800a3a8
 8008e1c:	0800a434 	.word	0x0800a434

08008e20 <__ulp>:
 8008e20:	b082      	sub	sp, #8
 8008e22:	ed8d 0b00 	vstr	d0, [sp]
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	4912      	ldr	r1, [pc, #72]	; (8008e74 <__ulp+0x54>)
 8008e2a:	4019      	ands	r1, r3
 8008e2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008e30:	2900      	cmp	r1, #0
 8008e32:	dd05      	ble.n	8008e40 <__ulp+0x20>
 8008e34:	2200      	movs	r2, #0
 8008e36:	460b      	mov	r3, r1
 8008e38:	ec43 2b10 	vmov	d0, r2, r3
 8008e3c:	b002      	add	sp, #8
 8008e3e:	4770      	bx	lr
 8008e40:	4249      	negs	r1, r1
 8008e42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008e46:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	da04      	bge.n	8008e5e <__ulp+0x3e>
 8008e54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e58:	fa41 f300 	asr.w	r3, r1, r0
 8008e5c:	e7ec      	b.n	8008e38 <__ulp+0x18>
 8008e5e:	f1a0 0114 	sub.w	r1, r0, #20
 8008e62:	291e      	cmp	r1, #30
 8008e64:	bfda      	itte	le
 8008e66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008e6a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008e6e:	2101      	movgt	r1, #1
 8008e70:	460a      	mov	r2, r1
 8008e72:	e7e1      	b.n	8008e38 <__ulp+0x18>
 8008e74:	7ff00000 	.word	0x7ff00000

08008e78 <__b2d>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	6905      	ldr	r5, [r0, #16]
 8008e7c:	f100 0714 	add.w	r7, r0, #20
 8008e80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e84:	1f2e      	subs	r6, r5, #4
 8008e86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f7ff fd48 	bl	8008920 <__hi0bits>
 8008e90:	f1c0 0320 	rsb	r3, r0, #32
 8008e94:	280a      	cmp	r0, #10
 8008e96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008f14 <__b2d+0x9c>
 8008e9a:	600b      	str	r3, [r1, #0]
 8008e9c:	dc14      	bgt.n	8008ec8 <__b2d+0x50>
 8008e9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008ea2:	fa24 f10e 	lsr.w	r1, r4, lr
 8008ea6:	42b7      	cmp	r7, r6
 8008ea8:	ea41 030c 	orr.w	r3, r1, ip
 8008eac:	bf34      	ite	cc
 8008eae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008eb2:	2100      	movcs	r1, #0
 8008eb4:	3015      	adds	r0, #21
 8008eb6:	fa04 f000 	lsl.w	r0, r4, r0
 8008eba:	fa21 f10e 	lsr.w	r1, r1, lr
 8008ebe:	ea40 0201 	orr.w	r2, r0, r1
 8008ec2:	ec43 2b10 	vmov	d0, r2, r3
 8008ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec8:	42b7      	cmp	r7, r6
 8008eca:	bf3a      	itte	cc
 8008ecc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ed0:	f1a5 0608 	subcc.w	r6, r5, #8
 8008ed4:	2100      	movcs	r1, #0
 8008ed6:	380b      	subs	r0, #11
 8008ed8:	d017      	beq.n	8008f0a <__b2d+0x92>
 8008eda:	f1c0 0c20 	rsb	ip, r0, #32
 8008ede:	fa04 f500 	lsl.w	r5, r4, r0
 8008ee2:	42be      	cmp	r6, r7
 8008ee4:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ee8:	ea45 0504 	orr.w	r5, r5, r4
 8008eec:	bf8c      	ite	hi
 8008eee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008ef2:	2400      	movls	r4, #0
 8008ef4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008ef8:	fa01 f000 	lsl.w	r0, r1, r0
 8008efc:	fa24 f40c 	lsr.w	r4, r4, ip
 8008f00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f04:	ea40 0204 	orr.w	r2, r0, r4
 8008f08:	e7db      	b.n	8008ec2 <__b2d+0x4a>
 8008f0a:	ea44 030c 	orr.w	r3, r4, ip
 8008f0e:	460a      	mov	r2, r1
 8008f10:	e7d7      	b.n	8008ec2 <__b2d+0x4a>
 8008f12:	bf00      	nop
 8008f14:	3ff00000 	.word	0x3ff00000

08008f18 <__d2b>:
 8008f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	2101      	movs	r1, #1
 8008f20:	ec57 6b10 	vmov	r6, r7, d0
 8008f24:	4690      	mov	r8, r2
 8008f26:	f7ff fc09 	bl	800873c <_Balloc>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	b930      	cbnz	r0, 8008f3c <__d2b+0x24>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b25      	ldr	r3, [pc, #148]	; (8008fc8 <__d2b+0xb0>)
 8008f32:	4826      	ldr	r0, [pc, #152]	; (8008fcc <__d2b+0xb4>)
 8008f34:	f240 310a 	movw	r1, #778	; 0x30a
 8008f38:	f000 fb50 	bl	80095dc <__assert_func>
 8008f3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f44:	bb35      	cbnz	r5, 8008f94 <__d2b+0x7c>
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	d028      	beq.n	8008f9e <__d2b+0x86>
 8008f4c:	4668      	mov	r0, sp
 8008f4e:	9600      	str	r6, [sp, #0]
 8008f50:	f7ff fd06 	bl	8008960 <__lo0bits>
 8008f54:	9900      	ldr	r1, [sp, #0]
 8008f56:	b300      	cbz	r0, 8008f9a <__d2b+0x82>
 8008f58:	9a01      	ldr	r2, [sp, #4]
 8008f5a:	f1c0 0320 	rsb	r3, r0, #32
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	430b      	orrs	r3, r1
 8008f64:	40c2      	lsrs	r2, r0
 8008f66:	6163      	str	r3, [r4, #20]
 8008f68:	9201      	str	r2, [sp, #4]
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	61a3      	str	r3, [r4, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bf14      	ite	ne
 8008f72:	2202      	movne	r2, #2
 8008f74:	2201      	moveq	r2, #1
 8008f76:	6122      	str	r2, [r4, #16]
 8008f78:	b1d5      	cbz	r5, 8008fb0 <__d2b+0x98>
 8008f7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f7e:	4405      	add	r5, r0
 8008f80:	f8c9 5000 	str.w	r5, [r9]
 8008f84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f88:	f8c8 0000 	str.w	r0, [r8]
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	b003      	add	sp, #12
 8008f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f98:	e7d5      	b.n	8008f46 <__d2b+0x2e>
 8008f9a:	6161      	str	r1, [r4, #20]
 8008f9c:	e7e5      	b.n	8008f6a <__d2b+0x52>
 8008f9e:	a801      	add	r0, sp, #4
 8008fa0:	f7ff fcde 	bl	8008960 <__lo0bits>
 8008fa4:	9b01      	ldr	r3, [sp, #4]
 8008fa6:	6163      	str	r3, [r4, #20]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	6122      	str	r2, [r4, #16]
 8008fac:	3020      	adds	r0, #32
 8008fae:	e7e3      	b.n	8008f78 <__d2b+0x60>
 8008fb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fb8:	f8c9 0000 	str.w	r0, [r9]
 8008fbc:	6918      	ldr	r0, [r3, #16]
 8008fbe:	f7ff fcaf 	bl	8008920 <__hi0bits>
 8008fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fc6:	e7df      	b.n	8008f88 <__d2b+0x70>
 8008fc8:	0800a3a8 	.word	0x0800a3a8
 8008fcc:	0800a434 	.word	0x0800a434

08008fd0 <__ratio>:
 8008fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	4688      	mov	r8, r1
 8008fd6:	4669      	mov	r1, sp
 8008fd8:	4681      	mov	r9, r0
 8008fda:	f7ff ff4d 	bl	8008e78 <__b2d>
 8008fde:	a901      	add	r1, sp, #4
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	ec55 4b10 	vmov	r4, r5, d0
 8008fe6:	f7ff ff47 	bl	8008e78 <__b2d>
 8008fea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ff2:	eba3 0c02 	sub.w	ip, r3, r2
 8008ff6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ffa:	1a9b      	subs	r3, r3, r2
 8008ffc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009000:	ec51 0b10 	vmov	r0, r1, d0
 8009004:	2b00      	cmp	r3, #0
 8009006:	bfd6      	itet	le
 8009008:	460a      	movle	r2, r1
 800900a:	462a      	movgt	r2, r5
 800900c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009010:	468b      	mov	fp, r1
 8009012:	462f      	mov	r7, r5
 8009014:	bfd4      	ite	le
 8009016:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800901a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800901e:	4620      	mov	r0, r4
 8009020:	ee10 2a10 	vmov	r2, s0
 8009024:	465b      	mov	r3, fp
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fc18 	bl	800085c <__aeabi_ddiv>
 800902c:	ec41 0b10 	vmov	d0, r0, r1
 8009030:	b003      	add	sp, #12
 8009032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009036 <__copybits>:
 8009036:	3901      	subs	r1, #1
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	1149      	asrs	r1, r1, #5
 800903c:	6914      	ldr	r4, [r2, #16]
 800903e:	3101      	adds	r1, #1
 8009040:	f102 0314 	add.w	r3, r2, #20
 8009044:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009048:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800904c:	1f05      	subs	r5, r0, #4
 800904e:	42a3      	cmp	r3, r4
 8009050:	d30c      	bcc.n	800906c <__copybits+0x36>
 8009052:	1aa3      	subs	r3, r4, r2
 8009054:	3b11      	subs	r3, #17
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	3211      	adds	r2, #17
 800905c:	42a2      	cmp	r2, r4
 800905e:	bf88      	it	hi
 8009060:	2300      	movhi	r3, #0
 8009062:	4418      	add	r0, r3
 8009064:	2300      	movs	r3, #0
 8009066:	4288      	cmp	r0, r1
 8009068:	d305      	bcc.n	8009076 <__copybits+0x40>
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009070:	f845 6f04 	str.w	r6, [r5, #4]!
 8009074:	e7eb      	b.n	800904e <__copybits+0x18>
 8009076:	f840 3b04 	str.w	r3, [r0], #4
 800907a:	e7f4      	b.n	8009066 <__copybits+0x30>

0800907c <__any_on>:
 800907c:	f100 0214 	add.w	r2, r0, #20
 8009080:	6900      	ldr	r0, [r0, #16]
 8009082:	114b      	asrs	r3, r1, #5
 8009084:	4298      	cmp	r0, r3
 8009086:	b510      	push	{r4, lr}
 8009088:	db11      	blt.n	80090ae <__any_on+0x32>
 800908a:	dd0a      	ble.n	80090a2 <__any_on+0x26>
 800908c:	f011 011f 	ands.w	r1, r1, #31
 8009090:	d007      	beq.n	80090a2 <__any_on+0x26>
 8009092:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009096:	fa24 f001 	lsr.w	r0, r4, r1
 800909a:	fa00 f101 	lsl.w	r1, r0, r1
 800909e:	428c      	cmp	r4, r1
 80090a0:	d10b      	bne.n	80090ba <__any_on+0x3e>
 80090a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d803      	bhi.n	80090b2 <__any_on+0x36>
 80090aa:	2000      	movs	r0, #0
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	4603      	mov	r3, r0
 80090b0:	e7f7      	b.n	80090a2 <__any_on+0x26>
 80090b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d0f5      	beq.n	80090a6 <__any_on+0x2a>
 80090ba:	2001      	movs	r0, #1
 80090bc:	e7f6      	b.n	80090ac <__any_on+0x30>

080090be <_calloc_r>:
 80090be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090c0:	fba1 2402 	umull	r2, r4, r1, r2
 80090c4:	b94c      	cbnz	r4, 80090da <_calloc_r+0x1c>
 80090c6:	4611      	mov	r1, r2
 80090c8:	9201      	str	r2, [sp, #4]
 80090ca:	f000 f87b 	bl	80091c4 <_malloc_r>
 80090ce:	9a01      	ldr	r2, [sp, #4]
 80090d0:	4605      	mov	r5, r0
 80090d2:	b930      	cbnz	r0, 80090e2 <_calloc_r+0x24>
 80090d4:	4628      	mov	r0, r5
 80090d6:	b003      	add	sp, #12
 80090d8:	bd30      	pop	{r4, r5, pc}
 80090da:	220c      	movs	r2, #12
 80090dc:	6002      	str	r2, [r0, #0]
 80090de:	2500      	movs	r5, #0
 80090e0:	e7f8      	b.n	80090d4 <_calloc_r+0x16>
 80090e2:	4621      	mov	r1, r4
 80090e4:	f7fc fbbe 	bl	8005864 <memset>
 80090e8:	e7f4      	b.n	80090d4 <_calloc_r+0x16>
	...

080090ec <_free_r>:
 80090ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ee:	2900      	cmp	r1, #0
 80090f0:	d044      	beq.n	800917c <_free_r+0x90>
 80090f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f6:	9001      	str	r0, [sp, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f1a1 0404 	sub.w	r4, r1, #4
 80090fe:	bfb8      	it	lt
 8009100:	18e4      	addlt	r4, r4, r3
 8009102:	f000 fab5 	bl	8009670 <__malloc_lock>
 8009106:	4a1e      	ldr	r2, [pc, #120]	; (8009180 <_free_r+0x94>)
 8009108:	9801      	ldr	r0, [sp, #4]
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	b933      	cbnz	r3, 800911c <_free_r+0x30>
 800910e:	6063      	str	r3, [r4, #4]
 8009110:	6014      	str	r4, [r2, #0]
 8009112:	b003      	add	sp, #12
 8009114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009118:	f000 bab0 	b.w	800967c <__malloc_unlock>
 800911c:	42a3      	cmp	r3, r4
 800911e:	d908      	bls.n	8009132 <_free_r+0x46>
 8009120:	6825      	ldr	r5, [r4, #0]
 8009122:	1961      	adds	r1, r4, r5
 8009124:	428b      	cmp	r3, r1
 8009126:	bf01      	itttt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	1949      	addeq	r1, r1, r5
 800912e:	6021      	streq	r1, [r4, #0]
 8009130:	e7ed      	b.n	800910e <_free_r+0x22>
 8009132:	461a      	mov	r2, r3
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	b10b      	cbz	r3, 800913c <_free_r+0x50>
 8009138:	42a3      	cmp	r3, r4
 800913a:	d9fa      	bls.n	8009132 <_free_r+0x46>
 800913c:	6811      	ldr	r1, [r2, #0]
 800913e:	1855      	adds	r5, r2, r1
 8009140:	42a5      	cmp	r5, r4
 8009142:	d10b      	bne.n	800915c <_free_r+0x70>
 8009144:	6824      	ldr	r4, [r4, #0]
 8009146:	4421      	add	r1, r4
 8009148:	1854      	adds	r4, r2, r1
 800914a:	42a3      	cmp	r3, r4
 800914c:	6011      	str	r1, [r2, #0]
 800914e:	d1e0      	bne.n	8009112 <_free_r+0x26>
 8009150:	681c      	ldr	r4, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	6053      	str	r3, [r2, #4]
 8009156:	4421      	add	r1, r4
 8009158:	6011      	str	r1, [r2, #0]
 800915a:	e7da      	b.n	8009112 <_free_r+0x26>
 800915c:	d902      	bls.n	8009164 <_free_r+0x78>
 800915e:	230c      	movs	r3, #12
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	e7d6      	b.n	8009112 <_free_r+0x26>
 8009164:	6825      	ldr	r5, [r4, #0]
 8009166:	1961      	adds	r1, r4, r5
 8009168:	428b      	cmp	r3, r1
 800916a:	bf04      	itt	eq
 800916c:	6819      	ldreq	r1, [r3, #0]
 800916e:	685b      	ldreq	r3, [r3, #4]
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	bf04      	itt	eq
 8009174:	1949      	addeq	r1, r1, r5
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	6054      	str	r4, [r2, #4]
 800917a:	e7ca      	b.n	8009112 <_free_r+0x26>
 800917c:	b003      	add	sp, #12
 800917e:	bd30      	pop	{r4, r5, pc}
 8009180:	200006b8 	.word	0x200006b8

08009184 <sbrk_aligned>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	4e0e      	ldr	r6, [pc, #56]	; (80091c0 <sbrk_aligned+0x3c>)
 8009188:	460c      	mov	r4, r1
 800918a:	6831      	ldr	r1, [r6, #0]
 800918c:	4605      	mov	r5, r0
 800918e:	b911      	cbnz	r1, 8009196 <sbrk_aligned+0x12>
 8009190:	f000 f9f2 	bl	8009578 <_sbrk_r>
 8009194:	6030      	str	r0, [r6, #0]
 8009196:	4621      	mov	r1, r4
 8009198:	4628      	mov	r0, r5
 800919a:	f000 f9ed 	bl	8009578 <_sbrk_r>
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	d00a      	beq.n	80091b8 <sbrk_aligned+0x34>
 80091a2:	1cc4      	adds	r4, r0, #3
 80091a4:	f024 0403 	bic.w	r4, r4, #3
 80091a8:	42a0      	cmp	r0, r4
 80091aa:	d007      	beq.n	80091bc <sbrk_aligned+0x38>
 80091ac:	1a21      	subs	r1, r4, r0
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 f9e2 	bl	8009578 <_sbrk_r>
 80091b4:	3001      	adds	r0, #1
 80091b6:	d101      	bne.n	80091bc <sbrk_aligned+0x38>
 80091b8:	f04f 34ff 	mov.w	r4, #4294967295
 80091bc:	4620      	mov	r0, r4
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	200006bc 	.word	0x200006bc

080091c4 <_malloc_r>:
 80091c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c8:	1ccd      	adds	r5, r1, #3
 80091ca:	f025 0503 	bic.w	r5, r5, #3
 80091ce:	3508      	adds	r5, #8
 80091d0:	2d0c      	cmp	r5, #12
 80091d2:	bf38      	it	cc
 80091d4:	250c      	movcc	r5, #12
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	4607      	mov	r7, r0
 80091da:	db01      	blt.n	80091e0 <_malloc_r+0x1c>
 80091dc:	42a9      	cmp	r1, r5
 80091de:	d905      	bls.n	80091ec <_malloc_r+0x28>
 80091e0:	230c      	movs	r3, #12
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	2600      	movs	r6, #0
 80091e6:	4630      	mov	r0, r6
 80091e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ec:	4e2e      	ldr	r6, [pc, #184]	; (80092a8 <_malloc_r+0xe4>)
 80091ee:	f000 fa3f 	bl	8009670 <__malloc_lock>
 80091f2:	6833      	ldr	r3, [r6, #0]
 80091f4:	461c      	mov	r4, r3
 80091f6:	bb34      	cbnz	r4, 8009246 <_malloc_r+0x82>
 80091f8:	4629      	mov	r1, r5
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7ff ffc2 	bl	8009184 <sbrk_aligned>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	4604      	mov	r4, r0
 8009204:	d14d      	bne.n	80092a2 <_malloc_r+0xde>
 8009206:	6834      	ldr	r4, [r6, #0]
 8009208:	4626      	mov	r6, r4
 800920a:	2e00      	cmp	r6, #0
 800920c:	d140      	bne.n	8009290 <_malloc_r+0xcc>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	4631      	mov	r1, r6
 8009212:	4638      	mov	r0, r7
 8009214:	eb04 0803 	add.w	r8, r4, r3
 8009218:	f000 f9ae 	bl	8009578 <_sbrk_r>
 800921c:	4580      	cmp	r8, r0
 800921e:	d13a      	bne.n	8009296 <_malloc_r+0xd2>
 8009220:	6821      	ldr	r1, [r4, #0]
 8009222:	3503      	adds	r5, #3
 8009224:	1a6d      	subs	r5, r5, r1
 8009226:	f025 0503 	bic.w	r5, r5, #3
 800922a:	3508      	adds	r5, #8
 800922c:	2d0c      	cmp	r5, #12
 800922e:	bf38      	it	cc
 8009230:	250c      	movcc	r5, #12
 8009232:	4629      	mov	r1, r5
 8009234:	4638      	mov	r0, r7
 8009236:	f7ff ffa5 	bl	8009184 <sbrk_aligned>
 800923a:	3001      	adds	r0, #1
 800923c:	d02b      	beq.n	8009296 <_malloc_r+0xd2>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	442b      	add	r3, r5
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	e00e      	b.n	8009264 <_malloc_r+0xa0>
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	1b52      	subs	r2, r2, r5
 800924a:	d41e      	bmi.n	800928a <_malloc_r+0xc6>
 800924c:	2a0b      	cmp	r2, #11
 800924e:	d916      	bls.n	800927e <_malloc_r+0xba>
 8009250:	1961      	adds	r1, r4, r5
 8009252:	42a3      	cmp	r3, r4
 8009254:	6025      	str	r5, [r4, #0]
 8009256:	bf18      	it	ne
 8009258:	6059      	strne	r1, [r3, #4]
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	bf08      	it	eq
 800925e:	6031      	streq	r1, [r6, #0]
 8009260:	5162      	str	r2, [r4, r5]
 8009262:	604b      	str	r3, [r1, #4]
 8009264:	4638      	mov	r0, r7
 8009266:	f104 060b 	add.w	r6, r4, #11
 800926a:	f000 fa07 	bl	800967c <__malloc_unlock>
 800926e:	f026 0607 	bic.w	r6, r6, #7
 8009272:	1d23      	adds	r3, r4, #4
 8009274:	1af2      	subs	r2, r6, r3
 8009276:	d0b6      	beq.n	80091e6 <_malloc_r+0x22>
 8009278:	1b9b      	subs	r3, r3, r6
 800927a:	50a3      	str	r3, [r4, r2]
 800927c:	e7b3      	b.n	80091e6 <_malloc_r+0x22>
 800927e:	6862      	ldr	r2, [r4, #4]
 8009280:	42a3      	cmp	r3, r4
 8009282:	bf0c      	ite	eq
 8009284:	6032      	streq	r2, [r6, #0]
 8009286:	605a      	strne	r2, [r3, #4]
 8009288:	e7ec      	b.n	8009264 <_malloc_r+0xa0>
 800928a:	4623      	mov	r3, r4
 800928c:	6864      	ldr	r4, [r4, #4]
 800928e:	e7b2      	b.n	80091f6 <_malloc_r+0x32>
 8009290:	4634      	mov	r4, r6
 8009292:	6876      	ldr	r6, [r6, #4]
 8009294:	e7b9      	b.n	800920a <_malloc_r+0x46>
 8009296:	230c      	movs	r3, #12
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	4638      	mov	r0, r7
 800929c:	f000 f9ee 	bl	800967c <__malloc_unlock>
 80092a0:	e7a1      	b.n	80091e6 <_malloc_r+0x22>
 80092a2:	6025      	str	r5, [r4, #0]
 80092a4:	e7de      	b.n	8009264 <_malloc_r+0xa0>
 80092a6:	bf00      	nop
 80092a8:	200006b8 	.word	0x200006b8

080092ac <__ssputs_r>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	688e      	ldr	r6, [r1, #8]
 80092b2:	429e      	cmp	r6, r3
 80092b4:	4682      	mov	sl, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4690      	mov	r8, r2
 80092ba:	461f      	mov	r7, r3
 80092bc:	d838      	bhi.n	8009330 <__ssputs_r+0x84>
 80092be:	898a      	ldrh	r2, [r1, #12]
 80092c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c4:	d032      	beq.n	800932c <__ssputs_r+0x80>
 80092c6:	6825      	ldr	r5, [r4, #0]
 80092c8:	6909      	ldr	r1, [r1, #16]
 80092ca:	eba5 0901 	sub.w	r9, r5, r1
 80092ce:	6965      	ldr	r5, [r4, #20]
 80092d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092d8:	3301      	adds	r3, #1
 80092da:	444b      	add	r3, r9
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf38      	it	cc
 80092e2:	461d      	movcc	r5, r3
 80092e4:	0553      	lsls	r3, r2, #21
 80092e6:	d531      	bpl.n	800934c <__ssputs_r+0xa0>
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7ff ff6b 	bl	80091c4 <_malloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	b950      	cbnz	r0, 8009308 <__ssputs_r+0x5c>
 80092f2:	230c      	movs	r3, #12
 80092f4:	f8ca 3000 	str.w	r3, [sl]
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	6921      	ldr	r1, [r4, #16]
 800930a:	464a      	mov	r2, r9
 800930c:	f7ff fa08 	bl	8008720 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	6165      	str	r5, [r4, #20]
 8009320:	444e      	add	r6, r9
 8009322:	eba5 0509 	sub.w	r5, r5, r9
 8009326:	6026      	str	r6, [r4, #0]
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	463e      	mov	r6, r7
 800932c:	42be      	cmp	r6, r7
 800932e:	d900      	bls.n	8009332 <__ssputs_r+0x86>
 8009330:	463e      	mov	r6, r7
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	4632      	mov	r2, r6
 8009336:	4641      	mov	r1, r8
 8009338:	f000 f980 	bl	800963c <memmove>
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	1b9b      	subs	r3, r3, r6
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	4433      	add	r3, r6
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	2000      	movs	r0, #0
 800934a:	e7db      	b.n	8009304 <__ssputs_r+0x58>
 800934c:	462a      	mov	r2, r5
 800934e:	f000 f99b 	bl	8009688 <_realloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	2800      	cmp	r0, #0
 8009356:	d1e1      	bne.n	800931c <__ssputs_r+0x70>
 8009358:	6921      	ldr	r1, [r4, #16]
 800935a:	4650      	mov	r0, sl
 800935c:	f7ff fec6 	bl	80090ec <_free_r>
 8009360:	e7c7      	b.n	80092f2 <__ssputs_r+0x46>
	...

08009364 <_svfiprintf_r>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4698      	mov	r8, r3
 800936a:	898b      	ldrh	r3, [r1, #12]
 800936c:	061b      	lsls	r3, r3, #24
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4607      	mov	r7, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4614      	mov	r4, r2
 8009376:	d50e      	bpl.n	8009396 <_svfiprintf_r+0x32>
 8009378:	690b      	ldr	r3, [r1, #16]
 800937a:	b963      	cbnz	r3, 8009396 <_svfiprintf_r+0x32>
 800937c:	2140      	movs	r1, #64	; 0x40
 800937e:	f7ff ff21 	bl	80091c4 <_malloc_r>
 8009382:	6028      	str	r0, [r5, #0]
 8009384:	6128      	str	r0, [r5, #16]
 8009386:	b920      	cbnz	r0, 8009392 <_svfiprintf_r+0x2e>
 8009388:	230c      	movs	r3, #12
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e0d1      	b.n	8009536 <_svfiprintf_r+0x1d2>
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	616b      	str	r3, [r5, #20]
 8009396:	2300      	movs	r3, #0
 8009398:	9309      	str	r3, [sp, #36]	; 0x24
 800939a:	2320      	movs	r3, #32
 800939c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a4:	2330      	movs	r3, #48	; 0x30
 80093a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009550 <_svfiprintf_r+0x1ec>
 80093aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ae:	f04f 0901 	mov.w	r9, #1
 80093b2:	4623      	mov	r3, r4
 80093b4:	469a      	mov	sl, r3
 80093b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ba:	b10a      	cbz	r2, 80093c0 <_svfiprintf_r+0x5c>
 80093bc:	2a25      	cmp	r2, #37	; 0x25
 80093be:	d1f9      	bne.n	80093b4 <_svfiprintf_r+0x50>
 80093c0:	ebba 0b04 	subs.w	fp, sl, r4
 80093c4:	d00b      	beq.n	80093de <_svfiprintf_r+0x7a>
 80093c6:	465b      	mov	r3, fp
 80093c8:	4622      	mov	r2, r4
 80093ca:	4629      	mov	r1, r5
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ff6d 	bl	80092ac <__ssputs_r>
 80093d2:	3001      	adds	r0, #1
 80093d4:	f000 80aa 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093da:	445a      	add	r2, fp
 80093dc:	9209      	str	r2, [sp, #36]	; 0x24
 80093de:	f89a 3000 	ldrb.w	r3, [sl]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80a2 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093f2:	f10a 0a01 	add.w	sl, sl, #1
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009400:	4654      	mov	r4, sl
 8009402:	2205      	movs	r2, #5
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	4851      	ldr	r0, [pc, #324]	; (8009550 <_svfiprintf_r+0x1ec>)
 800940a:	f7f6 fef1 	bl	80001f0 <memchr>
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	b9d8      	cbnz	r0, 800944a <_svfiprintf_r+0xe6>
 8009412:	06d0      	lsls	r0, r2, #27
 8009414:	bf44      	itt	mi
 8009416:	2320      	movmi	r3, #32
 8009418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941c:	0711      	lsls	r1, r2, #28
 800941e:	bf44      	itt	mi
 8009420:	232b      	movmi	r3, #43	; 0x2b
 8009422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009426:	f89a 3000 	ldrb.w	r3, [sl]
 800942a:	2b2a      	cmp	r3, #42	; 0x2a
 800942c:	d015      	beq.n	800945a <_svfiprintf_r+0xf6>
 800942e:	9a07      	ldr	r2, [sp, #28]
 8009430:	4654      	mov	r4, sl
 8009432:	2000      	movs	r0, #0
 8009434:	f04f 0c0a 	mov.w	ip, #10
 8009438:	4621      	mov	r1, r4
 800943a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	2b09      	cmp	r3, #9
 8009442:	d94e      	bls.n	80094e2 <_svfiprintf_r+0x17e>
 8009444:	b1b0      	cbz	r0, 8009474 <_svfiprintf_r+0x110>
 8009446:	9207      	str	r2, [sp, #28]
 8009448:	e014      	b.n	8009474 <_svfiprintf_r+0x110>
 800944a:	eba0 0308 	sub.w	r3, r0, r8
 800944e:	fa09 f303 	lsl.w	r3, r9, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	46a2      	mov	sl, r4
 8009458:	e7d2      	b.n	8009400 <_svfiprintf_r+0x9c>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	9103      	str	r1, [sp, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	bfbb      	ittet	lt
 8009466:	425b      	neglt	r3, r3
 8009468:	f042 0202 	orrlt.w	r2, r2, #2
 800946c:	9307      	strge	r3, [sp, #28]
 800946e:	9307      	strlt	r3, [sp, #28]
 8009470:	bfb8      	it	lt
 8009472:	9204      	strlt	r2, [sp, #16]
 8009474:	7823      	ldrb	r3, [r4, #0]
 8009476:	2b2e      	cmp	r3, #46	; 0x2e
 8009478:	d10c      	bne.n	8009494 <_svfiprintf_r+0x130>
 800947a:	7863      	ldrb	r3, [r4, #1]
 800947c:	2b2a      	cmp	r3, #42	; 0x2a
 800947e:	d135      	bne.n	80094ec <_svfiprintf_r+0x188>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	9203      	str	r2, [sp, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfb8      	it	lt
 800948c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009490:	3402      	adds	r4, #2
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009560 <_svfiprintf_r+0x1fc>
 8009498:	7821      	ldrb	r1, [r4, #0]
 800949a:	2203      	movs	r2, #3
 800949c:	4650      	mov	r0, sl
 800949e:	f7f6 fea7 	bl	80001f0 <memchr>
 80094a2:	b140      	cbz	r0, 80094b6 <_svfiprintf_r+0x152>
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	eba0 000a 	sub.w	r0, r0, sl
 80094aa:	fa03 f000 	lsl.w	r0, r3, r0
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	4303      	orrs	r3, r0
 80094b2:	3401      	adds	r4, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ba:	4826      	ldr	r0, [pc, #152]	; (8009554 <_svfiprintf_r+0x1f0>)
 80094bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094c0:	2206      	movs	r2, #6
 80094c2:	f7f6 fe95 	bl	80001f0 <memchr>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d038      	beq.n	800953c <_svfiprintf_r+0x1d8>
 80094ca:	4b23      	ldr	r3, [pc, #140]	; (8009558 <_svfiprintf_r+0x1f4>)
 80094cc:	bb1b      	cbnz	r3, 8009516 <_svfiprintf_r+0x1b2>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	f023 0307 	bic.w	r3, r3, #7
 80094d6:	3308      	adds	r3, #8
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	4433      	add	r3, r6
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	e767      	b.n	80093b2 <_svfiprintf_r+0x4e>
 80094e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e6:	460c      	mov	r4, r1
 80094e8:	2001      	movs	r0, #1
 80094ea:	e7a5      	b.n	8009438 <_svfiprintf_r+0xd4>
 80094ec:	2300      	movs	r3, #0
 80094ee:	3401      	adds	r4, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	4619      	mov	r1, r3
 80094f4:	f04f 0c0a 	mov.w	ip, #10
 80094f8:	4620      	mov	r0, r4
 80094fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094fe:	3a30      	subs	r2, #48	; 0x30
 8009500:	2a09      	cmp	r2, #9
 8009502:	d903      	bls.n	800950c <_svfiprintf_r+0x1a8>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0c5      	beq.n	8009494 <_svfiprintf_r+0x130>
 8009508:	9105      	str	r1, [sp, #20]
 800950a:	e7c3      	b.n	8009494 <_svfiprintf_r+0x130>
 800950c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009510:	4604      	mov	r4, r0
 8009512:	2301      	movs	r3, #1
 8009514:	e7f0      	b.n	80094f8 <_svfiprintf_r+0x194>
 8009516:	ab03      	add	r3, sp, #12
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	462a      	mov	r2, r5
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <_svfiprintf_r+0x1f8>)
 800951e:	a904      	add	r1, sp, #16
 8009520:	4638      	mov	r0, r7
 8009522:	f7fc fa47 	bl	80059b4 <_printf_float>
 8009526:	1c42      	adds	r2, r0, #1
 8009528:	4606      	mov	r6, r0
 800952a:	d1d6      	bne.n	80094da <_svfiprintf_r+0x176>
 800952c:	89ab      	ldrh	r3, [r5, #12]
 800952e:	065b      	lsls	r3, r3, #25
 8009530:	f53f af2c 	bmi.w	800938c <_svfiprintf_r+0x28>
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	b01d      	add	sp, #116	; 0x74
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	462a      	mov	r2, r5
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <_svfiprintf_r+0x1f8>)
 8009544:	a904      	add	r1, sp, #16
 8009546:	4638      	mov	r0, r7
 8009548:	f7fc fcd8 	bl	8005efc <_printf_i>
 800954c:	e7eb      	b.n	8009526 <_svfiprintf_r+0x1c2>
 800954e:	bf00      	nop
 8009550:	0800a58c 	.word	0x0800a58c
 8009554:	0800a596 	.word	0x0800a596
 8009558:	080059b5 	.word	0x080059b5
 800955c:	080092ad 	.word	0x080092ad
 8009560:	0800a592 	.word	0x0800a592
 8009564:	00000000 	.word	0x00000000

08009568 <nan>:
 8009568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009570 <nan+0x8>
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	00000000 	.word	0x00000000
 8009574:	7ff80000 	.word	0x7ff80000

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_sbrk_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f8 fca0 	bl	8001ec8 <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	200006c0 	.word	0x200006c0

08009598 <strncmp>:
 8009598:	b510      	push	{r4, lr}
 800959a:	b17a      	cbz	r2, 80095bc <strncmp+0x24>
 800959c:	4603      	mov	r3, r0
 800959e:	3901      	subs	r1, #1
 80095a0:	1884      	adds	r4, r0, r2
 80095a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095aa:	4290      	cmp	r0, r2
 80095ac:	d101      	bne.n	80095b2 <strncmp+0x1a>
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	d101      	bne.n	80095b6 <strncmp+0x1e>
 80095b2:	1a80      	subs	r0, r0, r2
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d1f3      	bne.n	80095a2 <strncmp+0xa>
 80095ba:	e7fa      	b.n	80095b2 <strncmp+0x1a>
 80095bc:	4610      	mov	r0, r2
 80095be:	e7f9      	b.n	80095b4 <strncmp+0x1c>

080095c0 <__ascii_wctomb>:
 80095c0:	b149      	cbz	r1, 80095d6 <__ascii_wctomb+0x16>
 80095c2:	2aff      	cmp	r2, #255	; 0xff
 80095c4:	bf85      	ittet	hi
 80095c6:	238a      	movhi	r3, #138	; 0x8a
 80095c8:	6003      	strhi	r3, [r0, #0]
 80095ca:	700a      	strbls	r2, [r1, #0]
 80095cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80095d0:	bf98      	it	ls
 80095d2:	2001      	movls	r0, #1
 80095d4:	4770      	bx	lr
 80095d6:	4608      	mov	r0, r1
 80095d8:	4770      	bx	lr
	...

080095dc <__assert_func>:
 80095dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095de:	4614      	mov	r4, r2
 80095e0:	461a      	mov	r2, r3
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <__assert_func+0x2c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4605      	mov	r5, r0
 80095e8:	68d8      	ldr	r0, [r3, #12]
 80095ea:	b14c      	cbz	r4, 8009600 <__assert_func+0x24>
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <__assert_func+0x30>)
 80095ee:	9100      	str	r1, [sp, #0]
 80095f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095f4:	4906      	ldr	r1, [pc, #24]	; (8009610 <__assert_func+0x34>)
 80095f6:	462b      	mov	r3, r5
 80095f8:	f000 f80e 	bl	8009618 <fiprintf>
 80095fc:	f000 fa8c 	bl	8009b18 <abort>
 8009600:	4b04      	ldr	r3, [pc, #16]	; (8009614 <__assert_func+0x38>)
 8009602:	461c      	mov	r4, r3
 8009604:	e7f3      	b.n	80095ee <__assert_func+0x12>
 8009606:	bf00      	nop
 8009608:	20000124 	.word	0x20000124
 800960c:	0800a59d 	.word	0x0800a59d
 8009610:	0800a5aa 	.word	0x0800a5aa
 8009614:	0800a5d8 	.word	0x0800a5d8

08009618 <fiprintf>:
 8009618:	b40e      	push	{r1, r2, r3}
 800961a:	b503      	push	{r0, r1, lr}
 800961c:	4601      	mov	r1, r0
 800961e:	ab03      	add	r3, sp, #12
 8009620:	4805      	ldr	r0, [pc, #20]	; (8009638 <fiprintf+0x20>)
 8009622:	f853 2b04 	ldr.w	r2, [r3], #4
 8009626:	6800      	ldr	r0, [r0, #0]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	f000 f885 	bl	8009738 <_vfiprintf_r>
 800962e:	b002      	add	sp, #8
 8009630:	f85d eb04 	ldr.w	lr, [sp], #4
 8009634:	b003      	add	sp, #12
 8009636:	4770      	bx	lr
 8009638:	20000124 	.word	0x20000124

0800963c <memmove>:
 800963c:	4288      	cmp	r0, r1
 800963e:	b510      	push	{r4, lr}
 8009640:	eb01 0402 	add.w	r4, r1, r2
 8009644:	d902      	bls.n	800964c <memmove+0x10>
 8009646:	4284      	cmp	r4, r0
 8009648:	4623      	mov	r3, r4
 800964a:	d807      	bhi.n	800965c <memmove+0x20>
 800964c:	1e43      	subs	r3, r0, #1
 800964e:	42a1      	cmp	r1, r4
 8009650:	d008      	beq.n	8009664 <memmove+0x28>
 8009652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965a:	e7f8      	b.n	800964e <memmove+0x12>
 800965c:	4402      	add	r2, r0
 800965e:	4601      	mov	r1, r0
 8009660:	428a      	cmp	r2, r1
 8009662:	d100      	bne.n	8009666 <memmove+0x2a>
 8009664:	bd10      	pop	{r4, pc}
 8009666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800966e:	e7f7      	b.n	8009660 <memmove+0x24>

08009670 <__malloc_lock>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__malloc_lock+0x8>)
 8009672:	f000 bc11 	b.w	8009e98 <__retarget_lock_acquire_recursive>
 8009676:	bf00      	nop
 8009678:	200006c4 	.word	0x200006c4

0800967c <__malloc_unlock>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__malloc_unlock+0x8>)
 800967e:	f000 bc0c 	b.w	8009e9a <__retarget_lock_release_recursive>
 8009682:	bf00      	nop
 8009684:	200006c4 	.word	0x200006c4

08009688 <_realloc_r>:
 8009688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968c:	4680      	mov	r8, r0
 800968e:	4614      	mov	r4, r2
 8009690:	460e      	mov	r6, r1
 8009692:	b921      	cbnz	r1, 800969e <_realloc_r+0x16>
 8009694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	4611      	mov	r1, r2
 800969a:	f7ff bd93 	b.w	80091c4 <_malloc_r>
 800969e:	b92a      	cbnz	r2, 80096ac <_realloc_r+0x24>
 80096a0:	f7ff fd24 	bl	80090ec <_free_r>
 80096a4:	4625      	mov	r5, r4
 80096a6:	4628      	mov	r0, r5
 80096a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ac:	f000 fc5c 	bl	8009f68 <_malloc_usable_size_r>
 80096b0:	4284      	cmp	r4, r0
 80096b2:	4607      	mov	r7, r0
 80096b4:	d802      	bhi.n	80096bc <_realloc_r+0x34>
 80096b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096ba:	d812      	bhi.n	80096e2 <_realloc_r+0x5a>
 80096bc:	4621      	mov	r1, r4
 80096be:	4640      	mov	r0, r8
 80096c0:	f7ff fd80 	bl	80091c4 <_malloc_r>
 80096c4:	4605      	mov	r5, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d0ed      	beq.n	80096a6 <_realloc_r+0x1e>
 80096ca:	42bc      	cmp	r4, r7
 80096cc:	4622      	mov	r2, r4
 80096ce:	4631      	mov	r1, r6
 80096d0:	bf28      	it	cs
 80096d2:	463a      	movcs	r2, r7
 80096d4:	f7ff f824 	bl	8008720 <memcpy>
 80096d8:	4631      	mov	r1, r6
 80096da:	4640      	mov	r0, r8
 80096dc:	f7ff fd06 	bl	80090ec <_free_r>
 80096e0:	e7e1      	b.n	80096a6 <_realloc_r+0x1e>
 80096e2:	4635      	mov	r5, r6
 80096e4:	e7df      	b.n	80096a6 <_realloc_r+0x1e>

080096e6 <__sfputc_r>:
 80096e6:	6893      	ldr	r3, [r2, #8]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	b410      	push	{r4}
 80096ee:	6093      	str	r3, [r2, #8]
 80096f0:	da08      	bge.n	8009704 <__sfputc_r+0x1e>
 80096f2:	6994      	ldr	r4, [r2, #24]
 80096f4:	42a3      	cmp	r3, r4
 80096f6:	db01      	blt.n	80096fc <__sfputc_r+0x16>
 80096f8:	290a      	cmp	r1, #10
 80096fa:	d103      	bne.n	8009704 <__sfputc_r+0x1e>
 80096fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009700:	f000 b94a 	b.w	8009998 <__swbuf_r>
 8009704:	6813      	ldr	r3, [r2, #0]
 8009706:	1c58      	adds	r0, r3, #1
 8009708:	6010      	str	r0, [r2, #0]
 800970a:	7019      	strb	r1, [r3, #0]
 800970c:	4608      	mov	r0, r1
 800970e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009712:	4770      	bx	lr

08009714 <__sfputs_r>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	4606      	mov	r6, r0
 8009718:	460f      	mov	r7, r1
 800971a:	4614      	mov	r4, r2
 800971c:	18d5      	adds	r5, r2, r3
 800971e:	42ac      	cmp	r4, r5
 8009720:	d101      	bne.n	8009726 <__sfputs_r+0x12>
 8009722:	2000      	movs	r0, #0
 8009724:	e007      	b.n	8009736 <__sfputs_r+0x22>
 8009726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972a:	463a      	mov	r2, r7
 800972c:	4630      	mov	r0, r6
 800972e:	f7ff ffda 	bl	80096e6 <__sfputc_r>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	d1f3      	bne.n	800971e <__sfputs_r+0xa>
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009738 <_vfiprintf_r>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	460d      	mov	r5, r1
 800973e:	b09d      	sub	sp, #116	; 0x74
 8009740:	4614      	mov	r4, r2
 8009742:	4698      	mov	r8, r3
 8009744:	4606      	mov	r6, r0
 8009746:	b118      	cbz	r0, 8009750 <_vfiprintf_r+0x18>
 8009748:	6983      	ldr	r3, [r0, #24]
 800974a:	b90b      	cbnz	r3, 8009750 <_vfiprintf_r+0x18>
 800974c:	f000 fb06 	bl	8009d5c <__sinit>
 8009750:	4b89      	ldr	r3, [pc, #548]	; (8009978 <_vfiprintf_r+0x240>)
 8009752:	429d      	cmp	r5, r3
 8009754:	d11b      	bne.n	800978e <_vfiprintf_r+0x56>
 8009756:	6875      	ldr	r5, [r6, #4]
 8009758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800975a:	07d9      	lsls	r1, r3, #31
 800975c:	d405      	bmi.n	800976a <_vfiprintf_r+0x32>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	059a      	lsls	r2, r3, #22
 8009762:	d402      	bmi.n	800976a <_vfiprintf_r+0x32>
 8009764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009766:	f000 fb97 	bl	8009e98 <__retarget_lock_acquire_recursive>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	071b      	lsls	r3, r3, #28
 800976e:	d501      	bpl.n	8009774 <_vfiprintf_r+0x3c>
 8009770:	692b      	ldr	r3, [r5, #16]
 8009772:	b9eb      	cbnz	r3, 80097b0 <_vfiprintf_r+0x78>
 8009774:	4629      	mov	r1, r5
 8009776:	4630      	mov	r0, r6
 8009778:	f000 f960 	bl	8009a3c <__swsetup_r>
 800977c:	b1c0      	cbz	r0, 80097b0 <_vfiprintf_r+0x78>
 800977e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009780:	07dc      	lsls	r4, r3, #31
 8009782:	d50e      	bpl.n	80097a2 <_vfiprintf_r+0x6a>
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	b01d      	add	sp, #116	; 0x74
 800978a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978e:	4b7b      	ldr	r3, [pc, #492]	; (800997c <_vfiprintf_r+0x244>)
 8009790:	429d      	cmp	r5, r3
 8009792:	d101      	bne.n	8009798 <_vfiprintf_r+0x60>
 8009794:	68b5      	ldr	r5, [r6, #8]
 8009796:	e7df      	b.n	8009758 <_vfiprintf_r+0x20>
 8009798:	4b79      	ldr	r3, [pc, #484]	; (8009980 <_vfiprintf_r+0x248>)
 800979a:	429d      	cmp	r5, r3
 800979c:	bf08      	it	eq
 800979e:	68f5      	ldreq	r5, [r6, #12]
 80097a0:	e7da      	b.n	8009758 <_vfiprintf_r+0x20>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	0598      	lsls	r0, r3, #22
 80097a6:	d4ed      	bmi.n	8009784 <_vfiprintf_r+0x4c>
 80097a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097aa:	f000 fb76 	bl	8009e9a <__retarget_lock_release_recursive>
 80097ae:	e7e9      	b.n	8009784 <_vfiprintf_r+0x4c>
 80097b0:	2300      	movs	r3, #0
 80097b2:	9309      	str	r3, [sp, #36]	; 0x24
 80097b4:	2320      	movs	r3, #32
 80097b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80097be:	2330      	movs	r3, #48	; 0x30
 80097c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009984 <_vfiprintf_r+0x24c>
 80097c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c8:	f04f 0901 	mov.w	r9, #1
 80097cc:	4623      	mov	r3, r4
 80097ce:	469a      	mov	sl, r3
 80097d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d4:	b10a      	cbz	r2, 80097da <_vfiprintf_r+0xa2>
 80097d6:	2a25      	cmp	r2, #37	; 0x25
 80097d8:	d1f9      	bne.n	80097ce <_vfiprintf_r+0x96>
 80097da:	ebba 0b04 	subs.w	fp, sl, r4
 80097de:	d00b      	beq.n	80097f8 <_vfiprintf_r+0xc0>
 80097e0:	465b      	mov	r3, fp
 80097e2:	4622      	mov	r2, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ff94 	bl	8009714 <__sfputs_r>
 80097ec:	3001      	adds	r0, #1
 80097ee:	f000 80aa 	beq.w	8009946 <_vfiprintf_r+0x20e>
 80097f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f4:	445a      	add	r2, fp
 80097f6:	9209      	str	r2, [sp, #36]	; 0x24
 80097f8:	f89a 3000 	ldrb.w	r3, [sl]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 80a2 	beq.w	8009946 <_vfiprintf_r+0x20e>
 8009802:	2300      	movs	r3, #0
 8009804:	f04f 32ff 	mov.w	r2, #4294967295
 8009808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800980c:	f10a 0a01 	add.w	sl, sl, #1
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	9307      	str	r3, [sp, #28]
 8009814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009818:	931a      	str	r3, [sp, #104]	; 0x68
 800981a:	4654      	mov	r4, sl
 800981c:	2205      	movs	r2, #5
 800981e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009822:	4858      	ldr	r0, [pc, #352]	; (8009984 <_vfiprintf_r+0x24c>)
 8009824:	f7f6 fce4 	bl	80001f0 <memchr>
 8009828:	9a04      	ldr	r2, [sp, #16]
 800982a:	b9d8      	cbnz	r0, 8009864 <_vfiprintf_r+0x12c>
 800982c:	06d1      	lsls	r1, r2, #27
 800982e:	bf44      	itt	mi
 8009830:	2320      	movmi	r3, #32
 8009832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009836:	0713      	lsls	r3, r2, #28
 8009838:	bf44      	itt	mi
 800983a:	232b      	movmi	r3, #43	; 0x2b
 800983c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009840:	f89a 3000 	ldrb.w	r3, [sl]
 8009844:	2b2a      	cmp	r3, #42	; 0x2a
 8009846:	d015      	beq.n	8009874 <_vfiprintf_r+0x13c>
 8009848:	9a07      	ldr	r2, [sp, #28]
 800984a:	4654      	mov	r4, sl
 800984c:	2000      	movs	r0, #0
 800984e:	f04f 0c0a 	mov.w	ip, #10
 8009852:	4621      	mov	r1, r4
 8009854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009858:	3b30      	subs	r3, #48	; 0x30
 800985a:	2b09      	cmp	r3, #9
 800985c:	d94e      	bls.n	80098fc <_vfiprintf_r+0x1c4>
 800985e:	b1b0      	cbz	r0, 800988e <_vfiprintf_r+0x156>
 8009860:	9207      	str	r2, [sp, #28]
 8009862:	e014      	b.n	800988e <_vfiprintf_r+0x156>
 8009864:	eba0 0308 	sub.w	r3, r0, r8
 8009868:	fa09 f303 	lsl.w	r3, r9, r3
 800986c:	4313      	orrs	r3, r2
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	46a2      	mov	sl, r4
 8009872:	e7d2      	b.n	800981a <_vfiprintf_r+0xe2>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	1d19      	adds	r1, r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	9103      	str	r1, [sp, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	bfbb      	ittet	lt
 8009880:	425b      	neglt	r3, r3
 8009882:	f042 0202 	orrlt.w	r2, r2, #2
 8009886:	9307      	strge	r3, [sp, #28]
 8009888:	9307      	strlt	r3, [sp, #28]
 800988a:	bfb8      	it	lt
 800988c:	9204      	strlt	r2, [sp, #16]
 800988e:	7823      	ldrb	r3, [r4, #0]
 8009890:	2b2e      	cmp	r3, #46	; 0x2e
 8009892:	d10c      	bne.n	80098ae <_vfiprintf_r+0x176>
 8009894:	7863      	ldrb	r3, [r4, #1]
 8009896:	2b2a      	cmp	r3, #42	; 0x2a
 8009898:	d135      	bne.n	8009906 <_vfiprintf_r+0x1ce>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	1d1a      	adds	r2, r3, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	9203      	str	r2, [sp, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	bfb8      	it	lt
 80098a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098aa:	3402      	adds	r4, #2
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009994 <_vfiprintf_r+0x25c>
 80098b2:	7821      	ldrb	r1, [r4, #0]
 80098b4:	2203      	movs	r2, #3
 80098b6:	4650      	mov	r0, sl
 80098b8:	f7f6 fc9a 	bl	80001f0 <memchr>
 80098bc:	b140      	cbz	r0, 80098d0 <_vfiprintf_r+0x198>
 80098be:	2340      	movs	r3, #64	; 0x40
 80098c0:	eba0 000a 	sub.w	r0, r0, sl
 80098c4:	fa03 f000 	lsl.w	r0, r3, r0
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	4303      	orrs	r3, r0
 80098cc:	3401      	adds	r4, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	482c      	ldr	r0, [pc, #176]	; (8009988 <_vfiprintf_r+0x250>)
 80098d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098da:	2206      	movs	r2, #6
 80098dc:	f7f6 fc88 	bl	80001f0 <memchr>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d03f      	beq.n	8009964 <_vfiprintf_r+0x22c>
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <_vfiprintf_r+0x254>)
 80098e6:	bb1b      	cbnz	r3, 8009930 <_vfiprintf_r+0x1f8>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	3307      	adds	r3, #7
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	3308      	adds	r3, #8
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	443b      	add	r3, r7
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	e767      	b.n	80097cc <_vfiprintf_r+0x94>
 80098fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009900:	460c      	mov	r4, r1
 8009902:	2001      	movs	r0, #1
 8009904:	e7a5      	b.n	8009852 <_vfiprintf_r+0x11a>
 8009906:	2300      	movs	r3, #0
 8009908:	3401      	adds	r4, #1
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	4619      	mov	r1, r3
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009918:	3a30      	subs	r2, #48	; 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d903      	bls.n	8009926 <_vfiprintf_r+0x1ee>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c5      	beq.n	80098ae <_vfiprintf_r+0x176>
 8009922:	9105      	str	r1, [sp, #20]
 8009924:	e7c3      	b.n	80098ae <_vfiprintf_r+0x176>
 8009926:	fb0c 2101 	mla	r1, ip, r1, r2
 800992a:	4604      	mov	r4, r0
 800992c:	2301      	movs	r3, #1
 800992e:	e7f0      	b.n	8009912 <_vfiprintf_r+0x1da>
 8009930:	ab03      	add	r3, sp, #12
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	462a      	mov	r2, r5
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <_vfiprintf_r+0x258>)
 8009938:	a904      	add	r1, sp, #16
 800993a:	4630      	mov	r0, r6
 800993c:	f7fc f83a 	bl	80059b4 <_printf_float>
 8009940:	4607      	mov	r7, r0
 8009942:	1c78      	adds	r0, r7, #1
 8009944:	d1d6      	bne.n	80098f4 <_vfiprintf_r+0x1bc>
 8009946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009948:	07d9      	lsls	r1, r3, #31
 800994a:	d405      	bmi.n	8009958 <_vfiprintf_r+0x220>
 800994c:	89ab      	ldrh	r3, [r5, #12]
 800994e:	059a      	lsls	r2, r3, #22
 8009950:	d402      	bmi.n	8009958 <_vfiprintf_r+0x220>
 8009952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009954:	f000 faa1 	bl	8009e9a <__retarget_lock_release_recursive>
 8009958:	89ab      	ldrh	r3, [r5, #12]
 800995a:	065b      	lsls	r3, r3, #25
 800995c:	f53f af12 	bmi.w	8009784 <_vfiprintf_r+0x4c>
 8009960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009962:	e711      	b.n	8009788 <_vfiprintf_r+0x50>
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	462a      	mov	r2, r5
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <_vfiprintf_r+0x258>)
 800996c:	a904      	add	r1, sp, #16
 800996e:	4630      	mov	r0, r6
 8009970:	f7fc fac4 	bl	8005efc <_printf_i>
 8009974:	e7e4      	b.n	8009940 <_vfiprintf_r+0x208>
 8009976:	bf00      	nop
 8009978:	0800a5fc 	.word	0x0800a5fc
 800997c:	0800a61c 	.word	0x0800a61c
 8009980:	0800a5dc 	.word	0x0800a5dc
 8009984:	0800a58c 	.word	0x0800a58c
 8009988:	0800a596 	.word	0x0800a596
 800998c:	080059b5 	.word	0x080059b5
 8009990:	08009715 	.word	0x08009715
 8009994:	0800a592 	.word	0x0800a592

08009998 <__swbuf_r>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	460e      	mov	r6, r1
 800999c:	4614      	mov	r4, r2
 800999e:	4605      	mov	r5, r0
 80099a0:	b118      	cbz	r0, 80099aa <__swbuf_r+0x12>
 80099a2:	6983      	ldr	r3, [r0, #24]
 80099a4:	b90b      	cbnz	r3, 80099aa <__swbuf_r+0x12>
 80099a6:	f000 f9d9 	bl	8009d5c <__sinit>
 80099aa:	4b21      	ldr	r3, [pc, #132]	; (8009a30 <__swbuf_r+0x98>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d12b      	bne.n	8009a08 <__swbuf_r+0x70>
 80099b0:	686c      	ldr	r4, [r5, #4]
 80099b2:	69a3      	ldr	r3, [r4, #24]
 80099b4:	60a3      	str	r3, [r4, #8]
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	071a      	lsls	r2, r3, #28
 80099ba:	d52f      	bpl.n	8009a1c <__swbuf_r+0x84>
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	b36b      	cbz	r3, 8009a1c <__swbuf_r+0x84>
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	6820      	ldr	r0, [r4, #0]
 80099c4:	1ac0      	subs	r0, r0, r3
 80099c6:	6963      	ldr	r3, [r4, #20]
 80099c8:	b2f6      	uxtb	r6, r6
 80099ca:	4283      	cmp	r3, r0
 80099cc:	4637      	mov	r7, r6
 80099ce:	dc04      	bgt.n	80099da <__swbuf_r+0x42>
 80099d0:	4621      	mov	r1, r4
 80099d2:	4628      	mov	r0, r5
 80099d4:	f000 f92e 	bl	8009c34 <_fflush_r>
 80099d8:	bb30      	cbnz	r0, 8009a28 <__swbuf_r+0x90>
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	701e      	strb	r6, [r3, #0]
 80099e8:	6963      	ldr	r3, [r4, #20]
 80099ea:	3001      	adds	r0, #1
 80099ec:	4283      	cmp	r3, r0
 80099ee:	d004      	beq.n	80099fa <__swbuf_r+0x62>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	07db      	lsls	r3, r3, #31
 80099f4:	d506      	bpl.n	8009a04 <__swbuf_r+0x6c>
 80099f6:	2e0a      	cmp	r6, #10
 80099f8:	d104      	bne.n	8009a04 <__swbuf_r+0x6c>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f919 	bl	8009c34 <_fflush_r>
 8009a02:	b988      	cbnz	r0, 8009a28 <__swbuf_r+0x90>
 8009a04:	4638      	mov	r0, r7
 8009a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <__swbuf_r+0x9c>)
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d101      	bne.n	8009a12 <__swbuf_r+0x7a>
 8009a0e:	68ac      	ldr	r4, [r5, #8]
 8009a10:	e7cf      	b.n	80099b2 <__swbuf_r+0x1a>
 8009a12:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <__swbuf_r+0xa0>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	bf08      	it	eq
 8009a18:	68ec      	ldreq	r4, [r5, #12]
 8009a1a:	e7ca      	b.n	80099b2 <__swbuf_r+0x1a>
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f80c 	bl	8009a3c <__swsetup_r>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0cb      	beq.n	80099c0 <__swbuf_r+0x28>
 8009a28:	f04f 37ff 	mov.w	r7, #4294967295
 8009a2c:	e7ea      	b.n	8009a04 <__swbuf_r+0x6c>
 8009a2e:	bf00      	nop
 8009a30:	0800a5fc 	.word	0x0800a5fc
 8009a34:	0800a61c 	.word	0x0800a61c
 8009a38:	0800a5dc 	.word	0x0800a5dc

08009a3c <__swsetup_r>:
 8009a3c:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <__swsetup_r+0xcc>)
 8009a3e:	b570      	push	{r4, r5, r6, lr}
 8009a40:	681d      	ldr	r5, [r3, #0]
 8009a42:	4606      	mov	r6, r0
 8009a44:	460c      	mov	r4, r1
 8009a46:	b125      	cbz	r5, 8009a52 <__swsetup_r+0x16>
 8009a48:	69ab      	ldr	r3, [r5, #24]
 8009a4a:	b913      	cbnz	r3, 8009a52 <__swsetup_r+0x16>
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f000 f985 	bl	8009d5c <__sinit>
 8009a52:	4b2e      	ldr	r3, [pc, #184]	; (8009b0c <__swsetup_r+0xd0>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d10f      	bne.n	8009a78 <__swsetup_r+0x3c>
 8009a58:	686c      	ldr	r4, [r5, #4]
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a60:	0719      	lsls	r1, r3, #28
 8009a62:	d42c      	bmi.n	8009abe <__swsetup_r+0x82>
 8009a64:	06dd      	lsls	r5, r3, #27
 8009a66:	d411      	bmi.n	8009a8c <__swsetup_r+0x50>
 8009a68:	2309      	movs	r3, #9
 8009a6a:	6033      	str	r3, [r6, #0]
 8009a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	f04f 30ff 	mov.w	r0, #4294967295
 8009a76:	e03e      	b.n	8009af6 <__swsetup_r+0xba>
 8009a78:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <__swsetup_r+0xd4>)
 8009a7a:	429c      	cmp	r4, r3
 8009a7c:	d101      	bne.n	8009a82 <__swsetup_r+0x46>
 8009a7e:	68ac      	ldr	r4, [r5, #8]
 8009a80:	e7eb      	b.n	8009a5a <__swsetup_r+0x1e>
 8009a82:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <__swsetup_r+0xd8>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	bf08      	it	eq
 8009a88:	68ec      	ldreq	r4, [r5, #12]
 8009a8a:	e7e6      	b.n	8009a5a <__swsetup_r+0x1e>
 8009a8c:	0758      	lsls	r0, r3, #29
 8009a8e:	d512      	bpl.n	8009ab6 <__swsetup_r+0x7a>
 8009a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a92:	b141      	cbz	r1, 8009aa6 <__swsetup_r+0x6a>
 8009a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a98:	4299      	cmp	r1, r3
 8009a9a:	d002      	beq.n	8009aa2 <__swsetup_r+0x66>
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7ff fb25 	bl	80090ec <_free_r>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f043 0308 	orr.w	r3, r3, #8
 8009abc:	81a3      	strh	r3, [r4, #12]
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	b94b      	cbnz	r3, 8009ad6 <__swsetup_r+0x9a>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009acc:	d003      	beq.n	8009ad6 <__swsetup_r+0x9a>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 fa09 	bl	8009ee8 <__smakebuf_r>
 8009ad6:	89a0      	ldrh	r0, [r4, #12]
 8009ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009adc:	f010 0301 	ands.w	r3, r0, #1
 8009ae0:	d00a      	beq.n	8009af8 <__swsetup_r+0xbc>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60a3      	str	r3, [r4, #8]
 8009ae6:	6963      	ldr	r3, [r4, #20]
 8009ae8:	425b      	negs	r3, r3
 8009aea:	61a3      	str	r3, [r4, #24]
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	b943      	cbnz	r3, 8009b02 <__swsetup_r+0xc6>
 8009af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009af4:	d1ba      	bne.n	8009a6c <__swsetup_r+0x30>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	0781      	lsls	r1, r0, #30
 8009afa:	bf58      	it	pl
 8009afc:	6963      	ldrpl	r3, [r4, #20]
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	e7f4      	b.n	8009aec <__swsetup_r+0xb0>
 8009b02:	2000      	movs	r0, #0
 8009b04:	e7f7      	b.n	8009af6 <__swsetup_r+0xba>
 8009b06:	bf00      	nop
 8009b08:	20000124 	.word	0x20000124
 8009b0c:	0800a5fc 	.word	0x0800a5fc
 8009b10:	0800a61c 	.word	0x0800a61c
 8009b14:	0800a5dc 	.word	0x0800a5dc

08009b18 <abort>:
 8009b18:	b508      	push	{r3, lr}
 8009b1a:	2006      	movs	r0, #6
 8009b1c:	f000 fa54 	bl	8009fc8 <raise>
 8009b20:	2001      	movs	r0, #1
 8009b22:	f7f8 f959 	bl	8001dd8 <_exit>
	...

08009b28 <__sflush_r>:
 8009b28:	898a      	ldrh	r2, [r1, #12]
 8009b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2e:	4605      	mov	r5, r0
 8009b30:	0710      	lsls	r0, r2, #28
 8009b32:	460c      	mov	r4, r1
 8009b34:	d458      	bmi.n	8009be8 <__sflush_r+0xc0>
 8009b36:	684b      	ldr	r3, [r1, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	dc05      	bgt.n	8009b48 <__sflush_r+0x20>
 8009b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dc02      	bgt.n	8009b48 <__sflush_r+0x20>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	d0f9      	beq.n	8009b42 <__sflush_r+0x1a>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b54:	682f      	ldr	r7, [r5, #0]
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	d032      	beq.n	8009bc0 <__sflush_r+0x98>
 8009b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	075a      	lsls	r2, r3, #29
 8009b60:	d505      	bpl.n	8009b6e <__sflush_r+0x46>
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	1ac0      	subs	r0, r0, r3
 8009b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b68:	b10b      	cbz	r3, 8009b6e <__sflush_r+0x46>
 8009b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b6c:	1ac0      	subs	r0, r0, r3
 8009b6e:	2300      	movs	r3, #0
 8009b70:	4602      	mov	r2, r0
 8009b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b74:	6a21      	ldr	r1, [r4, #32]
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b0      	blx	r6
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	d106      	bne.n	8009b8e <__sflush_r+0x66>
 8009b80:	6829      	ldr	r1, [r5, #0]
 8009b82:	291d      	cmp	r1, #29
 8009b84:	d82c      	bhi.n	8009be0 <__sflush_r+0xb8>
 8009b86:	4a2a      	ldr	r2, [pc, #168]	; (8009c30 <__sflush_r+0x108>)
 8009b88:	40ca      	lsrs	r2, r1
 8009b8a:	07d6      	lsls	r6, r2, #31
 8009b8c:	d528      	bpl.n	8009be0 <__sflush_r+0xb8>
 8009b8e:	2200      	movs	r2, #0
 8009b90:	6062      	str	r2, [r4, #4]
 8009b92:	04d9      	lsls	r1, r3, #19
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	6022      	str	r2, [r4, #0]
 8009b98:	d504      	bpl.n	8009ba4 <__sflush_r+0x7c>
 8009b9a:	1c42      	adds	r2, r0, #1
 8009b9c:	d101      	bne.n	8009ba2 <__sflush_r+0x7a>
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	b903      	cbnz	r3, 8009ba4 <__sflush_r+0x7c>
 8009ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ba6:	602f      	str	r7, [r5, #0]
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	d0ca      	beq.n	8009b42 <__sflush_r+0x1a>
 8009bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bb0:	4299      	cmp	r1, r3
 8009bb2:	d002      	beq.n	8009bba <__sflush_r+0x92>
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f7ff fa99 	bl	80090ec <_free_r>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8009bbe:	e7c1      	b.n	8009b44 <__sflush_r+0x1c>
 8009bc0:	6a21      	ldr	r1, [r4, #32]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	47b0      	blx	r6
 8009bc8:	1c41      	adds	r1, r0, #1
 8009bca:	d1c7      	bne.n	8009b5c <__sflush_r+0x34>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0c4      	beq.n	8009b5c <__sflush_r+0x34>
 8009bd2:	2b1d      	cmp	r3, #29
 8009bd4:	d001      	beq.n	8009bda <__sflush_r+0xb2>
 8009bd6:	2b16      	cmp	r3, #22
 8009bd8:	d101      	bne.n	8009bde <__sflush_r+0xb6>
 8009bda:	602f      	str	r7, [r5, #0]
 8009bdc:	e7b1      	b.n	8009b42 <__sflush_r+0x1a>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	e7ad      	b.n	8009b44 <__sflush_r+0x1c>
 8009be8:	690f      	ldr	r7, [r1, #16]
 8009bea:	2f00      	cmp	r7, #0
 8009bec:	d0a9      	beq.n	8009b42 <__sflush_r+0x1a>
 8009bee:	0793      	lsls	r3, r2, #30
 8009bf0:	680e      	ldr	r6, [r1, #0]
 8009bf2:	bf08      	it	eq
 8009bf4:	694b      	ldreq	r3, [r1, #20]
 8009bf6:	600f      	str	r7, [r1, #0]
 8009bf8:	bf18      	it	ne
 8009bfa:	2300      	movne	r3, #0
 8009bfc:	eba6 0807 	sub.w	r8, r6, r7
 8009c00:	608b      	str	r3, [r1, #8]
 8009c02:	f1b8 0f00 	cmp.w	r8, #0
 8009c06:	dd9c      	ble.n	8009b42 <__sflush_r+0x1a>
 8009c08:	6a21      	ldr	r1, [r4, #32]
 8009c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c0c:	4643      	mov	r3, r8
 8009c0e:	463a      	mov	r2, r7
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b0      	blx	r6
 8009c14:	2800      	cmp	r0, #0
 8009c16:	dc06      	bgt.n	8009c26 <__sflush_r+0xfe>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	e78e      	b.n	8009b44 <__sflush_r+0x1c>
 8009c26:	4407      	add	r7, r0
 8009c28:	eba8 0800 	sub.w	r8, r8, r0
 8009c2c:	e7e9      	b.n	8009c02 <__sflush_r+0xda>
 8009c2e:	bf00      	nop
 8009c30:	20400001 	.word	0x20400001

08009c34 <_fflush_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	690b      	ldr	r3, [r1, #16]
 8009c38:	4605      	mov	r5, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	b913      	cbnz	r3, 8009c44 <_fflush_r+0x10>
 8009c3e:	2500      	movs	r5, #0
 8009c40:	4628      	mov	r0, r5
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	b118      	cbz	r0, 8009c4e <_fflush_r+0x1a>
 8009c46:	6983      	ldr	r3, [r0, #24]
 8009c48:	b90b      	cbnz	r3, 8009c4e <_fflush_r+0x1a>
 8009c4a:	f000 f887 	bl	8009d5c <__sinit>
 8009c4e:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <_fflush_r+0x6c>)
 8009c50:	429c      	cmp	r4, r3
 8009c52:	d11b      	bne.n	8009c8c <_fflush_r+0x58>
 8009c54:	686c      	ldr	r4, [r5, #4]
 8009c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0ef      	beq.n	8009c3e <_fflush_r+0xa>
 8009c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c60:	07d0      	lsls	r0, r2, #31
 8009c62:	d404      	bmi.n	8009c6e <_fflush_r+0x3a>
 8009c64:	0599      	lsls	r1, r3, #22
 8009c66:	d402      	bmi.n	8009c6e <_fflush_r+0x3a>
 8009c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6a:	f000 f915 	bl	8009e98 <__retarget_lock_acquire_recursive>
 8009c6e:	4628      	mov	r0, r5
 8009c70:	4621      	mov	r1, r4
 8009c72:	f7ff ff59 	bl	8009b28 <__sflush_r>
 8009c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c78:	07da      	lsls	r2, r3, #31
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	d4e0      	bmi.n	8009c40 <_fflush_r+0xc>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	059b      	lsls	r3, r3, #22
 8009c82:	d4dd      	bmi.n	8009c40 <_fflush_r+0xc>
 8009c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c86:	f000 f908 	bl	8009e9a <__retarget_lock_release_recursive>
 8009c8a:	e7d9      	b.n	8009c40 <_fflush_r+0xc>
 8009c8c:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <_fflush_r+0x70>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d101      	bne.n	8009c96 <_fflush_r+0x62>
 8009c92:	68ac      	ldr	r4, [r5, #8]
 8009c94:	e7df      	b.n	8009c56 <_fflush_r+0x22>
 8009c96:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <_fflush_r+0x74>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	bf08      	it	eq
 8009c9c:	68ec      	ldreq	r4, [r5, #12]
 8009c9e:	e7da      	b.n	8009c56 <_fflush_r+0x22>
 8009ca0:	0800a5fc 	.word	0x0800a5fc
 8009ca4:	0800a61c 	.word	0x0800a61c
 8009ca8:	0800a5dc 	.word	0x0800a5dc

08009cac <std>:
 8009cac:	2300      	movs	r3, #0
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8009cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cba:	6083      	str	r3, [r0, #8]
 8009cbc:	8181      	strh	r1, [r0, #12]
 8009cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8009cc0:	81c2      	strh	r2, [r0, #14]
 8009cc2:	6183      	str	r3, [r0, #24]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	2208      	movs	r2, #8
 8009cc8:	305c      	adds	r0, #92	; 0x5c
 8009cca:	f7fb fdcb 	bl	8005864 <memset>
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <std+0x38>)
 8009cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <std+0x3c>)
 8009cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cd6:	4b05      	ldr	r3, [pc, #20]	; (8009cec <std+0x40>)
 8009cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cda:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <std+0x44>)
 8009cdc:	6224      	str	r4, [r4, #32]
 8009cde:	6323      	str	r3, [r4, #48]	; 0x30
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0800a001 	.word	0x0800a001
 8009ce8:	0800a023 	.word	0x0800a023
 8009cec:	0800a05b 	.word	0x0800a05b
 8009cf0:	0800a07f 	.word	0x0800a07f

08009cf4 <_cleanup_r>:
 8009cf4:	4901      	ldr	r1, [pc, #4]	; (8009cfc <_cleanup_r+0x8>)
 8009cf6:	f000 b8af 	b.w	8009e58 <_fwalk_reent>
 8009cfa:	bf00      	nop
 8009cfc:	08009c35 	.word	0x08009c35

08009d00 <__sfmoreglue>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	2268      	movs	r2, #104	; 0x68
 8009d04:	1e4d      	subs	r5, r1, #1
 8009d06:	4355      	muls	r5, r2
 8009d08:	460e      	mov	r6, r1
 8009d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d0e:	f7ff fa59 	bl	80091c4 <_malloc_r>
 8009d12:	4604      	mov	r4, r0
 8009d14:	b140      	cbz	r0, 8009d28 <__sfmoreglue+0x28>
 8009d16:	2100      	movs	r1, #0
 8009d18:	e9c0 1600 	strd	r1, r6, [r0]
 8009d1c:	300c      	adds	r0, #12
 8009d1e:	60a0      	str	r0, [r4, #8]
 8009d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d24:	f7fb fd9e 	bl	8005864 <memset>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}

08009d2c <__sfp_lock_acquire>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	; (8009d34 <__sfp_lock_acquire+0x8>)
 8009d2e:	f000 b8b3 	b.w	8009e98 <__retarget_lock_acquire_recursive>
 8009d32:	bf00      	nop
 8009d34:	200006c5 	.word	0x200006c5

08009d38 <__sfp_lock_release>:
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__sfp_lock_release+0x8>)
 8009d3a:	f000 b8ae 	b.w	8009e9a <__retarget_lock_release_recursive>
 8009d3e:	bf00      	nop
 8009d40:	200006c5 	.word	0x200006c5

08009d44 <__sinit_lock_acquire>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__sinit_lock_acquire+0x8>)
 8009d46:	f000 b8a7 	b.w	8009e98 <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	200006c6 	.word	0x200006c6

08009d50 <__sinit_lock_release>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__sinit_lock_release+0x8>)
 8009d52:	f000 b8a2 	b.w	8009e9a <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	200006c6 	.word	0x200006c6

08009d5c <__sinit>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	f7ff fff0 	bl	8009d44 <__sinit_lock_acquire>
 8009d64:	69a3      	ldr	r3, [r4, #24]
 8009d66:	b11b      	cbz	r3, 8009d70 <__sinit+0x14>
 8009d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d6c:	f7ff bff0 	b.w	8009d50 <__sinit_lock_release>
 8009d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d74:	6523      	str	r3, [r4, #80]	; 0x50
 8009d76:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <__sinit+0x68>)
 8009d78:	4a13      	ldr	r2, [pc, #76]	; (8009dc8 <__sinit+0x6c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d7e:	42a3      	cmp	r3, r4
 8009d80:	bf04      	itt	eq
 8009d82:	2301      	moveq	r3, #1
 8009d84:	61a3      	streq	r3, [r4, #24]
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 f820 	bl	8009dcc <__sfp>
 8009d8c:	6060      	str	r0, [r4, #4]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 f81c 	bl	8009dcc <__sfp>
 8009d94:	60a0      	str	r0, [r4, #8]
 8009d96:	4620      	mov	r0, r4
 8009d98:	f000 f818 	bl	8009dcc <__sfp>
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	60e0      	str	r0, [r4, #12]
 8009da0:	2104      	movs	r1, #4
 8009da2:	6860      	ldr	r0, [r4, #4]
 8009da4:	f7ff ff82 	bl	8009cac <std>
 8009da8:	68a0      	ldr	r0, [r4, #8]
 8009daa:	2201      	movs	r2, #1
 8009dac:	2109      	movs	r1, #9
 8009dae:	f7ff ff7d 	bl	8009cac <std>
 8009db2:	68e0      	ldr	r0, [r4, #12]
 8009db4:	2202      	movs	r2, #2
 8009db6:	2112      	movs	r1, #18
 8009db8:	f7ff ff78 	bl	8009cac <std>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	61a3      	str	r3, [r4, #24]
 8009dc0:	e7d2      	b.n	8009d68 <__sinit+0xc>
 8009dc2:	bf00      	nop
 8009dc4:	0800a194 	.word	0x0800a194
 8009dc8:	08009cf5 	.word	0x08009cf5

08009dcc <__sfp>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	4607      	mov	r7, r0
 8009dd0:	f7ff ffac 	bl	8009d2c <__sfp_lock_acquire>
 8009dd4:	4b1e      	ldr	r3, [pc, #120]	; (8009e50 <__sfp+0x84>)
 8009dd6:	681e      	ldr	r6, [r3, #0]
 8009dd8:	69b3      	ldr	r3, [r6, #24]
 8009dda:	b913      	cbnz	r3, 8009de2 <__sfp+0x16>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff ffbd 	bl	8009d5c <__sinit>
 8009de2:	3648      	adds	r6, #72	; 0x48
 8009de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	d503      	bpl.n	8009df4 <__sfp+0x28>
 8009dec:	6833      	ldr	r3, [r6, #0]
 8009dee:	b30b      	cbz	r3, 8009e34 <__sfp+0x68>
 8009df0:	6836      	ldr	r6, [r6, #0]
 8009df2:	e7f7      	b.n	8009de4 <__sfp+0x18>
 8009df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009df8:	b9d5      	cbnz	r5, 8009e30 <__sfp+0x64>
 8009dfa:	4b16      	ldr	r3, [pc, #88]	; (8009e54 <__sfp+0x88>)
 8009dfc:	60e3      	str	r3, [r4, #12]
 8009dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e02:	6665      	str	r5, [r4, #100]	; 0x64
 8009e04:	f000 f847 	bl	8009e96 <__retarget_lock_init_recursive>
 8009e08:	f7ff ff96 	bl	8009d38 <__sfp_lock_release>
 8009e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e14:	6025      	str	r5, [r4, #0]
 8009e16:	61a5      	str	r5, [r4, #24]
 8009e18:	2208      	movs	r2, #8
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e20:	f7fb fd20 	bl	8005864 <memset>
 8009e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e30:	3468      	adds	r4, #104	; 0x68
 8009e32:	e7d9      	b.n	8009de8 <__sfp+0x1c>
 8009e34:	2104      	movs	r1, #4
 8009e36:	4638      	mov	r0, r7
 8009e38:	f7ff ff62 	bl	8009d00 <__sfmoreglue>
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	6030      	str	r0, [r6, #0]
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d1d5      	bne.n	8009df0 <__sfp+0x24>
 8009e44:	f7ff ff78 	bl	8009d38 <__sfp_lock_release>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	e7ee      	b.n	8009e2c <__sfp+0x60>
 8009e4e:	bf00      	nop
 8009e50:	0800a194 	.word	0x0800a194
 8009e54:	ffff0001 	.word	0xffff0001

08009e58 <_fwalk_reent>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	4688      	mov	r8, r1
 8009e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e64:	2700      	movs	r7, #0
 8009e66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e6e:	d505      	bpl.n	8009e7c <_fwalk_reent+0x24>
 8009e70:	6824      	ldr	r4, [r4, #0]
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d1f7      	bne.n	8009e66 <_fwalk_reent+0xe>
 8009e76:	4638      	mov	r0, r7
 8009e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d907      	bls.n	8009e92 <_fwalk_reent+0x3a>
 8009e82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e86:	3301      	adds	r3, #1
 8009e88:	d003      	beq.n	8009e92 <_fwalk_reent+0x3a>
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	47c0      	blx	r8
 8009e90:	4307      	orrs	r7, r0
 8009e92:	3568      	adds	r5, #104	; 0x68
 8009e94:	e7e9      	b.n	8009e6a <_fwalk_reent+0x12>

08009e96 <__retarget_lock_init_recursive>:
 8009e96:	4770      	bx	lr

08009e98 <__retarget_lock_acquire_recursive>:
 8009e98:	4770      	bx	lr

08009e9a <__retarget_lock_release_recursive>:
 8009e9a:	4770      	bx	lr

08009e9c <__swhatbuf_r>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	460e      	mov	r6, r1
 8009ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea4:	2900      	cmp	r1, #0
 8009ea6:	b096      	sub	sp, #88	; 0x58
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	461d      	mov	r5, r3
 8009eac:	da08      	bge.n	8009ec0 <__swhatbuf_r+0x24>
 8009eae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	061a      	lsls	r2, r3, #24
 8009eb8:	d410      	bmi.n	8009edc <__swhatbuf_r+0x40>
 8009eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ebe:	e00e      	b.n	8009ede <__swhatbuf_r+0x42>
 8009ec0:	466a      	mov	r2, sp
 8009ec2:	f000 f903 	bl	800a0cc <_fstat_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	dbf1      	blt.n	8009eae <__swhatbuf_r+0x12>
 8009eca:	9a01      	ldr	r2, [sp, #4]
 8009ecc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ed0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ed4:	425a      	negs	r2, r3
 8009ed6:	415a      	adcs	r2, r3
 8009ed8:	602a      	str	r2, [r5, #0]
 8009eda:	e7ee      	b.n	8009eba <__swhatbuf_r+0x1e>
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	2000      	movs	r0, #0
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	b016      	add	sp, #88	; 0x58
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ee8 <__smakebuf_r>:
 8009ee8:	898b      	ldrh	r3, [r1, #12]
 8009eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eec:	079d      	lsls	r5, r3, #30
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	d507      	bpl.n	8009f04 <__smakebuf_r+0x1c>
 8009ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	2301      	movs	r3, #1
 8009efe:	6163      	str	r3, [r4, #20]
 8009f00:	b002      	add	sp, #8
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	ab01      	add	r3, sp, #4
 8009f06:	466a      	mov	r2, sp
 8009f08:	f7ff ffc8 	bl	8009e9c <__swhatbuf_r>
 8009f0c:	9900      	ldr	r1, [sp, #0]
 8009f0e:	4605      	mov	r5, r0
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff f957 	bl	80091c4 <_malloc_r>
 8009f16:	b948      	cbnz	r0, 8009f2c <__smakebuf_r+0x44>
 8009f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f1c:	059a      	lsls	r2, r3, #22
 8009f1e:	d4ef      	bmi.n	8009f00 <__smakebuf_r+0x18>
 8009f20:	f023 0303 	bic.w	r3, r3, #3
 8009f24:	f043 0302 	orr.w	r3, r3, #2
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	e7e3      	b.n	8009ef4 <__smakebuf_r+0xc>
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <__smakebuf_r+0x7c>)
 8009f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	6020      	str	r0, [r4, #0]
 8009f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	6163      	str	r3, [r4, #20]
 8009f3e:	9b01      	ldr	r3, [sp, #4]
 8009f40:	6120      	str	r0, [r4, #16]
 8009f42:	b15b      	cbz	r3, 8009f5c <__smakebuf_r+0x74>
 8009f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f000 f8d1 	bl	800a0f0 <_isatty_r>
 8009f4e:	b128      	cbz	r0, 8009f5c <__smakebuf_r+0x74>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	f023 0303 	bic.w	r3, r3, #3
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	89a0      	ldrh	r0, [r4, #12]
 8009f5e:	4305      	orrs	r5, r0
 8009f60:	81a5      	strh	r5, [r4, #12]
 8009f62:	e7cd      	b.n	8009f00 <__smakebuf_r+0x18>
 8009f64:	08009cf5 	.word	0x08009cf5

08009f68 <_malloc_usable_size_r>:
 8009f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f6c:	1f18      	subs	r0, r3, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bfbc      	itt	lt
 8009f72:	580b      	ldrlt	r3, [r1, r0]
 8009f74:	18c0      	addlt	r0, r0, r3
 8009f76:	4770      	bx	lr

08009f78 <_raise_r>:
 8009f78:	291f      	cmp	r1, #31
 8009f7a:	b538      	push	{r3, r4, r5, lr}
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	460d      	mov	r5, r1
 8009f80:	d904      	bls.n	8009f8c <_raise_r+0x14>
 8009f82:	2316      	movs	r3, #22
 8009f84:	6003      	str	r3, [r0, #0]
 8009f86:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f8e:	b112      	cbz	r2, 8009f96 <_raise_r+0x1e>
 8009f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f94:	b94b      	cbnz	r3, 8009faa <_raise_r+0x32>
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 f830 	bl	8009ffc <_getpid_r>
 8009f9c:	462a      	mov	r2, r5
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa6:	f000 b817 	b.w	8009fd8 <_kill_r>
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d00a      	beq.n	8009fc4 <_raise_r+0x4c>
 8009fae:	1c59      	adds	r1, r3, #1
 8009fb0:	d103      	bne.n	8009fba <_raise_r+0x42>
 8009fb2:	2316      	movs	r3, #22
 8009fb4:	6003      	str	r3, [r0, #0]
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	e7e7      	b.n	8009f8a <_raise_r+0x12>
 8009fba:	2400      	movs	r4, #0
 8009fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	4798      	blx	r3
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e7e0      	b.n	8009f8a <_raise_r+0x12>

08009fc8 <raise>:
 8009fc8:	4b02      	ldr	r3, [pc, #8]	; (8009fd4 <raise+0xc>)
 8009fca:	4601      	mov	r1, r0
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	f7ff bfd3 	b.w	8009f78 <_raise_r>
 8009fd2:	bf00      	nop
 8009fd4:	20000124 	.word	0x20000124

08009fd8 <_kill_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	; (8009ff8 <_kill_r+0x20>)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	f7f7 fee7 	bl	8001db8 <_kill>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d102      	bne.n	8009ff4 <_kill_r+0x1c>
 8009fee:	682b      	ldr	r3, [r5, #0]
 8009ff0:	b103      	cbz	r3, 8009ff4 <_kill_r+0x1c>
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	200006c0 	.word	0x200006c0

08009ffc <_getpid_r>:
 8009ffc:	f7f7 bed4 	b.w	8001da8 <_getpid>

0800a000 <__sread>:
 800a000:	b510      	push	{r4, lr}
 800a002:	460c      	mov	r4, r1
 800a004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a008:	f000 f894 	bl	800a134 <_read_r>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	bfab      	itete	ge
 800a010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a012:	89a3      	ldrhlt	r3, [r4, #12]
 800a014:	181b      	addge	r3, r3, r0
 800a016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a01a:	bfac      	ite	ge
 800a01c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a01e:	81a3      	strhlt	r3, [r4, #12]
 800a020:	bd10      	pop	{r4, pc}

0800a022 <__swrite>:
 800a022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a026:	461f      	mov	r7, r3
 800a028:	898b      	ldrh	r3, [r1, #12]
 800a02a:	05db      	lsls	r3, r3, #23
 800a02c:	4605      	mov	r5, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	4616      	mov	r6, r2
 800a032:	d505      	bpl.n	800a040 <__swrite+0x1e>
 800a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a038:	2302      	movs	r3, #2
 800a03a:	2200      	movs	r2, #0
 800a03c:	f000 f868 	bl	800a110 <_lseek_r>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	4632      	mov	r2, r6
 800a04e:	463b      	mov	r3, r7
 800a050:	4628      	mov	r0, r5
 800a052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a056:	f000 b817 	b.w	800a088 <_write_r>

0800a05a <__sseek>:
 800a05a:	b510      	push	{r4, lr}
 800a05c:	460c      	mov	r4, r1
 800a05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a062:	f000 f855 	bl	800a110 <_lseek_r>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	bf15      	itete	ne
 800a06c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a06e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a076:	81a3      	strheq	r3, [r4, #12]
 800a078:	bf18      	it	ne
 800a07a:	81a3      	strhne	r3, [r4, #12]
 800a07c:	bd10      	pop	{r4, pc}

0800a07e <__sclose>:
 800a07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a082:	f000 b813 	b.w	800a0ac <_close_r>
	...

0800a088 <_write_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4d07      	ldr	r5, [pc, #28]	; (800a0a8 <_write_r+0x20>)
 800a08c:	4604      	mov	r4, r0
 800a08e:	4608      	mov	r0, r1
 800a090:	4611      	mov	r1, r2
 800a092:	2200      	movs	r2, #0
 800a094:	602a      	str	r2, [r5, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	f7f7 fec5 	bl	8001e26 <_write>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_write_r+0x1e>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_write_r+0x1e>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	200006c0 	.word	0x200006c0

0800a0ac <_close_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4d06      	ldr	r5, [pc, #24]	; (800a0c8 <_close_r+0x1c>)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	4608      	mov	r0, r1
 800a0b6:	602b      	str	r3, [r5, #0]
 800a0b8:	f7f7 fed1 	bl	8001e5e <_close>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_close_r+0x1a>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_close_r+0x1a>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	200006c0 	.word	0x200006c0

0800a0cc <_fstat_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d07      	ldr	r5, [pc, #28]	; (800a0ec <_fstat_r+0x20>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f7f7 fecc 	bl	8001e76 <_fstat>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d102      	bne.n	800a0e8 <_fstat_r+0x1c>
 800a0e2:	682b      	ldr	r3, [r5, #0]
 800a0e4:	b103      	cbz	r3, 800a0e8 <_fstat_r+0x1c>
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200006c0 	.word	0x200006c0

0800a0f0 <_isatty_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d06      	ldr	r5, [pc, #24]	; (800a10c <_isatty_r+0x1c>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	602b      	str	r3, [r5, #0]
 800a0fc:	f7f7 fecb 	bl	8001e96 <_isatty>
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d102      	bne.n	800a10a <_isatty_r+0x1a>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b103      	cbz	r3, 800a10a <_isatty_r+0x1a>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	200006c0 	.word	0x200006c0

0800a110 <_lseek_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	4d07      	ldr	r5, [pc, #28]	; (800a130 <_lseek_r+0x20>)
 800a114:	4604      	mov	r4, r0
 800a116:	4608      	mov	r0, r1
 800a118:	4611      	mov	r1, r2
 800a11a:	2200      	movs	r2, #0
 800a11c:	602a      	str	r2, [r5, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	f7f7 fec4 	bl	8001eac <_lseek>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_lseek_r+0x1e>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_lseek_r+0x1e>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	200006c0 	.word	0x200006c0

0800a134 <_read_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4d07      	ldr	r5, [pc, #28]	; (800a154 <_read_r+0x20>)
 800a138:	4604      	mov	r4, r0
 800a13a:	4608      	mov	r0, r1
 800a13c:	4611      	mov	r1, r2
 800a13e:	2200      	movs	r2, #0
 800a140:	602a      	str	r2, [r5, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	f7f7 fe52 	bl	8001dec <_read>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_read_r+0x1e>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_read_r+0x1e>
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	200006c0 	.word	0x200006c0

0800a158 <_init>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr

0800a164 <_fini>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	bf00      	nop
 800a168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16a:	bc08      	pop	{r3}
 800a16c:	469e      	mov	lr, r3
 800a16e:	4770      	bx	lr
